{
  "version": 3,
  "sources": ["../node_modules/json5/dist/index.js", "../node_modules/markdown-it/node_modules/entities/lib/maps/entities.json", "../node_modules/markdown-it/lib/common/entities.js", "../node_modules/uc.micro/categories/P/regex.js", "../node_modules/mdurl/encode.js", "../node_modules/mdurl/decode.js", "../node_modules/mdurl/format.js", "../node_modules/mdurl/parse.js", "../node_modules/mdurl/index.js", "../node_modules/uc.micro/properties/Any/regex.js", "../node_modules/uc.micro/categories/Cc/regex.js", "../node_modules/uc.micro/categories/Cf/regex.js", "../node_modules/uc.micro/categories/Z/regex.js", "../node_modules/uc.micro/index.js", "../node_modules/markdown-it/lib/common/utils.js", "../node_modules/markdown-it/lib/helpers/parse_link_label.js", "../node_modules/markdown-it/lib/helpers/parse_link_destination.js", "../node_modules/markdown-it/lib/helpers/parse_link_title.js", "../node_modules/markdown-it/lib/helpers/index.js", "../node_modules/markdown-it/lib/renderer.js", "../node_modules/markdown-it/lib/ruler.js", "../node_modules/markdown-it/lib/rules_core/normalize.js", "../node_modules/markdown-it/lib/rules_core/block.js", "../node_modules/markdown-it/lib/rules_core/inline.js", "../node_modules/markdown-it/lib/rules_core/linkify.js", "../node_modules/markdown-it/lib/rules_core/replacements.js", "../node_modules/markdown-it/lib/rules_core/smartquotes.js", "../node_modules/markdown-it/lib/rules_core/text_join.js", "../node_modules/markdown-it/lib/token.js", "../node_modules/markdown-it/lib/rules_core/state_core.js", "../node_modules/markdown-it/lib/parser_core.js", "../node_modules/markdown-it/lib/rules_block/table.js", "../node_modules/markdown-it/lib/rules_block/code.js", "../node_modules/markdown-it/lib/rules_block/fence.js", "../node_modules/markdown-it/lib/rules_block/blockquote.js", "../node_modules/markdown-it/lib/rules_block/hr.js", "../node_modules/markdown-it/lib/rules_block/list.js", "../node_modules/markdown-it/lib/rules_block/reference.js", "../node_modules/markdown-it/lib/common/html_blocks.js", "../node_modules/markdown-it/lib/common/html_re.js", "../node_modules/markdown-it/lib/rules_block/html_block.js", "../node_modules/markdown-it/lib/rules_block/heading.js", "../node_modules/markdown-it/lib/rules_block/lheading.js", "../node_modules/markdown-it/lib/rules_block/paragraph.js", "../node_modules/markdown-it/lib/rules_block/state_block.js", "../node_modules/markdown-it/lib/parser_block.js", "../node_modules/markdown-it/lib/rules_inline/text.js", "../node_modules/markdown-it/lib/rules_inline/linkify.js", "../node_modules/markdown-it/lib/rules_inline/newline.js", "../node_modules/markdown-it/lib/rules_inline/escape.js", "../node_modules/markdown-it/lib/rules_inline/backticks.js", "../node_modules/markdown-it/lib/rules_inline/strikethrough.js", "../node_modules/markdown-it/lib/rules_inline/emphasis.js", "../node_modules/markdown-it/lib/rules_inline/link.js", "../node_modules/markdown-it/lib/rules_inline/image.js", "../node_modules/markdown-it/lib/rules_inline/autolink.js", "../node_modules/markdown-it/lib/rules_inline/html_inline.js", "../node_modules/markdown-it/lib/rules_inline/entity.js", "../node_modules/markdown-it/lib/rules_inline/balance_pairs.js", "../node_modules/markdown-it/lib/rules_inline/fragments_join.js", "../node_modules/markdown-it/lib/rules_inline/state_inline.js", "../node_modules/markdown-it/lib/parser_inline.js", "../node_modules/linkify-it/lib/re.js", "../node_modules/linkify-it/index.js", "../node_modules/markdown-it/lib/presets/default.js", "../node_modules/markdown-it/lib/presets/zero.js", "../node_modules/markdown-it/lib/presets/commonmark.js", "../node_modules/markdown-it/lib/index.js", "../node_modules/markdown-it-sub/index.js", "../node_modules/markdown-it-sup/index.js", "../node_modules/markdown-it-mark/index.js", "../node_modules/path-browserify/index.js", "../node_modules/handlebars/lib/handlebars/utils.js", "../node_modules/handlebars/lib/handlebars/exception.js", "../node_modules/handlebars/lib/handlebars/helpers/block-helper-missing.js", "../node_modules/handlebars/lib/handlebars/helpers/each.js", "../node_modules/handlebars/lib/handlebars/helpers/helper-missing.js", "../node_modules/handlebars/lib/handlebars/helpers/if.js", "../node_modules/handlebars/lib/handlebars/helpers/log.js", "../node_modules/handlebars/lib/handlebars/helpers/lookup.js", "../node_modules/handlebars/lib/handlebars/helpers/with.js", "../node_modules/handlebars/lib/handlebars/helpers.js", "../node_modules/handlebars/lib/handlebars/decorators/inline.js", "../node_modules/handlebars/lib/handlebars/decorators.js", "../node_modules/handlebars/lib/handlebars/logger.js", "../node_modules/handlebars/lib/handlebars/internal/create-new-lookup-object.js", "../node_modules/handlebars/lib/handlebars/internal/proto-access.js", "../node_modules/handlebars/lib/handlebars/base.js", "../node_modules/handlebars/lib/handlebars/safe-string.js", "../node_modules/handlebars/lib/handlebars/internal/wrapHelper.js", "../node_modules/handlebars/lib/handlebars/runtime.js", "../node_modules/handlebars/lib/handlebars/no-conflict.js", "../node_modules/handlebars/lib/handlebars.runtime.js", "../node_modules/handlebars/lib/handlebars/compiler/ast.js", "../node_modules/handlebars/lib/handlebars/compiler/parser.js", "../node_modules/handlebars/lib/handlebars/compiler/visitor.js", "../node_modules/handlebars/lib/handlebars/compiler/whitespace-control.js", "../node_modules/handlebars/lib/handlebars/compiler/helpers.js", "../node_modules/handlebars/lib/handlebars/compiler/base.js", "../node_modules/handlebars/lib/handlebars/compiler/compiler.js", "../node_modules/handlebars/node_modules/source-map/lib/base64.js", "../node_modules/handlebars/node_modules/source-map/lib/base64-vlq.js", "../node_modules/handlebars/node_modules/source-map/lib/util.js", "../node_modules/handlebars/node_modules/source-map/lib/array-set.js", "../node_modules/handlebars/node_modules/source-map/lib/mapping-list.js", "../node_modules/handlebars/node_modules/source-map/lib/source-map-generator.js", "../node_modules/handlebars/node_modules/source-map/lib/binary-search.js", "../node_modules/handlebars/node_modules/source-map/lib/quick-sort.js", "../node_modules/handlebars/node_modules/source-map/lib/source-map-consumer.js", "../node_modules/handlebars/node_modules/source-map/lib/source-node.js", "../node_modules/handlebars/node_modules/source-map/source-map.js", "../node_modules/handlebars/lib/handlebars/compiler/code-gen.js", "../node_modules/handlebars/lib/handlebars/compiler/javascript-compiler.js", "../node_modules/handlebars/lib/handlebars.js", "../node_modules/htmlnorm/node_modules/entities/lib/decode_codepoint.js", "../node_modules/htmlnorm/node_modules/entities/lib/generated/decode-data-html.js", "../node_modules/htmlnorm/node_modules/entities/lib/generated/decode-data-xml.js", "../node_modules/htmlnorm/node_modules/entities/lib/decode.js", "../node_modules/htmlnorm/node_modules/htmlparser2/lib/Tokenizer.js", "../node_modules/htmlnorm/node_modules/htmlparser2/lib/Parser.js", "../node_modules/inline-style-parser/index.js", "../node_modules/style-to-object/index.js", "../ptss-parser/index.ts", "../stir/index.ts", "../stir/block.ts", "../stir/serialization.ts", "../stir/inline.ts", "../ptss-parser/ptss/namedValue.ts", "../node_modules/entities/lib/esm/generated/generated/decode-data-html.ts", "../node_modules/entities/lib/esm/generated/generated/decode-data-xml.ts", "../node_modules/entities/lib/esm/decode_codepoint.ts", "../node_modules/entities/lib/esm/decode.ts", "../orphans/parseUtil.ts", "../ptss-parser/ptss/elementalBlockStyle.ts", "../ptss-parser/ptss/block.ts", "../ptss-parser/ptss/chunkStyle.ts", "../ptss-parser/parseContainer.ts", "../ptss-parser/debugUtil.ts", "../ptss-parser/line.ts", "../ptss-parser/blockTreeParser.ts", "../ptss-parser/namedValues.ts", "../ptss-parser/ptss/expression.ts", "../ptss-parser/ptss/containerStyle.ts", "../ptss-parser/ptss/listStyle.ts", "../ptss-parser/ptss/tableStyle.ts", "../ptss-parser/ptss/htmlBlockStyle.ts", "../ptss-parser/ptss/stylesheet.ts", "../node_modules/linkifyjs/dist/linkify.es.js", "../ptss-parser/inlineParser.ts", "../ptss-parser/mdit_rules/newline_parameterized.ts", "../ptss-parser/mdit_rules/escape_parameterized.ts", "../ptss-parser/mdit_rules/backticks_parameterized.ts", "../ptss-parser/mdit_rules/gfm_strikethrough.ts", "../ptss-parser/mdit_rules/unescaper_parameterized.ts", "../ptss-parser/mdit_rules/parseLinkDest_parameterized.ts", "../ptss-parser/mdit_rules/reference.ts", "../ptss-parser/mdit_rules/image.ts", "../ptss-parser/mdit_rules/autolink.ts", "../ptss-parser/mdit_rules/note_ref.ts", "../ptss-parser/parser.ts", "../ptss-parser/sheets/commonmark.ptss.ts", "../ptss-parser/sheets/commonmark-fwd.ptss.ts", "../ptss-parser/sheets/gfm.ptss.ts", "../ptss-parser/sheets/pandoc-markdown-strict.ptss.ts", "../ptss-parser/sheets/pandoc-markdown.ptss.ts", "../ptss-parser/sheets/markdown_hs.ptss.ts", "../ptss-parser/sheets/plainjane.ptss.ts", "../ptss-parser/sheets/gracedown.ptss.ts", "../ptss-parser/sheets/reStructuredText.ptss.ts", "../ptss-parser/sheets/kitchen-sink.ptss.ts", "../ptss-parser/sheets/test-composition.ptss.ts", "../ptss-parser/sheets/test-ptss-one.ts", "../ptss-parser/sheets/test-references.ptss.ts", "../ptss-parser/sheets/test-writers-prerogative.ts", "../ptss-parser/sheets/utilStyles.ts", "../ptss-parser/sheets/case-file.ptss.ts", "../ptss-parser/sheets/case-file-manipulation.ptss.ts", "../ptss-parser/sheets/rubyrhod.ptss.ts", "../ptss-parser/sheets/index.ts", "../textplain/render/stir/abstractWriter.ts", "../vfs/memfs.ts", "../vfs/sandboxfs.ts", "../vfs/vpath.ts", "../textplain/config.ts", "../textplain/registry.ts", "../textplain/render/stir/html/stir2html.ts", "../textplain/render/stir/html/stir2bootstrap-html.ts", "../textplain/render/stir/html/handlebars.ts", "../textplain/render/stir/stir2markdown.ts", "../textplain/render/stir/stir2string.ts", "../textplain/pipe.ts", "../textplain/pipe/convertHeadingsToSections.ts", "../textplain/pipe/exportAllSectionsOrHeadings.ts", "../textplain/textAssembly/node.ts", "../textplain/textAssembly/file.ts", "../textplain/textAssembly/subfolder.ts", "../textplain/textAssembly/traverse.ts", "../textplain/textAssembly/assembly.ts", "../textplain/textAssembly/read.ts", "../textplain/textAssembly/defaults.ts", "../node_modules/htmlnorm/src/htmlnorm.ts", "../node_modules/htmlnorm/src/util.ts", "../textplain/pipe/renderCaseActuals.ts", "../textplain/pipe/addTOC.ts", "../textplain/pipe/validateSTIR.ts", "../textplain/render/stir/html/mermaid-plugin.ts", "../textplain/render/stir/html/caseblock-plugin.ts", "../textplain/render/stir/html-template/templateAPI.ts", "../textplain/render/stir/html-template/stir2template.ts", "../textplain/renderSTIR.ts", "../textplain/filetypes.ts", "../textplain/render/assembly/assembly2website.ts", "../node_modules/minisearch/node_modules/tslib/tslib.es6.js", "../node_modules/minisearch/src/SearchableMap/TreeIterator.ts", "../node_modules/minisearch/src/SearchableMap/fuzzySearch.ts", "../node_modules/minisearch/src/SearchableMap/SearchableMap.ts", "../node_modules/minisearch/src/MiniSearch.ts", "../textplain/parse.ts", "../textplain/render/assembly/AssemblyRenderer.ts", "../textplain/pipeline.ts", "../textplain/render/assembly/render.ts"],
  "sourcesContent": ["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.JSON5 = factory());\n}(this, (function () { 'use strict';\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar _global = createCommonjsModule(function (module) {\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self\n\t  // eslint-disable-next-line no-new-func\n\t  : Function('return this')();\n\tif (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef\n\t});\n\n\tvar _core = createCommonjsModule(function (module) {\n\tvar core = module.exports = { version: '2.6.5' };\n\tif (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef\n\t});\n\tvar _core_1 = _core.version;\n\n\tvar _isObject = function (it) {\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n\tvar _anObject = function (it) {\n\t  if (!_isObject(it)) { throw TypeError(it + ' is not an object!'); }\n\t  return it;\n\t};\n\n\tvar _fails = function (exec) {\n\t  try {\n\t    return !!exec();\n\t  } catch (e) {\n\t    return true;\n\t  }\n\t};\n\n\t// Thank's IE8 for his funny defineProperty\n\tvar _descriptors = !_fails(function () {\n\t  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\tvar document = _global.document;\n\t// typeof document.createElement is 'object' in old IE\n\tvar is = _isObject(document) && _isObject(document.createElement);\n\tvar _domCreate = function (it) {\n\t  return is ? document.createElement(it) : {};\n\t};\n\n\tvar _ie8DomDefine = !_descriptors && !_fails(function () {\n\t  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tvar _toPrimitive = function (it, S) {\n\t  if (!_isObject(it)) { return it; }\n\t  var fn, val;\n\t  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n\tvar dP = Object.defineProperty;\n\n\tvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n\t  _anObject(O);\n\t  P = _toPrimitive(P, true);\n\t  _anObject(Attributes);\n\t  if (_ie8DomDefine) { try {\n\t    return dP(O, P, Attributes);\n\t  } catch (e) { /* empty */ } }\n\t  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }\n\t  if ('value' in Attributes) { O[P] = Attributes.value; }\n\t  return O;\n\t};\n\n\tvar _objectDp = {\n\t\tf: f\n\t};\n\n\tvar _propertyDesc = function (bitmap, value) {\n\t  return {\n\t    enumerable: !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable: !(bitmap & 4),\n\t    value: value\n\t  };\n\t};\n\n\tvar _hide = _descriptors ? function (object, key, value) {\n\t  return _objectDp.f(object, key, _propertyDesc(1, value));\n\t} : function (object, key, value) {\n\t  object[key] = value;\n\t  return object;\n\t};\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tvar _has = function (it, key) {\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n\tvar id = 0;\n\tvar px = Math.random();\n\tvar _uid = function (key) {\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n\tvar _library = false;\n\n\tvar _shared = createCommonjsModule(function (module) {\n\tvar SHARED = '__core-js_shared__';\n\tvar store = _global[SHARED] || (_global[SHARED] = {});\n\n\t(module.exports = function (key, value) {\n\t  return store[key] || (store[key] = value !== undefined ? value : {});\n\t})('versions', []).push({\n\t  version: _core.version,\n\t  mode: _library ? 'pure' : 'global',\n\t  copyright: '\u00A9 2019 Denis Pushkarev (zloirock.ru)'\n\t});\n\t});\n\n\tvar _functionToString = _shared('native-function-to-string', Function.toString);\n\n\tvar _redefine = createCommonjsModule(function (module) {\n\tvar SRC = _uid('src');\n\n\tvar TO_STRING = 'toString';\n\tvar TPL = ('' + _functionToString).split(TO_STRING);\n\n\t_core.inspectSource = function (it) {\n\t  return _functionToString.call(it);\n\t};\n\n\t(module.exports = function (O, key, val, safe) {\n\t  var isFunction = typeof val == 'function';\n\t  if (isFunction) { _has(val, 'name') || _hide(val, 'name', key); }\n\t  if (O[key] === val) { return; }\n\t  if (isFunction) { _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }\n\t  if (O === _global) {\n\t    O[key] = val;\n\t  } else if (!safe) {\n\t    delete O[key];\n\t    _hide(O, key, val);\n\t  } else if (O[key]) {\n\t    O[key] = val;\n\t  } else {\n\t    _hide(O, key, val);\n\t  }\n\t// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n\t})(Function.prototype, TO_STRING, function toString() {\n\t  return typeof this == 'function' && this[SRC] || _functionToString.call(this);\n\t});\n\t});\n\n\tvar _aFunction = function (it) {\n\t  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }\n\t  return it;\n\t};\n\n\t// optional / simple context binding\n\n\tvar _ctx = function (fn, that, length) {\n\t  _aFunction(fn);\n\t  if (that === undefined) { return fn; }\n\t  switch (length) {\n\t    case 1: return function (a) {\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function (a, b) {\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function (a, b, c) {\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function (/* ...args */) {\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n\tvar PROTOTYPE = 'prototype';\n\n\tvar $export = function (type, name, source) {\n\t  var IS_FORCED = type & $export.F;\n\t  var IS_GLOBAL = type & $export.G;\n\t  var IS_STATIC = type & $export.S;\n\t  var IS_PROTO = type & $export.P;\n\t  var IS_BIND = type & $export.B;\n\t  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n\t  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n\t  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n\t  var key, own, out, exp;\n\t  if (IS_GLOBAL) { source = name; }\n\t  for (key in source) {\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    // export native or passed\n\t    out = (own ? target : source)[key];\n\t    // bind timers to global for call from export context\n\t    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n\t    // extend global\n\t    if (target) { _redefine(target, key, out, type & $export.U); }\n\t    // export\n\t    if (exports[key] != out) { _hide(exports, key, exp); }\n\t    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }\n\t  }\n\t};\n\t_global.core = _core;\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library`\n\tvar _export = $export;\n\n\t// 7.1.4 ToInteger\n\tvar ceil = Math.ceil;\n\tvar floor = Math.floor;\n\tvar _toInteger = function (it) {\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tvar _defined = function (it) {\n\t  if (it == undefined) { throw TypeError(\"Can't call method on  \" + it); }\n\t  return it;\n\t};\n\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tvar _stringAt = function (TO_STRING) {\n\t  return function (that, pos) {\n\t    var s = String(_defined(that));\n\t    var i = _toInteger(pos);\n\t    var l = s.length;\n\t    var a, b;\n\t    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n\tvar $at = _stringAt(false);\n\t_export(_export.P, 'String', {\n\t  // 21.1.3.3 String.prototype.codePointAt(pos)\n\t  codePointAt: function codePointAt(pos) {\n\t    return $at(this, pos);\n\t  }\n\t});\n\n\tvar codePointAt = _core.String.codePointAt;\n\n\tvar max = Math.max;\n\tvar min = Math.min;\n\tvar _toAbsoluteIndex = function (index, length) {\n\t  index = _toInteger(index);\n\t  return index < 0 ? max(index + length, 0) : min(index, length);\n\t};\n\n\tvar fromCharCode = String.fromCharCode;\n\tvar $fromCodePoint = String.fromCodePoint;\n\n\t// length should be 1, old FF problem\n\t_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n\t  // 21.1.2.2 String.fromCodePoint(...codePoints)\n\t  fromCodePoint: function fromCodePoint(x) {\n\t    var arguments$1 = arguments;\n\t // eslint-disable-line no-unused-vars\n\t    var res = [];\n\t    var aLen = arguments.length;\n\t    var i = 0;\n\t    var code;\n\t    while (aLen > i) {\n\t      code = +arguments$1[i++];\n\t      if (_toAbsoluteIndex(code, 0x10ffff) !== code) { throw RangeError(code + ' is not a valid code point'); }\n\t      res.push(code < 0x10000\n\t        ? fromCharCode(code)\n\t        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n\t      );\n\t    } return res.join('');\n\t  }\n\t});\n\n\tvar fromCodePoint = _core.String.fromCodePoint;\n\n\t// This is a generated file. Do not edit.\n\tvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\n\tvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n\tvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n\n\tvar unicode = {\n\t\tSpace_Separator: Space_Separator,\n\t\tID_Start: ID_Start,\n\t\tID_Continue: ID_Continue\n\t};\n\n\tvar util = {\n\t    isSpaceSeparator: function isSpaceSeparator (c) {\n\t        return typeof c === 'string' && unicode.Space_Separator.test(c)\n\t    },\n\n\t    isIdStartChar: function isIdStartChar (c) {\n\t        return typeof c === 'string' && (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c === '$') || (c === '_') ||\n\t        unicode.ID_Start.test(c)\n\t        )\n\t    },\n\n\t    isIdContinueChar: function isIdContinueChar (c) {\n\t        return typeof c === 'string' && (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c >= '0' && c <= '9') ||\n\t        (c === '$') || (c === '_') ||\n\t        (c === '\\u200C') || (c === '\\u200D') ||\n\t        unicode.ID_Continue.test(c)\n\t        )\n\t    },\n\n\t    isDigit: function isDigit (c) {\n\t        return typeof c === 'string' && /[0-9]/.test(c)\n\t    },\n\n\t    isHexDigit: function isHexDigit (c) {\n\t        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)\n\t    },\n\t};\n\n\tvar source;\n\tvar parseState;\n\tvar stack;\n\tvar pos;\n\tvar line;\n\tvar column;\n\tvar token;\n\tvar key;\n\tvar root;\n\n\tvar parse = function parse (text, reviver) {\n\t    source = String(text);\n\t    parseState = 'start';\n\t    stack = [];\n\t    pos = 0;\n\t    line = 1;\n\t    column = 0;\n\t    token = undefined;\n\t    key = undefined;\n\t    root = undefined;\n\n\t    do {\n\t        token = lex();\n\n\t        // This code is unreachable.\n\t        // if (!parseStates[parseState]) {\n\t        //     throw invalidParseState()\n\t        // }\n\n\t        parseStates[parseState]();\n\t    } while (token.type !== 'eof')\n\n\t    if (typeof reviver === 'function') {\n\t        return internalize({'': root}, '', reviver)\n\t    }\n\n\t    return root\n\t};\n\n\tfunction internalize (holder, name, reviver) {\n\t    var value = holder[name];\n\t    if (value != null && typeof value === 'object') {\n\t        if (Array.isArray(value)) {\n\t            for (var i = 0; i < value.length; i++) {\n\t                var key = String(i);\n\t                var replacement = internalize(value, key, reviver);\n\t                if (replacement === undefined) {\n\t                    delete value[key];\n\t                } else {\n\t                    Object.defineProperty(value, key, {\n\t                        value: replacement,\n\t                        writable: true,\n\t                        enumerable: true,\n\t                        configurable: true,\n\t                    });\n\t                }\n\t            }\n\t        } else {\n\t            for (var key$1 in value) {\n\t                var replacement$1 = internalize(value, key$1, reviver);\n\t                if (replacement$1 === undefined) {\n\t                    delete value[key$1];\n\t                } else {\n\t                    Object.defineProperty(value, key$1, {\n\t                        value: replacement$1,\n\t                        writable: true,\n\t                        enumerable: true,\n\t                        configurable: true,\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    return reviver.call(holder, name, value)\n\t}\n\n\tvar lexState;\n\tvar buffer;\n\tvar doubleQuote;\n\tvar sign;\n\tvar c;\n\n\tfunction lex () {\n\t    lexState = 'default';\n\t    buffer = '';\n\t    doubleQuote = false;\n\t    sign = 1;\n\n\t    for (;;) {\n\t        c = peek();\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[lexState]) {\n\t        //     throw invalidLexState(lexState)\n\t        // }\n\n\t        var token = lexStates[lexState]();\n\t        if (token) {\n\t            return token\n\t        }\n\t    }\n\t}\n\n\tfunction peek () {\n\t    if (source[pos]) {\n\t        return String.fromCodePoint(source.codePointAt(pos))\n\t    }\n\t}\n\n\tfunction read () {\n\t    var c = peek();\n\n\t    if (c === '\\n') {\n\t        line++;\n\t        column = 0;\n\t    } else if (c) {\n\t        column += c.length;\n\t    } else {\n\t        column++;\n\t    }\n\n\t    if (c) {\n\t        pos += c.length;\n\t    }\n\n\t    return c\n\t}\n\n\tvar lexStates = {\n\t    default: function default$1 () {\n\t        switch (c) {\n\t        case '\\t':\n\t        case '\\v':\n\t        case '\\f':\n\t        case ' ':\n\t        case '\\u00A0':\n\t        case '\\uFEFF':\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'comment';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        if (util.isSpaceSeparator(c)) {\n\t            read();\n\t            return\n\t        }\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[parseState]) {\n\t        //     throw invalidLexState(parseState)\n\t        // }\n\n\t        return lexStates[parseState]()\n\t    },\n\n\t    comment: function comment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineComment';\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'singleLineComment';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    multiLineComment: function multiLineComment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineCommentAsterisk';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    },\n\n\t    multiLineCommentAsterisk: function multiLineCommentAsterisk () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        lexState = 'multiLineComment';\n\t    },\n\n\t    singleLineComment: function singleLineComment () {\n\t        switch (c) {\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        read();\n\t    },\n\n\t    value: function value () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        case 'n':\n\t            read();\n\t            literal('ull');\n\t            return newToken('null', null)\n\n\t        case 't':\n\t            read();\n\t            literal('rue');\n\t            return newToken('boolean', true)\n\n\t        case 'f':\n\t            read();\n\t            literal('alse');\n\t            return newToken('boolean', false)\n\n\t        case '-':\n\t        case '+':\n\t            if (read() === '-') {\n\t                sign = -1;\n\t            }\n\n\t            lexState = 'sign';\n\t            return\n\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            buffer = '';\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    identifierNameStartEscape: function identifierNameStartEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t            break\n\n\t        default:\n\t            if (!util.isIdStartChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    identifierName: function identifierName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            buffer += read();\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameEscape';\n\t            return\n\t        }\n\n\t        if (util.isIdContinueChar(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('identifier', buffer)\n\t    },\n\n\t    identifierNameEscape: function identifierNameEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            break\n\n\t        default:\n\t            if (!util.isIdContinueChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    sign: function sign$1 () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', sign * Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    zero: function zero () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\n\t        case 'x':\n\t        case 'X':\n\t            buffer += read();\n\t            lexState = 'hexadecimal';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * 0)\n\t    },\n\n\t    decimalInteger: function decimalInteger () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalPointLeading: function decimalPointLeading () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalPoint: function decimalPoint () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalFraction: function decimalFraction () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalExponent: function decimalExponent () {\n\t        switch (c) {\n\t        case '+':\n\t        case '-':\n\t            buffer += read();\n\t            lexState = 'decimalExponentSign';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentSign: function decimalExponentSign () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentInteger: function decimalExponentInteger () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    hexadecimal: function hexadecimal () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'hexadecimalInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    hexadecimalInteger: function hexadecimalInteger () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    string: function string () {\n\t        switch (c) {\n\t        case '\\\\':\n\t            read();\n\t            buffer += escape();\n\t            return\n\n\t        case '\"':\n\t            if (doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case \"'\":\n\t            if (!doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case '\\n':\n\t        case '\\r':\n\t            throw invalidChar(read())\n\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            separatorChar(c);\n\t            break\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    },\n\n\t    start: function start () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        // This code is unreachable since the default lexState handles eof.\n\t        // case undefined:\n\t        //     return newToken('eof')\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t            buffer = read();\n\t            lexState = 'identifierName';\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameStartEscape';\n\t            return\n\n\t        case '}':\n\t            return newToken('punctuator', read())\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        if (util.isIdStartChar(c)) {\n\t            buffer += read();\n\t            lexState = 'identifierName';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        if (c === ':') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        lexState = 'value';\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case '}':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (c === ']') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case ']':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the default lexState.\n\t        // if (c === undefined) {\n\t        //     read()\n\t        //     return newToken('eof')\n\t        // }\n\n\t        throw invalidChar(read())\n\t    },\n\t};\n\n\tfunction newToken (type, value) {\n\t    return {\n\t        type: type,\n\t        value: value,\n\t        line: line,\n\t        column: column,\n\t    }\n\t}\n\n\tfunction literal (s) {\n\t    for (var i = 0, list = s; i < list.length; i += 1) {\n\t        var c = list[i];\n\n\t        var p = peek();\n\n\t        if (p !== c) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    }\n\t}\n\n\tfunction escape () {\n\t    var c = peek();\n\t    switch (c) {\n\t    case 'b':\n\t        read();\n\t        return '\\b'\n\n\t    case 'f':\n\t        read();\n\t        return '\\f'\n\n\t    case 'n':\n\t        read();\n\t        return '\\n'\n\n\t    case 'r':\n\t        read();\n\t        return '\\r'\n\n\t    case 't':\n\t        read();\n\t        return '\\t'\n\n\t    case 'v':\n\t        read();\n\t        return '\\v'\n\n\t    case '0':\n\t        read();\n\t        if (util.isDigit(peek())) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        return '\\0'\n\n\t    case 'x':\n\t        read();\n\t        return hexEscape()\n\n\t    case 'u':\n\t        read();\n\t        return unicodeEscape()\n\n\t    case '\\n':\n\t    case '\\u2028':\n\t    case '\\u2029':\n\t        read();\n\t        return ''\n\n\t    case '\\r':\n\t        read();\n\t        if (peek() === '\\n') {\n\t            read();\n\t        }\n\n\t        return ''\n\n\t    case '1':\n\t    case '2':\n\t    case '3':\n\t    case '4':\n\t    case '5':\n\t    case '6':\n\t    case '7':\n\t    case '8':\n\t    case '9':\n\t        throw invalidChar(read())\n\n\t    case undefined:\n\t        throw invalidChar(read())\n\t    }\n\n\t    return read()\n\t}\n\n\tfunction hexEscape () {\n\t    var buffer = '';\n\t    var c = peek();\n\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    c = peek();\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tfunction unicodeEscape () {\n\t    var buffer = '';\n\t    var count = 4;\n\n\t    while (count-- > 0) {\n\t        var c = peek();\n\t        if (!util.isHexDigit(c)) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    }\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tvar parseStates = {\n\t    start: function start () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (token.type) {\n\t        case 'identifier':\n\t        case 'string':\n\t            key = token.value;\n\t            parseState = 'afterPropertyName';\n\t            return\n\n\t        case 'punctuator':\n\t            // This code is unreachable since it's handled by the lexState.\n\t            // if (token.value !== '}') {\n\t            //     throw invalidToken()\n\t            // }\n\n\t            pop();\n\t            return\n\n\t        case 'eof':\n\t            throw invalidEOF()\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator' || token.value !== ':') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        parseState = 'beforePropertyValue';\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        if (token.type === 'punctuator' && token.value === ']') {\n\t            pop();\n\t            return\n\t        }\n\n\t        push();\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforePropertyName';\n\t            return\n\n\t        case '}':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforeArrayValue';\n\t            return\n\n\t        case ']':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'eof') {\n\t        //     throw invalidToken()\n\t        // }\n\t    },\n\t};\n\n\tfunction push () {\n\t    var value;\n\n\t    switch (token.type) {\n\t    case 'punctuator':\n\t        switch (token.value) {\n\t        case '{':\n\t            value = {};\n\t            break\n\n\t        case '[':\n\t            value = [];\n\t            break\n\t        }\n\n\t        break\n\n\t    case 'null':\n\t    case 'boolean':\n\t    case 'numeric':\n\t    case 'string':\n\t        value = token.value;\n\t        break\n\n\t    // This code is unreachable.\n\t    // default:\n\t    //     throw invalidToken()\n\t    }\n\n\t    if (root === undefined) {\n\t        root = value;\n\t    } else {\n\t        var parent = stack[stack.length - 1];\n\t        if (Array.isArray(parent)) {\n\t            parent.push(value);\n\t        } else {\n\t            Object.defineProperty(parent, key, {\n\t                value: value,\n\t                writable: true,\n\t                enumerable: true,\n\t                configurable: true,\n\t            });\n\t        }\n\t    }\n\n\t    if (value !== null && typeof value === 'object') {\n\t        stack.push(value);\n\n\t        if (Array.isArray(value)) {\n\t            parseState = 'beforeArrayValue';\n\t        } else {\n\t            parseState = 'beforePropertyName';\n\t        }\n\t    } else {\n\t        var current = stack[stack.length - 1];\n\t        if (current == null) {\n\t            parseState = 'end';\n\t        } else if (Array.isArray(current)) {\n\t            parseState = 'afterArrayValue';\n\t        } else {\n\t            parseState = 'afterPropertyValue';\n\t        }\n\t    }\n\t}\n\n\tfunction pop () {\n\t    stack.pop();\n\n\t    var current = stack[stack.length - 1];\n\t    if (current == null) {\n\t        parseState = 'end';\n\t    } else if (Array.isArray(current)) {\n\t        parseState = 'afterArrayValue';\n\t    } else {\n\t        parseState = 'afterPropertyValue';\n\t    }\n\t}\n\n\t// This code is unreachable.\n\t// function invalidParseState () {\n\t//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n\t// }\n\n\t// This code is unreachable.\n\t// function invalidLexState (state) {\n\t//     return new Error(`JSON5: invalid lex state '${state}'`)\n\t// }\n\n\tfunction invalidChar (c) {\n\t    if (c === undefined) {\n\t        return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t    }\n\n\t    return syntaxError((\"JSON5: invalid character '\" + (formatChar(c)) + \"' at \" + line + \":\" + column))\n\t}\n\n\tfunction invalidEOF () {\n\t    return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t}\n\n\t// This code is unreachable.\n\t// function invalidToken () {\n\t//     if (token.type === 'eof') {\n\t//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n\t//     }\n\n\t//     const c = String.fromCodePoint(token.value.codePointAt(0))\n\t//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n\t// }\n\n\tfunction invalidIdentifier () {\n\t    column -= 5;\n\t    return syntaxError((\"JSON5: invalid identifier character at \" + line + \":\" + column))\n\t}\n\n\tfunction separatorChar (c) {\n\t    console.warn((\"JSON5: '\" + (formatChar(c)) + \"' in strings is not valid ECMAScript; consider escaping\"));\n\t}\n\n\tfunction formatChar (c) {\n\t    var replacements = {\n\t        \"'\": \"\\\\'\",\n\t        '\"': '\\\\\"',\n\t        '\\\\': '\\\\\\\\',\n\t        '\\b': '\\\\b',\n\t        '\\f': '\\\\f',\n\t        '\\n': '\\\\n',\n\t        '\\r': '\\\\r',\n\t        '\\t': '\\\\t',\n\t        '\\v': '\\\\v',\n\t        '\\0': '\\\\0',\n\t        '\\u2028': '\\\\u2028',\n\t        '\\u2029': '\\\\u2029',\n\t    };\n\n\t    if (replacements[c]) {\n\t        return replacements[c]\n\t    }\n\n\t    if (c < ' ') {\n\t        var hexString = c.charCodeAt(0).toString(16);\n\t        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n\t    }\n\n\t    return c\n\t}\n\n\tfunction syntaxError (message) {\n\t    var err = new SyntaxError(message);\n\t    err.lineNumber = line;\n\t    err.columnNumber = column;\n\t    return err\n\t}\n\n\tvar stringify = function stringify (value, replacer, space) {\n\t    var stack = [];\n\t    var indent = '';\n\t    var propertyList;\n\t    var replacerFunc;\n\t    var gap = '';\n\t    var quote;\n\n\t    if (\n\t        replacer != null &&\n\t        typeof replacer === 'object' &&\n\t        !Array.isArray(replacer)\n\t    ) {\n\t        space = replacer.space;\n\t        quote = replacer.quote;\n\t        replacer = replacer.replacer;\n\t    }\n\n\t    if (typeof replacer === 'function') {\n\t        replacerFunc = replacer;\n\t    } else if (Array.isArray(replacer)) {\n\t        propertyList = [];\n\t        for (var i = 0, list = replacer; i < list.length; i += 1) {\n\t            var v = list[i];\n\n\t            var item = (void 0);\n\n\t            if (typeof v === 'string') {\n\t                item = v;\n\t            } else if (\n\t                typeof v === 'number' ||\n\t                v instanceof String ||\n\t                v instanceof Number\n\t            ) {\n\t                item = String(v);\n\t            }\n\n\t            if (item !== undefined && propertyList.indexOf(item) < 0) {\n\t                propertyList.push(item);\n\t            }\n\t        }\n\t    }\n\n\t    if (space instanceof Number) {\n\t        space = Number(space);\n\t    } else if (space instanceof String) {\n\t        space = String(space);\n\t    }\n\n\t    if (typeof space === 'number') {\n\t        if (space > 0) {\n\t            space = Math.min(10, Math.floor(space));\n\t            gap = '          '.substr(0, space);\n\t        }\n\t    } else if (typeof space === 'string') {\n\t        gap = space.substr(0, 10);\n\t    }\n\n\t    return serializeProperty('', {'': value})\n\n\t    function serializeProperty (key, holder) {\n\t        var value = holder[key];\n\t        if (value != null) {\n\t            if (typeof value.toJSON5 === 'function') {\n\t                value = value.toJSON5(key);\n\t            } else if (typeof value.toJSON === 'function') {\n\t                value = value.toJSON(key);\n\t            }\n\t        }\n\n\t        if (replacerFunc) {\n\t            value = replacerFunc.call(holder, key, value);\n\t        }\n\n\t        if (value instanceof Number) {\n\t            value = Number(value);\n\t        } else if (value instanceof String) {\n\t            value = String(value);\n\t        } else if (value instanceof Boolean) {\n\t            value = value.valueOf();\n\t        }\n\n\t        switch (value) {\n\t        case null: return 'null'\n\t        case true: return 'true'\n\t        case false: return 'false'\n\t        }\n\n\t        if (typeof value === 'string') {\n\t            return quoteString(value, false)\n\t        }\n\n\t        if (typeof value === 'number') {\n\t            return String(value)\n\t        }\n\n\t        if (typeof value === 'object') {\n\t            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)\n\t        }\n\n\t        return undefined\n\t    }\n\n\t    function quoteString (value) {\n\t        var quotes = {\n\t            \"'\": 0.1,\n\t            '\"': 0.2,\n\t        };\n\n\t        var replacements = {\n\t            \"'\": \"\\\\'\",\n\t            '\"': '\\\\\"',\n\t            '\\\\': '\\\\\\\\',\n\t            '\\b': '\\\\b',\n\t            '\\f': '\\\\f',\n\t            '\\n': '\\\\n',\n\t            '\\r': '\\\\r',\n\t            '\\t': '\\\\t',\n\t            '\\v': '\\\\v',\n\t            '\\0': '\\\\0',\n\t            '\\u2028': '\\\\u2028',\n\t            '\\u2029': '\\\\u2029',\n\t        };\n\n\t        var product = '';\n\n\t        for (var i = 0; i < value.length; i++) {\n\t            var c = value[i];\n\t            switch (c) {\n\t            case \"'\":\n\t            case '\"':\n\t                quotes[c]++;\n\t                product += c;\n\t                continue\n\n\t            case '\\0':\n\t                if (util.isDigit(value[i + 1])) {\n\t                    product += '\\\\x00';\n\t                    continue\n\t                }\n\t            }\n\n\t            if (replacements[c]) {\n\t                product += replacements[c];\n\t                continue\n\t            }\n\n\t            if (c < ' ') {\n\t                var hexString = c.charCodeAt(0).toString(16);\n\t                product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n\t                continue\n\t            }\n\n\t            product += c;\n\t        }\n\n\t        var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) { return (quotes[a] < quotes[b]) ? a : b; });\n\n\t        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n\n\t        return quoteChar + product + quoteChar\n\t    }\n\n\t    function serializeObject (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var keys = propertyList || Object.keys(value);\n\t        var partial = [];\n\t        for (var i = 0, list = keys; i < list.length; i += 1) {\n\t            var key = list[i];\n\n\t            var propertyString = serializeProperty(key, value);\n\t            if (propertyString !== undefined) {\n\t                var member = serializeKey(key) + ':';\n\t                if (gap !== '') {\n\t                    member += ' ';\n\t                }\n\t                member += propertyString;\n\t                partial.push(member);\n\t            }\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '{}';\n\t        } else {\n\t            var properties;\n\t            if (gap === '') {\n\t                properties = partial.join(',');\n\t                final = '{' + properties + '}';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                properties = partial.join(separator);\n\t                final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\n\t    function serializeKey (key) {\n\t        if (key.length === 0) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        var firstChar = String.fromCodePoint(key.codePointAt(0));\n\t        if (!util.isIdStartChar(firstChar)) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        for (var i = firstChar.length; i < key.length; i++) {\n\t            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n\t                return quoteString(key, true)\n\t            }\n\t        }\n\n\t        return key\n\t    }\n\n\t    function serializeArray (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var partial = [];\n\t        for (var i = 0; i < value.length; i++) {\n\t            var propertyString = serializeProperty(String(i), value);\n\t            partial.push((propertyString !== undefined) ? propertyString : 'null');\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '[]';\n\t        } else {\n\t            if (gap === '') {\n\t                var properties = partial.join(',');\n\t                final = '[' + properties + ']';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                var properties$1 = partial.join(separator);\n\t                final = '[\\n' + indent + properties$1 + ',\\n' + stepback + ']';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\t};\n\n\tvar JSON5 = {\n\t    parse: parse,\n\t    stringify: stringify,\n\t};\n\n\tvar lib = JSON5;\n\n\tvar es5 = lib;\n\n\treturn es5;\n\n})));\n", "{\"Aacute\":\"\u00C1\",\"aacute\":\"\u00E1\",\"Abreve\":\"\u0102\",\"abreve\":\"\u0103\",\"ac\":\"\u223E\",\"acd\":\"\u223F\",\"acE\":\"\u223E\u0333\",\"Acirc\":\"\u00C2\",\"acirc\":\"\u00E2\",\"acute\":\"\u00B4\",\"Acy\":\"\u0410\",\"acy\":\"\u0430\",\"AElig\":\"\u00C6\",\"aelig\":\"\u00E6\",\"af\":\"\u2061\",\"Afr\":\"\uD835\uDD04\",\"afr\":\"\uD835\uDD1E\",\"Agrave\":\"\u00C0\",\"agrave\":\"\u00E0\",\"alefsym\":\"\u2135\",\"aleph\":\"\u2135\",\"Alpha\":\"\u0391\",\"alpha\":\"\u03B1\",\"Amacr\":\"\u0100\",\"amacr\":\"\u0101\",\"amalg\":\"\u2A3F\",\"amp\":\"&\",\"AMP\":\"&\",\"andand\":\"\u2A55\",\"And\":\"\u2A53\",\"and\":\"\u2227\",\"andd\":\"\u2A5C\",\"andslope\":\"\u2A58\",\"andv\":\"\u2A5A\",\"ang\":\"\u2220\",\"ange\":\"\u29A4\",\"angle\":\"\u2220\",\"angmsdaa\":\"\u29A8\",\"angmsdab\":\"\u29A9\",\"angmsdac\":\"\u29AA\",\"angmsdad\":\"\u29AB\",\"angmsdae\":\"\u29AC\",\"angmsdaf\":\"\u29AD\",\"angmsdag\":\"\u29AE\",\"angmsdah\":\"\u29AF\",\"angmsd\":\"\u2221\",\"angrt\":\"\u221F\",\"angrtvb\":\"\u22BE\",\"angrtvbd\":\"\u299D\",\"angsph\":\"\u2222\",\"angst\":\"\u00C5\",\"angzarr\":\"\u237C\",\"Aogon\":\"\u0104\",\"aogon\":\"\u0105\",\"Aopf\":\"\uD835\uDD38\",\"aopf\":\"\uD835\uDD52\",\"apacir\":\"\u2A6F\",\"ap\":\"\u2248\",\"apE\":\"\u2A70\",\"ape\":\"\u224A\",\"apid\":\"\u224B\",\"apos\":\"'\",\"ApplyFunction\":\"\u2061\",\"approx\":\"\u2248\",\"approxeq\":\"\u224A\",\"Aring\":\"\u00C5\",\"aring\":\"\u00E5\",\"Ascr\":\"\uD835\uDC9C\",\"ascr\":\"\uD835\uDCB6\",\"Assign\":\"\u2254\",\"ast\":\"*\",\"asymp\":\"\u2248\",\"asympeq\":\"\u224D\",\"Atilde\":\"\u00C3\",\"atilde\":\"\u00E3\",\"Auml\":\"\u00C4\",\"auml\":\"\u00E4\",\"awconint\":\"\u2233\",\"awint\":\"\u2A11\",\"backcong\":\"\u224C\",\"backepsilon\":\"\u03F6\",\"backprime\":\"\u2035\",\"backsim\":\"\u223D\",\"backsimeq\":\"\u22CD\",\"Backslash\":\"\u2216\",\"Barv\":\"\u2AE7\",\"barvee\":\"\u22BD\",\"barwed\":\"\u2305\",\"Barwed\":\"\u2306\",\"barwedge\":\"\u2305\",\"bbrk\":\"\u23B5\",\"bbrktbrk\":\"\u23B6\",\"bcong\":\"\u224C\",\"Bcy\":\"\u0411\",\"bcy\":\"\u0431\",\"bdquo\":\"\u201E\",\"becaus\":\"\u2235\",\"because\":\"\u2235\",\"Because\":\"\u2235\",\"bemptyv\":\"\u29B0\",\"bepsi\":\"\u03F6\",\"bernou\":\"\u212C\",\"Bernoullis\":\"\u212C\",\"Beta\":\"\u0392\",\"beta\":\"\u03B2\",\"beth\":\"\u2136\",\"between\":\"\u226C\",\"Bfr\":\"\uD835\uDD05\",\"bfr\":\"\uD835\uDD1F\",\"bigcap\":\"\u22C2\",\"bigcirc\":\"\u25EF\",\"bigcup\":\"\u22C3\",\"bigodot\":\"\u2A00\",\"bigoplus\":\"\u2A01\",\"bigotimes\":\"\u2A02\",\"bigsqcup\":\"\u2A06\",\"bigstar\":\"\u2605\",\"bigtriangledown\":\"\u25BD\",\"bigtriangleup\":\"\u25B3\",\"biguplus\":\"\u2A04\",\"bigvee\":\"\u22C1\",\"bigwedge\":\"\u22C0\",\"bkarow\":\"\u290D\",\"blacklozenge\":\"\u29EB\",\"blacksquare\":\"\u25AA\",\"blacktriangle\":\"\u25B4\",\"blacktriangledown\":\"\u25BE\",\"blacktriangleleft\":\"\u25C2\",\"blacktriangleright\":\"\u25B8\",\"blank\":\"\u2423\",\"blk12\":\"\u2592\",\"blk14\":\"\u2591\",\"blk34\":\"\u2593\",\"block\":\"\u2588\",\"bne\":\"=\u20E5\",\"bnequiv\":\"\u2261\u20E5\",\"bNot\":\"\u2AED\",\"bnot\":\"\u2310\",\"Bopf\":\"\uD835\uDD39\",\"bopf\":\"\uD835\uDD53\",\"bot\":\"\u22A5\",\"bottom\":\"\u22A5\",\"bowtie\":\"\u22C8\",\"boxbox\":\"\u29C9\",\"boxdl\":\"\u2510\",\"boxdL\":\"\u2555\",\"boxDl\":\"\u2556\",\"boxDL\":\"\u2557\",\"boxdr\":\"\u250C\",\"boxdR\":\"\u2552\",\"boxDr\":\"\u2553\",\"boxDR\":\"\u2554\",\"boxh\":\"\u2500\",\"boxH\":\"\u2550\",\"boxhd\":\"\u252C\",\"boxHd\":\"\u2564\",\"boxhD\":\"\u2565\",\"boxHD\":\"\u2566\",\"boxhu\":\"\u2534\",\"boxHu\":\"\u2567\",\"boxhU\":\"\u2568\",\"boxHU\":\"\u2569\",\"boxminus\":\"\u229F\",\"boxplus\":\"\u229E\",\"boxtimes\":\"\u22A0\",\"boxul\":\"\u2518\",\"boxuL\":\"\u255B\",\"boxUl\":\"\u255C\",\"boxUL\":\"\u255D\",\"boxur\":\"\u2514\",\"boxuR\":\"\u2558\",\"boxUr\":\"\u2559\",\"boxUR\":\"\u255A\",\"boxv\":\"\u2502\",\"boxV\":\"\u2551\",\"boxvh\":\"\u253C\",\"boxvH\":\"\u256A\",\"boxVh\":\"\u256B\",\"boxVH\":\"\u256C\",\"boxvl\":\"\u2524\",\"boxvL\":\"\u2561\",\"boxVl\":\"\u2562\",\"boxVL\":\"\u2563\",\"boxvr\":\"\u251C\",\"boxvR\":\"\u255E\",\"boxVr\":\"\u255F\",\"boxVR\":\"\u2560\",\"bprime\":\"\u2035\",\"breve\":\"\u02D8\",\"Breve\":\"\u02D8\",\"brvbar\":\"\u00A6\",\"bscr\":\"\uD835\uDCB7\",\"Bscr\":\"\u212C\",\"bsemi\":\"\u204F\",\"bsim\":\"\u223D\",\"bsime\":\"\u22CD\",\"bsolb\":\"\u29C5\",\"bsol\":\"\\\\\",\"bsolhsub\":\"\u27C8\",\"bull\":\"\u2022\",\"bullet\":\"\u2022\",\"bump\":\"\u224E\",\"bumpE\":\"\u2AAE\",\"bumpe\":\"\u224F\",\"Bumpeq\":\"\u224E\",\"bumpeq\":\"\u224F\",\"Cacute\":\"\u0106\",\"cacute\":\"\u0107\",\"capand\":\"\u2A44\",\"capbrcup\":\"\u2A49\",\"capcap\":\"\u2A4B\",\"cap\":\"\u2229\",\"Cap\":\"\u22D2\",\"capcup\":\"\u2A47\",\"capdot\":\"\u2A40\",\"CapitalDifferentialD\":\"\u2145\",\"caps\":\"\u2229\uFE00\",\"caret\":\"\u2041\",\"caron\":\"\u02C7\",\"Cayleys\":\"\u212D\",\"ccaps\":\"\u2A4D\",\"Ccaron\":\"\u010C\",\"ccaron\":\"\u010D\",\"Ccedil\":\"\u00C7\",\"ccedil\":\"\u00E7\",\"Ccirc\":\"\u0108\",\"ccirc\":\"\u0109\",\"Cconint\":\"\u2230\",\"ccups\":\"\u2A4C\",\"ccupssm\":\"\u2A50\",\"Cdot\":\"\u010A\",\"cdot\":\"\u010B\",\"cedil\":\"\u00B8\",\"Cedilla\":\"\u00B8\",\"cemptyv\":\"\u29B2\",\"cent\":\"\u00A2\",\"centerdot\":\"\u00B7\",\"CenterDot\":\"\u00B7\",\"cfr\":\"\uD835\uDD20\",\"Cfr\":\"\u212D\",\"CHcy\":\"\u0427\",\"chcy\":\"\u0447\",\"check\":\"\u2713\",\"checkmark\":\"\u2713\",\"Chi\":\"\u03A7\",\"chi\":\"\u03C7\",\"circ\":\"\u02C6\",\"circeq\":\"\u2257\",\"circlearrowleft\":\"\u21BA\",\"circlearrowright\":\"\u21BB\",\"circledast\":\"\u229B\",\"circledcirc\":\"\u229A\",\"circleddash\":\"\u229D\",\"CircleDot\":\"\u2299\",\"circledR\":\"\u00AE\",\"circledS\":\"\u24C8\",\"CircleMinus\":\"\u2296\",\"CirclePlus\":\"\u2295\",\"CircleTimes\":\"\u2297\",\"cir\":\"\u25CB\",\"cirE\":\"\u29C3\",\"cire\":\"\u2257\",\"cirfnint\":\"\u2A10\",\"cirmid\":\"\u2AEF\",\"cirscir\":\"\u29C2\",\"ClockwiseContourIntegral\":\"\u2232\",\"CloseCurlyDoubleQuote\":\"\u201D\",\"CloseCurlyQuote\":\"\u2019\",\"clubs\":\"\u2663\",\"clubsuit\":\"\u2663\",\"colon\":\":\",\"Colon\":\"\u2237\",\"Colone\":\"\u2A74\",\"colone\":\"\u2254\",\"coloneq\":\"\u2254\",\"comma\":\",\",\"commat\":\"@\",\"comp\":\"\u2201\",\"compfn\":\"\u2218\",\"complement\":\"\u2201\",\"complexes\":\"\u2102\",\"cong\":\"\u2245\",\"congdot\":\"\u2A6D\",\"Congruent\":\"\u2261\",\"conint\":\"\u222E\",\"Conint\":\"\u222F\",\"ContourIntegral\":\"\u222E\",\"copf\":\"\uD835\uDD54\",\"Copf\":\"\u2102\",\"coprod\":\"\u2210\",\"Coproduct\":\"\u2210\",\"copy\":\"\u00A9\",\"COPY\":\"\u00A9\",\"copysr\":\"\u2117\",\"CounterClockwiseContourIntegral\":\"\u2233\",\"crarr\":\"\u21B5\",\"cross\":\"\u2717\",\"Cross\":\"\u2A2F\",\"Cscr\":\"\uD835\uDC9E\",\"cscr\":\"\uD835\uDCB8\",\"csub\":\"\u2ACF\",\"csube\":\"\u2AD1\",\"csup\":\"\u2AD0\",\"csupe\":\"\u2AD2\",\"ctdot\":\"\u22EF\",\"cudarrl\":\"\u2938\",\"cudarrr\":\"\u2935\",\"cuepr\":\"\u22DE\",\"cuesc\":\"\u22DF\",\"cularr\":\"\u21B6\",\"cularrp\":\"\u293D\",\"cupbrcap\":\"\u2A48\",\"cupcap\":\"\u2A46\",\"CupCap\":\"\u224D\",\"cup\":\"\u222A\",\"Cup\":\"\u22D3\",\"cupcup\":\"\u2A4A\",\"cupdot\":\"\u228D\",\"cupor\":\"\u2A45\",\"cups\":\"\u222A\uFE00\",\"curarr\":\"\u21B7\",\"curarrm\":\"\u293C\",\"curlyeqprec\":\"\u22DE\",\"curlyeqsucc\":\"\u22DF\",\"curlyvee\":\"\u22CE\",\"curlywedge\":\"\u22CF\",\"curren\":\"\u00A4\",\"curvearrowleft\":\"\u21B6\",\"curvearrowright\":\"\u21B7\",\"cuvee\":\"\u22CE\",\"cuwed\":\"\u22CF\",\"cwconint\":\"\u2232\",\"cwint\":\"\u2231\",\"cylcty\":\"\u232D\",\"dagger\":\"\u2020\",\"Dagger\":\"\u2021\",\"daleth\":\"\u2138\",\"darr\":\"\u2193\",\"Darr\":\"\u21A1\",\"dArr\":\"\u21D3\",\"dash\":\"\u2010\",\"Dashv\":\"\u2AE4\",\"dashv\":\"\u22A3\",\"dbkarow\":\"\u290F\",\"dblac\":\"\u02DD\",\"Dcaron\":\"\u010E\",\"dcaron\":\"\u010F\",\"Dcy\":\"\u0414\",\"dcy\":\"\u0434\",\"ddagger\":\"\u2021\",\"ddarr\":\"\u21CA\",\"DD\":\"\u2145\",\"dd\":\"\u2146\",\"DDotrahd\":\"\u2911\",\"ddotseq\":\"\u2A77\",\"deg\":\"\u00B0\",\"Del\":\"\u2207\",\"Delta\":\"\u0394\",\"delta\":\"\u03B4\",\"demptyv\":\"\u29B1\",\"dfisht\":\"\u297F\",\"Dfr\":\"\uD835\uDD07\",\"dfr\":\"\uD835\uDD21\",\"dHar\":\"\u2965\",\"dharl\":\"\u21C3\",\"dharr\":\"\u21C2\",\"DiacriticalAcute\":\"\u00B4\",\"DiacriticalDot\":\"\u02D9\",\"DiacriticalDoubleAcute\":\"\u02DD\",\"DiacriticalGrave\":\"`\",\"DiacriticalTilde\":\"\u02DC\",\"diam\":\"\u22C4\",\"diamond\":\"\u22C4\",\"Diamond\":\"\u22C4\",\"diamondsuit\":\"\u2666\",\"diams\":\"\u2666\",\"die\":\"\u00A8\",\"DifferentialD\":\"\u2146\",\"digamma\":\"\u03DD\",\"disin\":\"\u22F2\",\"div\":\"\u00F7\",\"divide\":\"\u00F7\",\"divideontimes\":\"\u22C7\",\"divonx\":\"\u22C7\",\"DJcy\":\"\u0402\",\"djcy\":\"\u0452\",\"dlcorn\":\"\u231E\",\"dlcrop\":\"\u230D\",\"dollar\":\"$\",\"Dopf\":\"\uD835\uDD3B\",\"dopf\":\"\uD835\uDD55\",\"Dot\":\"\u00A8\",\"dot\":\"\u02D9\",\"DotDot\":\"\u20DC\",\"doteq\":\"\u2250\",\"doteqdot\":\"\u2251\",\"DotEqual\":\"\u2250\",\"dotminus\":\"\u2238\",\"dotplus\":\"\u2214\",\"dotsquare\":\"\u22A1\",\"doublebarwedge\":\"\u2306\",\"DoubleContourIntegral\":\"\u222F\",\"DoubleDot\":\"\u00A8\",\"DoubleDownArrow\":\"\u21D3\",\"DoubleLeftArrow\":\"\u21D0\",\"DoubleLeftRightArrow\":\"\u21D4\",\"DoubleLeftTee\":\"\u2AE4\",\"DoubleLongLeftArrow\":\"\u27F8\",\"DoubleLongLeftRightArrow\":\"\u27FA\",\"DoubleLongRightArrow\":\"\u27F9\",\"DoubleRightArrow\":\"\u21D2\",\"DoubleRightTee\":\"\u22A8\",\"DoubleUpArrow\":\"\u21D1\",\"DoubleUpDownArrow\":\"\u21D5\",\"DoubleVerticalBar\":\"\u2225\",\"DownArrowBar\":\"\u2913\",\"downarrow\":\"\u2193\",\"DownArrow\":\"\u2193\",\"Downarrow\":\"\u21D3\",\"DownArrowUpArrow\":\"\u21F5\",\"DownBreve\":\"\u0311\",\"downdownarrows\":\"\u21CA\",\"downharpoonleft\":\"\u21C3\",\"downharpoonright\":\"\u21C2\",\"DownLeftRightVector\":\"\u2950\",\"DownLeftTeeVector\":\"\u295E\",\"DownLeftVectorBar\":\"\u2956\",\"DownLeftVector\":\"\u21BD\",\"DownRightTeeVector\":\"\u295F\",\"DownRightVectorBar\":\"\u2957\",\"DownRightVector\":\"\u21C1\",\"DownTeeArrow\":\"\u21A7\",\"DownTee\":\"\u22A4\",\"drbkarow\":\"\u2910\",\"drcorn\":\"\u231F\",\"drcrop\":\"\u230C\",\"Dscr\":\"\uD835\uDC9F\",\"dscr\":\"\uD835\uDCB9\",\"DScy\":\"\u0405\",\"dscy\":\"\u0455\",\"dsol\":\"\u29F6\",\"Dstrok\":\"\u0110\",\"dstrok\":\"\u0111\",\"dtdot\":\"\u22F1\",\"dtri\":\"\u25BF\",\"dtrif\":\"\u25BE\",\"duarr\":\"\u21F5\",\"duhar\":\"\u296F\",\"dwangle\":\"\u29A6\",\"DZcy\":\"\u040F\",\"dzcy\":\"\u045F\",\"dzigrarr\":\"\u27FF\",\"Eacute\":\"\u00C9\",\"eacute\":\"\u00E9\",\"easter\":\"\u2A6E\",\"Ecaron\":\"\u011A\",\"ecaron\":\"\u011B\",\"Ecirc\":\"\u00CA\",\"ecirc\":\"\u00EA\",\"ecir\":\"\u2256\",\"ecolon\":\"\u2255\",\"Ecy\":\"\u042D\",\"ecy\":\"\u044D\",\"eDDot\":\"\u2A77\",\"Edot\":\"\u0116\",\"edot\":\"\u0117\",\"eDot\":\"\u2251\",\"ee\":\"\u2147\",\"efDot\":\"\u2252\",\"Efr\":\"\uD835\uDD08\",\"efr\":\"\uD835\uDD22\",\"eg\":\"\u2A9A\",\"Egrave\":\"\u00C8\",\"egrave\":\"\u00E8\",\"egs\":\"\u2A96\",\"egsdot\":\"\u2A98\",\"el\":\"\u2A99\",\"Element\":\"\u2208\",\"elinters\":\"\u23E7\",\"ell\":\"\u2113\",\"els\":\"\u2A95\",\"elsdot\":\"\u2A97\",\"Emacr\":\"\u0112\",\"emacr\":\"\u0113\",\"empty\":\"\u2205\",\"emptyset\":\"\u2205\",\"EmptySmallSquare\":\"\u25FB\",\"emptyv\":\"\u2205\",\"EmptyVerySmallSquare\":\"\u25AB\",\"emsp13\":\"\u2004\",\"emsp14\":\"\u2005\",\"emsp\":\"\u2003\",\"ENG\":\"\u014A\",\"eng\":\"\u014B\",\"ensp\":\"\u2002\",\"Eogon\":\"\u0118\",\"eogon\":\"\u0119\",\"Eopf\":\"\uD835\uDD3C\",\"eopf\":\"\uD835\uDD56\",\"epar\":\"\u22D5\",\"eparsl\":\"\u29E3\",\"eplus\":\"\u2A71\",\"epsi\":\"\u03B5\",\"Epsilon\":\"\u0395\",\"epsilon\":\"\u03B5\",\"epsiv\":\"\u03F5\",\"eqcirc\":\"\u2256\",\"eqcolon\":\"\u2255\",\"eqsim\":\"\u2242\",\"eqslantgtr\":\"\u2A96\",\"eqslantless\":\"\u2A95\",\"Equal\":\"\u2A75\",\"equals\":\"=\",\"EqualTilde\":\"\u2242\",\"equest\":\"\u225F\",\"Equilibrium\":\"\u21CC\",\"equiv\":\"\u2261\",\"equivDD\":\"\u2A78\",\"eqvparsl\":\"\u29E5\",\"erarr\":\"\u2971\",\"erDot\":\"\u2253\",\"escr\":\"\u212F\",\"Escr\":\"\u2130\",\"esdot\":\"\u2250\",\"Esim\":\"\u2A73\",\"esim\":\"\u2242\",\"Eta\":\"\u0397\",\"eta\":\"\u03B7\",\"ETH\":\"\u00D0\",\"eth\":\"\u00F0\",\"Euml\":\"\u00CB\",\"euml\":\"\u00EB\",\"euro\":\"\u20AC\",\"excl\":\"!\",\"exist\":\"\u2203\",\"Exists\":\"\u2203\",\"expectation\":\"\u2130\",\"exponentiale\":\"\u2147\",\"ExponentialE\":\"\u2147\",\"fallingdotseq\":\"\u2252\",\"Fcy\":\"\u0424\",\"fcy\":\"\u0444\",\"female\":\"\u2640\",\"ffilig\":\"\uFB03\",\"fflig\":\"\uFB00\",\"ffllig\":\"\uFB04\",\"Ffr\":\"\uD835\uDD09\",\"ffr\":\"\uD835\uDD23\",\"filig\":\"\uFB01\",\"FilledSmallSquare\":\"\u25FC\",\"FilledVerySmallSquare\":\"\u25AA\",\"fjlig\":\"fj\",\"flat\":\"\u266D\",\"fllig\":\"\uFB02\",\"fltns\":\"\u25B1\",\"fnof\":\"\u0192\",\"Fopf\":\"\uD835\uDD3D\",\"fopf\":\"\uD835\uDD57\",\"forall\":\"\u2200\",\"ForAll\":\"\u2200\",\"fork\":\"\u22D4\",\"forkv\":\"\u2AD9\",\"Fouriertrf\":\"\u2131\",\"fpartint\":\"\u2A0D\",\"frac12\":\"\u00BD\",\"frac13\":\"\u2153\",\"frac14\":\"\u00BC\",\"frac15\":\"\u2155\",\"frac16\":\"\u2159\",\"frac18\":\"\u215B\",\"frac23\":\"\u2154\",\"frac25\":\"\u2156\",\"frac34\":\"\u00BE\",\"frac35\":\"\u2157\",\"frac38\":\"\u215C\",\"frac45\":\"\u2158\",\"frac56\":\"\u215A\",\"frac58\":\"\u215D\",\"frac78\":\"\u215E\",\"frasl\":\"\u2044\",\"frown\":\"\u2322\",\"fscr\":\"\uD835\uDCBB\",\"Fscr\":\"\u2131\",\"gacute\":\"\u01F5\",\"Gamma\":\"\u0393\",\"gamma\":\"\u03B3\",\"Gammad\":\"\u03DC\",\"gammad\":\"\u03DD\",\"gap\":\"\u2A86\",\"Gbreve\":\"\u011E\",\"gbreve\":\"\u011F\",\"Gcedil\":\"\u0122\",\"Gcirc\":\"\u011C\",\"gcirc\":\"\u011D\",\"Gcy\":\"\u0413\",\"gcy\":\"\u0433\",\"Gdot\":\"\u0120\",\"gdot\":\"\u0121\",\"ge\":\"\u2265\",\"gE\":\"\u2267\",\"gEl\":\"\u2A8C\",\"gel\":\"\u22DB\",\"geq\":\"\u2265\",\"geqq\":\"\u2267\",\"geqslant\":\"\u2A7E\",\"gescc\":\"\u2AA9\",\"ges\":\"\u2A7E\",\"gesdot\":\"\u2A80\",\"gesdoto\":\"\u2A82\",\"gesdotol\":\"\u2A84\",\"gesl\":\"\u22DB\uFE00\",\"gesles\":\"\u2A94\",\"Gfr\":\"\uD835\uDD0A\",\"gfr\":\"\uD835\uDD24\",\"gg\":\"\u226B\",\"Gg\":\"\u22D9\",\"ggg\":\"\u22D9\",\"gimel\":\"\u2137\",\"GJcy\":\"\u0403\",\"gjcy\":\"\u0453\",\"gla\":\"\u2AA5\",\"gl\":\"\u2277\",\"glE\":\"\u2A92\",\"glj\":\"\u2AA4\",\"gnap\":\"\u2A8A\",\"gnapprox\":\"\u2A8A\",\"gne\":\"\u2A88\",\"gnE\":\"\u2269\",\"gneq\":\"\u2A88\",\"gneqq\":\"\u2269\",\"gnsim\":\"\u22E7\",\"Gopf\":\"\uD835\uDD3E\",\"gopf\":\"\uD835\uDD58\",\"grave\":\"`\",\"GreaterEqual\":\"\u2265\",\"GreaterEqualLess\":\"\u22DB\",\"GreaterFullEqual\":\"\u2267\",\"GreaterGreater\":\"\u2AA2\",\"GreaterLess\":\"\u2277\",\"GreaterSlantEqual\":\"\u2A7E\",\"GreaterTilde\":\"\u2273\",\"Gscr\":\"\uD835\uDCA2\",\"gscr\":\"\u210A\",\"gsim\":\"\u2273\",\"gsime\":\"\u2A8E\",\"gsiml\":\"\u2A90\",\"gtcc\":\"\u2AA7\",\"gtcir\":\"\u2A7A\",\"gt\":\">\",\"GT\":\">\",\"Gt\":\"\u226B\",\"gtdot\":\"\u22D7\",\"gtlPar\":\"\u2995\",\"gtquest\":\"\u2A7C\",\"gtrapprox\":\"\u2A86\",\"gtrarr\":\"\u2978\",\"gtrdot\":\"\u22D7\",\"gtreqless\":\"\u22DB\",\"gtreqqless\":\"\u2A8C\",\"gtrless\":\"\u2277\",\"gtrsim\":\"\u2273\",\"gvertneqq\":\"\u2269\uFE00\",\"gvnE\":\"\u2269\uFE00\",\"Hacek\":\"\u02C7\",\"hairsp\":\"\u200A\",\"half\":\"\u00BD\",\"hamilt\":\"\u210B\",\"HARDcy\":\"\u042A\",\"hardcy\":\"\u044A\",\"harrcir\":\"\u2948\",\"harr\":\"\u2194\",\"hArr\":\"\u21D4\",\"harrw\":\"\u21AD\",\"Hat\":\"^\",\"hbar\":\"\u210F\",\"Hcirc\":\"\u0124\",\"hcirc\":\"\u0125\",\"hearts\":\"\u2665\",\"heartsuit\":\"\u2665\",\"hellip\":\"\u2026\",\"hercon\":\"\u22B9\",\"hfr\":\"\uD835\uDD25\",\"Hfr\":\"\u210C\",\"HilbertSpace\":\"\u210B\",\"hksearow\":\"\u2925\",\"hkswarow\":\"\u2926\",\"hoarr\":\"\u21FF\",\"homtht\":\"\u223B\",\"hookleftarrow\":\"\u21A9\",\"hookrightarrow\":\"\u21AA\",\"hopf\":\"\uD835\uDD59\",\"Hopf\":\"\u210D\",\"horbar\":\"\u2015\",\"HorizontalLine\":\"\u2500\",\"hscr\":\"\uD835\uDCBD\",\"Hscr\":\"\u210B\",\"hslash\":\"\u210F\",\"Hstrok\":\"\u0126\",\"hstrok\":\"\u0127\",\"HumpDownHump\":\"\u224E\",\"HumpEqual\":\"\u224F\",\"hybull\":\"\u2043\",\"hyphen\":\"\u2010\",\"Iacute\":\"\u00CD\",\"iacute\":\"\u00ED\",\"ic\":\"\u2063\",\"Icirc\":\"\u00CE\",\"icirc\":\"\u00EE\",\"Icy\":\"\u0418\",\"icy\":\"\u0438\",\"Idot\":\"\u0130\",\"IEcy\":\"\u0415\",\"iecy\":\"\u0435\",\"iexcl\":\"\u00A1\",\"iff\":\"\u21D4\",\"ifr\":\"\uD835\uDD26\",\"Ifr\":\"\u2111\",\"Igrave\":\"\u00CC\",\"igrave\":\"\u00EC\",\"ii\":\"\u2148\",\"iiiint\":\"\u2A0C\",\"iiint\":\"\u222D\",\"iinfin\":\"\u29DC\",\"iiota\":\"\u2129\",\"IJlig\":\"\u0132\",\"ijlig\":\"\u0133\",\"Imacr\":\"\u012A\",\"imacr\":\"\u012B\",\"image\":\"\u2111\",\"ImaginaryI\":\"\u2148\",\"imagline\":\"\u2110\",\"imagpart\":\"\u2111\",\"imath\":\"\u0131\",\"Im\":\"\u2111\",\"imof\":\"\u22B7\",\"imped\":\"\u01B5\",\"Implies\":\"\u21D2\",\"incare\":\"\u2105\",\"in\":\"\u2208\",\"infin\":\"\u221E\",\"infintie\":\"\u29DD\",\"inodot\":\"\u0131\",\"intcal\":\"\u22BA\",\"int\":\"\u222B\",\"Int\":\"\u222C\",\"integers\":\"\u2124\",\"Integral\":\"\u222B\",\"intercal\":\"\u22BA\",\"Intersection\":\"\u22C2\",\"intlarhk\":\"\u2A17\",\"intprod\":\"\u2A3C\",\"InvisibleComma\":\"\u2063\",\"InvisibleTimes\":\"\u2062\",\"IOcy\":\"\u0401\",\"iocy\":\"\u0451\",\"Iogon\":\"\u012E\",\"iogon\":\"\u012F\",\"Iopf\":\"\uD835\uDD40\",\"iopf\":\"\uD835\uDD5A\",\"Iota\":\"\u0399\",\"iota\":\"\u03B9\",\"iprod\":\"\u2A3C\",\"iquest\":\"\u00BF\",\"iscr\":\"\uD835\uDCBE\",\"Iscr\":\"\u2110\",\"isin\":\"\u2208\",\"isindot\":\"\u22F5\",\"isinE\":\"\u22F9\",\"isins\":\"\u22F4\",\"isinsv\":\"\u22F3\",\"isinv\":\"\u2208\",\"it\":\"\u2062\",\"Itilde\":\"\u0128\",\"itilde\":\"\u0129\",\"Iukcy\":\"\u0406\",\"iukcy\":\"\u0456\",\"Iuml\":\"\u00CF\",\"iuml\":\"\u00EF\",\"Jcirc\":\"\u0134\",\"jcirc\":\"\u0135\",\"Jcy\":\"\u0419\",\"jcy\":\"\u0439\",\"Jfr\":\"\uD835\uDD0D\",\"jfr\":\"\uD835\uDD27\",\"jmath\":\"\u0237\",\"Jopf\":\"\uD835\uDD41\",\"jopf\":\"\uD835\uDD5B\",\"Jscr\":\"\uD835\uDCA5\",\"jscr\":\"\uD835\uDCBF\",\"Jsercy\":\"\u0408\",\"jsercy\":\"\u0458\",\"Jukcy\":\"\u0404\",\"jukcy\":\"\u0454\",\"Kappa\":\"\u039A\",\"kappa\":\"\u03BA\",\"kappav\":\"\u03F0\",\"Kcedil\":\"\u0136\",\"kcedil\":\"\u0137\",\"Kcy\":\"\u041A\",\"kcy\":\"\u043A\",\"Kfr\":\"\uD835\uDD0E\",\"kfr\":\"\uD835\uDD28\",\"kgreen\":\"\u0138\",\"KHcy\":\"\u0425\",\"khcy\":\"\u0445\",\"KJcy\":\"\u040C\",\"kjcy\":\"\u045C\",\"Kopf\":\"\uD835\uDD42\",\"kopf\":\"\uD835\uDD5C\",\"Kscr\":\"\uD835\uDCA6\",\"kscr\":\"\uD835\uDCC0\",\"lAarr\":\"\u21DA\",\"Lacute\":\"\u0139\",\"lacute\":\"\u013A\",\"laemptyv\":\"\u29B4\",\"lagran\":\"\u2112\",\"Lambda\":\"\u039B\",\"lambda\":\"\u03BB\",\"lang\":\"\u27E8\",\"Lang\":\"\u27EA\",\"langd\":\"\u2991\",\"langle\":\"\u27E8\",\"lap\":\"\u2A85\",\"Laplacetrf\":\"\u2112\",\"laquo\":\"\u00AB\",\"larrb\":\"\u21E4\",\"larrbfs\":\"\u291F\",\"larr\":\"\u2190\",\"Larr\":\"\u219E\",\"lArr\":\"\u21D0\",\"larrfs\":\"\u291D\",\"larrhk\":\"\u21A9\",\"larrlp\":\"\u21AB\",\"larrpl\":\"\u2939\",\"larrsim\":\"\u2973\",\"larrtl\":\"\u21A2\",\"latail\":\"\u2919\",\"lAtail\":\"\u291B\",\"lat\":\"\u2AAB\",\"late\":\"\u2AAD\",\"lates\":\"\u2AAD\uFE00\",\"lbarr\":\"\u290C\",\"lBarr\":\"\u290E\",\"lbbrk\":\"\u2772\",\"lbrace\":\"{\",\"lbrack\":\"[\",\"lbrke\":\"\u298B\",\"lbrksld\":\"\u298F\",\"lbrkslu\":\"\u298D\",\"Lcaron\":\"\u013D\",\"lcaron\":\"\u013E\",\"Lcedil\":\"\u013B\",\"lcedil\":\"\u013C\",\"lceil\":\"\u2308\",\"lcub\":\"{\",\"Lcy\":\"\u041B\",\"lcy\":\"\u043B\",\"ldca\":\"\u2936\",\"ldquo\":\"\u201C\",\"ldquor\":\"\u201E\",\"ldrdhar\":\"\u2967\",\"ldrushar\":\"\u294B\",\"ldsh\":\"\u21B2\",\"le\":\"\u2264\",\"lE\":\"\u2266\",\"LeftAngleBracket\":\"\u27E8\",\"LeftArrowBar\":\"\u21E4\",\"leftarrow\":\"\u2190\",\"LeftArrow\":\"\u2190\",\"Leftarrow\":\"\u21D0\",\"LeftArrowRightArrow\":\"\u21C6\",\"leftarrowtail\":\"\u21A2\",\"LeftCeiling\":\"\u2308\",\"LeftDoubleBracket\":\"\u27E6\",\"LeftDownTeeVector\":\"\u2961\",\"LeftDownVectorBar\":\"\u2959\",\"LeftDownVector\":\"\u21C3\",\"LeftFloor\":\"\u230A\",\"leftharpoondown\":\"\u21BD\",\"leftharpoonup\":\"\u21BC\",\"leftleftarrows\":\"\u21C7\",\"leftrightarrow\":\"\u2194\",\"LeftRightArrow\":\"\u2194\",\"Leftrightarrow\":\"\u21D4\",\"leftrightarrows\":\"\u21C6\",\"leftrightharpoons\":\"\u21CB\",\"leftrightsquigarrow\":\"\u21AD\",\"LeftRightVector\":\"\u294E\",\"LeftTeeArrow\":\"\u21A4\",\"LeftTee\":\"\u22A3\",\"LeftTeeVector\":\"\u295A\",\"leftthreetimes\":\"\u22CB\",\"LeftTriangleBar\":\"\u29CF\",\"LeftTriangle\":\"\u22B2\",\"LeftTriangleEqual\":\"\u22B4\",\"LeftUpDownVector\":\"\u2951\",\"LeftUpTeeVector\":\"\u2960\",\"LeftUpVectorBar\":\"\u2958\",\"LeftUpVector\":\"\u21BF\",\"LeftVectorBar\":\"\u2952\",\"LeftVector\":\"\u21BC\",\"lEg\":\"\u2A8B\",\"leg\":\"\u22DA\",\"leq\":\"\u2264\",\"leqq\":\"\u2266\",\"leqslant\":\"\u2A7D\",\"lescc\":\"\u2AA8\",\"les\":\"\u2A7D\",\"lesdot\":\"\u2A7F\",\"lesdoto\":\"\u2A81\",\"lesdotor\":\"\u2A83\",\"lesg\":\"\u22DA\uFE00\",\"lesges\":\"\u2A93\",\"lessapprox\":\"\u2A85\",\"lessdot\":\"\u22D6\",\"lesseqgtr\":\"\u22DA\",\"lesseqqgtr\":\"\u2A8B\",\"LessEqualGreater\":\"\u22DA\",\"LessFullEqual\":\"\u2266\",\"LessGreater\":\"\u2276\",\"lessgtr\":\"\u2276\",\"LessLess\":\"\u2AA1\",\"lesssim\":\"\u2272\",\"LessSlantEqual\":\"\u2A7D\",\"LessTilde\":\"\u2272\",\"lfisht\":\"\u297C\",\"lfloor\":\"\u230A\",\"Lfr\":\"\uD835\uDD0F\",\"lfr\":\"\uD835\uDD29\",\"lg\":\"\u2276\",\"lgE\":\"\u2A91\",\"lHar\":\"\u2962\",\"lhard\":\"\u21BD\",\"lharu\":\"\u21BC\",\"lharul\":\"\u296A\",\"lhblk\":\"\u2584\",\"LJcy\":\"\u0409\",\"ljcy\":\"\u0459\",\"llarr\":\"\u21C7\",\"ll\":\"\u226A\",\"Ll\":\"\u22D8\",\"llcorner\":\"\u231E\",\"Lleftarrow\":\"\u21DA\",\"llhard\":\"\u296B\",\"lltri\":\"\u25FA\",\"Lmidot\":\"\u013F\",\"lmidot\":\"\u0140\",\"lmoustache\":\"\u23B0\",\"lmoust\":\"\u23B0\",\"lnap\":\"\u2A89\",\"lnapprox\":\"\u2A89\",\"lne\":\"\u2A87\",\"lnE\":\"\u2268\",\"lneq\":\"\u2A87\",\"lneqq\":\"\u2268\",\"lnsim\":\"\u22E6\",\"loang\":\"\u27EC\",\"loarr\":\"\u21FD\",\"lobrk\":\"\u27E6\",\"longleftarrow\":\"\u27F5\",\"LongLeftArrow\":\"\u27F5\",\"Longleftarrow\":\"\u27F8\",\"longleftrightarrow\":\"\u27F7\",\"LongLeftRightArrow\":\"\u27F7\",\"Longleftrightarrow\":\"\u27FA\",\"longmapsto\":\"\u27FC\",\"longrightarrow\":\"\u27F6\",\"LongRightArrow\":\"\u27F6\",\"Longrightarrow\":\"\u27F9\",\"looparrowleft\":\"\u21AB\",\"looparrowright\":\"\u21AC\",\"lopar\":\"\u2985\",\"Lopf\":\"\uD835\uDD43\",\"lopf\":\"\uD835\uDD5D\",\"loplus\":\"\u2A2D\",\"lotimes\":\"\u2A34\",\"lowast\":\"\u2217\",\"lowbar\":\"_\",\"LowerLeftArrow\":\"\u2199\",\"LowerRightArrow\":\"\u2198\",\"loz\":\"\u25CA\",\"lozenge\":\"\u25CA\",\"lozf\":\"\u29EB\",\"lpar\":\"(\",\"lparlt\":\"\u2993\",\"lrarr\":\"\u21C6\",\"lrcorner\":\"\u231F\",\"lrhar\":\"\u21CB\",\"lrhard\":\"\u296D\",\"lrm\":\"\u200E\",\"lrtri\":\"\u22BF\",\"lsaquo\":\"\u2039\",\"lscr\":\"\uD835\uDCC1\",\"Lscr\":\"\u2112\",\"lsh\":\"\u21B0\",\"Lsh\":\"\u21B0\",\"lsim\":\"\u2272\",\"lsime\":\"\u2A8D\",\"lsimg\":\"\u2A8F\",\"lsqb\":\"[\",\"lsquo\":\"\u2018\",\"lsquor\":\"\u201A\",\"Lstrok\":\"\u0141\",\"lstrok\":\"\u0142\",\"ltcc\":\"\u2AA6\",\"ltcir\":\"\u2A79\",\"lt\":\"<\",\"LT\":\"<\",\"Lt\":\"\u226A\",\"ltdot\":\"\u22D6\",\"lthree\":\"\u22CB\",\"ltimes\":\"\u22C9\",\"ltlarr\":\"\u2976\",\"ltquest\":\"\u2A7B\",\"ltri\":\"\u25C3\",\"ltrie\":\"\u22B4\",\"ltrif\":\"\u25C2\",\"ltrPar\":\"\u2996\",\"lurdshar\":\"\u294A\",\"luruhar\":\"\u2966\",\"lvertneqq\":\"\u2268\uFE00\",\"lvnE\":\"\u2268\uFE00\",\"macr\":\"\u00AF\",\"male\":\"\u2642\",\"malt\":\"\u2720\",\"maltese\":\"\u2720\",\"Map\":\"\u2905\",\"map\":\"\u21A6\",\"mapsto\":\"\u21A6\",\"mapstodown\":\"\u21A7\",\"mapstoleft\":\"\u21A4\",\"mapstoup\":\"\u21A5\",\"marker\":\"\u25AE\",\"mcomma\":\"\u2A29\",\"Mcy\":\"\u041C\",\"mcy\":\"\u043C\",\"mdash\":\"\u2014\",\"mDDot\":\"\u223A\",\"measuredangle\":\"\u2221\",\"MediumSpace\":\"\u205F\",\"Mellintrf\":\"\u2133\",\"Mfr\":\"\uD835\uDD10\",\"mfr\":\"\uD835\uDD2A\",\"mho\":\"\u2127\",\"micro\":\"\u00B5\",\"midast\":\"*\",\"midcir\":\"\u2AF0\",\"mid\":\"\u2223\",\"middot\":\"\u00B7\",\"minusb\":\"\u229F\",\"minus\":\"\u2212\",\"minusd\":\"\u2238\",\"minusdu\":\"\u2A2A\",\"MinusPlus\":\"\u2213\",\"mlcp\":\"\u2ADB\",\"mldr\":\"\u2026\",\"mnplus\":\"\u2213\",\"models\":\"\u22A7\",\"Mopf\":\"\uD835\uDD44\",\"mopf\":\"\uD835\uDD5E\",\"mp\":\"\u2213\",\"mscr\":\"\uD835\uDCC2\",\"Mscr\":\"\u2133\",\"mstpos\":\"\u223E\",\"Mu\":\"\u039C\",\"mu\":\"\u03BC\",\"multimap\":\"\u22B8\",\"mumap\":\"\u22B8\",\"nabla\":\"\u2207\",\"Nacute\":\"\u0143\",\"nacute\":\"\u0144\",\"nang\":\"\u2220\u20D2\",\"nap\":\"\u2249\",\"napE\":\"\u2A70\u0338\",\"napid\":\"\u224B\u0338\",\"napos\":\"\u0149\",\"napprox\":\"\u2249\",\"natural\":\"\u266E\",\"naturals\":\"\u2115\",\"natur\":\"\u266E\",\"nbsp\":\"\u00A0\",\"nbump\":\"\u224E\u0338\",\"nbumpe\":\"\u224F\u0338\",\"ncap\":\"\u2A43\",\"Ncaron\":\"\u0147\",\"ncaron\":\"\u0148\",\"Ncedil\":\"\u0145\",\"ncedil\":\"\u0146\",\"ncong\":\"\u2247\",\"ncongdot\":\"\u2A6D\u0338\",\"ncup\":\"\u2A42\",\"Ncy\":\"\u041D\",\"ncy\":\"\u043D\",\"ndash\":\"\u2013\",\"nearhk\":\"\u2924\",\"nearr\":\"\u2197\",\"neArr\":\"\u21D7\",\"nearrow\":\"\u2197\",\"ne\":\"\u2260\",\"nedot\":\"\u2250\u0338\",\"NegativeMediumSpace\":\"\u200B\",\"NegativeThickSpace\":\"\u200B\",\"NegativeThinSpace\":\"\u200B\",\"NegativeVeryThinSpace\":\"\u200B\",\"nequiv\":\"\u2262\",\"nesear\":\"\u2928\",\"nesim\":\"\u2242\u0338\",\"NestedGreaterGreater\":\"\u226B\",\"NestedLessLess\":\"\u226A\",\"NewLine\":\"\\n\",\"nexist\":\"\u2204\",\"nexists\":\"\u2204\",\"Nfr\":\"\uD835\uDD11\",\"nfr\":\"\uD835\uDD2B\",\"ngE\":\"\u2267\u0338\",\"nge\":\"\u2271\",\"ngeq\":\"\u2271\",\"ngeqq\":\"\u2267\u0338\",\"ngeqslant\":\"\u2A7E\u0338\",\"nges\":\"\u2A7E\u0338\",\"nGg\":\"\u22D9\u0338\",\"ngsim\":\"\u2275\",\"nGt\":\"\u226B\u20D2\",\"ngt\":\"\u226F\",\"ngtr\":\"\u226F\",\"nGtv\":\"\u226B\u0338\",\"nharr\":\"\u21AE\",\"nhArr\":\"\u21CE\",\"nhpar\":\"\u2AF2\",\"ni\":\"\u220B\",\"nis\":\"\u22FC\",\"nisd\":\"\u22FA\",\"niv\":\"\u220B\",\"NJcy\":\"\u040A\",\"njcy\":\"\u045A\",\"nlarr\":\"\u219A\",\"nlArr\":\"\u21CD\",\"nldr\":\"\u2025\",\"nlE\":\"\u2266\u0338\",\"nle\":\"\u2270\",\"nleftarrow\":\"\u219A\",\"nLeftarrow\":\"\u21CD\",\"nleftrightarrow\":\"\u21AE\",\"nLeftrightarrow\":\"\u21CE\",\"nleq\":\"\u2270\",\"nleqq\":\"\u2266\u0338\",\"nleqslant\":\"\u2A7D\u0338\",\"nles\":\"\u2A7D\u0338\",\"nless\":\"\u226E\",\"nLl\":\"\u22D8\u0338\",\"nlsim\":\"\u2274\",\"nLt\":\"\u226A\u20D2\",\"nlt\":\"\u226E\",\"nltri\":\"\u22EA\",\"nltrie\":\"\u22EC\",\"nLtv\":\"\u226A\u0338\",\"nmid\":\"\u2224\",\"NoBreak\":\"\u2060\",\"NonBreakingSpace\":\"\u00A0\",\"nopf\":\"\uD835\uDD5F\",\"Nopf\":\"\u2115\",\"Not\":\"\u2AEC\",\"not\":\"\u00AC\",\"NotCongruent\":\"\u2262\",\"NotCupCap\":\"\u226D\",\"NotDoubleVerticalBar\":\"\u2226\",\"NotElement\":\"\u2209\",\"NotEqual\":\"\u2260\",\"NotEqualTilde\":\"\u2242\u0338\",\"NotExists\":\"\u2204\",\"NotGreater\":\"\u226F\",\"NotGreaterEqual\":\"\u2271\",\"NotGreaterFullEqual\":\"\u2267\u0338\",\"NotGreaterGreater\":\"\u226B\u0338\",\"NotGreaterLess\":\"\u2279\",\"NotGreaterSlantEqual\":\"\u2A7E\u0338\",\"NotGreaterTilde\":\"\u2275\",\"NotHumpDownHump\":\"\u224E\u0338\",\"NotHumpEqual\":\"\u224F\u0338\",\"notin\":\"\u2209\",\"notindot\":\"\u22F5\u0338\",\"notinE\":\"\u22F9\u0338\",\"notinva\":\"\u2209\",\"notinvb\":\"\u22F7\",\"notinvc\":\"\u22F6\",\"NotLeftTriangleBar\":\"\u29CF\u0338\",\"NotLeftTriangle\":\"\u22EA\",\"NotLeftTriangleEqual\":\"\u22EC\",\"NotLess\":\"\u226E\",\"NotLessEqual\":\"\u2270\",\"NotLessGreater\":\"\u2278\",\"NotLessLess\":\"\u226A\u0338\",\"NotLessSlantEqual\":\"\u2A7D\u0338\",\"NotLessTilde\":\"\u2274\",\"NotNestedGreaterGreater\":\"\u2AA2\u0338\",\"NotNestedLessLess\":\"\u2AA1\u0338\",\"notni\":\"\u220C\",\"notniva\":\"\u220C\",\"notnivb\":\"\u22FE\",\"notnivc\":\"\u22FD\",\"NotPrecedes\":\"\u2280\",\"NotPrecedesEqual\":\"\u2AAF\u0338\",\"NotPrecedesSlantEqual\":\"\u22E0\",\"NotReverseElement\":\"\u220C\",\"NotRightTriangleBar\":\"\u29D0\u0338\",\"NotRightTriangle\":\"\u22EB\",\"NotRightTriangleEqual\":\"\u22ED\",\"NotSquareSubset\":\"\u228F\u0338\",\"NotSquareSubsetEqual\":\"\u22E2\",\"NotSquareSuperset\":\"\u2290\u0338\",\"NotSquareSupersetEqual\":\"\u22E3\",\"NotSubset\":\"\u2282\u20D2\",\"NotSubsetEqual\":\"\u2288\",\"NotSucceeds\":\"\u2281\",\"NotSucceedsEqual\":\"\u2AB0\u0338\",\"NotSucceedsSlantEqual\":\"\u22E1\",\"NotSucceedsTilde\":\"\u227F\u0338\",\"NotSuperset\":\"\u2283\u20D2\",\"NotSupersetEqual\":\"\u2289\",\"NotTilde\":\"\u2241\",\"NotTildeEqual\":\"\u2244\",\"NotTildeFullEqual\":\"\u2247\",\"NotTildeTilde\":\"\u2249\",\"NotVerticalBar\":\"\u2224\",\"nparallel\":\"\u2226\",\"npar\":\"\u2226\",\"nparsl\":\"\u2AFD\u20E5\",\"npart\":\"\u2202\u0338\",\"npolint\":\"\u2A14\",\"npr\":\"\u2280\",\"nprcue\":\"\u22E0\",\"nprec\":\"\u2280\",\"npreceq\":\"\u2AAF\u0338\",\"npre\":\"\u2AAF\u0338\",\"nrarrc\":\"\u2933\u0338\",\"nrarr\":\"\u219B\",\"nrArr\":\"\u21CF\",\"nrarrw\":\"\u219D\u0338\",\"nrightarrow\":\"\u219B\",\"nRightarrow\":\"\u21CF\",\"nrtri\":\"\u22EB\",\"nrtrie\":\"\u22ED\",\"nsc\":\"\u2281\",\"nsccue\":\"\u22E1\",\"nsce\":\"\u2AB0\u0338\",\"Nscr\":\"\uD835\uDCA9\",\"nscr\":\"\uD835\uDCC3\",\"nshortmid\":\"\u2224\",\"nshortparallel\":\"\u2226\",\"nsim\":\"\u2241\",\"nsime\":\"\u2244\",\"nsimeq\":\"\u2244\",\"nsmid\":\"\u2224\",\"nspar\":\"\u2226\",\"nsqsube\":\"\u22E2\",\"nsqsupe\":\"\u22E3\",\"nsub\":\"\u2284\",\"nsubE\":\"\u2AC5\u0338\",\"nsube\":\"\u2288\",\"nsubset\":\"\u2282\u20D2\",\"nsubseteq\":\"\u2288\",\"nsubseteqq\":\"\u2AC5\u0338\",\"nsucc\":\"\u2281\",\"nsucceq\":\"\u2AB0\u0338\",\"nsup\":\"\u2285\",\"nsupE\":\"\u2AC6\u0338\",\"nsupe\":\"\u2289\",\"nsupset\":\"\u2283\u20D2\",\"nsupseteq\":\"\u2289\",\"nsupseteqq\":\"\u2AC6\u0338\",\"ntgl\":\"\u2279\",\"Ntilde\":\"\u00D1\",\"ntilde\":\"\u00F1\",\"ntlg\":\"\u2278\",\"ntriangleleft\":\"\u22EA\",\"ntrianglelefteq\":\"\u22EC\",\"ntriangleright\":\"\u22EB\",\"ntrianglerighteq\":\"\u22ED\",\"Nu\":\"\u039D\",\"nu\":\"\u03BD\",\"num\":\"#\",\"numero\":\"\u2116\",\"numsp\":\"\u2007\",\"nvap\":\"\u224D\u20D2\",\"nvdash\":\"\u22AC\",\"nvDash\":\"\u22AD\",\"nVdash\":\"\u22AE\",\"nVDash\":\"\u22AF\",\"nvge\":\"\u2265\u20D2\",\"nvgt\":\">\u20D2\",\"nvHarr\":\"\u2904\",\"nvinfin\":\"\u29DE\",\"nvlArr\":\"\u2902\",\"nvle\":\"\u2264\u20D2\",\"nvlt\":\"<\u20D2\",\"nvltrie\":\"\u22B4\u20D2\",\"nvrArr\":\"\u2903\",\"nvrtrie\":\"\u22B5\u20D2\",\"nvsim\":\"\u223C\u20D2\",\"nwarhk\":\"\u2923\",\"nwarr\":\"\u2196\",\"nwArr\":\"\u21D6\",\"nwarrow\":\"\u2196\",\"nwnear\":\"\u2927\",\"Oacute\":\"\u00D3\",\"oacute\":\"\u00F3\",\"oast\":\"\u229B\",\"Ocirc\":\"\u00D4\",\"ocirc\":\"\u00F4\",\"ocir\":\"\u229A\",\"Ocy\":\"\u041E\",\"ocy\":\"\u043E\",\"odash\":\"\u229D\",\"Odblac\":\"\u0150\",\"odblac\":\"\u0151\",\"odiv\":\"\u2A38\",\"odot\":\"\u2299\",\"odsold\":\"\u29BC\",\"OElig\":\"\u0152\",\"oelig\":\"\u0153\",\"ofcir\":\"\u29BF\",\"Ofr\":\"\uD835\uDD12\",\"ofr\":\"\uD835\uDD2C\",\"ogon\":\"\u02DB\",\"Ograve\":\"\u00D2\",\"ograve\":\"\u00F2\",\"ogt\":\"\u29C1\",\"ohbar\":\"\u29B5\",\"ohm\":\"\u03A9\",\"oint\":\"\u222E\",\"olarr\":\"\u21BA\",\"olcir\":\"\u29BE\",\"olcross\":\"\u29BB\",\"oline\":\"\u203E\",\"olt\":\"\u29C0\",\"Omacr\":\"\u014C\",\"omacr\":\"\u014D\",\"Omega\":\"\u03A9\",\"omega\":\"\u03C9\",\"Omicron\":\"\u039F\",\"omicron\":\"\u03BF\",\"omid\":\"\u29B6\",\"ominus\":\"\u2296\",\"Oopf\":\"\uD835\uDD46\",\"oopf\":\"\uD835\uDD60\",\"opar\":\"\u29B7\",\"OpenCurlyDoubleQuote\":\"\u201C\",\"OpenCurlyQuote\":\"\u2018\",\"operp\":\"\u29B9\",\"oplus\":\"\u2295\",\"orarr\":\"\u21BB\",\"Or\":\"\u2A54\",\"or\":\"\u2228\",\"ord\":\"\u2A5D\",\"order\":\"\u2134\",\"orderof\":\"\u2134\",\"ordf\":\"\u00AA\",\"ordm\":\"\u00BA\",\"origof\":\"\u22B6\",\"oror\":\"\u2A56\",\"orslope\":\"\u2A57\",\"orv\":\"\u2A5B\",\"oS\":\"\u24C8\",\"Oscr\":\"\uD835\uDCAA\",\"oscr\":\"\u2134\",\"Oslash\":\"\u00D8\",\"oslash\":\"\u00F8\",\"osol\":\"\u2298\",\"Otilde\":\"\u00D5\",\"otilde\":\"\u00F5\",\"otimesas\":\"\u2A36\",\"Otimes\":\"\u2A37\",\"otimes\":\"\u2297\",\"Ouml\":\"\u00D6\",\"ouml\":\"\u00F6\",\"ovbar\":\"\u233D\",\"OverBar\":\"\u203E\",\"OverBrace\":\"\u23DE\",\"OverBracket\":\"\u23B4\",\"OverParenthesis\":\"\u23DC\",\"para\":\"\u00B6\",\"parallel\":\"\u2225\",\"par\":\"\u2225\",\"parsim\":\"\u2AF3\",\"parsl\":\"\u2AFD\",\"part\":\"\u2202\",\"PartialD\":\"\u2202\",\"Pcy\":\"\u041F\",\"pcy\":\"\u043F\",\"percnt\":\"%\",\"period\":\".\",\"permil\":\"\u2030\",\"perp\":\"\u22A5\",\"pertenk\":\"\u2031\",\"Pfr\":\"\uD835\uDD13\",\"pfr\":\"\uD835\uDD2D\",\"Phi\":\"\u03A6\",\"phi\":\"\u03C6\",\"phiv\":\"\u03D5\",\"phmmat\":\"\u2133\",\"phone\":\"\u260E\",\"Pi\":\"\u03A0\",\"pi\":\"\u03C0\",\"pitchfork\":\"\u22D4\",\"piv\":\"\u03D6\",\"planck\":\"\u210F\",\"planckh\":\"\u210E\",\"plankv\":\"\u210F\",\"plusacir\":\"\u2A23\",\"plusb\":\"\u229E\",\"pluscir\":\"\u2A22\",\"plus\":\"+\",\"plusdo\":\"\u2214\",\"plusdu\":\"\u2A25\",\"pluse\":\"\u2A72\",\"PlusMinus\":\"\u00B1\",\"plusmn\":\"\u00B1\",\"plussim\":\"\u2A26\",\"plustwo\":\"\u2A27\",\"pm\":\"\u00B1\",\"Poincareplane\":\"\u210C\",\"pointint\":\"\u2A15\",\"popf\":\"\uD835\uDD61\",\"Popf\":\"\u2119\",\"pound\":\"\u00A3\",\"prap\":\"\u2AB7\",\"Pr\":\"\u2ABB\",\"pr\":\"\u227A\",\"prcue\":\"\u227C\",\"precapprox\":\"\u2AB7\",\"prec\":\"\u227A\",\"preccurlyeq\":\"\u227C\",\"Precedes\":\"\u227A\",\"PrecedesEqual\":\"\u2AAF\",\"PrecedesSlantEqual\":\"\u227C\",\"PrecedesTilde\":\"\u227E\",\"preceq\":\"\u2AAF\",\"precnapprox\":\"\u2AB9\",\"precneqq\":\"\u2AB5\",\"precnsim\":\"\u22E8\",\"pre\":\"\u2AAF\",\"prE\":\"\u2AB3\",\"precsim\":\"\u227E\",\"prime\":\"\u2032\",\"Prime\":\"\u2033\",\"primes\":\"\u2119\",\"prnap\":\"\u2AB9\",\"prnE\":\"\u2AB5\",\"prnsim\":\"\u22E8\",\"prod\":\"\u220F\",\"Product\":\"\u220F\",\"profalar\":\"\u232E\",\"profline\":\"\u2312\",\"profsurf\":\"\u2313\",\"prop\":\"\u221D\",\"Proportional\":\"\u221D\",\"Proportion\":\"\u2237\",\"propto\":\"\u221D\",\"prsim\":\"\u227E\",\"prurel\":\"\u22B0\",\"Pscr\":\"\uD835\uDCAB\",\"pscr\":\"\uD835\uDCC5\",\"Psi\":\"\u03A8\",\"psi\":\"\u03C8\",\"puncsp\":\"\u2008\",\"Qfr\":\"\uD835\uDD14\",\"qfr\":\"\uD835\uDD2E\",\"qint\":\"\u2A0C\",\"qopf\":\"\uD835\uDD62\",\"Qopf\":\"\u211A\",\"qprime\":\"\u2057\",\"Qscr\":\"\uD835\uDCAC\",\"qscr\":\"\uD835\uDCC6\",\"quaternions\":\"\u210D\",\"quatint\":\"\u2A16\",\"quest\":\"?\",\"questeq\":\"\u225F\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"rAarr\":\"\u21DB\",\"race\":\"\u223D\u0331\",\"Racute\":\"\u0154\",\"racute\":\"\u0155\",\"radic\":\"\u221A\",\"raemptyv\":\"\u29B3\",\"rang\":\"\u27E9\",\"Rang\":\"\u27EB\",\"rangd\":\"\u2992\",\"range\":\"\u29A5\",\"rangle\":\"\u27E9\",\"raquo\":\"\u00BB\",\"rarrap\":\"\u2975\",\"rarrb\":\"\u21E5\",\"rarrbfs\":\"\u2920\",\"rarrc\":\"\u2933\",\"rarr\":\"\u2192\",\"Rarr\":\"\u21A0\",\"rArr\":\"\u21D2\",\"rarrfs\":\"\u291E\",\"rarrhk\":\"\u21AA\",\"rarrlp\":\"\u21AC\",\"rarrpl\":\"\u2945\",\"rarrsim\":\"\u2974\",\"Rarrtl\":\"\u2916\",\"rarrtl\":\"\u21A3\",\"rarrw\":\"\u219D\",\"ratail\":\"\u291A\",\"rAtail\":\"\u291C\",\"ratio\":\"\u2236\",\"rationals\":\"\u211A\",\"rbarr\":\"\u290D\",\"rBarr\":\"\u290F\",\"RBarr\":\"\u2910\",\"rbbrk\":\"\u2773\",\"rbrace\":\"}\",\"rbrack\":\"]\",\"rbrke\":\"\u298C\",\"rbrksld\":\"\u298E\",\"rbrkslu\":\"\u2990\",\"Rcaron\":\"\u0158\",\"rcaron\":\"\u0159\",\"Rcedil\":\"\u0156\",\"rcedil\":\"\u0157\",\"rceil\":\"\u2309\",\"rcub\":\"}\",\"Rcy\":\"\u0420\",\"rcy\":\"\u0440\",\"rdca\":\"\u2937\",\"rdldhar\":\"\u2969\",\"rdquo\":\"\u201D\",\"rdquor\":\"\u201D\",\"rdsh\":\"\u21B3\",\"real\":\"\u211C\",\"realine\":\"\u211B\",\"realpart\":\"\u211C\",\"reals\":\"\u211D\",\"Re\":\"\u211C\",\"rect\":\"\u25AD\",\"reg\":\"\u00AE\",\"REG\":\"\u00AE\",\"ReverseElement\":\"\u220B\",\"ReverseEquilibrium\":\"\u21CB\",\"ReverseUpEquilibrium\":\"\u296F\",\"rfisht\":\"\u297D\",\"rfloor\":\"\u230B\",\"rfr\":\"\uD835\uDD2F\",\"Rfr\":\"\u211C\",\"rHar\":\"\u2964\",\"rhard\":\"\u21C1\",\"rharu\":\"\u21C0\",\"rharul\":\"\u296C\",\"Rho\":\"\u03A1\",\"rho\":\"\u03C1\",\"rhov\":\"\u03F1\",\"RightAngleBracket\":\"\u27E9\",\"RightArrowBar\":\"\u21E5\",\"rightarrow\":\"\u2192\",\"RightArrow\":\"\u2192\",\"Rightarrow\":\"\u21D2\",\"RightArrowLeftArrow\":\"\u21C4\",\"rightarrowtail\":\"\u21A3\",\"RightCeiling\":\"\u2309\",\"RightDoubleBracket\":\"\u27E7\",\"RightDownTeeVector\":\"\u295D\",\"RightDownVectorBar\":\"\u2955\",\"RightDownVector\":\"\u21C2\",\"RightFloor\":\"\u230B\",\"rightharpoondown\":\"\u21C1\",\"rightharpoonup\":\"\u21C0\",\"rightleftarrows\":\"\u21C4\",\"rightleftharpoons\":\"\u21CC\",\"rightrightarrows\":\"\u21C9\",\"rightsquigarrow\":\"\u219D\",\"RightTeeArrow\":\"\u21A6\",\"RightTee\":\"\u22A2\",\"RightTeeVector\":\"\u295B\",\"rightthreetimes\":\"\u22CC\",\"RightTriangleBar\":\"\u29D0\",\"RightTriangle\":\"\u22B3\",\"RightTriangleEqual\":\"\u22B5\",\"RightUpDownVector\":\"\u294F\",\"RightUpTeeVector\":\"\u295C\",\"RightUpVectorBar\":\"\u2954\",\"RightUpVector\":\"\u21BE\",\"RightVectorBar\":\"\u2953\",\"RightVector\":\"\u21C0\",\"ring\":\"\u02DA\",\"risingdotseq\":\"\u2253\",\"rlarr\":\"\u21C4\",\"rlhar\":\"\u21CC\",\"rlm\":\"\u200F\",\"rmoustache\":\"\u23B1\",\"rmoust\":\"\u23B1\",\"rnmid\":\"\u2AEE\",\"roang\":\"\u27ED\",\"roarr\":\"\u21FE\",\"robrk\":\"\u27E7\",\"ropar\":\"\u2986\",\"ropf\":\"\uD835\uDD63\",\"Ropf\":\"\u211D\",\"roplus\":\"\u2A2E\",\"rotimes\":\"\u2A35\",\"RoundImplies\":\"\u2970\",\"rpar\":\")\",\"rpargt\":\"\u2994\",\"rppolint\":\"\u2A12\",\"rrarr\":\"\u21C9\",\"Rrightarrow\":\"\u21DB\",\"rsaquo\":\"\u203A\",\"rscr\":\"\uD835\uDCC7\",\"Rscr\":\"\u211B\",\"rsh\":\"\u21B1\",\"Rsh\":\"\u21B1\",\"rsqb\":\"]\",\"rsquo\":\"\u2019\",\"rsquor\":\"\u2019\",\"rthree\":\"\u22CC\",\"rtimes\":\"\u22CA\",\"rtri\":\"\u25B9\",\"rtrie\":\"\u22B5\",\"rtrif\":\"\u25B8\",\"rtriltri\":\"\u29CE\",\"RuleDelayed\":\"\u29F4\",\"ruluhar\":\"\u2968\",\"rx\":\"\u211E\",\"Sacute\":\"\u015A\",\"sacute\":\"\u015B\",\"sbquo\":\"\u201A\",\"scap\":\"\u2AB8\",\"Scaron\":\"\u0160\",\"scaron\":\"\u0161\",\"Sc\":\"\u2ABC\",\"sc\":\"\u227B\",\"sccue\":\"\u227D\",\"sce\":\"\u2AB0\",\"scE\":\"\u2AB4\",\"Scedil\":\"\u015E\",\"scedil\":\"\u015F\",\"Scirc\":\"\u015C\",\"scirc\":\"\u015D\",\"scnap\":\"\u2ABA\",\"scnE\":\"\u2AB6\",\"scnsim\":\"\u22E9\",\"scpolint\":\"\u2A13\",\"scsim\":\"\u227F\",\"Scy\":\"\u0421\",\"scy\":\"\u0441\",\"sdotb\":\"\u22A1\",\"sdot\":\"\u22C5\",\"sdote\":\"\u2A66\",\"searhk\":\"\u2925\",\"searr\":\"\u2198\",\"seArr\":\"\u21D8\",\"searrow\":\"\u2198\",\"sect\":\"\u00A7\",\"semi\":\";\",\"seswar\":\"\u2929\",\"setminus\":\"\u2216\",\"setmn\":\"\u2216\",\"sext\":\"\u2736\",\"Sfr\":\"\uD835\uDD16\",\"sfr\":\"\uD835\uDD30\",\"sfrown\":\"\u2322\",\"sharp\":\"\u266F\",\"SHCHcy\":\"\u0429\",\"shchcy\":\"\u0449\",\"SHcy\":\"\u0428\",\"shcy\":\"\u0448\",\"ShortDownArrow\":\"\u2193\",\"ShortLeftArrow\":\"\u2190\",\"shortmid\":\"\u2223\",\"shortparallel\":\"\u2225\",\"ShortRightArrow\":\"\u2192\",\"ShortUpArrow\":\"\u2191\",\"shy\":\"\u00AD\",\"Sigma\":\"\u03A3\",\"sigma\":\"\u03C3\",\"sigmaf\":\"\u03C2\",\"sigmav\":\"\u03C2\",\"sim\":\"\u223C\",\"simdot\":\"\u2A6A\",\"sime\":\"\u2243\",\"simeq\":\"\u2243\",\"simg\":\"\u2A9E\",\"simgE\":\"\u2AA0\",\"siml\":\"\u2A9D\",\"simlE\":\"\u2A9F\",\"simne\":\"\u2246\",\"simplus\":\"\u2A24\",\"simrarr\":\"\u2972\",\"slarr\":\"\u2190\",\"SmallCircle\":\"\u2218\",\"smallsetminus\":\"\u2216\",\"smashp\":\"\u2A33\",\"smeparsl\":\"\u29E4\",\"smid\":\"\u2223\",\"smile\":\"\u2323\",\"smt\":\"\u2AAA\",\"smte\":\"\u2AAC\",\"smtes\":\"\u2AAC\uFE00\",\"SOFTcy\":\"\u042C\",\"softcy\":\"\u044C\",\"solbar\":\"\u233F\",\"solb\":\"\u29C4\",\"sol\":\"/\",\"Sopf\":\"\uD835\uDD4A\",\"sopf\":\"\uD835\uDD64\",\"spades\":\"\u2660\",\"spadesuit\":\"\u2660\",\"spar\":\"\u2225\",\"sqcap\":\"\u2293\",\"sqcaps\":\"\u2293\uFE00\",\"sqcup\":\"\u2294\",\"sqcups\":\"\u2294\uFE00\",\"Sqrt\":\"\u221A\",\"sqsub\":\"\u228F\",\"sqsube\":\"\u2291\",\"sqsubset\":\"\u228F\",\"sqsubseteq\":\"\u2291\",\"sqsup\":\"\u2290\",\"sqsupe\":\"\u2292\",\"sqsupset\":\"\u2290\",\"sqsupseteq\":\"\u2292\",\"square\":\"\u25A1\",\"Square\":\"\u25A1\",\"SquareIntersection\":\"\u2293\",\"SquareSubset\":\"\u228F\",\"SquareSubsetEqual\":\"\u2291\",\"SquareSuperset\":\"\u2290\",\"SquareSupersetEqual\":\"\u2292\",\"SquareUnion\":\"\u2294\",\"squarf\":\"\u25AA\",\"squ\":\"\u25A1\",\"squf\":\"\u25AA\",\"srarr\":\"\u2192\",\"Sscr\":\"\uD835\uDCAE\",\"sscr\":\"\uD835\uDCC8\",\"ssetmn\":\"\u2216\",\"ssmile\":\"\u2323\",\"sstarf\":\"\u22C6\",\"Star\":\"\u22C6\",\"star\":\"\u2606\",\"starf\":\"\u2605\",\"straightepsilon\":\"\u03F5\",\"straightphi\":\"\u03D5\",\"strns\":\"\u00AF\",\"sub\":\"\u2282\",\"Sub\":\"\u22D0\",\"subdot\":\"\u2ABD\",\"subE\":\"\u2AC5\",\"sube\":\"\u2286\",\"subedot\":\"\u2AC3\",\"submult\":\"\u2AC1\",\"subnE\":\"\u2ACB\",\"subne\":\"\u228A\",\"subplus\":\"\u2ABF\",\"subrarr\":\"\u2979\",\"subset\":\"\u2282\",\"Subset\":\"\u22D0\",\"subseteq\":\"\u2286\",\"subseteqq\":\"\u2AC5\",\"SubsetEqual\":\"\u2286\",\"subsetneq\":\"\u228A\",\"subsetneqq\":\"\u2ACB\",\"subsim\":\"\u2AC7\",\"subsub\":\"\u2AD5\",\"subsup\":\"\u2AD3\",\"succapprox\":\"\u2AB8\",\"succ\":\"\u227B\",\"succcurlyeq\":\"\u227D\",\"Succeeds\":\"\u227B\",\"SucceedsEqual\":\"\u2AB0\",\"SucceedsSlantEqual\":\"\u227D\",\"SucceedsTilde\":\"\u227F\",\"succeq\":\"\u2AB0\",\"succnapprox\":\"\u2ABA\",\"succneqq\":\"\u2AB6\",\"succnsim\":\"\u22E9\",\"succsim\":\"\u227F\",\"SuchThat\":\"\u220B\",\"sum\":\"\u2211\",\"Sum\":\"\u2211\",\"sung\":\"\u266A\",\"sup1\":\"\u00B9\",\"sup2\":\"\u00B2\",\"sup3\":\"\u00B3\",\"sup\":\"\u2283\",\"Sup\":\"\u22D1\",\"supdot\":\"\u2ABE\",\"supdsub\":\"\u2AD8\",\"supE\":\"\u2AC6\",\"supe\":\"\u2287\",\"supedot\":\"\u2AC4\",\"Superset\":\"\u2283\",\"SupersetEqual\":\"\u2287\",\"suphsol\":\"\u27C9\",\"suphsub\":\"\u2AD7\",\"suplarr\":\"\u297B\",\"supmult\":\"\u2AC2\",\"supnE\":\"\u2ACC\",\"supne\":\"\u228B\",\"supplus\":\"\u2AC0\",\"supset\":\"\u2283\",\"Supset\":\"\u22D1\",\"supseteq\":\"\u2287\",\"supseteqq\":\"\u2AC6\",\"supsetneq\":\"\u228B\",\"supsetneqq\":\"\u2ACC\",\"supsim\":\"\u2AC8\",\"supsub\":\"\u2AD4\",\"supsup\":\"\u2AD6\",\"swarhk\":\"\u2926\",\"swarr\":\"\u2199\",\"swArr\":\"\u21D9\",\"swarrow\":\"\u2199\",\"swnwar\":\"\u292A\",\"szlig\":\"\u00DF\",\"Tab\":\"\\t\",\"target\":\"\u2316\",\"Tau\":\"\u03A4\",\"tau\":\"\u03C4\",\"tbrk\":\"\u23B4\",\"Tcaron\":\"\u0164\",\"tcaron\":\"\u0165\",\"Tcedil\":\"\u0162\",\"tcedil\":\"\u0163\",\"Tcy\":\"\u0422\",\"tcy\":\"\u0442\",\"tdot\":\"\u20DB\",\"telrec\":\"\u2315\",\"Tfr\":\"\uD835\uDD17\",\"tfr\":\"\uD835\uDD31\",\"there4\":\"\u2234\",\"therefore\":\"\u2234\",\"Therefore\":\"\u2234\",\"Theta\":\"\u0398\",\"theta\":\"\u03B8\",\"thetasym\":\"\u03D1\",\"thetav\":\"\u03D1\",\"thickapprox\":\"\u2248\",\"thicksim\":\"\u223C\",\"ThickSpace\":\"\u205F\u200A\",\"ThinSpace\":\"\u2009\",\"thinsp\":\"\u2009\",\"thkap\":\"\u2248\",\"thksim\":\"\u223C\",\"THORN\":\"\u00DE\",\"thorn\":\"\u00FE\",\"tilde\":\"\u02DC\",\"Tilde\":\"\u223C\",\"TildeEqual\":\"\u2243\",\"TildeFullEqual\":\"\u2245\",\"TildeTilde\":\"\u2248\",\"timesbar\":\"\u2A31\",\"timesb\":\"\u22A0\",\"times\":\"\u00D7\",\"timesd\":\"\u2A30\",\"tint\":\"\u222D\",\"toea\":\"\u2928\",\"topbot\":\"\u2336\",\"topcir\":\"\u2AF1\",\"top\":\"\u22A4\",\"Topf\":\"\uD835\uDD4B\",\"topf\":\"\uD835\uDD65\",\"topfork\":\"\u2ADA\",\"tosa\":\"\u2929\",\"tprime\":\"\u2034\",\"trade\":\"\u2122\",\"TRADE\":\"\u2122\",\"triangle\":\"\u25B5\",\"triangledown\":\"\u25BF\",\"triangleleft\":\"\u25C3\",\"trianglelefteq\":\"\u22B4\",\"triangleq\":\"\u225C\",\"triangleright\":\"\u25B9\",\"trianglerighteq\":\"\u22B5\",\"tridot\":\"\u25EC\",\"trie\":\"\u225C\",\"triminus\":\"\u2A3A\",\"TripleDot\":\"\u20DB\",\"triplus\":\"\u2A39\",\"trisb\":\"\u29CD\",\"tritime\":\"\u2A3B\",\"trpezium\":\"\u23E2\",\"Tscr\":\"\uD835\uDCAF\",\"tscr\":\"\uD835\uDCC9\",\"TScy\":\"\u0426\",\"tscy\":\"\u0446\",\"TSHcy\":\"\u040B\",\"tshcy\":\"\u045B\",\"Tstrok\":\"\u0166\",\"tstrok\":\"\u0167\",\"twixt\":\"\u226C\",\"twoheadleftarrow\":\"\u219E\",\"twoheadrightarrow\":\"\u21A0\",\"Uacute\":\"\u00DA\",\"uacute\":\"\u00FA\",\"uarr\":\"\u2191\",\"Uarr\":\"\u219F\",\"uArr\":\"\u21D1\",\"Uarrocir\":\"\u2949\",\"Ubrcy\":\"\u040E\",\"ubrcy\":\"\u045E\",\"Ubreve\":\"\u016C\",\"ubreve\":\"\u016D\",\"Ucirc\":\"\u00DB\",\"ucirc\":\"\u00FB\",\"Ucy\":\"\u0423\",\"ucy\":\"\u0443\",\"udarr\":\"\u21C5\",\"Udblac\":\"\u0170\",\"udblac\":\"\u0171\",\"udhar\":\"\u296E\",\"ufisht\":\"\u297E\",\"Ufr\":\"\uD835\uDD18\",\"ufr\":\"\uD835\uDD32\",\"Ugrave\":\"\u00D9\",\"ugrave\":\"\u00F9\",\"uHar\":\"\u2963\",\"uharl\":\"\u21BF\",\"uharr\":\"\u21BE\",\"uhblk\":\"\u2580\",\"ulcorn\":\"\u231C\",\"ulcorner\":\"\u231C\",\"ulcrop\":\"\u230F\",\"ultri\":\"\u25F8\",\"Umacr\":\"\u016A\",\"umacr\":\"\u016B\",\"uml\":\"\u00A8\",\"UnderBar\":\"_\",\"UnderBrace\":\"\u23DF\",\"UnderBracket\":\"\u23B5\",\"UnderParenthesis\":\"\u23DD\",\"Union\":\"\u22C3\",\"UnionPlus\":\"\u228E\",\"Uogon\":\"\u0172\",\"uogon\":\"\u0173\",\"Uopf\":\"\uD835\uDD4C\",\"uopf\":\"\uD835\uDD66\",\"UpArrowBar\":\"\u2912\",\"uparrow\":\"\u2191\",\"UpArrow\":\"\u2191\",\"Uparrow\":\"\u21D1\",\"UpArrowDownArrow\":\"\u21C5\",\"updownarrow\":\"\u2195\",\"UpDownArrow\":\"\u2195\",\"Updownarrow\":\"\u21D5\",\"UpEquilibrium\":\"\u296E\",\"upharpoonleft\":\"\u21BF\",\"upharpoonright\":\"\u21BE\",\"uplus\":\"\u228E\",\"UpperLeftArrow\":\"\u2196\",\"UpperRightArrow\":\"\u2197\",\"upsi\":\"\u03C5\",\"Upsi\":\"\u03D2\",\"upsih\":\"\u03D2\",\"Upsilon\":\"\u03A5\",\"upsilon\":\"\u03C5\",\"UpTeeArrow\":\"\u21A5\",\"UpTee\":\"\u22A5\",\"upuparrows\":\"\u21C8\",\"urcorn\":\"\u231D\",\"urcorner\":\"\u231D\",\"urcrop\":\"\u230E\",\"Uring\":\"\u016E\",\"uring\":\"\u016F\",\"urtri\":\"\u25F9\",\"Uscr\":\"\uD835\uDCB0\",\"uscr\":\"\uD835\uDCCA\",\"utdot\":\"\u22F0\",\"Utilde\":\"\u0168\",\"utilde\":\"\u0169\",\"utri\":\"\u25B5\",\"utrif\":\"\u25B4\",\"uuarr\":\"\u21C8\",\"Uuml\":\"\u00DC\",\"uuml\":\"\u00FC\",\"uwangle\":\"\u29A7\",\"vangrt\":\"\u299C\",\"varepsilon\":\"\u03F5\",\"varkappa\":\"\u03F0\",\"varnothing\":\"\u2205\",\"varphi\":\"\u03D5\",\"varpi\":\"\u03D6\",\"varpropto\":\"\u221D\",\"varr\":\"\u2195\",\"vArr\":\"\u21D5\",\"varrho\":\"\u03F1\",\"varsigma\":\"\u03C2\",\"varsubsetneq\":\"\u228A\uFE00\",\"varsubsetneqq\":\"\u2ACB\uFE00\",\"varsupsetneq\":\"\u228B\uFE00\",\"varsupsetneqq\":\"\u2ACC\uFE00\",\"vartheta\":\"\u03D1\",\"vartriangleleft\":\"\u22B2\",\"vartriangleright\":\"\u22B3\",\"vBar\":\"\u2AE8\",\"Vbar\":\"\u2AEB\",\"vBarv\":\"\u2AE9\",\"Vcy\":\"\u0412\",\"vcy\":\"\u0432\",\"vdash\":\"\u22A2\",\"vDash\":\"\u22A8\",\"Vdash\":\"\u22A9\",\"VDash\":\"\u22AB\",\"Vdashl\":\"\u2AE6\",\"veebar\":\"\u22BB\",\"vee\":\"\u2228\",\"Vee\":\"\u22C1\",\"veeeq\":\"\u225A\",\"vellip\":\"\u22EE\",\"verbar\":\"|\",\"Verbar\":\"\u2016\",\"vert\":\"|\",\"Vert\":\"\u2016\",\"VerticalBar\":\"\u2223\",\"VerticalLine\":\"|\",\"VerticalSeparator\":\"\u2758\",\"VerticalTilde\":\"\u2240\",\"VeryThinSpace\":\"\u200A\",\"Vfr\":\"\uD835\uDD19\",\"vfr\":\"\uD835\uDD33\",\"vltri\":\"\u22B2\",\"vnsub\":\"\u2282\u20D2\",\"vnsup\":\"\u2283\u20D2\",\"Vopf\":\"\uD835\uDD4D\",\"vopf\":\"\uD835\uDD67\",\"vprop\":\"\u221D\",\"vrtri\":\"\u22B3\",\"Vscr\":\"\uD835\uDCB1\",\"vscr\":\"\uD835\uDCCB\",\"vsubnE\":\"\u2ACB\uFE00\",\"vsubne\":\"\u228A\uFE00\",\"vsupnE\":\"\u2ACC\uFE00\",\"vsupne\":\"\u228B\uFE00\",\"Vvdash\":\"\u22AA\",\"vzigzag\":\"\u299A\",\"Wcirc\":\"\u0174\",\"wcirc\":\"\u0175\",\"wedbar\":\"\u2A5F\",\"wedge\":\"\u2227\",\"Wedge\":\"\u22C0\",\"wedgeq\":\"\u2259\",\"weierp\":\"\u2118\",\"Wfr\":\"\uD835\uDD1A\",\"wfr\":\"\uD835\uDD34\",\"Wopf\":\"\uD835\uDD4E\",\"wopf\":\"\uD835\uDD68\",\"wp\":\"\u2118\",\"wr\":\"\u2240\",\"wreath\":\"\u2240\",\"Wscr\":\"\uD835\uDCB2\",\"wscr\":\"\uD835\uDCCC\",\"xcap\":\"\u22C2\",\"xcirc\":\"\u25EF\",\"xcup\":\"\u22C3\",\"xdtri\":\"\u25BD\",\"Xfr\":\"\uD835\uDD1B\",\"xfr\":\"\uD835\uDD35\",\"xharr\":\"\u27F7\",\"xhArr\":\"\u27FA\",\"Xi\":\"\u039E\",\"xi\":\"\u03BE\",\"xlarr\":\"\u27F5\",\"xlArr\":\"\u27F8\",\"xmap\":\"\u27FC\",\"xnis\":\"\u22FB\",\"xodot\":\"\u2A00\",\"Xopf\":\"\uD835\uDD4F\",\"xopf\":\"\uD835\uDD69\",\"xoplus\":\"\u2A01\",\"xotime\":\"\u2A02\",\"xrarr\":\"\u27F6\",\"xrArr\":\"\u27F9\",\"Xscr\":\"\uD835\uDCB3\",\"xscr\":\"\uD835\uDCCD\",\"xsqcup\":\"\u2A06\",\"xuplus\":\"\u2A04\",\"xutri\":\"\u25B3\",\"xvee\":\"\u22C1\",\"xwedge\":\"\u22C0\",\"Yacute\":\"\u00DD\",\"yacute\":\"\u00FD\",\"YAcy\":\"\u042F\",\"yacy\":\"\u044F\",\"Ycirc\":\"\u0176\",\"ycirc\":\"\u0177\",\"Ycy\":\"\u042B\",\"ycy\":\"\u044B\",\"yen\":\"\u00A5\",\"Yfr\":\"\uD835\uDD1C\",\"yfr\":\"\uD835\uDD36\",\"YIcy\":\"\u0407\",\"yicy\":\"\u0457\",\"Yopf\":\"\uD835\uDD50\",\"yopf\":\"\uD835\uDD6A\",\"Yscr\":\"\uD835\uDCB4\",\"yscr\":\"\uD835\uDCCE\",\"YUcy\":\"\u042E\",\"yucy\":\"\u044E\",\"yuml\":\"\u00FF\",\"Yuml\":\"\u0178\",\"Zacute\":\"\u0179\",\"zacute\":\"\u017A\",\"Zcaron\":\"\u017D\",\"zcaron\":\"\u017E\",\"Zcy\":\"\u0417\",\"zcy\":\"\u0437\",\"Zdot\":\"\u017B\",\"zdot\":\"\u017C\",\"zeetrf\":\"\u2128\",\"ZeroWidthSpace\":\"\u200B\",\"Zeta\":\"\u0396\",\"zeta\":\"\u03B6\",\"zfr\":\"\uD835\uDD37\",\"Zfr\":\"\u2128\",\"ZHcy\":\"\u0416\",\"zhcy\":\"\u0436\",\"zigrarr\":\"\u21DD\",\"zopf\":\"\uD835\uDD6B\",\"Zopf\":\"\u2124\",\"Zscr\":\"\uD835\uDCB5\",\"zscr\":\"\uD835\uDCCF\",\"zwj\":\"\u200D\",\"zwnj\":\"\u200C\"}\n", "// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n", "module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/", "\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n", "\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n", "\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n", "'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n", "module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/", "module.exports=/[\\0-\\x1F\\x7F-\\x9F]/", "module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/", "module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/", "'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n", "// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 '\u1E9E'.toLowerCase() === '\u1E7E', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('\u1E9E'.toLowerCase() === '\u1E7E') {\n    str = str.replace(/\u1E9E/g, '\u00DF');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // \u0130, \u03F4, \u1E9E, \u2126, \u212A, \u212B - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (\u0398), U+03f4 (\u03F4) and lowercase U+03b8 (\u03B8), U+03d1 (\u03D1)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change \u03D1 (it's already lowercase),\n  // and .toUpperCase() doesn't change \u03F4 (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n", "// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n", "// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, start, max) {\n  var code, level,\n      pos = start,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3C /* < */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break; }\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) { return result; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n", "// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, start, max) {\n  var code,\n      marker,\n      lines = 0,\n      pos = start,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n", "// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n", "/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n", "/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n", "// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n", "'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n", "'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n", "// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1);\n        }\n\n        for (ln = 0; ln < links.length; ln++) {\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n", "// Simple typographic replacements\n//\n// (c) (C) \u2192 \u00A9\n// (tm) (TM) \u2192 \u2122\n// (r) (R) \u2192 \u00AE\n// +- \u2192 \u00B1\n// ... \u2192 \u2026 (also ?.... \u2192 ?.., !.... \u2192 !..)\n// ???????? \u2192 ???, !!!!! \u2192 !!!, `,,` \u2192 `,`\n// -- \u2192 &ndash;, --- \u2192 &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> \u00BD, \u00BC, \u00BE\n// - multiplications 2 x 4 -> 2 \u00D7 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '\u00A9',\n  r: '\u00AE',\n  tm: '\u2122'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '\u00B1')\n          // .., ..., ....... -> \u2026\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '\u2026').replace(/([?!])\u2026/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n", "// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* \u2019 */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n", "// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n'use strict';\n\n\nmodule.exports = function text_join(state) {\n  var j, l, tokens, curr, max, last,\n      blockTokens = state.tokens;\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue;\n\n    tokens = blockTokens[j].children;\n    max = tokens.length;\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text';\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr]; }\n\n        last++;\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last;\n    }\n  }\n};\n", "// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n", "// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n", "/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  [ 'text_join',      require('./rules_core/text_join')      ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n", "// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.slice(pos, max);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n", "// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n", "// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n", "// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      isOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  oldBMarks  = [];\n  oldBSCount = [];\n  oldSCount  = [];\n  oldTShift  = [];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    isOutdented = state.sCount[nextLine] < state.blkIndent;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      initial = state.sCount[nextLine] + 1;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      offset = initial;\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n", "// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n", "// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      nextLine = startLine,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[nextLine] - state.listIndent >= 4 &&\n      state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[nextLine] + state.tShift[nextLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ nextLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ nextLine, 0 ];\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[nextLine];\n    oldSCount = state.sCount[nextLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine];\n    state.sCount[nextLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[nextLine] = oldTShift;\n    state.sCount[nextLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = state.line;\n    itemLines[1] = nextLine;\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n", "'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n", "// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n", "// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?][\\\\s\\\\S]*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n", "// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n", "// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n", "// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n", "// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine, endLine) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n", "// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n", "/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i, prevLine,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    prevLine = state.line;\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\");\n        }\n        break;\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched');\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n", "// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n", "// Process links like https://example.org/\n\n'use strict';\n\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nvar SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\n\n\nmodule.exports = function linkify(state, silent) {\n  var pos, max, match, proto, link, url, fullUrl, token;\n\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n\n  pos = state.pos;\n  max = state.posMax;\n\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false;\n\n  match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n\n  proto = match[1];\n\n  link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n\n  url = link.url;\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false;\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '');\n\n  fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n\n    token         = state.push('link_open', 'a', 1);\n    token.attrs   = [ [ 'href', fullUrl ] ];\n    token.markup  = 'linkify';\n    token.info    = 'auto';\n\n    token         = state.push('text', '', 0);\n    token.content = state.md.normalizeLinkText(url);\n\n    token         = state.push('link_close', 'a', -1);\n    token.markup  = 'linkify';\n    token.info    = 'auto';\n  }\n\n  state.pos += url.length - proto.length;\n  return true;\n};\n", "// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, ws, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n", "// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch1, ch2, origStr, escapedStr, token, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false;\n  pos++;\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false;\n\n  ch1 = state.src.charCodeAt(pos);\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0);\n    }\n\n    pos++;\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos);\n      if (!isSpace(ch1)) break;\n      pos++;\n    }\n\n    state.pos = pos;\n    return true;\n  }\n\n  escapedStr = state.src[pos];\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    ch2 = state.src.charCodeAt(pos + 1);\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1];\n      pos++;\n    }\n  }\n\n  origStr = '\\\\' + escapedStr;\n\n  if (!silent) {\n    token = state.push('text_special', '', 0);\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr;\n    } else {\n      token.content = origStr;\n    }\n\n    token.markup = origStr;\n    token.info   = 'escape';\n  }\n\n  state.pos = pos + 1;\n  return true;\n};\n", "// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n", "// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n", "// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n", "// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.linkLevel++;\n    state.md.inline.tokenize(state);\n    state.linkLevel--;\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n", "// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n", "// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var url, fullUrl, token, ch, start, max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  start = state.pos;\n  max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n\n    ch = state.src.charCodeAt(pos);\n\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n\n  url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n};\n", "// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = match[0];\n\n    if (isLinkOpen(token.content))  state.linkLevel++;\n    if (isLinkClose(token.content)) state.linkLevel--;\n  }\n  state.pos += match[0].length;\n  return true;\n};\n", "// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, token, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false;\n\n  if (pos + 1 >= max) return false;\n\n  ch = state.src.charCodeAt(pos + 1);\n\n  if (ch === 0x23 /* # */) {\n    match = state.src.slice(pos).match(DIGITAL_RE);\n    if (match) {\n      if (!silent) {\n        code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n\n        token         = state.push('text_special', '', 0);\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        token.markup  = match[0];\n        token.info    = 'entity';\n      }\n      state.pos += match[0].length;\n      return true;\n    }\n  } else {\n    match = state.src.slice(pos).match(NAMED_RE);\n    if (match) {\n      if (has(entities, match[1])) {\n        if (!silent) {\n          token         = state.push('text_special', '', 0);\n          token.content = entities[match[1]];\n          token.markup  = match[0];\n          token.info    = 'entity';\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n", "// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  var headerIdx = 0;\n  var lastTokenIdx = -2; // needs any value lower than -1\n  var jumps = [];\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];\n\n    openerIdx = headerIdx - jumps[headerIdx] - 1;\n\n    newMinOpenerIdx = openerIdx;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (opener.open && opener.end < 0) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            jumps[openerIdx - 1] + 1 :\n            0;\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters);\n    }\n  }\n};\n", "// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function fragments_join(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n", "// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n", "/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'linkify',         require('./rules_inline/linkify') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  [ 'fragments_join',  require('./rules_inline/fragments_join') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) {\n        if (pos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\"); }\n        break;\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i, prevPos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    prevPos = state.pos;\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) {\n          if (prevPos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\"); }\n          break;\n        }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n", "'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n  opts = opts || {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in \"google search\" links (#66, #81).\n                                     // github has ... in commit range links,\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // - params separator\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          ',(?!' + re.src_ZCc + '|$)|' +       // allow `,,,` in paths\n          ';(?!' + re.src_ZCc + '|$)|' +       // allow `;` if not followed by space-like char\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +  // allow `!!!` in paths, but not at the end\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n", "'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test     = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) return null;\n\n  var m = this.re.schema_at_start.exec(text);\n  if (!m) return null;\n\n  var len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null;\n\n  this.__schema__     = m[2];\n  this.__index__      = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n\n  return createMatch(this, 0);\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n", "// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n", "// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n};\n", "// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n};\n", "// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `\u201C\u201D\u2018\u2019`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'\u00AB\u00BB\u201E\u201C'` for Russian, `'\u201E\u201C\u201A\u2018'` for German, and\n *   `['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n", "// Process ~subscript~\n\n'use strict';\n\n// same as UNESCAPE_MD_RE plus a space\nvar UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,.\\/:;<=>?@[\\]^_`{|}~-])/g;\n\n\nfunction subscript(state, silent) {\n  var found,\n      content,\n      token,\n      max = state.posMax,\n      start = state.pos;\n\n  if (state.src.charCodeAt(start) !== 0x7E/* ~ */) { return false; }\n  if (silent) { return false; } // don't run any pairs in validation mode\n  if (start + 2 >= max) { return false; }\n\n  state.pos = start + 1;\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 0x7E/* ~ */) {\n      found = true;\n      break;\n    }\n\n    state.md.inline.skipToken(state);\n  }\n\n  if (!found || start + 1 === state.pos) {\n    state.pos = start;\n    return false;\n  }\n\n  content = state.src.slice(start + 1, state.pos);\n\n  // don't allow unescaped spaces/newlines inside\n  if (content.match(/(^|[^\\\\])(\\\\\\\\)*\\s/)) {\n    state.pos = start;\n    return false;\n  }\n\n  // found!\n  state.posMax = state.pos;\n  state.pos = start + 1;\n\n  // Earlier we checked !silent, but this implementation does not need it\n  token         = state.push('sub_open', 'sub', 1);\n  token.markup  = '~';\n\n  token         = state.push('text', '', 0);\n  token.content = content.replace(UNESCAPE_RE, '$1');\n\n  token         = state.push('sub_close', 'sub', -1);\n  token.markup  = '~';\n\n  state.pos = state.posMax + 1;\n  state.posMax = max;\n  return true;\n}\n\n\nmodule.exports = function sub_plugin(md) {\n  md.inline.ruler.after('emphasis', 'sub', subscript);\n};\n", "// Process ^superscript^\n\n'use strict';\n\n// same as UNESCAPE_MD_RE plus a space\nvar UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,.\\/:;<=>?@[\\]^_`{|}~-])/g;\n\nfunction superscript(state, silent) {\n  var found,\n      content,\n      token,\n      max = state.posMax,\n      start = state.pos;\n\n  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }\n  if (silent) { return false; } // don't run any pairs in validation mode\n  if (start + 2 >= max) { return false; }\n\n  state.pos = start + 1;\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 0x5E/* ^ */) {\n      found = true;\n      break;\n    }\n\n    state.md.inline.skipToken(state);\n  }\n\n  if (!found || start + 1 === state.pos) {\n    state.pos = start;\n    return false;\n  }\n\n  content = state.src.slice(start + 1, state.pos);\n\n  // don't allow unescaped spaces/newlines inside\n  if (content.match(/(^|[^\\\\])(\\\\\\\\)*\\s/)) {\n    state.pos = start;\n    return false;\n  }\n\n  // found!\n  state.posMax = state.pos;\n  state.pos = start + 1;\n\n  // Earlier we checked !silent, but this implementation does not need it\n  token         = state.push('sup_open', 'sup', 1);\n  token.markup  = '^';\n\n  token         = state.push('text', '', 0);\n  token.content = content.replace(UNESCAPE_RE, '$1');\n\n  token         = state.push('sup_close', 'sup', -1);\n  token.markup  = '^';\n\n  state.pos = state.posMax + 1;\n  state.posMax = max;\n  return true;\n}\n\n\nmodule.exports = function sup_plugin(md) {\n  md.inline.ruler.after('emphasis', 'sup', superscript);\n};\n", "'use strict';\n\n\nmodule.exports = function ins_plugin(md) {\n  // Insert each marker as a separate text token, and add it to delimiter list\n  //\n  function tokenize(state, silent) {\n    var i, scanned, token, len, ch,\n        start = state.pos,\n        marker = state.src.charCodeAt(start);\n\n    if (silent) { return false; }\n\n    if (marker !== 0x3D/* = */) { return false; }\n\n    scanned = state.scanDelims(state.pos, true);\n    len = scanned.length;\n    ch = String.fromCharCode(marker);\n\n    if (len < 2) { return false; }\n\n    if (len % 2) {\n      token         = state.push('text', '', 0);\n      token.content = ch;\n      len--;\n    }\n\n    for (i = 0; i < len; i += 2) {\n      token         = state.push('text', '', 0);\n      token.content = ch + ch;\n\n      if (!scanned.can_open && !scanned.can_close) { continue; }\n\n      state.delimiters.push({\n        marker: marker,\n        length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n        jump:   i / 2, // 1 delimiter = 2 characters\n        token:  state.tokens.length - 1,\n        end:    -1,\n        open:   scanned.can_open,\n        close:  scanned.can_close\n      });\n    }\n\n    state.pos += scanned.length;\n\n    return true;\n  }\n\n\n  // Walk through delimiter list and replace text tokens with tags\n  //\n  function postProcess(state, delimiters) {\n    var i, j,\n        startDelim,\n        endDelim,\n        token,\n        loneMarkers = [],\n        max = delimiters.length;\n\n    for (i = 0; i < max; i++) {\n      startDelim = delimiters[i];\n\n      if (startDelim.marker !== 0x3D/* = */) {\n        continue;\n      }\n\n      if (startDelim.end === -1) {\n        continue;\n      }\n\n      endDelim = delimiters[startDelim.end];\n\n      token         = state.tokens[startDelim.token];\n      token.type    = 'mark_open';\n      token.tag     = 'mark';\n      token.nesting = 1;\n      token.markup  = '==';\n      token.content = '';\n\n      token         = state.tokens[endDelim.token];\n      token.type    = 'mark_close';\n      token.tag     = 'mark';\n      token.nesting = -1;\n      token.markup  = '==';\n      token.content = '';\n\n      if (state.tokens[endDelim.token - 1].type === 'text' &&\n          state.tokens[endDelim.token - 1].content === '=') {\n\n        loneMarkers.push(endDelim.token - 1);\n      }\n    }\n\n    // If a marker sequence has an odd number of characters, it's splitted\n    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n    // start of the sequence.\n    //\n    // So, we have to move all those markers after subsequent s_close tags.\n    //\n    while (loneMarkers.length) {\n      i = loneMarkers.pop();\n      j = i + 1;\n\n      while (j < state.tokens.length && state.tokens[j].type === 'mark_close') {\n        j++;\n      }\n\n      j--;\n\n      if (i !== j) {\n        token = state.tokens[j];\n        state.tokens[j] = state.tokens[i];\n        state.tokens[i] = token;\n      }\n    }\n  }\n\n  md.inline.ruler.before('emphasis', 'mark', tokenize);\n  md.inline.ruler2.before('emphasis', 'mark', function (state) {\n    var curr,\n        tokens_meta = state.tokens_meta,\n        max = (state.tokens_meta || []).length;\n\n    postProcess(state, state.delimiters);\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n        postProcess(state, tokens_meta[curr].delimiters);\n      }\n    }\n  });\n};\n", "// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n", "const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nconst badChars = /[&<>\"'`=]/g,\n  possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj /* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nlet isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return (\n      typeof value === 'function' &&\n      toString.call(value) === '[object Function]'\n    );\n  };\n}\nexport { isFunction };\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nexport const isArray =\n  Array.isArray ||\n  function(value) {\n    return value && typeof value === 'object'\n      ? toString.call(value) === '[object Array]'\n      : false;\n  };\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function createFrame(object) {\n  let frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n", "const errorProps = [\n  'description',\n  'fileName',\n  'lineNumber',\n  'endLineNumber',\n  'message',\n  'name',\n  'number',\n  'stack'\n];\n\nfunction Exception(message, node) {\n  let loc = node && node.loc,\n    line,\n    endLineNumber,\n    column,\n    endColumn;\n\n  if (loc) {\n    line = loc.start.line;\n    endLineNumber = loc.end.line;\n    column = loc.start.column;\n    endColumn = loc.end.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  let tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n      this.endLineNumber = endLineNumber;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'endColumn', {\n          value: endColumn,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n        this.endColumn = endColumn;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexport default Exception;\n", "import { appendContextPath, createFrame, isArray } from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n      fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.name\n        );\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n", "import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isArray,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n      inverse = options.inverse,\n      i = 0,\n      ret = '',\n      data,\n      contextPath;\n\n    if (options.data && options.ids) {\n      contextPath =\n        appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret =\n        ret +\n        fn(context[field], {\n          data: data,\n          blockParams: blockParams(\n            [context[field], field],\n            [contextPath + field, null]\n          )\n        });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (typeof Symbol === 'function' && context[Symbol.iterator]) {\n        const newContext = [];\n        const iterator = context[Symbol.iterator]();\n        for (let it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n        context = newContext;\n        for (let j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        let priorKey;\n\n        Object.keys(context).forEach(key => {\n          // We're running the iterations one step out of sync so we can detect\n          // the last iteration without have to scan the object twice and create\n          // an itermediate keys array.\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1);\n          }\n          priorKey = key;\n          i++;\n        });\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n", "import Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('helperMissing', function(/* [args, ]options */) {\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new Exception(\n        'Missing helper: \"' + arguments[arguments.length - 1].name + '\"'\n      );\n    }\n  });\n}\n", "import { isEmpty, isFunction } from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#if requires exactly one argument');\n    }\n    if (isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n}\n", "export default function(instance) {\n  instance.registerHelper('log', function(/* message, options */) {\n    let args = [undefined],\n      options = arguments[arguments.length - 1];\n    for (let i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    let level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log(...args);\n  });\n}\n", "export default function(instance) {\n  instance.registerHelper('lookup', function(obj, field, options) {\n    if (!obj) {\n      // Note for 5.0: Change to \"obj == null\" in 5.0\n      return obj;\n    }\n    return options.lookupProperty(obj, field);\n  });\n}\n", "import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isEmpty,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('with', function(context, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#with requires exactly one argument');\n    }\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    let fn = options.fn;\n\n    if (!isEmpty(context)) {\n      let data = options.data;\n      if (options.data && options.ids) {\n        data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.ids[0]\n        );\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n}\n", "import registerBlockHelperMissing from './helpers/block-helper-missing';\nimport registerEach from './helpers/each';\nimport registerHelperMissing from './helpers/helper-missing';\nimport registerIf from './helpers/if';\nimport registerLog from './helpers/log';\nimport registerLookup from './helpers/lookup';\nimport registerWith from './helpers/with';\n\nexport function registerDefaultHelpers(instance) {\n  registerBlockHelperMissing(instance);\n  registerEach(instance);\n  registerHelperMissing(instance);\n  registerIf(instance);\n  registerLog(instance);\n  registerLookup(instance);\n  registerWith(instance);\n}\n\nexport function moveHelperToHooks(instance, helperName, keepHelper) {\n  if (instance.helpers[helperName]) {\n    instance.hooks[helperName] = instance.helpers[helperName];\n    if (!keepHelper) {\n      delete instance.helpers[helperName];\n    }\n  }\n}\n", "import { extend } from '../utils';\n\nexport default function(instance) {\n  instance.registerDecorator('inline', function(fn, props, container, options) {\n    let ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function(context, options) {\n        // Create a new partials stack frame prior to exec.\n        let original = container.partials;\n        container.partials = extend({}, original, props.partials);\n        let ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n}\n", "import registerInline from './decorators/inline';\n\nexport function registerDefaultDecorators(instance) {\n  registerInline(instance);\n}\n", "import { indexOf } from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (\n      typeof console !== 'undefined' &&\n      logger.lookupLevel(logger.level) <= level\n    ) {\n      let method = logger.methodMap[level];\n      // eslint-disable-next-line no-console\n      if (!console[method]) {\n        method = 'log';\n      }\n      console[method](...message); // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n", "import { extend } from '../utils';\n\n/**\n * Create a new object with \"null\"-prototype to avoid truthy results on prototype properties.\n * The resulting object can be used with \"object[property]\" to check if a property exists\n * @param {...object} sources a varargs parameter of source objects that will be merged\n * @returns {object}\n */\nexport function createNewLookupObject(...sources) {\n  return extend(Object.create(null), ...sources);\n}\n", "import { createNewLookupObject } from './create-new-lookup-object';\nimport logger from '../logger';\n\nconst loggedProperties = Object.create(null);\n\nexport function createProtoAccessControl(runtimeOptions) {\n  let defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n\n  let defaultPropertyWhiteList = Object.create(null);\n  // eslint-disable-next-line no-proto\n  defaultPropertyWhiteList['__proto__'] = false;\n\n  return {\n    properties: {\n      whitelist: createNewLookupObject(\n        defaultPropertyWhiteList,\n        runtimeOptions.allowedProtoProperties\n      ),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: createNewLookupObject(\n        defaultMethodWhiteList,\n        runtimeOptions.allowedProtoMethods\n      ),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nexport function resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    logger.log(\n      'error',\n      `Handlebars: Access has been denied to resolve the property \"${propertyName}\" because it is not an \"own property\" of its parent.\\n` +\n        `You can add a runtime option to disable the check or this warning:\\n` +\n        `See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details`\n    );\n  }\n}\n\nexport function resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(propertyName => {\n    delete loggedProperties[propertyName];\n  });\n}\n", "import { createFrame, extend, toString } from './utils';\nimport Exception from './exception';\nimport { registerDefaultHelpers } from './helpers';\nimport { registerDefaultDecorators } from './decorators';\nimport logger from './logger';\nimport { resetLoggedProperties } from './internal/proto-access';\n\nexport const VERSION = '4.7.8';\nexport const COMPILER_REVISION = 8;\nexport const LAST_COMPATIBLE_COMPILER_REVISION = 7;\n\nexport const REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0 <4.3.0',\n  8: '>= 4.3.0'\n};\n\nconst objectType = '[object Object]';\n\nexport function HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  registerDefaultHelpers(this);\n  registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: logger,\n  log: logger.log,\n\n  registerHelper: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) {\n        throw new Exception('Arg not supported with multiple helpers');\n      }\n      extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function(name, partial) {\n    if (toString.call(name) === objectType) {\n      extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new Exception(\n          `Attempting to register a partial called \"${name}\" as undefined`\n        );\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) {\n        throw new Exception('Arg not supported with multiple decorators');\n      }\n      extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function(name) {\n    delete this.decorators[name];\n  },\n  /**\n   * Reset the memory of illegal property accesses that have already been logged.\n   * @deprecated should only be used in handlebars test-cases\n   */\n  resetLoggedPropertyAccesses() {\n    resetLoggedProperties();\n  }\n};\n\nexport let log = logger.log;\n\nexport { createFrame, logger };\n", "// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function() {\n  return '' + this.string;\n};\n\nexport default SafeString;\n", "export function wrapHelper(helper, transformOptionsFn) {\n  if (typeof helper !== 'function') {\n    // This should not happen, but apparently it does in https://github.com/wycats/handlebars.js/issues/1639\n    // We try to make the wrapper least-invasive by not wrapping it, if the helper is not a function.\n    return helper;\n  }\n  let wrapper = function(/* dynamic arguments */) {\n    const options = arguments[arguments.length - 1];\n    arguments[arguments.length - 1] = transformOptionsFn(options);\n    return helper.apply(this, arguments);\n  };\n  return wrapper;\n}\n", "import * as Utils from './utils';\nimport Exception from './exception';\nimport {\n  COMPILER_REVISION,\n  createFrame,\n  LAST_COMPATIBLE_COMPILER_REVISION,\n  REVISION_CHANGES\n} from './base';\nimport { moveHelperToHooks } from './helpers';\nimport { wrapHelper } from './internal/wrapHelper';\nimport {\n  createProtoAccessControl,\n  resultIsAllowed\n} from './internal/proto-access';\n\nexport function checkRevision(compilerInfo) {\n  const compilerRevision = (compilerInfo && compilerInfo[0]) || 1,\n    currentRevision = COMPILER_REVISION;\n\n  if (\n    compilerRevision >= LAST_COMPATIBLE_COMPILER_REVISION &&\n    compilerRevision <= COMPILER_REVISION\n  ) {\n    return;\n  }\n\n  if (compilerRevision < LAST_COMPATIBLE_COMPILER_REVISION) {\n    const runtimeVersions = REVISION_CHANGES[currentRevision],\n      compilerVersions = REVISION_CHANGES[compilerRevision];\n    throw new Exception(\n      'Template was precompiled with an older version of Handlebars than the current runtime. ' +\n        'Please update your precompiler to a newer version (' +\n        runtimeVersions +\n        ') or downgrade your runtime to an older version (' +\n        compilerVersions +\n        ').'\n    );\n  } else {\n    // Use the embedded version info since the runtime doesn't know about this revision yet\n    throw new Exception(\n      'Template was precompiled with a newer version of Handlebars than the current runtime. ' +\n        'Please update your runtime to a newer version (' +\n        compilerInfo[1] +\n        ').'\n    );\n  }\n}\n\nexport function template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new Exception('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new Exception('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as pseudo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)\n  const templateWasPrecompiledWithCompilerV7 =\n    templateSpec.compiler && templateSpec.compiler[0] === 7;\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n\n    let extendedOptions = Utils.extend({}, options, {\n      hooks: this.hooks,\n      protoAccessControl: this.protoAccessControl\n    });\n\n    let result = env.VM.invokePartial.call(\n      this,\n      partial,\n      context,\n      extendedOptions\n    );\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(\n        partial,\n        templateSpec.compilerOptions,\n        env\n      );\n      result = options.partials[options.name](context, extendedOptions);\n    }\n    if (result != null) {\n      if (options.indent) {\n        let lines = result.split('\\n');\n        for (let i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new Exception(\n        'The partial ' +\n          options.name +\n          ' could not be compiled when running in runtime-only mode'\n      );\n    }\n  }\n\n  // Just add water\n  let container = {\n    strict: function(obj, name, loc) {\n      if (!obj || !(name in obj)) {\n        throw new Exception('\"' + name + '\" not defined in ' + obj, {\n          loc: loc\n        });\n      }\n      return container.lookupProperty(obj, name);\n    },\n    lookupProperty: function(parent, propertyName) {\n      let result = parent[propertyName];\n      if (result == null) {\n        return result;\n      }\n      if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n        return result;\n      }\n\n      if (resultIsAllowed(result, container.protoAccessControl, propertyName)) {\n        return result;\n      }\n      return undefined;\n    },\n    lookup: function(depths, name) {\n      const len = depths.length;\n      for (let i = 0; i < len; i++) {\n        let result = depths[i] && container.lookupProperty(depths[i], name);\n        if (result != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function(i) {\n      let ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function(i, data, declaredBlockParams, blockParams, depths) {\n      let programWrapper = this.programs[i],\n        fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(\n          this,\n          i,\n          fn,\n          data,\n          declaredBlockParams,\n          blockParams,\n          depths\n        );\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    mergeIfNeeded: function(param, common) {\n      let obj = param || common;\n\n      if (param && common && param !== common) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n    // An empty object to use as replacement for null-contexts\n    nullContext: Object.seal({}),\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context, options = {}) {\n    let data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    let depths,\n      blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths =\n          context != options.depths[0]\n            ? [context].concat(options.depths)\n            : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context /*, options*/) {\n      return (\n        '' +\n        templateSpec.main(\n          container,\n          context,\n          container.helpers,\n          container.partials,\n          data,\n          blockParams,\n          depths\n        )\n      );\n    }\n\n    main = executeDecorators(\n      templateSpec.main,\n      main,\n      container,\n      options.depths || [],\n      data,\n      blockParams\n    );\n    return main(context, options);\n  }\n\n  ret.isTop = true;\n\n  ret._setup = function(options) {\n    if (!options.partial) {\n      let mergedHelpers = Utils.extend({}, env.helpers, options.helpers);\n      wrapHelpersToPassLookupProperty(mergedHelpers, container);\n      container.helpers = mergedHelpers;\n\n      if (templateSpec.usePartial) {\n        // Use mergeIfNeeded here to prevent compiling global partials multiple times\n        container.partials = container.mergeIfNeeded(\n          options.partials,\n          env.partials\n        );\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = Utils.extend(\n          {},\n          env.decorators,\n          options.decorators\n        );\n      }\n\n      container.hooks = {};\n      container.protoAccessControl = createProtoAccessControl(options);\n\n      let keepHelperInHelpers =\n        options.allowCallsToHelperMissing ||\n        templateWasPrecompiledWithCompilerV7;\n      moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);\n      moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);\n    } else {\n      container.protoAccessControl = options.protoAccessControl; // internal option\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n      container.hooks = options.hooks;\n    }\n  };\n\n  ret._child = function(i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new Exception('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new Exception('must pass parent depths');\n    }\n\n    return wrapProgram(\n      container,\n      i,\n      templateSpec[i],\n      data,\n      0,\n      blockParams,\n      depths\n    );\n  };\n  return ret;\n}\n\nexport function wrapProgram(\n  container,\n  i,\n  fn,\n  data,\n  declaredBlockParams,\n  blockParams,\n  depths\n) {\n  function prog(context, options = {}) {\n    let currentDepths = depths;\n    if (\n      depths &&\n      context != depths[0] &&\n      !(context === container.nullContext && depths[0] === null)\n    ) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(\n      container,\n      context,\n      container.helpers,\n      container.partials,\n      options.data || data,\n      blockParams && [options.blockParams].concat(blockParams),\n      currentDepths\n    );\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\n/**\n * This is currently part of the official API, therefore implementation details should not be changed.\n */\nexport function resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      partial = options.data['partial-block'];\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nexport function invokePartial(partial, context, options) {\n  // Use the current closure context to save the partial-block if this partial\n  const currentPartialBlock = options.data && options.data['partial-block'];\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  let partialBlock;\n  if (options.fn && options.fn !== noop) {\n    options.data = createFrame(options.data);\n    // Wrapper function to get access to currentPartialBlock from the closure\n    let fn = options.fn;\n    partialBlock = options.data['partial-block'] = function partialBlockWrapper(\n      context,\n      options = {}\n    ) {\n      // Restore the partial-block from the closure for the execution of the block\n      // i.e. the part inside the block of the partial call.\n      options.data = createFrame(options.data);\n      options.data['partial-block'] = currentPartialBlock;\n      return fn(context, options);\n    };\n    if (fn.partials) {\n      options.partials = Utils.extend({}, options.partials, fn.partials);\n    }\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new Exception('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nexport function noop() {\n  return '';\n}\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    let props = {};\n    prog = fn.decorator(\n      prog,\n      props,\n      container,\n      depths && depths[0],\n      data,\n      blockParams,\n      depths\n    );\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n\nfunction wrapHelpersToPassLookupProperty(mergedHelpers, container) {\n  Object.keys(mergedHelpers).forEach(helperName => {\n    let helper = mergedHelpers[helperName];\n    mergedHelpers[helperName] = passLookupPropertyOption(helper, container);\n  });\n}\n\nfunction passLookupPropertyOption(helper, container) {\n  const lookupProperty = container.lookupProperty;\n  return wrapHelper(helper, options => {\n    return Utils.extend({ lookupProperty }, options);\n  });\n}\n", "/* global globalThis */\nexport default function(Handlebars) {\n  /* istanbul ignore next */\n  // https://mathiasbynens.be/notes/globalthis\n  (function() {\n    if (typeof globalThis === 'object') return;\n    Object.prototype.__defineGetter__('__magic__', function() {\n      return this;\n    });\n    __magic__.globalThis = __magic__; // eslint-disable-line no-undef\n    delete Object.prototype.__magic__;\n  })();\n\n  const $Handlebars = globalThis.Handlebars;\n\n  /* istanbul ignore next */\n  Handlebars.noConflict = function() {\n    if (globalThis.Handlebars === Handlebars) {\n      globalThis.Handlebars = $Handlebars;\n    }\n    return Handlebars;\n  };\n}\n", "import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n", "let AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function(node) {\n      return (\n        node.type === 'SubExpression' ||\n        ((node.type === 'MustacheStatement' ||\n          node.type === 'BlockStatement') &&\n          !!((node.params && node.params.length) || node.hash))\n      );\n    },\n\n    scopedId: function(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function(path) {\n      return (\n        path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth\n      );\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexport default AST;\n", "// File ignored in coverage tests via setting in .istanbul.yml\n/* Jison generated parser */\nvar handlebars = (function(){\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"root\":3,\"program\":4,\"EOF\":5,\"program_repetition0\":6,\"statement\":7,\"mustache\":8,\"block\":9,\"rawBlock\":10,\"partial\":11,\"partialBlock\":12,\"content\":13,\"COMMENT\":14,\"CONTENT\":15,\"openRawBlock\":16,\"rawBlock_repetition0\":17,\"END_RAW_BLOCK\":18,\"OPEN_RAW_BLOCK\":19,\"helperName\":20,\"openRawBlock_repetition0\":21,\"openRawBlock_option0\":22,\"CLOSE_RAW_BLOCK\":23,\"openBlock\":24,\"block_option0\":25,\"closeBlock\":26,\"openInverse\":27,\"block_option1\":28,\"OPEN_BLOCK\":29,\"openBlock_repetition0\":30,\"openBlock_option0\":31,\"openBlock_option1\":32,\"CLOSE\":33,\"OPEN_INVERSE\":34,\"openInverse_repetition0\":35,\"openInverse_option0\":36,\"openInverse_option1\":37,\"openInverseChain\":38,\"OPEN_INVERSE_CHAIN\":39,\"openInverseChain_repetition0\":40,\"openInverseChain_option0\":41,\"openInverseChain_option1\":42,\"inverseAndProgram\":43,\"INVERSE\":44,\"inverseChain\":45,\"inverseChain_option0\":46,\"OPEN_ENDBLOCK\":47,\"OPEN\":48,\"mustache_repetition0\":49,\"mustache_option0\":50,\"OPEN_UNESCAPED\":51,\"mustache_repetition1\":52,\"mustache_option1\":53,\"CLOSE_UNESCAPED\":54,\"OPEN_PARTIAL\":55,\"partialName\":56,\"partial_repetition0\":57,\"partial_option0\":58,\"openPartialBlock\":59,\"OPEN_PARTIAL_BLOCK\":60,\"openPartialBlock_repetition0\":61,\"openPartialBlock_option0\":62,\"param\":63,\"sexpr\":64,\"OPEN_SEXPR\":65,\"sexpr_repetition0\":66,\"sexpr_option0\":67,\"CLOSE_SEXPR\":68,\"hash\":69,\"hash_repetition_plus0\":70,\"hashSegment\":71,\"ID\":72,\"EQUALS\":73,\"blockParams\":74,\"OPEN_BLOCK_PARAMS\":75,\"blockParams_repetition_plus0\":76,\"CLOSE_BLOCK_PARAMS\":77,\"path\":78,\"dataName\":79,\"STRING\":80,\"NUMBER\":81,\"BOOLEAN\":82,\"UNDEFINED\":83,\"NULL\":84,\"DATA\":85,\"pathSegments\":86,\"SEP\":87,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",14:\"COMMENT\",15:\"CONTENT\",18:\"END_RAW_BLOCK\",19:\"OPEN_RAW_BLOCK\",23:\"CLOSE_RAW_BLOCK\",29:\"OPEN_BLOCK\",33:\"CLOSE\",34:\"OPEN_INVERSE\",39:\"OPEN_INVERSE_CHAIN\",44:\"INVERSE\",47:\"OPEN_ENDBLOCK\",48:\"OPEN\",51:\"OPEN_UNESCAPED\",54:\"CLOSE_UNESCAPED\",55:\"OPEN_PARTIAL\",60:\"OPEN_PARTIAL_BLOCK\",65:\"OPEN_SEXPR\",68:\"CLOSE_SEXPR\",72:\"ID\",73:\"EQUALS\",75:\"OPEN_BLOCK_PARAMS\",77:\"CLOSE_BLOCK_PARAMS\",80:\"STRING\",81:\"NUMBER\",82:\"BOOLEAN\",83:\"UNDEFINED\",84:\"NULL\",85:\"DATA\",87:\"SEP\"},\nproductions_: [0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,0],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],\nperformAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$\n) {\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: return $$[$0-1]; \nbreak;\ncase 2:this.$ = yy.prepareProgram($$[$0]);\nbreak;\ncase 3:this.$ = $$[$0];\nbreak;\ncase 4:this.$ = $$[$0];\nbreak;\ncase 5:this.$ = $$[$0];\nbreak;\ncase 6:this.$ = $$[$0];\nbreak;\ncase 7:this.$ = $$[$0];\nbreak;\ncase 8:this.$ = $$[$0];\nbreak;\ncase 9:\n    this.$ = {\n      type: 'CommentStatement',\n      value: yy.stripComment($$[$0]),\n      strip: yy.stripFlags($$[$0], $$[$0]),\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 10:\n    this.$ = {\n      type: 'ContentStatement',\n      original: $$[$0],\n      value: $$[$0],\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 11:this.$ = yy.prepareRawBlock($$[$0-2], $$[$0-1], $$[$0], this._$);\nbreak;\ncase 12:this.$ = { path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1] };\nbreak;\ncase 13:this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], false, this._$);\nbreak;\ncase 14:this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], true, this._$);\nbreak;\ncase 15:this.$ = { open: $$[$0-5], path: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], blockParams: $$[$0-1], strip: yy.stripFlags($$[$0-5], $$[$0]) };\nbreak;\ncase 16:this.$ = { path: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], blockParams: $$[$0-1], strip: yy.stripFlags($$[$0-5], $$[$0]) };\nbreak;\ncase 17:this.$ = { path: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], blockParams: $$[$0-1], strip: yy.stripFlags($$[$0-5], $$[$0]) };\nbreak;\ncase 18:this.$ = { strip: yy.stripFlags($$[$0-1], $$[$0-1]), program: $$[$0] };\nbreak;\ncase 19:\n    var inverse = yy.prepareBlock($$[$0-2], $$[$0-1], $$[$0], $$[$0], false, this._$),\n        program = yy.prepareProgram([inverse], $$[$0-1].loc);\n    program.chained = true;\n\n    this.$ = { strip: $$[$0-2].strip, program: program, chain: true };\n  \nbreak;\ncase 20:this.$ = $$[$0];\nbreak;\ncase 21:this.$ = {path: $$[$0-1], strip: yy.stripFlags($$[$0-2], $$[$0])};\nbreak;\ncase 22:this.$ = yy.prepareMustache($$[$0-3], $$[$0-2], $$[$0-1], $$[$0-4], yy.stripFlags($$[$0-4], $$[$0]), this._$);\nbreak;\ncase 23:this.$ = yy.prepareMustache($$[$0-3], $$[$0-2], $$[$0-1], $$[$0-4], yy.stripFlags($$[$0-4], $$[$0]), this._$);\nbreak;\ncase 24:\n    this.$ = {\n      type: 'PartialStatement',\n      name: $$[$0-3],\n      params: $$[$0-2],\n      hash: $$[$0-1],\n      indent: '',\n      strip: yy.stripFlags($$[$0-4], $$[$0]),\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 25:this.$ = yy.preparePartialBlock($$[$0-2], $$[$0-1], $$[$0], this._$);\nbreak;\ncase 26:this.$ = { path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1], strip: yy.stripFlags($$[$0-4], $$[$0]) };\nbreak;\ncase 27:this.$ = $$[$0];\nbreak;\ncase 28:this.$ = $$[$0];\nbreak;\ncase 29:\n    this.$ = {\n      type: 'SubExpression',\n      path: $$[$0-3],\n      params: $$[$0-2],\n      hash: $$[$0-1],\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 30:this.$ = {type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$)};\nbreak;\ncase 31:this.$ = {type: 'HashPair', key: yy.id($$[$0-2]), value: $$[$0], loc: yy.locInfo(this._$)};\nbreak;\ncase 32:this.$ = yy.id($$[$0-1]);\nbreak;\ncase 33:this.$ = $$[$0];\nbreak;\ncase 34:this.$ = $$[$0];\nbreak;\ncase 35:this.$ = {type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$)};\nbreak;\ncase 36:this.$ = {type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$)};\nbreak;\ncase 37:this.$ = {type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$)};\nbreak;\ncase 38:this.$ = {type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$)};\nbreak;\ncase 39:this.$ = {type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$)};\nbreak;\ncase 40:this.$ = $$[$0];\nbreak;\ncase 41:this.$ = $$[$0];\nbreak;\ncase 42:this.$ = yy.preparePath(true, $$[$0], this._$);\nbreak;\ncase 43:this.$ = yy.preparePath(false, $$[$0], this._$);\nbreak;\ncase 44: $$[$0-2].push({part: yy.id($$[$0]), original: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; \nbreak;\ncase 45:this.$ = [{part: yy.id($$[$0]), original: $$[$0]}];\nbreak;\ncase 46:this.$ = [];\nbreak;\ncase 47:$$[$0-1].push($$[$0]);\nbreak;\ncase 48:this.$ = [];\nbreak;\ncase 49:$$[$0-1].push($$[$0]);\nbreak;\ncase 50:this.$ = [];\nbreak;\ncase 51:$$[$0-1].push($$[$0]);\nbreak;\ncase 58:this.$ = [];\nbreak;\ncase 59:$$[$0-1].push($$[$0]);\nbreak;\ncase 64:this.$ = [];\nbreak;\ncase 65:$$[$0-1].push($$[$0]);\nbreak;\ncase 70:this.$ = [];\nbreak;\ncase 71:$$[$0-1].push($$[$0]);\nbreak;\ncase 78:this.$ = [];\nbreak;\ncase 79:$$[$0-1].push($$[$0]);\nbreak;\ncase 82:this.$ = [];\nbreak;\ncase 83:$$[$0-1].push($$[$0]);\nbreak;\ncase 86:this.$ = [];\nbreak;\ncase 87:$$[$0-1].push($$[$0]);\nbreak;\ncase 90:this.$ = [];\nbreak;\ncase 91:$$[$0-1].push($$[$0]);\nbreak;\ncase 94:this.$ = [];\nbreak;\ncase 95:$$[$0-1].push($$[$0]);\nbreak;\ncase 98:this.$ = [$$[$0]];\nbreak;\ncase 99:$$[$0-1].push($$[$0]);\nbreak;\ncase 100:this.$ = [$$[$0]];\nbreak;\ncase 101:$$[$0-1].push($$[$0]);\nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{15:[2,48],17:39,18:[2,48]},{20:41,56:40,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:44,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:45,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:41,56:48,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:49,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,50]},{72:[1,35],86:51},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:52,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:53,38:55,39:[1,57],43:56,44:[1,58],45:54,47:[2,54]},{28:59,43:60,44:[1,58],47:[2,56]},{13:62,15:[1,20],18:[1,61]},{33:[2,86],57:63,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:64,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:65,47:[1,66]},{30:67,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:68,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:69,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:70,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:74,33:[2,80],50:71,63:72,64:75,65:[1,43],69:73,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,79]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,50]},{20:74,53:80,54:[2,84],63:81,64:75,65:[1,43],69:82,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:83,47:[1,66]},{47:[2,55]},{4:84,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:85,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:86,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:87,47:[1,66]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:74,33:[2,88],58:88,63:89,64:75,65:[1,43],69:90,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:91,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:92,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,31:93,33:[2,60],63:94,64:75,65:[1,43],69:95,70:76,71:77,72:[1,78],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,66],36:96,63:97,64:75,65:[1,43],69:98,70:76,71:77,72:[1,78],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,22:99,23:[2,52],63:100,64:75,65:[1,43],69:101,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,92],62:102,63:103,64:75,65:[1,43],69:104,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,105]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:106,72:[1,107],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,108],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,109]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:55,39:[1,57],43:56,44:[1,58],45:111,46:110,47:[2,76]},{33:[2,70],40:112,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,113]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:74,63:115,64:75,65:[1,43],67:114,68:[2,96],69:116,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,117]},{32:118,33:[2,62],74:119,75:[1,120]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:121,74:122,75:[1,120]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,123]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,124]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,108]},{20:74,63:125,64:75,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:74,33:[2,72],41:126,63:127,64:75,65:[1,43],69:128,70:76,71:77,72:[1,78],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,129]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,130]},{33:[2,63]},{72:[1,132],76:131},{33:[1,133]},{33:[2,69]},{15:[2,12],18:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:134,74:135,75:[1,120]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,137],77:[1,136]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,138]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],\ndefaultActions: {4:[2,1],54:[2,55],56:[2,20],60:[2,57],73:[2,81],82:[2,85],86:[2,18],90:[2,89],101:[2,53],104:[2,93],110:[2,19],111:[2,77],116:[2,97],119:[2,63],122:[2,69],135:[2,75],136:[2,32]},\nparseError: function parseError (str, hash) {\n    throw new Error(str);\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == \"undefined\")\n        this.lexer.yylloc = {};\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === \"function\")\n        this.parseError = this.yy.parseError;\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || 1;\n        if (typeof token !== \"number\") {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == \"undefined\") {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n            var errStr = \"\";\n            if (!recovering) {\n                expected = [];\n                for (p in table[state])\n                    if (this.terminals_[p] && p > 2) {\n                        expected.push(\"'\" + this.terminals_[p] + \"'\");\n                    }\n                if (this.lexer.showPosition) {\n                    errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + this.lexer.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                } else {\n                    errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == 1?\"end of input\":\"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                }\n                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});\n            }\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0)\n                    recovering--;\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};\n            if (ranges) {\n                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n            if (typeof r !== \"undefined\") {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}\n};\n/* Jison generated lexer */\nvar lexer = (function(){\nvar lexer = ({EOF:1,\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._less = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};\n        if (this.options.ranges) this.yylloc.range = [0,0];\n        this.offset = 0;\n        return this;\n    },\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) this.yylloc.range[1]++;\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length-1);\n        this.matched = this.matched.substr(0, this.matched.length-1);\n\n        if (lines.length-1) this.yylineno -= lines.length-1;\n        var r = this.yylloc.range;\n\n        this.yylloc = {first_line: this.yylloc.first_line,\n          last_line: this.yylineno+1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ?\n              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:\n              this.yylloc.first_column - len\n          };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        return this;\n    },\nmore:function () {\n        this._more = true;\n        return this;\n    },\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\\n/g, \"\");\n    },\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c+\"^\";\n    },\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) this.done = true;\n\n        var token,\n            match,\n            tempMatch,\n            index,\n            col,\n            lines;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i=0;i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (!this.options.flex) break;\n            }\n        }\n        if (match) {\n            lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n            if (lines) this.yylineno += lines.length;\n            this.yylloc = {first_line: this.yylloc.last_line,\n                           last_line: this.yylineno+1,\n                           first_column: this.yylloc.last_column,\n                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length};\n            this.yytext += match[0];\n            this.match += match[0];\n            this.matches = match;\n            this.yyleng = this.yytext.length;\n            if (this.options.ranges) {\n                this.yylloc.range = [this.offset, this.offset += this.yyleng];\n            }\n            this._more = false;\n            this._input = this._input.slice(match[0].length);\n            this.matched += match[0];\n            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);\n            if (this.done && this._input) this.done = false;\n            if (token) return token;\n            else return;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\\n'+this.showPosition(),\n                    {text: \"\", token: null, line: this.yylineno});\n        }\n    },\nlex:function lex () {\n        var r = this.next();\n        if (typeof r !== 'undefined') {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\npopState:function popState () {\n        return this.conditionStack.pop();\n    },\n_currentRules:function _currentRules () {\n        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;\n    },\ntopState:function () {\n        return this.conditionStack[this.conditionStack.length-2];\n    },\npushState:function begin (condition) {\n        this.begin(condition);\n    }});\nlexer.options = {};\nlexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START\n) {\n\n\nfunction strip(start, end) {\n  return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);\n}\n\n\nvar YYSTATE=YY_START\nswitch($avoiding_name_collisions) {\ncase 0:\n                                   if(yy_.yytext.slice(-2) === \"\\\\\\\\\") {\n                                     strip(0,1);\n                                     this.begin(\"mu\");\n                                   } else if(yy_.yytext.slice(-1) === \"\\\\\") {\n                                     strip(0,1);\n                                     this.begin(\"emu\");\n                                   } else {\n                                     this.begin(\"mu\");\n                                   }\n                                   if(yy_.yytext) return 15;\n                                 \nbreak;\ncase 1:return 15;\nbreak;\ncase 2:\n                                   this.popState();\n                                   return 15;\n                                 \nbreak;\ncase 3:this.begin('raw'); return 15;\nbreak;\ncase 4:\n                                  this.popState();\n                                  // Should be using `this.topState()` below, but it currently\n                                  // returns the second top instead of the first top. Opened an\n                                  // issue about it at https://github.com/zaach/jison/issues/291\n                                  if (this.conditionStack[this.conditionStack.length-1] === 'raw') {\n                                    return 15;\n                                  } else {\n                                    strip(5, 9);\n                                    return 'END_RAW_BLOCK';\n                                  }\n                                 \nbreak;\ncase 5: return 15; \nbreak;\ncase 6:\n  this.popState();\n  return 14;\n\nbreak;\ncase 7:return 65;\nbreak;\ncase 8:return 68;\nbreak;\ncase 9: return 19; \nbreak;\ncase 10:\n                                  this.popState();\n                                  this.begin('raw');\n                                  return 23;\n                                 \nbreak;\ncase 11:return 55;\nbreak;\ncase 12:return 60;\nbreak;\ncase 13:return 29;\nbreak;\ncase 14:return 47;\nbreak;\ncase 15:this.popState(); return 44;\nbreak;\ncase 16:this.popState(); return 44;\nbreak;\ncase 17:return 34;\nbreak;\ncase 18:return 39;\nbreak;\ncase 19:return 51;\nbreak;\ncase 20:return 48;\nbreak;\ncase 21:\n  this.unput(yy_.yytext);\n  this.popState();\n  this.begin('com');\n\nbreak;\ncase 22:\n  this.popState();\n  return 14;\n\nbreak;\ncase 23:return 48;\nbreak;\ncase 24:return 73;\nbreak;\ncase 25:return 72;\nbreak;\ncase 26:return 72;\nbreak;\ncase 27:return 87;\nbreak;\ncase 28:// ignore whitespace\nbreak;\ncase 29:this.popState(); return 54;\nbreak;\ncase 30:this.popState(); return 33;\nbreak;\ncase 31:yy_.yytext = strip(1,2).replace(/\\\\\"/g,'\"'); return 80;\nbreak;\ncase 32:yy_.yytext = strip(1,2).replace(/\\\\'/g,\"'\"); return 80;\nbreak;\ncase 33:return 85;\nbreak;\ncase 34:return 82;\nbreak;\ncase 35:return 82;\nbreak;\ncase 36:return 83;\nbreak;\ncase 37:return 84;\nbreak;\ncase 38:return 81;\nbreak;\ncase 39:return 75;\nbreak;\ncase 40:return 77;\nbreak;\ncase 41:return 72;\nbreak;\ncase 42:yy_.yytext = yy_.yytext.replace(/\\\\([\\\\\\]])/g,'$1'); return 72;\nbreak;\ncase 43:return 'INVALID';\nbreak;\ncase 44:return 5;\nbreak;\n}\n};\nlexer.rules = [/^(?:[^\\x00]*?(?=(\\{\\{)))/,/^(?:[^\\x00]+)/,/^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/,/^(?:\\{\\{\\{\\{(?=[^/]))/,/^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/,/^(?:[^\\x00]+?(?=(\\{\\{\\{\\{)))/,/^(?:[\\s\\S]*?--(~)?\\}\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:\\{\\{\\{\\{)/,/^(?:\\}\\}\\}\\})/,/^(?:\\{\\{(~)?>)/,/^(?:\\{\\{(~)?#>)/,/^(?:\\{\\{(~)?#\\*?)/,/^(?:\\{\\{(~)?\\/)/,/^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\^)/,/^(?:\\{\\{(~)?\\s*else\\b)/,/^(?:\\{\\{(~)?\\{)/,/^(?:\\{\\{(~)?&)/,/^(?:\\{\\{(~)?!--)/,/^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/,/^(?:\\{\\{(~)?\\*?)/,/^(?:=)/,/^(?:\\.\\.)/,/^(?:\\.(?=([=~}\\s\\/.)|])))/,/^(?:[\\/.])/,/^(?:\\s+)/,/^(?:\\}(~)?\\}\\})/,/^(?:(~)?\\}\\})/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'(\\\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\\s)])))/,/^(?:false(?=([~}\\s)])))/,/^(?:undefined(?=([~}\\s)])))/,/^(?:null(?=([~}\\s)])))/,/^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/,/^(?:as\\s+\\|)/,/^(?:\\|)/,/^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/,/^(?:\\[(\\\\\\]|[^\\]])*\\])/,/^(?:.)/,/^(?:$)/];\nlexer.conditions = {\"mu\":{\"rules\":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],\"inclusive\":false},\"emu\":{\"rules\":[2],\"inclusive\":false},\"com\":{\"rules\":[6],\"inclusive\":false},\"raw\":{\"rules\":[3,4,5],\"inclusive\":false},\"INITIAL\":{\"rules\":[0,1,44],\"inclusive\":true}};\nreturn lexer;})()\nparser.lexer = lexer;\nfunction Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();export default handlebars;\n", "import Exception from '../exception';\n\nfunction Visitor() {\n  this.parents = [];\n}\n\nVisitor.prototype = {\n  constructor: Visitor,\n  mutating: false,\n\n  // Visits a given value. If mutating, will replace the value if necessary.\n  acceptKey: function(node, name) {\n    let value = this.accept(node[name]);\n    if (this.mutating) {\n      // Hacky sanity check: This may have a few false positives for type for the helper\n      // methods but will generally do the right thing without a lot of overhead.\n      if (value && !Visitor.prototype[value.type]) {\n        throw new Exception(\n          'Unexpected node type \"' +\n            value.type +\n            '\" found when accepting ' +\n            name +\n            ' on ' +\n            node.type\n        );\n      }\n      node[name] = value;\n    }\n  },\n\n  // Performs an accept operation with added sanity check to ensure\n  // required keys are not removed.\n  acceptRequired: function(node, name) {\n    this.acceptKey(node, name);\n\n    if (!node[name]) {\n      throw new Exception(node.type + ' requires ' + name);\n    }\n  },\n\n  // Traverses a given array. If mutating, empty respnses will be removed\n  // for child elements.\n  acceptArray: function(array) {\n    for (let i = 0, l = array.length; i < l; i++) {\n      this.acceptKey(array, i);\n\n      if (!array[i]) {\n        array.splice(i, 1);\n        i--;\n        l--;\n      }\n    }\n  },\n\n  accept: function(object) {\n    if (!object) {\n      return;\n    }\n\n    /* istanbul ignore next: Sanity code */\n    if (!this[object.type]) {\n      throw new Exception('Unknown type: ' + object.type, object);\n    }\n\n    if (this.current) {\n      this.parents.unshift(this.current);\n    }\n    this.current = object;\n\n    let ret = this[object.type](object);\n\n    this.current = this.parents.shift();\n\n    if (!this.mutating || ret) {\n      return ret;\n    } else if (ret !== false) {\n      return object;\n    }\n  },\n\n  Program: function(program) {\n    this.acceptArray(program.body);\n  },\n\n  MustacheStatement: visitSubExpression,\n  Decorator: visitSubExpression,\n\n  BlockStatement: visitBlock,\n  DecoratorBlock: visitBlock,\n\n  PartialStatement: visitPartial,\n  PartialBlockStatement: function(partial) {\n    visitPartial.call(this, partial);\n\n    this.acceptKey(partial, 'program');\n  },\n\n  ContentStatement: function(/* content */) {},\n  CommentStatement: function(/* comment */) {},\n\n  SubExpression: visitSubExpression,\n\n  PathExpression: function(/* path */) {},\n\n  StringLiteral: function(/* string */) {},\n  NumberLiteral: function(/* number */) {},\n  BooleanLiteral: function(/* bool */) {},\n  UndefinedLiteral: function(/* literal */) {},\n  NullLiteral: function(/* literal */) {},\n\n  Hash: function(hash) {\n    this.acceptArray(hash.pairs);\n  },\n  HashPair: function(pair) {\n    this.acceptRequired(pair, 'value');\n  }\n};\n\nfunction visitSubExpression(mustache) {\n  this.acceptRequired(mustache, 'path');\n  this.acceptArray(mustache.params);\n  this.acceptKey(mustache, 'hash');\n}\nfunction visitBlock(block) {\n  visitSubExpression.call(this, block);\n\n  this.acceptKey(block, 'program');\n  this.acceptKey(block, 'inverse');\n}\nfunction visitPartial(partial) {\n  this.acceptRequired(partial, 'name');\n  this.acceptArray(partial.params);\n  this.acceptKey(partial, 'hash');\n}\n\nexport default Visitor;\n", "import Visitor from './visitor';\n\nfunction WhitespaceControl(options = {}) {\n  this.options = options;\n}\nWhitespaceControl.prototype = new Visitor();\n\nWhitespaceControl.prototype.Program = function(program) {\n  const doStandalone = !this.options.ignoreStandalone;\n\n  let isRoot = !this.isRootSeen;\n  this.isRootSeen = true;\n\n  let body = program.body;\n  for (let i = 0, l = body.length; i < l; i++) {\n    let current = body[i],\n      strip = this.accept(current);\n\n    if (!strip) {\n      continue;\n    }\n\n    let _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n      _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n      openStandalone = strip.openStandalone && _isPrevWhitespace,\n      closeStandalone = strip.closeStandalone && _isNextWhitespace,\n      inlineStandalone =\n        strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n    if (strip.close) {\n      omitRight(body, i, true);\n    }\n    if (strip.open) {\n      omitLeft(body, i, true);\n    }\n\n    if (doStandalone && inlineStandalone) {\n      omitRight(body, i);\n\n      if (omitLeft(body, i)) {\n        // If we are on a standalone node, save the indent info for partials\n        if (current.type === 'PartialStatement') {\n          // Pull out the whitespace from the final line\n          current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n        }\n      }\n    }\n    if (doStandalone && openStandalone) {\n      omitRight((current.program || current.inverse).body);\n\n      // Strip out the previous content node if it's whitespace only\n      omitLeft(body, i);\n    }\n    if (doStandalone && closeStandalone) {\n      // Always strip the next node\n      omitRight(body, i);\n\n      omitLeft((current.inverse || current.program).body);\n    }\n  }\n\n  return program;\n};\n\nWhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(\n  block\n) {\n  this.accept(block.program);\n  this.accept(block.inverse);\n\n  // Find the inverse program that is involed with whitespace stripping.\n  let program = block.program || block.inverse,\n    inverse = block.program && block.inverse,\n    firstInverse = inverse,\n    lastInverse = inverse;\n\n  if (inverse && inverse.chained) {\n    firstInverse = inverse.body[0].program;\n\n    // Walk the inverse chain to find the last inverse that is actually in the chain.\n    while (lastInverse.chained) {\n      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;\n    }\n  }\n\n  let strip = {\n    open: block.openStrip.open,\n    close: block.closeStrip.close,\n\n    // Determine the standalone candiacy. Basically flag our content as being possibly standalone\n    // so our parent can determine if we actually are standalone\n    openStandalone: isNextWhitespace(program.body),\n    closeStandalone: isPrevWhitespace((firstInverse || program).body)\n  };\n\n  if (block.openStrip.close) {\n    omitRight(program.body, null, true);\n  }\n\n  if (inverse) {\n    let inverseStrip = block.inverseStrip;\n\n    if (inverseStrip.open) {\n      omitLeft(program.body, null, true);\n    }\n\n    if (inverseStrip.close) {\n      omitRight(firstInverse.body, null, true);\n    }\n    if (block.closeStrip.open) {\n      omitLeft(lastInverse.body, null, true);\n    }\n\n    // Find standalone else statments\n    if (\n      !this.options.ignoreStandalone &&\n      isPrevWhitespace(program.body) &&\n      isNextWhitespace(firstInverse.body)\n    ) {\n      omitLeft(program.body);\n      omitRight(firstInverse.body);\n    }\n  } else if (block.closeStrip.open) {\n    omitLeft(program.body, null, true);\n  }\n\n  return strip;\n};\n\nWhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(\n  mustache\n) {\n  return mustache.strip;\n};\n\nWhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(\n  node\n) {\n  /* istanbul ignore next */\n  let strip = node.strip || {};\n  return {\n    inlineStandalone: true,\n    open: strip.open,\n    close: strip.close\n  };\n};\n\nfunction isPrevWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = body.length;\n  }\n\n  // Nodes that end with newlines are considered whitespace (but are special\n  // cased for strip operations)\n  let prev = body[i - 1],\n    sibling = body[i - 2];\n  if (!prev) {\n    return isRoot;\n  }\n\n  if (prev.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /\\r?\\n\\s*?$/ : /(^|\\r?\\n)\\s*?$/).test(\n      prev.original\n    );\n  }\n}\nfunction isNextWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = -1;\n  }\n\n  let next = body[i + 1],\n    sibling = body[i + 2];\n  if (!next) {\n    return isRoot;\n  }\n\n  if (next.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /^\\s*?\\r?\\n/ : /^\\s*?(\\r?\\n|$)/).test(\n      next.original\n    );\n  }\n}\n\n// Marks the node to the right of the position as omitted.\n// I.e. {{foo}}' ' will mark the ' ' node as omitted.\n//\n// If i is undefined, then the first child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitRight(body, i, multiple) {\n  let current = body[i == null ? 0 : i + 1];\n  if (\n    !current ||\n    current.type !== 'ContentStatement' ||\n    (!multiple && current.rightStripped)\n  ) {\n    return;\n  }\n\n  let original = current.value;\n  current.value = current.value.replace(\n    multiple ? /^\\s+/ : /^[ \\t]*\\r?\\n?/,\n    ''\n  );\n  current.rightStripped = current.value !== original;\n}\n\n// Marks the node to the left of the position as omitted.\n// I.e. ' '{{foo}} will mark the ' ' node as omitted.\n//\n// If i is undefined then the last child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitLeft(body, i, multiple) {\n  let current = body[i == null ? body.length - 1 : i - 1];\n  if (\n    !current ||\n    current.type !== 'ContentStatement' ||\n    (!multiple && current.leftStripped)\n  ) {\n    return;\n  }\n\n  // We omit the last node if it's whitespace only and not preceded by a non-content node.\n  let original = current.value;\n  current.value = current.value.replace(multiple ? /\\s+$/ : /[ \\t]+$/, '');\n  current.leftStripped = current.value !== original;\n  return current.leftStripped;\n}\n\nexport default WhitespaceControl;\n", "import Exception from '../exception';\n\nfunction validateClose(open, close) {\n  close = close.path ? close.path.original : close;\n\n  if (open.path.original !== close) {\n    let errorNode = { loc: open.path.loc };\n\n    throw new Exception(\n      open.path.original + \" doesn't match \" + close,\n      errorNode\n    );\n  }\n}\n\nexport function SourceLocation(source, locInfo) {\n  this.source = source;\n  this.start = {\n    line: locInfo.first_line,\n    column: locInfo.first_column\n  };\n  this.end = {\n    line: locInfo.last_line,\n    column: locInfo.last_column\n  };\n}\n\nexport function id(token) {\n  if (/^\\[.*\\]$/.test(token)) {\n    return token.substring(1, token.length - 1);\n  } else {\n    return token;\n  }\n}\n\nexport function stripFlags(open, close) {\n  return {\n    open: open.charAt(2) === '~',\n    close: close.charAt(close.length - 3) === '~'\n  };\n}\n\nexport function stripComment(comment) {\n  return comment.replace(/^\\{\\{~?!-?-?/, '').replace(/-?-?~?\\}\\}$/, '');\n}\n\nexport function preparePath(data, parts, loc) {\n  loc = this.locInfo(loc);\n\n  let original = data ? '@' : '',\n    dig = [],\n    depth = 0;\n\n  for (let i = 0, l = parts.length; i < l; i++) {\n    let part = parts[i].part,\n      // If we have [] syntax then we do not treat path references as operators,\n      // i.e. foo.[this] resolves to approximately context.foo['this']\n      isLiteral = parts[i].original !== part;\n    original += (parts[i].separator || '') + part;\n\n    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {\n      if (dig.length > 0) {\n        throw new Exception('Invalid path: ' + original, { loc });\n      } else if (part === '..') {\n        depth++;\n      }\n    } else {\n      dig.push(part);\n    }\n  }\n\n  return {\n    type: 'PathExpression',\n    data,\n    depth,\n    parts: dig,\n    original,\n    loc\n  };\n}\n\nexport function prepareMustache(path, params, hash, open, strip, locInfo) {\n  // Must use charAt to support IE pre-10\n  let escapeFlag = open.charAt(3) || open.charAt(2),\n    escaped = escapeFlag !== '{' && escapeFlag !== '&';\n\n  let decorator = /\\*/.test(open);\n  return {\n    type: decorator ? 'Decorator' : 'MustacheStatement',\n    path,\n    params,\n    hash,\n    escaped,\n    strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nexport function prepareRawBlock(openRawBlock, contents, close, locInfo) {\n  validateClose(openRawBlock, close);\n\n  locInfo = this.locInfo(locInfo);\n  let program = {\n    type: 'Program',\n    body: contents,\n    strip: {},\n    loc: locInfo\n  };\n\n  return {\n    type: 'BlockStatement',\n    path: openRawBlock.path,\n    params: openRawBlock.params,\n    hash: openRawBlock.hash,\n    program,\n    openStrip: {},\n    inverseStrip: {},\n    closeStrip: {},\n    loc: locInfo\n  };\n}\n\nexport function prepareBlock(\n  openBlock,\n  program,\n  inverseAndProgram,\n  close,\n  inverted,\n  locInfo\n) {\n  if (close && close.path) {\n    validateClose(openBlock, close);\n  }\n\n  let decorator = /\\*/.test(openBlock.open);\n\n  program.blockParams = openBlock.blockParams;\n\n  let inverse, inverseStrip;\n\n  if (inverseAndProgram) {\n    if (decorator) {\n      throw new Exception(\n        'Unexpected inverse block on decorator',\n        inverseAndProgram\n      );\n    }\n\n    if (inverseAndProgram.chain) {\n      inverseAndProgram.program.body[0].closeStrip = close.strip;\n    }\n\n    inverseStrip = inverseAndProgram.strip;\n    inverse = inverseAndProgram.program;\n  }\n\n  if (inverted) {\n    inverted = inverse;\n    inverse = program;\n    program = inverted;\n  }\n\n  return {\n    type: decorator ? 'DecoratorBlock' : 'BlockStatement',\n    path: openBlock.path,\n    params: openBlock.params,\n    hash: openBlock.hash,\n    program,\n    inverse,\n    openStrip: openBlock.strip,\n    inverseStrip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nexport function prepareProgram(statements, loc) {\n  if (!loc && statements.length) {\n    const firstLoc = statements[0].loc,\n      lastLoc = statements[statements.length - 1].loc;\n\n    /* istanbul ignore else */\n    if (firstLoc && lastLoc) {\n      loc = {\n        source: firstLoc.source,\n        start: {\n          line: firstLoc.start.line,\n          column: firstLoc.start.column\n        },\n        end: {\n          line: lastLoc.end.line,\n          column: lastLoc.end.column\n        }\n      };\n    }\n  }\n\n  return {\n    type: 'Program',\n    body: statements,\n    strip: {},\n    loc: loc\n  };\n}\n\nexport function preparePartialBlock(open, program, close, locInfo) {\n  validateClose(open, close);\n\n  return {\n    type: 'PartialBlockStatement',\n    name: open.path,\n    params: open.params,\n    hash: open.hash,\n    program,\n    openStrip: open.strip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n", "import parser from './parser';\nimport WhitespaceControl from './whitespace-control';\nimport * as Helpers from './helpers';\nimport { extend } from '../utils';\n\nexport { parser };\n\nlet yy = {};\nextend(yy, Helpers);\n\nexport function parseWithoutProcessing(input, options) {\n  // Just return if an already-compiled AST was passed in.\n  if (input.type === 'Program') {\n    return input;\n  }\n\n  parser.yy = yy;\n\n  // Altering the shared object here, but this is ok as parser is a sync operation\n  yy.locInfo = function(locInfo) {\n    return new yy.SourceLocation(options && options.srcName, locInfo);\n  };\n\n  let ast = parser.parse(input);\n\n  return ast;\n}\n\nexport function parse(input, options) {\n  let ast = parseWithoutProcessing(input, options);\n  let strip = new WhitespaceControl(options);\n\n  return strip.accept(ast);\n}\n", "/* eslint-disable new-cap */\n\nimport Exception from '../exception';\nimport { isArray, indexOf, extend } from '../utils';\nimport AST from './ast';\n\nconst slice = [].slice;\n\nexport function Compiler() {}\n\n// the foundHelper register will disambiguate helper lookup from finding a\n// function in a context. This is necessary for mustache compatibility, which\n// requires that context functions in blocks are evaluated by blockHelperMissing,\n// and then proceed as if the resulting value was provided to blockHelperMissing.\n\nCompiler.prototype = {\n  compiler: Compiler,\n\n  equals: function(other) {\n    let len = this.opcodes.length;\n    if (other.opcodes.length !== len) {\n      return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n      let opcode = this.opcodes[i],\n        otherOpcode = other.opcodes[i];\n      if (\n        opcode.opcode !== otherOpcode.opcode ||\n        !argEquals(opcode.args, otherOpcode.args)\n      ) {\n        return false;\n      }\n    }\n\n    // We know that length is the same between the two arrays because they are directly tied\n    // to the opcode behavior above.\n    len = this.children.length;\n    for (let i = 0; i < len; i++) {\n      if (!this.children[i].equals(other.children[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  guid: 0,\n\n  compile: function(program, options) {\n    this.sourceNode = [];\n    this.opcodes = [];\n    this.children = [];\n    this.options = options;\n    this.stringParams = options.stringParams;\n    this.trackIds = options.trackIds;\n\n    options.blockParams = options.blockParams || [];\n\n    options.knownHelpers = extend(\n      Object.create(null),\n      {\n        helperMissing: true,\n        blockHelperMissing: true,\n        each: true,\n        if: true,\n        unless: true,\n        with: true,\n        log: true,\n        lookup: true\n      },\n      options.knownHelpers\n    );\n\n    return this.accept(program);\n  },\n\n  compileProgram: function(program) {\n    let childCompiler = new this.compiler(), // eslint-disable-line new-cap\n      result = childCompiler.compile(program, this.options),\n      guid = this.guid++;\n\n    this.usePartial = this.usePartial || result.usePartial;\n\n    this.children[guid] = result;\n    this.useDepths = this.useDepths || result.useDepths;\n\n    return guid;\n  },\n\n  accept: function(node) {\n    /* istanbul ignore next: Sanity code */\n    if (!this[node.type]) {\n      throw new Exception('Unknown type: ' + node.type, node);\n    }\n\n    this.sourceNode.unshift(node);\n    let ret = this[node.type](node);\n    this.sourceNode.shift();\n    return ret;\n  },\n\n  Program: function(program) {\n    this.options.blockParams.unshift(program.blockParams);\n\n    let body = program.body,\n      bodyLength = body.length;\n    for (let i = 0; i < bodyLength; i++) {\n      this.accept(body[i]);\n    }\n\n    this.options.blockParams.shift();\n\n    this.isSimple = bodyLength === 1;\n    this.blockParams = program.blockParams ? program.blockParams.length : 0;\n\n    return this;\n  },\n\n  BlockStatement: function(block) {\n    transformLiteralToPath(block);\n\n    let program = block.program,\n      inverse = block.inverse;\n\n    program = program && this.compileProgram(program);\n    inverse = inverse && this.compileProgram(inverse);\n\n    let type = this.classifySexpr(block);\n\n    if (type === 'helper') {\n      this.helperSexpr(block, program, inverse);\n    } else if (type === 'simple') {\n      this.simpleSexpr(block);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('blockValue', block.path.original);\n    } else {\n      this.ambiguousSexpr(block, program, inverse);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('ambiguousBlockValue');\n    }\n\n    this.opcode('append');\n  },\n\n  DecoratorBlock(decorator) {\n    let program = decorator.program && this.compileProgram(decorator.program);\n    let params = this.setupFullMustacheParams(decorator, program, undefined),\n      path = decorator.path;\n\n    this.useDecorators = true;\n    this.opcode('registerDecorator', params.length, path.original);\n  },\n\n  PartialStatement: function(partial) {\n    this.usePartial = true;\n\n    let program = partial.program;\n    if (program) {\n      program = this.compileProgram(partial.program);\n    }\n\n    let params = partial.params;\n    if (params.length > 1) {\n      throw new Exception(\n        'Unsupported number of partial arguments: ' + params.length,\n        partial\n      );\n    } else if (!params.length) {\n      if (this.options.explicitPartialContext) {\n        this.opcode('pushLiteral', 'undefined');\n      } else {\n        params.push({ type: 'PathExpression', parts: [], depth: 0 });\n      }\n    }\n\n    let partialName = partial.name.original,\n      isDynamic = partial.name.type === 'SubExpression';\n    if (isDynamic) {\n      this.accept(partial.name);\n    }\n\n    this.setupFullMustacheParams(partial, program, undefined, true);\n\n    let indent = partial.indent || '';\n    if (this.options.preventIndent && indent) {\n      this.opcode('appendContent', indent);\n      indent = '';\n    }\n\n    this.opcode('invokePartial', isDynamic, partialName, indent);\n    this.opcode('append');\n  },\n  PartialBlockStatement: function(partialBlock) {\n    this.PartialStatement(partialBlock);\n  },\n\n  MustacheStatement: function(mustache) {\n    this.SubExpression(mustache);\n\n    if (mustache.escaped && !this.options.noEscape) {\n      this.opcode('appendEscaped');\n    } else {\n      this.opcode('append');\n    }\n  },\n  Decorator(decorator) {\n    this.DecoratorBlock(decorator);\n  },\n\n  ContentStatement: function(content) {\n    if (content.value) {\n      this.opcode('appendContent', content.value);\n    }\n  },\n\n  CommentStatement: function() {},\n\n  SubExpression: function(sexpr) {\n    transformLiteralToPath(sexpr);\n    let type = this.classifySexpr(sexpr);\n\n    if (type === 'simple') {\n      this.simpleSexpr(sexpr);\n    } else if (type === 'helper') {\n      this.helperSexpr(sexpr);\n    } else {\n      this.ambiguousSexpr(sexpr);\n    }\n  },\n  ambiguousSexpr: function(sexpr, program, inverse) {\n    let path = sexpr.path,\n      name = path.parts[0],\n      isBlock = program != null || inverse != null;\n\n    this.opcode('getContext', path.depth);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    path.strict = true;\n    this.accept(path);\n\n    this.opcode('invokeAmbiguous', name, isBlock);\n  },\n\n  simpleSexpr: function(sexpr) {\n    let path = sexpr.path;\n    path.strict = true;\n    this.accept(path);\n    this.opcode('resolvePossibleLambda');\n  },\n\n  helperSexpr: function(sexpr, program, inverse) {\n    let params = this.setupFullMustacheParams(sexpr, program, inverse),\n      path = sexpr.path,\n      name = path.parts[0];\n\n    if (this.options.knownHelpers[name]) {\n      this.opcode('invokeKnownHelper', params.length, name);\n    } else if (this.options.knownHelpersOnly) {\n      throw new Exception(\n        'You specified knownHelpersOnly, but used the unknown helper ' + name,\n        sexpr\n      );\n    } else {\n      path.strict = true;\n      path.falsy = true;\n\n      this.accept(path);\n      this.opcode(\n        'invokeHelper',\n        params.length,\n        path.original,\n        AST.helpers.simpleId(path)\n      );\n    }\n  },\n\n  PathExpression: function(path) {\n    this.addDepth(path.depth);\n    this.opcode('getContext', path.depth);\n\n    let name = path.parts[0],\n      scoped = AST.helpers.scopedId(path),\n      blockParamId = !path.depth && !scoped && this.blockParamIndex(name);\n\n    if (blockParamId) {\n      this.opcode('lookupBlockParam', blockParamId, path.parts);\n    } else if (!name) {\n      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`\n      this.opcode('pushContext');\n    } else if (path.data) {\n      this.options.data = true;\n      this.opcode('lookupData', path.depth, path.parts, path.strict);\n    } else {\n      this.opcode(\n        'lookupOnContext',\n        path.parts,\n        path.falsy,\n        path.strict,\n        scoped\n      );\n    }\n  },\n\n  StringLiteral: function(string) {\n    this.opcode('pushString', string.value);\n  },\n\n  NumberLiteral: function(number) {\n    this.opcode('pushLiteral', number.value);\n  },\n\n  BooleanLiteral: function(bool) {\n    this.opcode('pushLiteral', bool.value);\n  },\n\n  UndefinedLiteral: function() {\n    this.opcode('pushLiteral', 'undefined');\n  },\n\n  NullLiteral: function() {\n    this.opcode('pushLiteral', 'null');\n  },\n\n  Hash: function(hash) {\n    let pairs = hash.pairs,\n      i = 0,\n      l = pairs.length;\n\n    this.opcode('pushHash');\n\n    for (; i < l; i++) {\n      this.pushParam(pairs[i].value);\n    }\n    while (i--) {\n      this.opcode('assignToHash', pairs[i].key);\n    }\n    this.opcode('popHash');\n  },\n\n  // HELPERS\n  opcode: function(name) {\n    this.opcodes.push({\n      opcode: name,\n      args: slice.call(arguments, 1),\n      loc: this.sourceNode[0].loc\n    });\n  },\n\n  addDepth: function(depth) {\n    if (!depth) {\n      return;\n    }\n\n    this.useDepths = true;\n  },\n\n  classifySexpr: function(sexpr) {\n    let isSimple = AST.helpers.simpleId(sexpr.path);\n\n    let isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);\n\n    // a mustache is an eligible helper if:\n    // * its id is simple (a single part, not `this` or `..`)\n    let isHelper = !isBlockParam && AST.helpers.helperExpression(sexpr);\n\n    // if a mustache is an eligible helper but not a definite\n    // helper, it is ambiguous, and will be resolved in a later\n    // pass or at runtime.\n    let isEligible = !isBlockParam && (isHelper || isSimple);\n\n    // if ambiguous, we can possibly resolve the ambiguity now\n    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.\n    if (isEligible && !isHelper) {\n      let name = sexpr.path.parts[0],\n        options = this.options;\n      if (options.knownHelpers[name]) {\n        isHelper = true;\n      } else if (options.knownHelpersOnly) {\n        isEligible = false;\n      }\n    }\n\n    if (isHelper) {\n      return 'helper';\n    } else if (isEligible) {\n      return 'ambiguous';\n    } else {\n      return 'simple';\n    }\n  },\n\n  pushParams: function(params) {\n    for (let i = 0, l = params.length; i < l; i++) {\n      this.pushParam(params[i]);\n    }\n  },\n\n  pushParam: function(val) {\n    let value = val.value != null ? val.value : val.original || '';\n\n    if (this.stringParams) {\n      if (value.replace) {\n        value = value.replace(/^(\\.?\\.\\/)*/g, '').replace(/\\//g, '.');\n      }\n\n      if (val.depth) {\n        this.addDepth(val.depth);\n      }\n      this.opcode('getContext', val.depth || 0);\n      this.opcode('pushStringParam', value, val.type);\n\n      if (val.type === 'SubExpression') {\n        // SubExpressions get evaluated and passed in\n        // in string params mode.\n        this.accept(val);\n      }\n    } else {\n      if (this.trackIds) {\n        let blockParamIndex;\n        if (val.parts && !AST.helpers.scopedId(val) && !val.depth) {\n          blockParamIndex = this.blockParamIndex(val.parts[0]);\n        }\n        if (blockParamIndex) {\n          let blockParamChild = val.parts.slice(1).join('.');\n          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);\n        } else {\n          value = val.original || value;\n          if (value.replace) {\n            value = value\n              .replace(/^this(?:\\.|$)/, '')\n              .replace(/^\\.\\//, '')\n              .replace(/^\\.$/, '');\n          }\n\n          this.opcode('pushId', val.type, value);\n        }\n      }\n      this.accept(val);\n    }\n  },\n\n  setupFullMustacheParams: function(sexpr, program, inverse, omitEmpty) {\n    let params = sexpr.params;\n    this.pushParams(params);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    if (sexpr.hash) {\n      this.accept(sexpr.hash);\n    } else {\n      this.opcode('emptyHash', omitEmpty);\n    }\n\n    return params;\n  },\n\n  blockParamIndex: function(name) {\n    for (\n      let depth = 0, len = this.options.blockParams.length;\n      depth < len;\n      depth++\n    ) {\n      let blockParams = this.options.blockParams[depth],\n        param = blockParams && indexOf(blockParams, name);\n      if (blockParams && param >= 0) {\n        return [depth, param];\n      }\n    }\n  }\n};\n\nexport function precompile(input, options, env) {\n  if (\n    input == null ||\n    (typeof input !== 'string' && input.type !== 'Program')\n  ) {\n    throw new Exception(\n      'You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' +\n        input\n    );\n  }\n\n  options = options || {};\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  let ast = env.parse(input, options),\n    environment = new env.Compiler().compile(ast, options);\n  return new env.JavaScriptCompiler().compile(environment, options);\n}\n\nexport function compile(input, options = {}, env) {\n  if (\n    input == null ||\n    (typeof input !== 'string' && input.type !== 'Program')\n  ) {\n    throw new Exception(\n      'You must pass a string or Handlebars AST to Handlebars.compile. You passed ' +\n        input\n    );\n  }\n\n  options = extend({}, options);\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  let compiled;\n\n  function compileInput() {\n    let ast = env.parse(input, options),\n      environment = new env.Compiler().compile(ast, options),\n      templateSpec = new env.JavaScriptCompiler().compile(\n        environment,\n        options,\n        undefined,\n        true\n      );\n    return env.template(templateSpec);\n  }\n\n  // Template is only compiled on first use and cached after that point.\n  function ret(context, execOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled.call(this, context, execOptions);\n  }\n  ret._setup = function(setupOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._setup(setupOptions);\n  };\n  ret._child = function(i, data, blockParams, depths) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._child(i, data, blockParams, depths);\n  };\n  return ret;\n}\n\nfunction argEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (isArray(a) && isArray(b) && a.length === b.length) {\n    for (let i = 0; i < a.length; i++) {\n      if (!argEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction transformLiteralToPath(sexpr) {\n  if (!sexpr.path.parts) {\n    let literal = sexpr.path;\n    // Casting to string here to make false and 0 literal values play nicely with the rest\n    // of the system.\n    sexpr.path = {\n      type: 'PathExpression',\n      data: false,\n      depth: 0,\n      parts: [literal.original + ''],\n      original: literal.original + '',\n      loc: literal.loc\n    };\n  }\n}\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   \u201Csources\u201D entry.  This value is prepended to the individual\n    //   entries in the \u201Csource\u201D field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   \u201CsourceRoot\u201D, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n", "/* global define, require */\nimport { isArray } from '../utils';\n\nlet SourceNode;\n\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we assume that\n    // they are running on the browser and thus have no need for the source-map library.\n    let SourceMap = require('source-map');\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {\n  /* NOP */\n}\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\nif (!SourceNode) {\n  SourceNode = function(line, column, srcFile, chunks) {\n    this.src = '';\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n  SourceNode.prototype = {\n    add: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src += chunks;\n    },\n    prepend: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function() {\n      return { code: this.toString() };\n    },\n    toString: function() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (isArray(chunk)) {\n    let ret = [];\n\n    for (let i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n\n  merge: function() {\n    let source = this.empty();\n    this.each(function(line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n\n  each: function(iter) {\n    for (let i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n\n  empty: function() {\n    let loc = this.currentLocation || { start: {} };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function(chunk, loc = this.currentLocation || { start: {} }) {\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n\n    return new SourceNode(\n      loc.start.line,\n      loc.start.column,\n      this.srcFile,\n      chunk\n    );\n  },\n\n  functionCall: function(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n\n  quotedString: function(str) {\n    return (\n      '\"' +\n      (str + '')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n        .replace(/\\u2029/g, '\\\\u2029') +\n      '\"'\n    );\n  },\n\n  objectLiteral: function(obj) {\n    let pairs = [];\n\n    Object.keys(obj).forEach(key => {\n      let value = castChunk(obj[key], this);\n      if (value !== 'undefined') {\n        pairs.push([this.quotedString(key), ':', value]);\n      }\n    });\n\n    let ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n\n  generateList: function(entries) {\n    let ret = this.empty();\n\n    for (let i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n\n  generateArray: function(entries) {\n    let ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n\n    return ret;\n  }\n};\n\nexport default CodeGen;\n", "import { COMPILER_REVISION, REVISION_CHANGES } from '../base';\nimport Exception from '../exception';\nimport { isArray } from '../utils';\nimport CodeGen from './code-gen';\n\nfunction Literal(value) {\n  this.value = value;\n}\n\nfunction JavaScriptCompiler() {}\n\nJavaScriptCompiler.prototype = {\n  // PUBLIC API: You can override these methods in a subclass to provide\n  // alternative compiled forms for name lookup and buffering semantics\n  nameLookup: function(parent, name /*,  type */) {\n    return this.internalNameLookup(parent, name);\n  },\n  depthedLookup: function(name) {\n    return [\n      this.aliasable('container.lookup'),\n      '(depths, ',\n      JSON.stringify(name),\n      ')'\n    ];\n  },\n\n  compilerInfo: function() {\n    const revision = COMPILER_REVISION,\n      versions = REVISION_CHANGES[revision];\n    return [revision, versions];\n  },\n\n  appendToBuffer: function(source, location, explicit) {\n    // Force a source as this simplifies the merge logic.\n    if (!isArray(source)) {\n      source = [source];\n    }\n    source = this.source.wrap(source, location);\n\n    if (this.environment.isSimple) {\n      return ['return ', source, ';'];\n    } else if (explicit) {\n      // This is a case where the buffer operation occurs as a child of another\n      // construct, generally braces. We have to explicitly output these buffer\n      // operations to ensure that the emitted code goes in the correct location.\n      return ['buffer += ', source, ';'];\n    } else {\n      source.appendToBuffer = true;\n      return source;\n    }\n  },\n\n  initializeBuffer: function() {\n    return this.quotedString('');\n  },\n  // END PUBLIC API\n  internalNameLookup: function(parent, name) {\n    this.lookupPropertyFunctionIsUsed = true;\n    return ['lookupProperty(', parent, ',', JSON.stringify(name), ')'];\n  },\n\n  lookupPropertyFunctionIsUsed: false,\n\n  compile: function(environment, options, context, asObject) {\n    this.environment = environment;\n    this.options = options;\n    this.stringParams = this.options.stringParams;\n    this.trackIds = this.options.trackIds;\n    this.precompile = !asObject;\n\n    this.name = this.environment.name;\n    this.isChild = !!context;\n    this.context = context || {\n      decorators: [],\n      programs: [],\n      environments: []\n    };\n\n    this.preamble();\n\n    this.stackSlot = 0;\n    this.stackVars = [];\n    this.aliases = {};\n    this.registers = { list: [] };\n    this.hashes = [];\n    this.compileStack = [];\n    this.inlineStack = [];\n    this.blockParams = [];\n\n    this.compileChildren(environment, options);\n\n    this.useDepths =\n      this.useDepths ||\n      environment.useDepths ||\n      environment.useDecorators ||\n      this.options.compat;\n    this.useBlockParams = this.useBlockParams || environment.useBlockParams;\n\n    let opcodes = environment.opcodes,\n      opcode,\n      firstLoc,\n      i,\n      l;\n\n    for (i = 0, l = opcodes.length; i < l; i++) {\n      opcode = opcodes[i];\n\n      this.source.currentLocation = opcode.loc;\n      firstLoc = firstLoc || opcode.loc;\n      this[opcode.opcode].apply(this, opcode.args);\n    }\n\n    // Flush any trailing content that might be pending.\n    this.source.currentLocation = firstLoc;\n    this.pushSource('');\n\n    /* istanbul ignore next */\n    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {\n      throw new Exception('Compile completed with content left on stack');\n    }\n\n    if (!this.decorators.isEmpty()) {\n      this.useDecorators = true;\n\n      this.decorators.prepend([\n        'var decorators = container.decorators, ',\n        this.lookupPropertyFunctionVarDeclaration(),\n        ';\\n'\n      ]);\n      this.decorators.push('return fn;');\n\n      if (asObject) {\n        this.decorators = Function.apply(this, [\n          'fn',\n          'props',\n          'container',\n          'depth0',\n          'data',\n          'blockParams',\n          'depths',\n          this.decorators.merge()\n        ]);\n      } else {\n        this.decorators.prepend(\n          'function(fn, props, container, depth0, data, blockParams, depths) {\\n'\n        );\n        this.decorators.push('}\\n');\n        this.decorators = this.decorators.merge();\n      }\n    } else {\n      this.decorators = undefined;\n    }\n\n    let fn = this.createFunctionContext(asObject);\n    if (!this.isChild) {\n      let ret = {\n        compiler: this.compilerInfo(),\n        main: fn\n      };\n\n      if (this.decorators) {\n        ret.main_d = this.decorators; // eslint-disable-line camelcase\n        ret.useDecorators = true;\n      }\n\n      let { programs, decorators } = this.context;\n      for (i = 0, l = programs.length; i < l; i++) {\n        if (programs[i]) {\n          ret[i] = programs[i];\n          if (decorators[i]) {\n            ret[i + '_d'] = decorators[i];\n            ret.useDecorators = true;\n          }\n        }\n      }\n\n      if (this.environment.usePartial) {\n        ret.usePartial = true;\n      }\n      if (this.options.data) {\n        ret.useData = true;\n      }\n      if (this.useDepths) {\n        ret.useDepths = true;\n      }\n      if (this.useBlockParams) {\n        ret.useBlockParams = true;\n      }\n      if (this.options.compat) {\n        ret.compat = true;\n      }\n\n      if (!asObject) {\n        ret.compiler = JSON.stringify(ret.compiler);\n\n        this.source.currentLocation = { start: { line: 1, column: 0 } };\n        ret = this.objectLiteral(ret);\n\n        if (options.srcName) {\n          ret = ret.toStringWithSourceMap({ file: options.destName });\n          ret.map = ret.map && ret.map.toString();\n        } else {\n          ret = ret.toString();\n        }\n      } else {\n        ret.compilerOptions = this.options;\n      }\n\n      return ret;\n    } else {\n      return fn;\n    }\n  },\n\n  preamble: function() {\n    // track the last context pushed into place to allow skipping the\n    // getContext opcode when it would be a noop\n    this.lastContext = 0;\n    this.source = new CodeGen(this.options.srcName);\n    this.decorators = new CodeGen(this.options.srcName);\n  },\n\n  createFunctionContext: function(asObject) {\n    let varDeclarations = '';\n\n    let locals = this.stackVars.concat(this.registers.list);\n    if (locals.length > 0) {\n      varDeclarations += ', ' + locals.join(', ');\n    }\n\n    // Generate minimizer alias mappings\n    //\n    // When using true SourceNodes, this will update all references to the given alias\n    // as the source nodes are reused in situ. For the non-source node compilation mode,\n    // aliases will not be used, but this case is already being run on the client and\n    // we aren't concern about minimizing the template size.\n    let aliasCount = 0;\n    Object.keys(this.aliases).forEach(alias => {\n      let node = this.aliases[alias];\n      if (node.children && node.referenceCount > 1) {\n        varDeclarations += ', alias' + ++aliasCount + '=' + alias;\n        node.children[0] = 'alias' + aliasCount;\n      }\n    });\n\n    if (this.lookupPropertyFunctionIsUsed) {\n      varDeclarations += ', ' + this.lookupPropertyFunctionVarDeclaration();\n    }\n\n    let params = ['container', 'depth0', 'helpers', 'partials', 'data'];\n\n    if (this.useBlockParams || this.useDepths) {\n      params.push('blockParams');\n    }\n    if (this.useDepths) {\n      params.push('depths');\n    }\n\n    // Perform a second pass over the output to merge content when possible\n    let source = this.mergeSource(varDeclarations);\n\n    if (asObject) {\n      params.push(source);\n\n      return Function.apply(this, params);\n    } else {\n      return this.source.wrap([\n        'function(',\n        params.join(','),\n        ') {\\n  ',\n        source,\n        '}'\n      ]);\n    }\n  },\n  mergeSource: function(varDeclarations) {\n    let isSimple = this.environment.isSimple,\n      appendOnly = !this.forceBuffer,\n      appendFirst,\n      sourceSeen,\n      bufferStart,\n      bufferEnd;\n    this.source.each(line => {\n      if (line.appendToBuffer) {\n        if (bufferStart) {\n          line.prepend('  + ');\n        } else {\n          bufferStart = line;\n        }\n        bufferEnd = line;\n      } else {\n        if (bufferStart) {\n          if (!sourceSeen) {\n            appendFirst = true;\n          } else {\n            bufferStart.prepend('buffer += ');\n          }\n          bufferEnd.add(';');\n          bufferStart = bufferEnd = undefined;\n        }\n\n        sourceSeen = true;\n        if (!isSimple) {\n          appendOnly = false;\n        }\n      }\n    });\n\n    if (appendOnly) {\n      if (bufferStart) {\n        bufferStart.prepend('return ');\n        bufferEnd.add(';');\n      } else if (!sourceSeen) {\n        this.source.push('return \"\";');\n      }\n    } else {\n      varDeclarations +=\n        ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());\n\n      if (bufferStart) {\n        bufferStart.prepend('return buffer + ');\n        bufferEnd.add(';');\n      } else {\n        this.source.push('return buffer;');\n      }\n    }\n\n    if (varDeclarations) {\n      this.source.prepend(\n        'var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\\n')\n      );\n    }\n\n    return this.source.merge();\n  },\n\n  lookupPropertyFunctionVarDeclaration: function() {\n    return `\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    `.trim();\n  },\n\n  // [blockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // On stack, after: return value of blockHelperMissing\n  //\n  // The purpose of this opcode is to take a block of the form\n  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and\n  // replace it on the stack with the result of properly\n  // invoking blockHelperMissing.\n  blockValue: function(name) {\n    let blockHelperMissing = this.aliasable(\n        'container.hooks.blockHelperMissing'\n      ),\n      params = [this.contextName(0)];\n    this.setupHelperArgs(name, 0, params);\n\n    let blockName = this.popStack();\n    params.splice(1, 0, blockName);\n\n    this.push(this.source.functionCall(blockHelperMissing, 'call', params));\n  },\n\n  // [ambiguousBlockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // Compiler value, before: lastHelper=value of last found helper, if any\n  // On stack, after, if no lastHelper: same as [blockValue]\n  // On stack, after, if lastHelper: value\n  ambiguousBlockValue: function() {\n    // We're being a bit cheeky and reusing the options value from the prior exec\n    let blockHelperMissing = this.aliasable(\n        'container.hooks.blockHelperMissing'\n      ),\n      params = [this.contextName(0)];\n    this.setupHelperArgs('', 0, params, true);\n\n    this.flushInline();\n\n    let current = this.topStack();\n    params.splice(1, 0, current);\n\n    this.pushSource([\n      'if (!',\n      this.lastHelper,\n      ') { ',\n      current,\n      ' = ',\n      this.source.functionCall(blockHelperMissing, 'call', params),\n      '}'\n    ]);\n  },\n\n  // [appendContent]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  //\n  // Appends the string value of `content` to the current buffer\n  appendContent: function(content) {\n    if (this.pendingContent) {\n      content = this.pendingContent + content;\n    } else {\n      this.pendingLocation = this.source.currentLocation;\n    }\n\n    this.pendingContent = content;\n  },\n\n  // [append]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Coerces `value` to a String and appends it to the current buffer.\n  //\n  // If `value` is truthy, or 0, it is coerced into a string and appended\n  // Otherwise, the empty string is appended\n  append: function() {\n    if (this.isInline()) {\n      this.replaceStack(current => [' != null ? ', current, ' : \"\"']);\n\n      this.pushSource(this.appendToBuffer(this.popStack()));\n    } else {\n      let local = this.popStack();\n      this.pushSource([\n        'if (',\n        local,\n        ' != null) { ',\n        this.appendToBuffer(local, undefined, true),\n        ' }'\n      ]);\n      if (this.environment.isSimple) {\n        this.pushSource([\n          'else { ',\n          this.appendToBuffer(\"''\", undefined, true),\n          ' }'\n        ]);\n      }\n    }\n  },\n\n  // [appendEscaped]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Escape `value` and append it to the buffer\n  appendEscaped: function() {\n    this.pushSource(\n      this.appendToBuffer([\n        this.aliasable('container.escapeExpression'),\n        '(',\n        this.popStack(),\n        ')'\n      ])\n    );\n  },\n\n  // [getContext]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  // Compiler value, after: lastContext=depth\n  //\n  // Set the value of the `lastContext` compiler value to the depth\n  getContext: function(depth) {\n    this.lastContext = depth;\n  },\n\n  // [pushContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext, ...\n  //\n  // Pushes the value of the current context onto the stack.\n  pushContext: function() {\n    this.pushStackLiteral(this.contextName(this.lastContext));\n  },\n\n  // [lookupOnContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext[name], ...\n  //\n  // Looks up the value of `name` on the current context and pushes\n  // it onto the stack.\n  lookupOnContext: function(parts, falsy, strict, scoped) {\n    let i = 0;\n\n    if (!scoped && this.options.compat && !this.lastContext) {\n      // The depthed query is expected to handle the undefined logic for the root level that\n      // is implemented below, so we evaluate that directly in compat mode\n      this.push(this.depthedLookup(parts[i++]));\n    } else {\n      this.pushContext();\n    }\n\n    this.resolvePath('context', parts, i, falsy, strict);\n  },\n\n  // [lookupBlockParam]\n  //\n  // On stack, before: ...\n  // On stack, after: blockParam[name], ...\n  //\n  // Looks up the value of `parts` on the given block param and pushes\n  // it onto the stack.\n  lookupBlockParam: function(blockParamId, parts) {\n    this.useBlockParams = true;\n\n    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);\n    this.resolvePath('context', parts, 1);\n  },\n\n  // [lookupData]\n  //\n  // On stack, before: ...\n  // On stack, after: data, ...\n  //\n  // Push the data lookup operator\n  lookupData: function(depth, parts, strict) {\n    if (!depth) {\n      this.pushStackLiteral('data');\n    } else {\n      this.pushStackLiteral('container.data(data, ' + depth + ')');\n    }\n\n    this.resolvePath('data', parts, 0, true, strict);\n  },\n\n  resolvePath: function(type, parts, i, falsy, strict) {\n    if (this.options.strict || this.options.assumeObjects) {\n      this.push(\n        strictLookup(this.options.strict && strict, this, parts, i, type)\n      );\n      return;\n    }\n\n    let len = parts.length;\n    for (; i < len; i++) {\n      /* eslint-disable no-loop-func */\n      this.replaceStack(current => {\n        let lookup = this.nameLookup(current, parts[i], type);\n        // We want to ensure that zero and false are handled properly if the context (falsy flag)\n        // needs to have the special handling for these values.\n        if (!falsy) {\n          return [' != null ? ', lookup, ' : ', current];\n        } else {\n          // Otherwise we can use generic falsy handling\n          return [' && ', lookup];\n        }\n      });\n      /* eslint-enable no-loop-func */\n    }\n  },\n\n  // [resolvePossibleLambda]\n  //\n  // On stack, before: value, ...\n  // On stack, after: resolved value, ...\n  //\n  // If the `value` is a lambda, replace it on the stack by\n  // the return value of the lambda\n  resolvePossibleLambda: function() {\n    this.push([\n      this.aliasable('container.lambda'),\n      '(',\n      this.popStack(),\n      ', ',\n      this.contextName(0),\n      ')'\n    ]);\n  },\n\n  // [pushStringParam]\n  //\n  // On stack, before: ...\n  // On stack, after: string, currentContext, ...\n  //\n  // This opcode is designed for use in string mode, which\n  // provides the string value of a parameter along with its\n  // depth rather than resolving it immediately.\n  pushStringParam: function(string, type) {\n    this.pushContext();\n    this.pushString(type);\n\n    // If it's a subexpression, the string result\n    // will be pushed after this opcode.\n    if (type !== 'SubExpression') {\n      if (typeof string === 'string') {\n        this.pushString(string);\n      } else {\n        this.pushStackLiteral(string);\n      }\n    }\n  },\n\n  emptyHash: function(omitEmpty) {\n    if (this.trackIds) {\n      this.push('{}'); // hashIds\n    }\n    if (this.stringParams) {\n      this.push('{}'); // hashContexts\n      this.push('{}'); // hashTypes\n    }\n    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');\n  },\n  pushHash: function() {\n    if (this.hash) {\n      this.hashes.push(this.hash);\n    }\n    this.hash = { values: {}, types: [], contexts: [], ids: [] };\n  },\n  popHash: function() {\n    let hash = this.hash;\n    this.hash = this.hashes.pop();\n\n    if (this.trackIds) {\n      this.push(this.objectLiteral(hash.ids));\n    }\n    if (this.stringParams) {\n      this.push(this.objectLiteral(hash.contexts));\n      this.push(this.objectLiteral(hash.types));\n    }\n\n    this.push(this.objectLiteral(hash.values));\n  },\n\n  // [pushString]\n  //\n  // On stack, before: ...\n  // On stack, after: quotedString(string), ...\n  //\n  // Push a quoted version of `string` onto the stack\n  pushString: function(string) {\n    this.pushStackLiteral(this.quotedString(string));\n  },\n\n  // [pushLiteral]\n  //\n  // On stack, before: ...\n  // On stack, after: value, ...\n  //\n  // Pushes a value onto the stack. This operation prevents\n  // the compiler from creating a temporary variable to hold\n  // it.\n  pushLiteral: function(value) {\n    this.pushStackLiteral(value);\n  },\n\n  // [pushProgram]\n  //\n  // On stack, before: ...\n  // On stack, after: program(guid), ...\n  //\n  // Push a program expression onto the stack. This takes\n  // a compile-time guid and converts it into a runtime-accessible\n  // expression.\n  pushProgram: function(guid) {\n    if (guid != null) {\n      this.pushStackLiteral(this.programExpression(guid));\n    } else {\n      this.pushStackLiteral(null);\n    }\n  },\n\n  // [registerDecorator]\n  //\n  // On stack, before: hash, program, params..., ...\n  // On stack, after: ...\n  //\n  // Pops off the decorator's parameters, invokes the decorator,\n  // and inserts the decorator into the decorators list.\n  registerDecorator(paramSize, name) {\n    let foundDecorator = this.nameLookup('decorators', name, 'decorator'),\n      options = this.setupHelperArgs(name, paramSize);\n\n    this.decorators.push([\n      'fn = ',\n      this.decorators.functionCall(foundDecorator, '', [\n        'fn',\n        'props',\n        'container',\n        options\n      ]),\n      ' || fn;'\n    ]);\n  },\n\n  // [invokeHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // Pops off the helper's parameters, invokes the helper,\n  // and pushes the helper's return value onto the stack.\n  //\n  // If the helper is not found, `helperMissing` is called.\n  invokeHelper: function(paramSize, name, isSimple) {\n    let nonHelper = this.popStack(),\n      helper = this.setupHelper(paramSize, name);\n\n    let possibleFunctionCalls = [];\n\n    if (isSimple) {\n      // direct call to helper\n      possibleFunctionCalls.push(helper.name);\n    }\n    // call a function from the input object\n    possibleFunctionCalls.push(nonHelper);\n    if (!this.options.strict) {\n      possibleFunctionCalls.push(\n        this.aliasable('container.hooks.helperMissing')\n      );\n    }\n\n    let functionLookupCode = [\n      '(',\n      this.itemsSeparatedBy(possibleFunctionCalls, '||'),\n      ')'\n    ];\n    let functionCall = this.source.functionCall(\n      functionLookupCode,\n      'call',\n      helper.callParams\n    );\n    this.push(functionCall);\n  },\n\n  itemsSeparatedBy: function(items, separator) {\n    let result = [];\n    result.push(items[0]);\n    for (let i = 1; i < items.length; i++) {\n      result.push(separator, items[i]);\n    }\n    return result;\n  },\n  // [invokeKnownHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // This operation is used when the helper is known to exist,\n  // so a `helperMissing` fallback is not required.\n  invokeKnownHelper: function(paramSize, name) {\n    let helper = this.setupHelper(paramSize, name);\n    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));\n  },\n\n  // [invokeAmbiguous]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of disambiguation\n  //\n  // This operation is used when an expression like `{{foo}}`\n  // is provided, but we don't know at compile-time whether it\n  // is a helper or a path.\n  //\n  // This operation emits more code than the other options,\n  // and can be avoided by passing the `knownHelpers` and\n  // `knownHelpersOnly` flags at compile-time.\n  invokeAmbiguous: function(name, helperCall) {\n    this.useRegister('helper');\n\n    let nonHelper = this.popStack();\n\n    this.emptyHash();\n    let helper = this.setupHelper(0, name, helperCall);\n\n    let helperName = (this.lastHelper = this.nameLookup(\n      'helpers',\n      name,\n      'helper'\n    ));\n\n    let lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];\n    if (!this.options.strict) {\n      lookup[0] = '(helper = ';\n      lookup.push(\n        ' != null ? helper : ',\n        this.aliasable('container.hooks.helperMissing')\n      );\n    }\n\n    this.push([\n      '(',\n      lookup,\n      helper.paramsInit ? ['),(', helper.paramsInit] : [],\n      '),',\n      '(typeof helper === ',\n      this.aliasable('\"function\"'),\n      ' ? ',\n      this.source.functionCall('helper', 'call', helper.callParams),\n      ' : helper))'\n    ]);\n  },\n\n  // [invokePartial]\n  //\n  // On stack, before: context, ...\n  // On stack after: result of partial invocation\n  //\n  // This operation pops off a context, invokes a partial with that context,\n  // and pushes the result of the invocation back.\n  invokePartial: function(isDynamic, name, indent) {\n    let params = [],\n      options = this.setupParams(name, 1, params);\n\n    if (isDynamic) {\n      name = this.popStack();\n      delete options.name;\n    }\n\n    if (indent) {\n      options.indent = JSON.stringify(indent);\n    }\n    options.helpers = 'helpers';\n    options.partials = 'partials';\n    options.decorators = 'container.decorators';\n\n    if (!isDynamic) {\n      params.unshift(this.nameLookup('partials', name, 'partial'));\n    } else {\n      params.unshift(name);\n    }\n\n    if (this.options.compat) {\n      options.depths = 'depths';\n    }\n    options = this.objectLiteral(options);\n    params.push(options);\n\n    this.push(this.source.functionCall('container.invokePartial', '', params));\n  },\n\n  // [assignToHash]\n  //\n  // On stack, before: value, ..., hash, ...\n  // On stack, after: ..., hash, ...\n  //\n  // Pops a value off the stack and assigns it to the current hash\n  assignToHash: function(key) {\n    let value = this.popStack(),\n      context,\n      type,\n      id;\n\n    if (this.trackIds) {\n      id = this.popStack();\n    }\n    if (this.stringParams) {\n      type = this.popStack();\n      context = this.popStack();\n    }\n\n    let hash = this.hash;\n    if (context) {\n      hash.contexts[key] = context;\n    }\n    if (type) {\n      hash.types[key] = type;\n    }\n    if (id) {\n      hash.ids[key] = id;\n    }\n    hash.values[key] = value;\n  },\n\n  pushId: function(type, name, child) {\n    if (type === 'BlockParam') {\n      this.pushStackLiteral(\n        'blockParams[' +\n          name[0] +\n          '].path[' +\n          name[1] +\n          ']' +\n          (child ? ' + ' + JSON.stringify('.' + child) : '')\n      );\n    } else if (type === 'PathExpression') {\n      this.pushString(name);\n    } else if (type === 'SubExpression') {\n      this.pushStackLiteral('true');\n    } else {\n      this.pushStackLiteral('null');\n    }\n  },\n\n  // HELPERS\n\n  compiler: JavaScriptCompiler,\n\n  compileChildren: function(environment, options) {\n    let children = environment.children,\n      child,\n      compiler;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      child = children[i];\n      compiler = new this.compiler(); // eslint-disable-line new-cap\n\n      let existing = this.matchExistingProgram(child);\n\n      if (existing == null) {\n        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children\n        let index = this.context.programs.length;\n        child.index = index;\n        child.name = 'program' + index;\n        this.context.programs[index] = compiler.compile(\n          child,\n          options,\n          this.context,\n          !this.precompile\n        );\n        this.context.decorators[index] = compiler.decorators;\n        this.context.environments[index] = child;\n\n        this.useDepths = this.useDepths || compiler.useDepths;\n        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;\n        child.useDepths = this.useDepths;\n        child.useBlockParams = this.useBlockParams;\n      } else {\n        child.index = existing.index;\n        child.name = 'program' + existing.index;\n\n        this.useDepths = this.useDepths || existing.useDepths;\n        this.useBlockParams = this.useBlockParams || existing.useBlockParams;\n      }\n    }\n  },\n  matchExistingProgram: function(child) {\n    for (let i = 0, len = this.context.environments.length; i < len; i++) {\n      let environment = this.context.environments[i];\n      if (environment && environment.equals(child)) {\n        return environment;\n      }\n    }\n  },\n\n  programExpression: function(guid) {\n    let child = this.environment.children[guid],\n      programParams = [child.index, 'data', child.blockParams];\n\n    if (this.useBlockParams || this.useDepths) {\n      programParams.push('blockParams');\n    }\n    if (this.useDepths) {\n      programParams.push('depths');\n    }\n\n    return 'container.program(' + programParams.join(', ') + ')';\n  },\n\n  useRegister: function(name) {\n    if (!this.registers[name]) {\n      this.registers[name] = true;\n      this.registers.list.push(name);\n    }\n  },\n\n  push: function(expr) {\n    if (!(expr instanceof Literal)) {\n      expr = this.source.wrap(expr);\n    }\n\n    this.inlineStack.push(expr);\n    return expr;\n  },\n\n  pushStackLiteral: function(item) {\n    this.push(new Literal(item));\n  },\n\n  pushSource: function(source) {\n    if (this.pendingContent) {\n      this.source.push(\n        this.appendToBuffer(\n          this.source.quotedString(this.pendingContent),\n          this.pendingLocation\n        )\n      );\n      this.pendingContent = undefined;\n    }\n\n    if (source) {\n      this.source.push(source);\n    }\n  },\n\n  replaceStack: function(callback) {\n    let prefix = ['('],\n      stack,\n      createdStack,\n      usedLiteral;\n\n    /* istanbul ignore next */\n    if (!this.isInline()) {\n      throw new Exception('replaceStack on non-inline');\n    }\n\n    // We want to merge the inline statement into the replacement statement via ','\n    let top = this.popStack(true);\n\n    if (top instanceof Literal) {\n      // Literals do not need to be inlined\n      stack = [top.value];\n      prefix = ['(', stack];\n      usedLiteral = true;\n    } else {\n      // Get or create the current stack name for use by the inline\n      createdStack = true;\n      let name = this.incrStack();\n\n      prefix = ['((', this.push(name), ' = ', top, ')'];\n      stack = this.topStack();\n    }\n\n    let item = callback.call(this, stack);\n\n    if (!usedLiteral) {\n      this.popStack();\n    }\n    if (createdStack) {\n      this.stackSlot--;\n    }\n    this.push(prefix.concat(item, ')'));\n  },\n\n  incrStack: function() {\n    this.stackSlot++;\n    if (this.stackSlot > this.stackVars.length) {\n      this.stackVars.push('stack' + this.stackSlot);\n    }\n    return this.topStackName();\n  },\n  topStackName: function() {\n    return 'stack' + this.stackSlot;\n  },\n  flushInline: function() {\n    let inlineStack = this.inlineStack;\n    this.inlineStack = [];\n    for (let i = 0, len = inlineStack.length; i < len; i++) {\n      let entry = inlineStack[i];\n      /* istanbul ignore if */\n      if (entry instanceof Literal) {\n        this.compileStack.push(entry);\n      } else {\n        let stack = this.incrStack();\n        this.pushSource([stack, ' = ', entry, ';']);\n        this.compileStack.push(stack);\n      }\n    }\n  },\n  isInline: function() {\n    return this.inlineStack.length;\n  },\n\n  popStack: function(wrapped) {\n    let inline = this.isInline(),\n      item = (inline ? this.inlineStack : this.compileStack).pop();\n\n    if (!wrapped && item instanceof Literal) {\n      return item.value;\n    } else {\n      if (!inline) {\n        /* istanbul ignore next */\n        if (!this.stackSlot) {\n          throw new Exception('Invalid stack pop');\n        }\n        this.stackSlot--;\n      }\n      return item;\n    }\n  },\n\n  topStack: function() {\n    let stack = this.isInline() ? this.inlineStack : this.compileStack,\n      item = stack[stack.length - 1];\n\n    /* istanbul ignore if */\n    if (item instanceof Literal) {\n      return item.value;\n    } else {\n      return item;\n    }\n  },\n\n  contextName: function(context) {\n    if (this.useDepths && context) {\n      return 'depths[' + context + ']';\n    } else {\n      return 'depth' + context;\n    }\n  },\n\n  quotedString: function(str) {\n    return this.source.quotedString(str);\n  },\n\n  objectLiteral: function(obj) {\n    return this.source.objectLiteral(obj);\n  },\n\n  aliasable: function(name) {\n    let ret = this.aliases[name];\n    if (ret) {\n      ret.referenceCount++;\n      return ret;\n    }\n\n    ret = this.aliases[name] = this.source.wrap(name);\n    ret.aliasable = true;\n    ret.referenceCount = 1;\n\n    return ret;\n  },\n\n  setupHelper: function(paramSize, name, blockHelper) {\n    let params = [],\n      paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);\n    let foundHelper = this.nameLookup('helpers', name, 'helper'),\n      callContext = this.aliasable(\n        `${this.contextName(0)} != null ? ${this.contextName(\n          0\n        )} : (container.nullContext || {})`\n      );\n\n    return {\n      params: params,\n      paramsInit: paramsInit,\n      name: foundHelper,\n      callParams: [callContext].concat(params)\n    };\n  },\n\n  setupParams: function(helper, paramSize, params) {\n    let options = {},\n      contexts = [],\n      types = [],\n      ids = [],\n      objectArgs = !params,\n      param;\n\n    if (objectArgs) {\n      params = [];\n    }\n\n    options.name = this.quotedString(helper);\n    options.hash = this.popStack();\n\n    if (this.trackIds) {\n      options.hashIds = this.popStack();\n    }\n    if (this.stringParams) {\n      options.hashTypes = this.popStack();\n      options.hashContexts = this.popStack();\n    }\n\n    let inverse = this.popStack(),\n      program = this.popStack();\n\n    // Avoid setting fn and inverse if neither are set. This allows\n    // helpers to do a check for `if (options.fn)`\n    if (program || inverse) {\n      options.fn = program || 'container.noop';\n      options.inverse = inverse || 'container.noop';\n    }\n\n    // The parameters go on to the stack in order (making sure that they are evaluated in order)\n    // so we need to pop them off the stack in reverse order\n    let i = paramSize;\n    while (i--) {\n      param = this.popStack();\n      params[i] = param;\n\n      if (this.trackIds) {\n        ids[i] = this.popStack();\n      }\n      if (this.stringParams) {\n        types[i] = this.popStack();\n        contexts[i] = this.popStack();\n      }\n    }\n\n    if (objectArgs) {\n      options.args = this.source.generateArray(params);\n    }\n\n    if (this.trackIds) {\n      options.ids = this.source.generateArray(ids);\n    }\n    if (this.stringParams) {\n      options.types = this.source.generateArray(types);\n      options.contexts = this.source.generateArray(contexts);\n    }\n\n    if (this.options.data) {\n      options.data = 'data';\n    }\n    if (this.useBlockParams) {\n      options.blockParams = 'blockParams';\n    }\n    return options;\n  },\n\n  setupHelperArgs: function(helper, paramSize, params, useRegister) {\n    let options = this.setupParams(helper, paramSize, params);\n    options.loc = JSON.stringify(this.source.currentLocation);\n    options = this.objectLiteral(options);\n    if (useRegister) {\n      this.useRegister('options');\n      params.push('options');\n      return ['options=', options];\n    } else if (params) {\n      params.push(options);\n      return '';\n    } else {\n      return options;\n    }\n  }\n};\n\n(function() {\n  const reservedWords = (\n    'break else new var' +\n    ' case finally return void' +\n    ' catch for switch while' +\n    ' continue function this with' +\n    ' default if throw' +\n    ' delete in try' +\n    ' do instanceof typeof' +\n    ' abstract enum int short' +\n    ' boolean export interface static' +\n    ' byte extends long super' +\n    ' char final native synchronized' +\n    ' class float package throws' +\n    ' const goto private transient' +\n    ' debugger implements protected volatile' +\n    ' double import public let yield await' +\n    ' null true false'\n  ).split(' ');\n\n  const compilerWords = (JavaScriptCompiler.RESERVED_WORDS = {});\n\n  for (let i = 0, l = reservedWords.length; i < l; i++) {\n    compilerWords[reservedWords[i]] = true;\n  }\n})();\n\n/**\n * @deprecated May be removed in the next major version\n */\nJavaScriptCompiler.isValidJavaScriptVariableName = function(name) {\n  return (\n    !JavaScriptCompiler.RESERVED_WORDS[name] &&\n    /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)\n  );\n};\n\nfunction strictLookup(requireTerminal, compiler, parts, i, type) {\n  let stack = compiler.popStack(),\n    len = parts.length;\n  if (requireTerminal) {\n    len--;\n  }\n\n  for (; i < len; i++) {\n    stack = compiler.nameLookup(stack, parts[i], type);\n  }\n\n  if (requireTerminal) {\n    return [\n      compiler.aliasable('container.strict'),\n      '(',\n      stack,\n      ', ',\n      compiler.quotedString(parts[i]),\n      ', ',\n      JSON.stringify(compiler.source.currentLocation),\n      ' )'\n    ];\n  } else {\n    return stack;\n  }\n}\n\nexport default JavaScriptCompiler;\n", "import runtime from './handlebars.runtime';\n\n// Compiler imports\nimport AST from './handlebars/compiler/ast';\nimport {\n  parser as Parser,\n  parse,\n  parseWithoutProcessing\n} from './handlebars/compiler/base';\nimport { Compiler, compile, precompile } from './handlebars/compiler/compiler';\nimport JavaScriptCompiler from './handlebars/compiler/javascript-compiler';\nimport Visitor from './handlebars/compiler/visitor';\n\nimport noConflict from './handlebars/no-conflict';\n\nlet _create = runtime.create;\nfunction create() {\n  let hb = _create();\n\n  hb.compile = function(input, options) {\n    return compile(input, options, hb);\n  };\n  hb.precompile = function(input, options) {\n    return precompile(input, options, hb);\n  };\n\n  hb.AST = AST;\n  hb.Compiler = Compiler;\n  hb.JavaScriptCompiler = JavaScriptCompiler;\n  hb.Parser = Parser;\n  hb.parse = parse;\n  hb.parseWithoutProcessing = parseWithoutProcessing;\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst.Visitor = Visitor;\n\ninst['default'] = inst;\n\nexport default inst;\n", "\"use strict\";\n// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decodeMap = new Map([\n    [0, 65533],\n    [128, 8364],\n    [130, 8218],\n    [131, 402],\n    [132, 8222],\n    [133, 8230],\n    [134, 8224],\n    [135, 8225],\n    [136, 710],\n    [137, 8240],\n    [138, 352],\n    [139, 8249],\n    [140, 338],\n    [142, 381],\n    [145, 8216],\n    [146, 8217],\n    [147, 8220],\n    [148, 8221],\n    [149, 8226],\n    [150, 8211],\n    [151, 8212],\n    [152, 732],\n    [153, 8482],\n    [154, 353],\n    [155, 8250],\n    [156, 339],\n    [158, 382],\n    [159, 376],\n]);\nvar fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\nString.fromCodePoint ||\n    function (codePoint) {\n        var output = \"\";\n        if (codePoint > 0xffff) {\n            codePoint -= 0x10000;\n            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n            codePoint = 0xdc00 | (codePoint & 0x3ff);\n        }\n        output += String.fromCharCode(codePoint);\n        return output;\n    };\nfunction decodeCodePoint(codePoint) {\n    var _a;\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n    return fromCodePoint((_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint);\n}\nexports.default = decodeCodePoint;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Generated using scripts/write-decode-map.ts\n// prettier-ignore\nexports.default = new Uint16Array([14866, 60, 237, 340, 721, 1312, 1562, 1654, 1838, 1957, 2183, 2239, 2301, 2958, 3037, 3893, 4123, 4298, 4330, 4801, 5191, 5395, 5752, 5903, 5943, 5972, 6050, 0, 0, 0, 0, 0, 0, 6135, 6565, 7422, 8183, 8738, 9242, 9503, 9938, 10189, 10573, 10637, 10715, 11950, 12246, 13539, 13950, 14445, 14533, 15364, 16514, 16980, 17390, 17763, 17849, 18036, 18125, 4096, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 92, 100, 106, 115, 122, 137, 142, 151, 157, 163, 167, 182, 196, 204, 220, 229, 108, 105, 103, 33024, 198, 59, 32768, 198, 80, 33024, 38, 59, 32768, 38, 99, 117, 116, 101, 33024, 193, 59, 32768, 193, 114, 101, 118, 101, 59, 32768, 258, 512, 105, 121, 127, 134, 114, 99, 33024, 194, 59, 32768, 194, 59, 32768, 1040, 114, 59, 32896, 55349, 56580, 114, 97, 118, 101, 33024, 192, 59, 32768, 192, 112, 104, 97, 59, 32768, 913, 97, 99, 114, 59, 32768, 256, 100, 59, 32768, 10835, 512, 103, 112, 172, 177, 111, 110, 59, 32768, 260, 102, 59, 32896, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 32768, 8289, 105, 110, 103, 33024, 197, 59, 32768, 197, 512, 99, 115, 209, 214, 114, 59, 32896, 55349, 56476, 105, 103, 110, 59, 32768, 8788, 105, 108, 100, 101, 33024, 195, 59, 32768, 195, 109, 108, 33024, 196, 59, 32768, 196, 2048, 97, 99, 101, 102, 111, 114, 115, 117, 253, 278, 282, 310, 315, 321, 327, 332, 512, 99, 114, 258, 267, 107, 115, 108, 97, 115, 104, 59, 32768, 8726, 583, 271, 274, 59, 32768, 10983, 101, 100, 59, 32768, 8966, 121, 59, 32768, 1041, 768, 99, 114, 116, 289, 296, 306, 97, 117, 115, 101, 59, 32768, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 32768, 8492, 97, 59, 32768, 914, 114, 59, 32896, 55349, 56581, 112, 102, 59, 32896, 55349, 56633, 101, 118, 101, 59, 32768, 728, 99, 114, 59, 32768, 8492, 109, 112, 101, 113, 59, 32768, 8782, 3584, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 368, 373, 380, 426, 461, 466, 487, 491, 495, 533, 593, 695, 701, 707, 99, 121, 59, 32768, 1063, 80, 89, 33024, 169, 59, 32768, 169, 768, 99, 112, 121, 387, 393, 419, 117, 116, 101, 59, 32768, 262, 512, 59, 105, 398, 400, 32768, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 32768, 8517, 108, 101, 121, 115, 59, 32768, 8493, 1024, 97, 101, 105, 111, 435, 441, 449, 454, 114, 111, 110, 59, 32768, 268, 100, 105, 108, 33024, 199, 59, 32768, 199, 114, 99, 59, 32768, 264, 110, 105, 110, 116, 59, 32768, 8752, 111, 116, 59, 32768, 266, 512, 100, 110, 471, 478, 105, 108, 108, 97, 59, 32768, 184, 116, 101, 114, 68, 111, 116, 59, 32768, 183, 114, 59, 32768, 8493, 105, 59, 32768, 935, 114, 99, 108, 101, 1024, 68, 77, 80, 84, 508, 513, 520, 526, 111, 116, 59, 32768, 8857, 105, 110, 117, 115, 59, 32768, 8854, 108, 117, 115, 59, 32768, 8853, 105, 109, 101, 115, 59, 32768, 8855, 111, 512, 99, 115, 539, 562, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8754, 101, 67, 117, 114, 108, 121, 512, 68, 81, 573, 586, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 32768, 8221, 117, 111, 116, 101, 59, 32768, 8217, 1024, 108, 110, 112, 117, 602, 614, 648, 664, 111, 110, 512, 59, 101, 609, 611, 32768, 8759, 59, 32768, 10868, 768, 103, 105, 116, 621, 629, 634, 114, 117, 101, 110, 116, 59, 32768, 8801, 110, 116, 59, 32768, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8750, 512, 102, 114, 653, 656, 59, 32768, 8450, 111, 100, 117, 99, 116, 59, 32768, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8755, 111, 115, 115, 59, 32768, 10799, 99, 114, 59, 32896, 55349, 56478, 112, 512, 59, 67, 713, 715, 32768, 8915, 97, 112, 59, 32768, 8781, 2816, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 743, 758, 763, 768, 773, 795, 809, 821, 826, 910, 1295, 512, 59, 111, 748, 750, 32768, 8517, 116, 114, 97, 104, 100, 59, 32768, 10513, 99, 121, 59, 32768, 1026, 99, 121, 59, 32768, 1029, 99, 121, 59, 32768, 1039, 768, 103, 114, 115, 780, 786, 790, 103, 101, 114, 59, 32768, 8225, 114, 59, 32768, 8609, 104, 118, 59, 32768, 10980, 512, 97, 121, 800, 806, 114, 111, 110, 59, 32768, 270, 59, 32768, 1044, 108, 512, 59, 116, 815, 817, 32768, 8711, 97, 59, 32768, 916, 114, 59, 32896, 55349, 56583, 512, 97, 102, 831, 897, 512, 99, 109, 836, 891, 114, 105, 116, 105, 99, 97, 108, 1024, 65, 68, 71, 84, 852, 859, 877, 884, 99, 117, 116, 101, 59, 32768, 180, 111, 581, 864, 867, 59, 32768, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 32768, 733, 114, 97, 118, 101, 59, 32768, 96, 105, 108, 100, 101, 59, 32768, 732, 111, 110, 100, 59, 32768, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 32768, 8518, 2113, 920, 0, 0, 0, 925, 946, 0, 1139, 102, 59, 32896, 55349, 56635, 768, 59, 68, 69, 931, 933, 938, 32768, 168, 111, 116, 59, 32768, 8412, 113, 117, 97, 108, 59, 32768, 8784, 98, 108, 101, 1536, 67, 68, 76, 82, 85, 86, 961, 978, 996, 1080, 1101, 1125, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8751, 111, 1093, 985, 0, 0, 988, 59, 32768, 168, 110, 65, 114, 114, 111, 119, 59, 32768, 8659, 512, 101, 111, 1001, 1034, 102, 116, 768, 65, 82, 84, 1010, 1017, 1029, 114, 114, 111, 119, 59, 32768, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8660, 101, 101, 59, 32768, 10980, 110, 103, 512, 76, 82, 1041, 1068, 101, 102, 116, 512, 65, 82, 1049, 1056, 114, 114, 111, 119, 59, 32768, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10233, 105, 103, 104, 116, 512, 65, 84, 1089, 1096, 114, 114, 111, 119, 59, 32768, 8658, 101, 101, 59, 32768, 8872, 112, 1042, 1108, 0, 0, 1115, 114, 114, 111, 119, 59, 32768, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 32768, 8741, 110, 1536, 65, 66, 76, 82, 84, 97, 1152, 1179, 1186, 1236, 1272, 1288, 114, 114, 111, 119, 768, 59, 66, 85, 1163, 1165, 1170, 32768, 8595, 97, 114, 59, 32768, 10515, 112, 65, 114, 114, 111, 119, 59, 32768, 8693, 114, 101, 118, 101, 59, 32768, 785, 101, 102, 116, 1315, 1196, 0, 1209, 0, 1220, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 32768, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10590, 101, 99, 116, 111, 114, 512, 59, 66, 1229, 1231, 32768, 8637, 97, 114, 59, 32768, 10582, 105, 103, 104, 116, 805, 1245, 0, 1256, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10591, 101, 99, 116, 111, 114, 512, 59, 66, 1265, 1267, 32768, 8641, 97, 114, 59, 32768, 10583, 101, 101, 512, 59, 65, 1279, 1281, 32768, 8868, 114, 114, 111, 119, 59, 32768, 8615, 114, 114, 111, 119, 59, 32768, 8659, 512, 99, 116, 1300, 1305, 114, 59, 32896, 55349, 56479, 114, 111, 107, 59, 32768, 272, 4096, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1344, 1348, 1354, 1363, 1386, 1391, 1396, 1405, 1413, 1460, 1475, 1483, 1514, 1527, 1531, 1538, 71, 59, 32768, 330, 72, 33024, 208, 59, 32768, 208, 99, 117, 116, 101, 33024, 201, 59, 32768, 201, 768, 97, 105, 121, 1370, 1376, 1383, 114, 111, 110, 59, 32768, 282, 114, 99, 33024, 202, 59, 32768, 202, 59, 32768, 1069, 111, 116, 59, 32768, 278, 114, 59, 32896, 55349, 56584, 114, 97, 118, 101, 33024, 200, 59, 32768, 200, 101, 109, 101, 110, 116, 59, 32768, 8712, 512, 97, 112, 1418, 1423, 99, 114, 59, 32768, 274, 116, 121, 1060, 1431, 0, 0, 1444, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9643, 512, 103, 112, 1465, 1470, 111, 110, 59, 32768, 280, 102, 59, 32896, 55349, 56636, 115, 105, 108, 111, 110, 59, 32768, 917, 117, 512, 97, 105, 1489, 1504, 108, 512, 59, 84, 1495, 1497, 32768, 10869, 105, 108, 100, 101, 59, 32768, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 8652, 512, 99, 105, 1519, 1523, 114, 59, 32768, 8496, 109, 59, 32768, 10867, 97, 59, 32768, 919, 109, 108, 33024, 203, 59, 32768, 203, 512, 105, 112, 1543, 1549, 115, 116, 115, 59, 32768, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 32768, 8519, 1280, 99, 102, 105, 111, 115, 1572, 1576, 1581, 1620, 1648, 121, 59, 32768, 1060, 114, 59, 32896, 55349, 56585, 108, 108, 101, 100, 1060, 1591, 0, 0, 1604, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9642, 1601, 1628, 0, 1633, 0, 0, 1639, 102, 59, 32896, 55349, 56637, 65, 108, 108, 59, 32768, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 32768, 8497, 99, 114, 59, 32768, 8497, 3072, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1678, 1683, 1688, 1701, 1708, 1729, 1734, 1739, 1742, 1748, 1828, 1834, 99, 121, 59, 32768, 1027, 33024, 62, 59, 32768, 62, 109, 109, 97, 512, 59, 100, 1696, 1698, 32768, 915, 59, 32768, 988, 114, 101, 118, 101, 59, 32768, 286, 768, 101, 105, 121, 1715, 1721, 1726, 100, 105, 108, 59, 32768, 290, 114, 99, 59, 32768, 284, 59, 32768, 1043, 111, 116, 59, 32768, 288, 114, 59, 32896, 55349, 56586, 59, 32768, 8921, 112, 102, 59, 32896, 55349, 56638, 101, 97, 116, 101, 114, 1536, 69, 70, 71, 76, 83, 84, 1766, 1783, 1794, 1803, 1809, 1821, 113, 117, 97, 108, 512, 59, 76, 1775, 1777, 32768, 8805, 101, 115, 115, 59, 32768, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8807, 114, 101, 97, 116, 101, 114, 59, 32768, 10914, 101, 115, 115, 59, 32768, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 10878, 105, 108, 100, 101, 59, 32768, 8819, 99, 114, 59, 32896, 55349, 56482, 59, 32768, 8811, 2048, 65, 97, 99, 102, 105, 111, 115, 117, 1854, 1861, 1874, 1880, 1884, 1897, 1919, 1934, 82, 68, 99, 121, 59, 32768, 1066, 512, 99, 116, 1866, 1871, 101, 107, 59, 32768, 711, 59, 32768, 94, 105, 114, 99, 59, 32768, 292, 114, 59, 32768, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 32768, 8459, 833, 1902, 0, 1906, 102, 59, 32768, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 32768, 9472, 512, 99, 116, 1924, 1928, 114, 59, 32768, 8459, 114, 111, 107, 59, 32768, 294, 109, 112, 533, 1940, 1950, 111, 119, 110, 72, 117, 109, 112, 59, 32768, 8782, 113, 117, 97, 108, 59, 32768, 8783, 3584, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 1985, 1990, 1996, 2001, 2010, 2025, 2030, 2034, 2043, 2077, 2134, 2155, 2160, 2167, 99, 121, 59, 32768, 1045, 108, 105, 103, 59, 32768, 306, 99, 121, 59, 32768, 1025, 99, 117, 116, 101, 33024, 205, 59, 32768, 205, 512, 105, 121, 2015, 2022, 114, 99, 33024, 206, 59, 32768, 206, 59, 32768, 1048, 111, 116, 59, 32768, 304, 114, 59, 32768, 8465, 114, 97, 118, 101, 33024, 204, 59, 32768, 204, 768, 59, 97, 112, 2050, 2052, 2070, 32768, 8465, 512, 99, 103, 2057, 2061, 114, 59, 32768, 298, 105, 110, 97, 114, 121, 73, 59, 32768, 8520, 108, 105, 101, 115, 59, 32768, 8658, 837, 2082, 0, 2110, 512, 59, 101, 2086, 2088, 32768, 8748, 512, 103, 114, 2093, 2099, 114, 97, 108, 59, 32768, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 32768, 8898, 105, 115, 105, 98, 108, 101, 512, 67, 84, 2120, 2127, 111, 109, 109, 97, 59, 32768, 8291, 105, 109, 101, 115, 59, 32768, 8290, 768, 103, 112, 116, 2141, 2146, 2151, 111, 110, 59, 32768, 302, 102, 59, 32896, 55349, 56640, 97, 59, 32768, 921, 99, 114, 59, 32768, 8464, 105, 108, 100, 101, 59, 32768, 296, 828, 2172, 0, 2177, 99, 121, 59, 32768, 1030, 108, 33024, 207, 59, 32768, 207, 1280, 99, 102, 111, 115, 117, 2193, 2206, 2211, 2217, 2232, 512, 105, 121, 2198, 2203, 114, 99, 59, 32768, 308, 59, 32768, 1049, 114, 59, 32896, 55349, 56589, 112, 102, 59, 32896, 55349, 56641, 820, 2222, 0, 2227, 114, 59, 32896, 55349, 56485, 114, 99, 121, 59, 32768, 1032, 107, 99, 121, 59, 32768, 1028, 1792, 72, 74, 97, 99, 102, 111, 115, 2253, 2258, 2263, 2269, 2283, 2288, 2294, 99, 121, 59, 32768, 1061, 99, 121, 59, 32768, 1036, 112, 112, 97, 59, 32768, 922, 512, 101, 121, 2274, 2280, 100, 105, 108, 59, 32768, 310, 59, 32768, 1050, 114, 59, 32896, 55349, 56590, 112, 102, 59, 32896, 55349, 56642, 99, 114, 59, 32896, 55349, 56486, 2816, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2323, 2328, 2333, 2374, 2396, 2775, 2780, 2797, 2804, 2934, 2954, 99, 121, 59, 32768, 1033, 33024, 60, 59, 32768, 60, 1280, 99, 109, 110, 112, 114, 2344, 2350, 2356, 2360, 2370, 117, 116, 101, 59, 32768, 313, 98, 100, 97, 59, 32768, 923, 103, 59, 32768, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 32768, 8466, 114, 59, 32768, 8606, 768, 97, 101, 121, 2381, 2387, 2393, 114, 111, 110, 59, 32768, 317, 100, 105, 108, 59, 32768, 315, 59, 32768, 1051, 512, 102, 115, 2401, 2702, 116, 2560, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2423, 2470, 2479, 2530, 2537, 2561, 2618, 2666, 2683, 2690, 512, 110, 114, 2428, 2441, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10216, 114, 111, 119, 768, 59, 66, 82, 2451, 2453, 2458, 32768, 8592, 97, 114, 59, 32768, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8646, 101, 105, 108, 105, 110, 103, 59, 32768, 8968, 111, 838, 2485, 0, 2498, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10214, 110, 805, 2503, 0, 2514, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10593, 101, 99, 116, 111, 114, 512, 59, 66, 2523, 2525, 32768, 8643, 97, 114, 59, 32768, 10585, 108, 111, 111, 114, 59, 32768, 8970, 105, 103, 104, 116, 512, 65, 86, 2546, 2553, 114, 114, 111, 119, 59, 32768, 8596, 101, 99, 116, 111, 114, 59, 32768, 10574, 512, 101, 114, 2566, 2591, 101, 768, 59, 65, 86, 2574, 2576, 2583, 32768, 8867, 114, 114, 111, 119, 59, 32768, 8612, 101, 99, 116, 111, 114, 59, 32768, 10586, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 2604, 2606, 2611, 32768, 8882, 97, 114, 59, 32768, 10703, 113, 117, 97, 108, 59, 32768, 8884, 112, 768, 68, 84, 86, 2626, 2638, 2649, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 32768, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10592, 101, 99, 116, 111, 114, 512, 59, 66, 2659, 2661, 32768, 8639, 97, 114, 59, 32768, 10584, 101, 99, 116, 111, 114, 512, 59, 66, 2676, 2678, 32768, 8636, 97, 114, 59, 32768, 10578, 114, 114, 111, 119, 59, 32768, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8660, 115, 1536, 69, 70, 71, 76, 83, 84, 2716, 2730, 2741, 2750, 2756, 2768, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 32768, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8806, 114, 101, 97, 116, 101, 114, 59, 32768, 8822, 101, 115, 115, 59, 32768, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 10877, 105, 108, 100, 101, 59, 32768, 8818, 114, 59, 32896, 55349, 56591, 512, 59, 101, 2785, 2787, 32768, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 32768, 8666, 105, 100, 111, 116, 59, 32768, 319, 768, 110, 112, 119, 2811, 2899, 2904, 103, 1024, 76, 82, 108, 114, 2821, 2848, 2860, 2887, 101, 102, 116, 512, 65, 82, 2829, 2836, 114, 114, 111, 119, 59, 32768, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10230, 101, 102, 116, 512, 97, 114, 2868, 2875, 114, 114, 111, 119, 59, 32768, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 10233, 102, 59, 32896, 55349, 56643, 101, 114, 512, 76, 82, 2911, 2922, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8600, 768, 99, 104, 116, 2941, 2945, 2948, 114, 59, 32768, 8466, 59, 32768, 8624, 114, 111, 107, 59, 32768, 321, 59, 32768, 8810, 2048, 97, 99, 101, 102, 105, 111, 115, 117, 2974, 2978, 2982, 3007, 3012, 3022, 3028, 3033, 112, 59, 32768, 10501, 121, 59, 32768, 1052, 512, 100, 108, 2987, 2998, 105, 117, 109, 83, 112, 97, 99, 101, 59, 32768, 8287, 108, 105, 110, 116, 114, 102, 59, 32768, 8499, 114, 59, 32896, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 32768, 8723, 112, 102, 59, 32896, 55349, 56644, 99, 114, 59, 32768, 8499, 59, 32768, 924, 2304, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3055, 3060, 3067, 3089, 3201, 3206, 3874, 3880, 3889, 99, 121, 59, 32768, 1034, 99, 117, 116, 101, 59, 32768, 323, 768, 97, 101, 121, 3074, 3080, 3086, 114, 111, 110, 59, 32768, 327, 100, 105, 108, 59, 32768, 325, 59, 32768, 1053, 768, 103, 115, 119, 3096, 3160, 3194, 97, 116, 105, 118, 101, 768, 77, 84, 86, 3108, 3121, 3145, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 32768, 8203, 104, 105, 512, 99, 110, 3128, 3137, 107, 83, 112, 97, 99, 101, 59, 32768, 8203, 83, 112, 97, 99, 101, 59, 32768, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 32768, 8203, 116, 101, 100, 512, 71, 76, 3168, 3184, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 32768, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 32768, 8810, 76, 105, 110, 101, 59, 32768, 10, 114, 59, 32896, 55349, 56593, 1024, 66, 110, 112, 116, 3215, 3222, 3238, 3242, 114, 101, 97, 107, 59, 32768, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 32768, 160, 102, 59, 32768, 8469, 3328, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3269, 3271, 3293, 3312, 3352, 3430, 3455, 3551, 3589, 3625, 3678, 3821, 3861, 32768, 10988, 512, 111, 117, 3276, 3286, 110, 103, 114, 117, 101, 110, 116, 59, 32768, 8802, 112, 67, 97, 112, 59, 32768, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 32768, 8742, 768, 108, 113, 120, 3319, 3327, 3345, 101, 109, 101, 110, 116, 59, 32768, 8713, 117, 97, 108, 512, 59, 84, 3335, 3337, 32768, 8800, 105, 108, 100, 101, 59, 32896, 8770, 824, 105, 115, 116, 115, 59, 32768, 8708, 114, 101, 97, 116, 101, 114, 1792, 59, 69, 70, 71, 76, 83, 84, 3373, 3375, 3382, 3394, 3404, 3410, 3423, 32768, 8815, 113, 117, 97, 108, 59, 32768, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32896, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 32896, 8811, 824, 101, 115, 115, 59, 32768, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32896, 10878, 824, 105, 108, 100, 101, 59, 32768, 8821, 117, 109, 112, 533, 3437, 3448, 111, 119, 110, 72, 117, 109, 112, 59, 32896, 8782, 824, 113, 117, 97, 108, 59, 32896, 8783, 824, 101, 512, 102, 115, 3461, 3492, 116, 84, 114, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 3477, 3479, 3485, 32768, 8938, 97, 114, 59, 32896, 10703, 824, 113, 117, 97, 108, 59, 32768, 8940, 115, 1536, 59, 69, 71, 76, 83, 84, 3506, 3508, 3515, 3524, 3531, 3544, 32768, 8814, 113, 117, 97, 108, 59, 32768, 8816, 114, 101, 97, 116, 101, 114, 59, 32768, 8824, 101, 115, 115, 59, 32896, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32896, 10877, 824, 105, 108, 100, 101, 59, 32768, 8820, 101, 115, 116, 101, 100, 512, 71, 76, 3561, 3578, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 32896, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 32896, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 768, 59, 69, 83, 3603, 3605, 3613, 32768, 8832, 113, 117, 97, 108, 59, 32896, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8928, 512, 101, 105, 3630, 3645, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 32768, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 3663, 3665, 3671, 32768, 8939, 97, 114, 59, 32896, 10704, 824, 113, 117, 97, 108, 59, 32768, 8941, 512, 113, 117, 3683, 3732, 117, 97, 114, 101, 83, 117, 512, 98, 112, 3694, 3712, 115, 101, 116, 512, 59, 69, 3702, 3705, 32896, 8847, 824, 113, 117, 97, 108, 59, 32768, 8930, 101, 114, 115, 101, 116, 512, 59, 69, 3722, 3725, 32896, 8848, 824, 113, 117, 97, 108, 59, 32768, 8931, 768, 98, 99, 112, 3739, 3757, 3801, 115, 101, 116, 512, 59, 69, 3747, 3750, 32896, 8834, 8402, 113, 117, 97, 108, 59, 32768, 8840, 99, 101, 101, 100, 115, 1024, 59, 69, 83, 84, 3771, 3773, 3781, 3793, 32768, 8833, 113, 117, 97, 108, 59, 32896, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8929, 105, 108, 100, 101, 59, 32896, 8831, 824, 101, 114, 115, 101, 116, 512, 59, 69, 3811, 3814, 32896, 8835, 8402, 113, 117, 97, 108, 59, 32768, 8841, 105, 108, 100, 101, 1024, 59, 69, 70, 84, 3834, 3836, 3843, 3854, 32768, 8769, 113, 117, 97, 108, 59, 32768, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8775, 105, 108, 100, 101, 59, 32768, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 32768, 8740, 99, 114, 59, 32896, 55349, 56489, 105, 108, 100, 101, 33024, 209, 59, 32768, 209, 59, 32768, 925, 3584, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 3921, 3927, 3936, 3951, 3958, 3963, 3972, 3996, 4002, 4034, 4037, 4055, 4071, 4078, 108, 105, 103, 59, 32768, 338, 99, 117, 116, 101, 33024, 211, 59, 32768, 211, 512, 105, 121, 3941, 3948, 114, 99, 33024, 212, 59, 32768, 212, 59, 32768, 1054, 98, 108, 97, 99, 59, 32768, 336, 114, 59, 32896, 55349, 56594, 114, 97, 118, 101, 33024, 210, 59, 32768, 210, 768, 97, 101, 105, 3979, 3984, 3989, 99, 114, 59, 32768, 332, 103, 97, 59, 32768, 937, 99, 114, 111, 110, 59, 32768, 927, 112, 102, 59, 32896, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 512, 68, 81, 4014, 4027, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 32768, 8220, 117, 111, 116, 101, 59, 32768, 8216, 59, 32768, 10836, 512, 99, 108, 4042, 4047, 114, 59, 32896, 55349, 56490, 97, 115, 104, 33024, 216, 59, 32768, 216, 105, 573, 4060, 4067, 100, 101, 33024, 213, 59, 32768, 213, 101, 115, 59, 32768, 10807, 109, 108, 33024, 214, 59, 32768, 214, 101, 114, 512, 66, 80, 4085, 4109, 512, 97, 114, 4090, 4094, 114, 59, 32768, 8254, 97, 99, 512, 101, 107, 4101, 4104, 59, 32768, 9182, 101, 116, 59, 32768, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 32768, 9180, 2304, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4141, 4150, 4154, 4159, 4163, 4166, 4176, 4198, 4284, 114, 116, 105, 97, 108, 68, 59, 32768, 8706, 121, 59, 32768, 1055, 114, 59, 32896, 55349, 56595, 105, 59, 32768, 934, 59, 32768, 928, 117, 115, 77, 105, 110, 117, 115, 59, 32768, 177, 512, 105, 112, 4181, 4194, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 32768, 8460, 102, 59, 32768, 8473, 1024, 59, 101, 105, 111, 4207, 4209, 4251, 4256, 32768, 10939, 99, 101, 100, 101, 115, 1024, 59, 69, 83, 84, 4223, 4225, 4232, 4244, 32768, 8826, 113, 117, 97, 108, 59, 32768, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8828, 105, 108, 100, 101, 59, 32768, 8830, 109, 101, 59, 32768, 8243, 512, 100, 112, 4261, 4267, 117, 99, 116, 59, 32768, 8719, 111, 114, 116, 105, 111, 110, 512, 59, 97, 4278, 4280, 32768, 8759, 108, 59, 32768, 8733, 512, 99, 105, 4289, 4294, 114, 59, 32896, 55349, 56491, 59, 32768, 936, 1024, 85, 102, 111, 115, 4306, 4313, 4318, 4323, 79, 84, 33024, 34, 59, 32768, 34, 114, 59, 32896, 55349, 56596, 112, 102, 59, 32768, 8474, 99, 114, 59, 32896, 55349, 56492, 3072, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4354, 4360, 4366, 4395, 4417, 4473, 4477, 4481, 4743, 4764, 4776, 4788, 97, 114, 114, 59, 32768, 10512, 71, 33024, 174, 59, 32768, 174, 768, 99, 110, 114, 4373, 4379, 4383, 117, 116, 101, 59, 32768, 340, 103, 59, 32768, 10219, 114, 512, 59, 116, 4389, 4391, 32768, 8608, 108, 59, 32768, 10518, 768, 97, 101, 121, 4402, 4408, 4414, 114, 111, 110, 59, 32768, 344, 100, 105, 108, 59, 32768, 342, 59, 32768, 1056, 512, 59, 118, 4422, 4424, 32768, 8476, 101, 114, 115, 101, 512, 69, 85, 4433, 4458, 512, 108, 113, 4438, 4446, 101, 109, 101, 110, 116, 59, 32768, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 10607, 114, 59, 32768, 8476, 111, 59, 32768, 929, 103, 104, 116, 2048, 65, 67, 68, 70, 84, 85, 86, 97, 4501, 4547, 4556, 4607, 4614, 4671, 4719, 4736, 512, 110, 114, 4506, 4519, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10217, 114, 111, 119, 768, 59, 66, 76, 4529, 4531, 4536, 32768, 8594, 97, 114, 59, 32768, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8644, 101, 105, 108, 105, 110, 103, 59, 32768, 8969, 111, 838, 4562, 0, 4575, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10215, 110, 805, 4580, 0, 4591, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10589, 101, 99, 116, 111, 114, 512, 59, 66, 4600, 4602, 32768, 8642, 97, 114, 59, 32768, 10581, 108, 111, 111, 114, 59, 32768, 8971, 512, 101, 114, 4619, 4644, 101, 768, 59, 65, 86, 4627, 4629, 4636, 32768, 8866, 114, 114, 111, 119, 59, 32768, 8614, 101, 99, 116, 111, 114, 59, 32768, 10587, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 4657, 4659, 4664, 32768, 8883, 97, 114, 59, 32768, 10704, 113, 117, 97, 108, 59, 32768, 8885, 112, 768, 68, 84, 86, 4679, 4691, 4702, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 32768, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10588, 101, 99, 116, 111, 114, 512, 59, 66, 4712, 4714, 32768, 8638, 97, 114, 59, 32768, 10580, 101, 99, 116, 111, 114, 512, 59, 66, 4729, 4731, 32768, 8640, 97, 114, 59, 32768, 10579, 114, 114, 111, 119, 59, 32768, 8658, 512, 112, 117, 4748, 4752, 102, 59, 32768, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 32768, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8667, 512, 99, 104, 4781, 4785, 114, 59, 32768, 8475, 59, 32768, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 32768, 10740, 3328, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 4827, 4842, 4849, 4856, 4889, 4894, 4949, 4955, 4967, 4973, 5059, 5065, 5070, 512, 67, 99, 4832, 4838, 72, 99, 121, 59, 32768, 1065, 121, 59, 32768, 1064, 70, 84, 99, 121, 59, 32768, 1068, 99, 117, 116, 101, 59, 32768, 346, 1280, 59, 97, 101, 105, 121, 4867, 4869, 4875, 4881, 4886, 32768, 10940, 114, 111, 110, 59, 32768, 352, 100, 105, 108, 59, 32768, 350, 114, 99, 59, 32768, 348, 59, 32768, 1057, 114, 59, 32896, 55349, 56598, 111, 114, 116, 1024, 68, 76, 82, 85, 4906, 4917, 4928, 4940, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8594, 112, 65, 114, 114, 111, 119, 59, 32768, 8593, 103, 109, 97, 59, 32768, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 32768, 8728, 112, 102, 59, 32896, 55349, 56650, 1091, 4979, 0, 0, 4983, 116, 59, 32768, 8730, 97, 114, 101, 1024, 59, 73, 83, 85, 4994, 4996, 5010, 5052, 32768, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 32768, 8851, 117, 512, 98, 112, 5016, 5033, 115, 101, 116, 512, 59, 69, 5024, 5026, 32768, 8847, 113, 117, 97, 108, 59, 32768, 8849, 101, 114, 115, 101, 116, 512, 59, 69, 5043, 5045, 32768, 8848, 113, 117, 97, 108, 59, 32768, 8850, 110, 105, 111, 110, 59, 32768, 8852, 99, 114, 59, 32896, 55349, 56494, 97, 114, 59, 32768, 8902, 1024, 98, 99, 109, 112, 5079, 5102, 5155, 5158, 512, 59, 115, 5084, 5086, 32768, 8912, 101, 116, 512, 59, 69, 5093, 5095, 32768, 8912, 113, 117, 97, 108, 59, 32768, 8838, 512, 99, 104, 5107, 5148, 101, 101, 100, 115, 1024, 59, 69, 83, 84, 5120, 5122, 5129, 5141, 32768, 8827, 113, 117, 97, 108, 59, 32768, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8829, 105, 108, 100, 101, 59, 32768, 8831, 84, 104, 97, 116, 59, 32768, 8715, 59, 32768, 8721, 768, 59, 101, 115, 5165, 5167, 5185, 32768, 8913, 114, 115, 101, 116, 512, 59, 69, 5176, 5178, 32768, 8835, 113, 117, 97, 108, 59, 32768, 8839, 101, 116, 59, 32768, 8913, 2816, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5213, 5221, 5227, 5241, 5252, 5274, 5279, 5323, 5362, 5368, 5378, 79, 82, 78, 33024, 222, 59, 32768, 222, 65, 68, 69, 59, 32768, 8482, 512, 72, 99, 5232, 5237, 99, 121, 59, 32768, 1035, 121, 59, 32768, 1062, 512, 98, 117, 5246, 5249, 59, 32768, 9, 59, 32768, 932, 768, 97, 101, 121, 5259, 5265, 5271, 114, 111, 110, 59, 32768, 356, 100, 105, 108, 59, 32768, 354, 59, 32768, 1058, 114, 59, 32896, 55349, 56599, 512, 101, 105, 5284, 5300, 835, 5289, 0, 5297, 101, 102, 111, 114, 101, 59, 32768, 8756, 97, 59, 32768, 920, 512, 99, 110, 5305, 5315, 107, 83, 112, 97, 99, 101, 59, 32896, 8287, 8202, 83, 112, 97, 99, 101, 59, 32768, 8201, 108, 100, 101, 1024, 59, 69, 70, 84, 5335, 5337, 5344, 5355, 32768, 8764, 113, 117, 97, 108, 59, 32768, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8773, 105, 108, 100, 101, 59, 32768, 8776, 112, 102, 59, 32896, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 32768, 8411, 512, 99, 116, 5383, 5388, 114, 59, 32896, 55349, 56495, 114, 111, 107, 59, 32768, 358, 5426, 5417, 5444, 5458, 5473, 0, 5480, 5485, 0, 0, 0, 0, 0, 5494, 5500, 5564, 5579, 0, 5726, 5732, 5738, 5745, 512, 99, 114, 5421, 5429, 117, 116, 101, 33024, 218, 59, 32768, 218, 114, 512, 59, 111, 5435, 5437, 32768, 8607, 99, 105, 114, 59, 32768, 10569, 114, 820, 5449, 0, 5453, 121, 59, 32768, 1038, 118, 101, 59, 32768, 364, 512, 105, 121, 5462, 5469, 114, 99, 33024, 219, 59, 32768, 219, 59, 32768, 1059, 98, 108, 97, 99, 59, 32768, 368, 114, 59, 32896, 55349, 56600, 114, 97, 118, 101, 33024, 217, 59, 32768, 217, 97, 99, 114, 59, 32768, 362, 512, 100, 105, 5504, 5548, 101, 114, 512, 66, 80, 5511, 5535, 512, 97, 114, 5516, 5520, 114, 59, 32768, 95, 97, 99, 512, 101, 107, 5527, 5530, 59, 32768, 9183, 101, 116, 59, 32768, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 32768, 9181, 111, 110, 512, 59, 80, 5555, 5557, 32768, 8899, 108, 117, 115, 59, 32768, 8846, 512, 103, 112, 5568, 5573, 111, 110, 59, 32768, 370, 102, 59, 32896, 55349, 56652, 2048, 65, 68, 69, 84, 97, 100, 112, 115, 5595, 5624, 5635, 5648, 5664, 5671, 5682, 5712, 114, 114, 111, 119, 768, 59, 66, 68, 5606, 5608, 5613, 32768, 8593, 97, 114, 59, 32768, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 10606, 101, 101, 512, 59, 65, 5655, 5657, 32768, 8869, 114, 114, 111, 119, 59, 32768, 8613, 114, 114, 111, 119, 59, 32768, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 32768, 8661, 101, 114, 512, 76, 82, 5689, 5700, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8599, 105, 512, 59, 108, 5718, 5720, 32768, 978, 111, 110, 59, 32768, 933, 105, 110, 103, 59, 32768, 366, 99, 114, 59, 32896, 55349, 56496, 105, 108, 100, 101, 59, 32768, 360, 109, 108, 33024, 220, 59, 32768, 220, 2304, 68, 98, 99, 100, 101, 102, 111, 115, 118, 5770, 5776, 5781, 5785, 5798, 5878, 5883, 5889, 5895, 97, 115, 104, 59, 32768, 8875, 97, 114, 59, 32768, 10987, 121, 59, 32768, 1042, 97, 115, 104, 512, 59, 108, 5793, 5795, 32768, 8873, 59, 32768, 10982, 512, 101, 114, 5803, 5806, 59, 32768, 8897, 768, 98, 116, 121, 5813, 5818, 5866, 97, 114, 59, 32768, 8214, 512, 59, 105, 5823, 5825, 32768, 8214, 99, 97, 108, 1024, 66, 76, 83, 84, 5837, 5842, 5848, 5859, 97, 114, 59, 32768, 8739, 105, 110, 101, 59, 32768, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 32768, 10072, 105, 108, 100, 101, 59, 32768, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 32768, 8202, 114, 59, 32896, 55349, 56601, 112, 102, 59, 32896, 55349, 56653, 99, 114, 59, 32896, 55349, 56497, 100, 97, 115, 104, 59, 32768, 8874, 1280, 99, 101, 102, 111, 115, 5913, 5919, 5925, 5930, 5936, 105, 114, 99, 59, 32768, 372, 100, 103, 101, 59, 32768, 8896, 114, 59, 32896, 55349, 56602, 112, 102, 59, 32896, 55349, 56654, 99, 114, 59, 32896, 55349, 56498, 1024, 102, 105, 111, 115, 5951, 5956, 5959, 5965, 114, 59, 32896, 55349, 56603, 59, 32768, 926, 112, 102, 59, 32896, 55349, 56655, 99, 114, 59, 32896, 55349, 56499, 2304, 65, 73, 85, 97, 99, 102, 111, 115, 117, 5990, 5995, 6000, 6005, 6014, 6027, 6032, 6038, 6044, 99, 121, 59, 32768, 1071, 99, 121, 59, 32768, 1031, 99, 121, 59, 32768, 1070, 99, 117, 116, 101, 33024, 221, 59, 32768, 221, 512, 105, 121, 6019, 6024, 114, 99, 59, 32768, 374, 59, 32768, 1067, 114, 59, 32896, 55349, 56604, 112, 102, 59, 32896, 55349, 56656, 99, 114, 59, 32896, 55349, 56500, 109, 108, 59, 32768, 376, 2048, 72, 97, 99, 100, 101, 102, 111, 115, 6066, 6071, 6078, 6092, 6097, 6119, 6123, 6128, 99, 121, 59, 32768, 1046, 99, 117, 116, 101, 59, 32768, 377, 512, 97, 121, 6083, 6089, 114, 111, 110, 59, 32768, 381, 59, 32768, 1047, 111, 116, 59, 32768, 379, 835, 6102, 0, 6116, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59, 32768, 8203, 97, 59, 32768, 918, 114, 59, 32768, 8488, 112, 102, 59, 32768, 8484, 99, 114, 59, 32896, 55349, 56501, 5938, 6159, 6168, 6175, 0, 6214, 6222, 6233, 0, 0, 0, 0, 6242, 6267, 6290, 6429, 6444, 0, 6495, 6503, 6531, 6540, 0, 6547, 99, 117, 116, 101, 33024, 225, 59, 32768, 225, 114, 101, 118, 101, 59, 32768, 259, 1536, 59, 69, 100, 105, 117, 121, 6187, 6189, 6193, 6196, 6203, 6210, 32768, 8766, 59, 32896, 8766, 819, 59, 32768, 8767, 114, 99, 33024, 226, 59, 32768, 226, 116, 101, 33024, 180, 59, 32768, 180, 59, 32768, 1072, 108, 105, 103, 33024, 230, 59, 32768, 230, 512, 59, 114, 6226, 6228, 32768, 8289, 59, 32896, 55349, 56606, 114, 97, 118, 101, 33024, 224, 59, 32768, 224, 512, 101, 112, 6246, 6261, 512, 102, 112, 6251, 6257, 115, 121, 109, 59, 32768, 8501, 104, 59, 32768, 8501, 104, 97, 59, 32768, 945, 512, 97, 112, 6271, 6284, 512, 99, 108, 6276, 6280, 114, 59, 32768, 257, 103, 59, 32768, 10815, 33024, 38, 59, 32768, 38, 1077, 6295, 0, 0, 6326, 1280, 59, 97, 100, 115, 118, 6305, 6307, 6312, 6315, 6322, 32768, 8743, 110, 100, 59, 32768, 10837, 59, 32768, 10844, 108, 111, 112, 101, 59, 32768, 10840, 59, 32768, 10842, 1792, 59, 101, 108, 109, 114, 115, 122, 6340, 6342, 6345, 6349, 6391, 6410, 6422, 32768, 8736, 59, 32768, 10660, 101, 59, 32768, 8736, 115, 100, 512, 59, 97, 6356, 6358, 32768, 8737, 2098, 6368, 6371, 6374, 6377, 6380, 6383, 6386, 6389, 59, 32768, 10664, 59, 32768, 10665, 59, 32768, 10666, 59, 32768, 10667, 59, 32768, 10668, 59, 32768, 10669, 59, 32768, 10670, 59, 32768, 10671, 116, 512, 59, 118, 6397, 6399, 32768, 8735, 98, 512, 59, 100, 6405, 6407, 32768, 8894, 59, 32768, 10653, 512, 112, 116, 6415, 6419, 104, 59, 32768, 8738, 59, 32768, 197, 97, 114, 114, 59, 32768, 9084, 512, 103, 112, 6433, 6438, 111, 110, 59, 32768, 261, 102, 59, 32896, 55349, 56658, 1792, 59, 69, 97, 101, 105, 111, 112, 6458, 6460, 6463, 6469, 6472, 6476, 6480, 32768, 8776, 59, 32768, 10864, 99, 105, 114, 59, 32768, 10863, 59, 32768, 8778, 100, 59, 32768, 8779, 115, 59, 32768, 39, 114, 111, 120, 512, 59, 101, 6488, 6490, 32768, 8776, 113, 59, 32768, 8778, 105, 110, 103, 33024, 229, 59, 32768, 229, 768, 99, 116, 121, 6509, 6514, 6517, 114, 59, 32896, 55349, 56502, 59, 32768, 42, 109, 112, 512, 59, 101, 6524, 6526, 32768, 8776, 113, 59, 32768, 8781, 105, 108, 100, 101, 33024, 227, 59, 32768, 227, 109, 108, 33024, 228, 59, 32768, 228, 512, 99, 105, 6551, 6559, 111, 110, 105, 110, 116, 59, 32768, 8755, 110, 116, 59, 32768, 10769, 4096, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 6597, 6602, 6673, 6688, 6701, 6707, 6768, 6773, 6891, 6898, 6999, 7023, 7309, 7316, 7334, 7383, 111, 116, 59, 32768, 10989, 512, 99, 114, 6607, 6652, 107, 1024, 99, 101, 112, 115, 6617, 6623, 6632, 6639, 111, 110, 103, 59, 32768, 8780, 112, 115, 105, 108, 111, 110, 59, 32768, 1014, 114, 105, 109, 101, 59, 32768, 8245, 105, 109, 512, 59, 101, 6646, 6648, 32768, 8765, 113, 59, 32768, 8909, 583, 6656, 6661, 101, 101, 59, 32768, 8893, 101, 100, 512, 59, 103, 6667, 6669, 32768, 8965, 101, 59, 32768, 8965, 114, 107, 512, 59, 116, 6680, 6682, 32768, 9141, 98, 114, 107, 59, 32768, 9142, 512, 111, 121, 6693, 6698, 110, 103, 59, 32768, 8780, 59, 32768, 1073, 113, 117, 111, 59, 32768, 8222, 1280, 99, 109, 112, 114, 116, 6718, 6731, 6738, 6743, 6749, 97, 117, 115, 512, 59, 101, 6726, 6728, 32768, 8757, 59, 32768, 8757, 112, 116, 121, 118, 59, 32768, 10672, 115, 105, 59, 32768, 1014, 110, 111, 117, 59, 32768, 8492, 768, 97, 104, 119, 6756, 6759, 6762, 59, 32768, 946, 59, 32768, 8502, 101, 101, 110, 59, 32768, 8812, 114, 59, 32896, 55349, 56607, 103, 1792, 99, 111, 115, 116, 117, 118, 119, 6789, 6809, 6834, 6850, 6872, 6879, 6884, 768, 97, 105, 117, 6796, 6800, 6805, 112, 59, 32768, 8898, 114, 99, 59, 32768, 9711, 112, 59, 32768, 8899, 768, 100, 112, 116, 6816, 6821, 6827, 111, 116, 59, 32768, 10752, 108, 117, 115, 59, 32768, 10753, 105, 109, 101, 115, 59, 32768, 10754, 1090, 6840, 0, 0, 6846, 99, 117, 112, 59, 32768, 10758, 97, 114, 59, 32768, 9733, 114, 105, 97, 110, 103, 108, 101, 512, 100, 117, 6862, 6868, 111, 119, 110, 59, 32768, 9661, 112, 59, 32768, 9651, 112, 108, 117, 115, 59, 32768, 10756, 101, 101, 59, 32768, 8897, 101, 100, 103, 101, 59, 32768, 8896, 97, 114, 111, 119, 59, 32768, 10509, 768, 97, 107, 111, 6905, 6976, 6994, 512, 99, 110, 6910, 6972, 107, 768, 108, 115, 116, 6918, 6927, 6935, 111, 122, 101, 110, 103, 101, 59, 32768, 10731, 113, 117, 97, 114, 101, 59, 32768, 9642, 114, 105, 97, 110, 103, 108, 101, 1024, 59, 100, 108, 114, 6951, 6953, 6959, 6965, 32768, 9652, 111, 119, 110, 59, 32768, 9662, 101, 102, 116, 59, 32768, 9666, 105, 103, 104, 116, 59, 32768, 9656, 107, 59, 32768, 9251, 770, 6981, 0, 6991, 771, 6985, 0, 6988, 59, 32768, 9618, 59, 32768, 9617, 52, 59, 32768, 9619, 99, 107, 59, 32768, 9608, 512, 101, 111, 7004, 7019, 512, 59, 113, 7009, 7012, 32896, 61, 8421, 117, 105, 118, 59, 32896, 8801, 8421, 116, 59, 32768, 8976, 1024, 112, 116, 119, 120, 7032, 7037, 7049, 7055, 102, 59, 32896, 55349, 56659, 512, 59, 116, 7042, 7044, 32768, 8869, 111, 109, 59, 32768, 8869, 116, 105, 101, 59, 32768, 8904, 3072, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 7080, 7101, 7126, 7147, 7182, 7187, 7208, 7233, 7240, 7246, 7253, 7274, 1024, 76, 82, 108, 114, 7089, 7092, 7095, 7098, 59, 32768, 9559, 59, 32768, 9556, 59, 32768, 9558, 59, 32768, 9555, 1280, 59, 68, 85, 100, 117, 7112, 7114, 7117, 7120, 7123, 32768, 9552, 59, 32768, 9574, 59, 32768, 9577, 59, 32768, 9572, 59, 32768, 9575, 1024, 76, 82, 108, 114, 7135, 7138, 7141, 7144, 59, 32768, 9565, 59, 32768, 9562, 59, 32768, 9564, 59, 32768, 9561, 1792, 59, 72, 76, 82, 104, 108, 114, 7162, 7164, 7167, 7170, 7173, 7176, 7179, 32768, 9553, 59, 32768, 9580, 59, 32768, 9571, 59, 32768, 9568, 59, 32768, 9579, 59, 32768, 9570, 59, 32768, 9567, 111, 120, 59, 32768, 10697, 1024, 76, 82, 108, 114, 7196, 7199, 7202, 7205, 59, 32768, 9557, 59, 32768, 9554, 59, 32768, 9488, 59, 32768, 9484, 1280, 59, 68, 85, 100, 117, 7219, 7221, 7224, 7227, 7230, 32768, 9472, 59, 32768, 9573, 59, 32768, 9576, 59, 32768, 9516, 59, 32768, 9524, 105, 110, 117, 115, 59, 32768, 8863, 108, 117, 115, 59, 32768, 8862, 105, 109, 101, 115, 59, 32768, 8864, 1024, 76, 82, 108, 114, 7262, 7265, 7268, 7271, 59, 32768, 9563, 59, 32768, 9560, 59, 32768, 9496, 59, 32768, 9492, 1792, 59, 72, 76, 82, 104, 108, 114, 7289, 7291, 7294, 7297, 7300, 7303, 7306, 32768, 9474, 59, 32768, 9578, 59, 32768, 9569, 59, 32768, 9566, 59, 32768, 9532, 59, 32768, 9508, 59, 32768, 9500, 114, 105, 109, 101, 59, 32768, 8245, 512, 101, 118, 7321, 7326, 118, 101, 59, 32768, 728, 98, 97, 114, 33024, 166, 59, 32768, 166, 1024, 99, 101, 105, 111, 7343, 7348, 7353, 7364, 114, 59, 32896, 55349, 56503, 109, 105, 59, 32768, 8271, 109, 512, 59, 101, 7359, 7361, 32768, 8765, 59, 32768, 8909, 108, 768, 59, 98, 104, 7372, 7374, 7377, 32768, 92, 59, 32768, 10693, 115, 117, 98, 59, 32768, 10184, 573, 7387, 7399, 108, 512, 59, 101, 7392, 7394, 32768, 8226, 116, 59, 32768, 8226, 112, 768, 59, 69, 101, 7406, 7408, 7411, 32768, 8782, 59, 32768, 10926, 512, 59, 113, 7416, 7418, 32768, 8783, 59, 32768, 8783, 6450, 7448, 0, 7523, 7571, 7576, 7613, 0, 7618, 7647, 0, 0, 7764, 0, 0, 7779, 0, 0, 7899, 7914, 7949, 7955, 0, 8158, 0, 8176, 768, 99, 112, 114, 7454, 7460, 7509, 117, 116, 101, 59, 32768, 263, 1536, 59, 97, 98, 99, 100, 115, 7473, 7475, 7480, 7487, 7500, 7505, 32768, 8745, 110, 100, 59, 32768, 10820, 114, 99, 117, 112, 59, 32768, 10825, 512, 97, 117, 7492, 7496, 112, 59, 32768, 10827, 112, 59, 32768, 10823, 111, 116, 59, 32768, 10816, 59, 32896, 8745, 65024, 512, 101, 111, 7514, 7518, 116, 59, 32768, 8257, 110, 59, 32768, 711, 1024, 97, 101, 105, 117, 7531, 7544, 7552, 7557, 833, 7536, 0, 7540, 115, 59, 32768, 10829, 111, 110, 59, 32768, 269, 100, 105, 108, 33024, 231, 59, 32768, 231, 114, 99, 59, 32768, 265, 112, 115, 512, 59, 115, 7564, 7566, 32768, 10828, 109, 59, 32768, 10832, 111, 116, 59, 32768, 267, 768, 100, 109, 110, 7582, 7589, 7596, 105, 108, 33024, 184, 59, 32768, 184, 112, 116, 121, 118, 59, 32768, 10674, 116, 33280, 162, 59, 101, 7603, 7605, 32768, 162, 114, 100, 111, 116, 59, 32768, 183, 114, 59, 32896, 55349, 56608, 768, 99, 101, 105, 7624, 7628, 7643, 121, 59, 32768, 1095, 99, 107, 512, 59, 109, 7635, 7637, 32768, 10003, 97, 114, 107, 59, 32768, 10003, 59, 32768, 967, 114, 1792, 59, 69, 99, 101, 102, 109, 115, 7662, 7664, 7667, 7742, 7745, 7752, 7757, 32768, 9675, 59, 32768, 10691, 768, 59, 101, 108, 7674, 7676, 7680, 32768, 710, 113, 59, 32768, 8791, 101, 1074, 7687, 0, 0, 7709, 114, 114, 111, 119, 512, 108, 114, 7695, 7701, 101, 102, 116, 59, 32768, 8634, 105, 103, 104, 116, 59, 32768, 8635, 1280, 82, 83, 97, 99, 100, 7719, 7722, 7725, 7730, 7736, 59, 32768, 174, 59, 32768, 9416, 115, 116, 59, 32768, 8859, 105, 114, 99, 59, 32768, 8858, 97, 115, 104, 59, 32768, 8861, 59, 32768, 8791, 110, 105, 110, 116, 59, 32768, 10768, 105, 100, 59, 32768, 10991, 99, 105, 114, 59, 32768, 10690, 117, 98, 115, 512, 59, 117, 7771, 7773, 32768, 9827, 105, 116, 59, 32768, 9827, 1341, 7785, 7804, 7850, 0, 7871, 111, 110, 512, 59, 101, 7791, 7793, 32768, 58, 512, 59, 113, 7798, 7800, 32768, 8788, 59, 32768, 8788, 1086, 7809, 0, 0, 7820, 97, 512, 59, 116, 7814, 7816, 32768, 44, 59, 32768, 64, 768, 59, 102, 108, 7826, 7828, 7832, 32768, 8705, 110, 59, 32768, 8728, 101, 512, 109, 120, 7838, 7844, 101, 110, 116, 59, 32768, 8705, 101, 115, 59, 32768, 8450, 824, 7854, 0, 7866, 512, 59, 100, 7858, 7860, 32768, 8773, 111, 116, 59, 32768, 10861, 110, 116, 59, 32768, 8750, 768, 102, 114, 121, 7877, 7881, 7886, 59, 32896, 55349, 56660, 111, 100, 59, 32768, 8720, 33280, 169, 59, 115, 7892, 7894, 32768, 169, 114, 59, 32768, 8471, 512, 97, 111, 7903, 7908, 114, 114, 59, 32768, 8629, 115, 115, 59, 32768, 10007, 512, 99, 117, 7918, 7923, 114, 59, 32896, 55349, 56504, 512, 98, 112, 7928, 7938, 512, 59, 101, 7933, 7935, 32768, 10959, 59, 32768, 10961, 512, 59, 101, 7943, 7945, 32768, 10960, 59, 32768, 10962, 100, 111, 116, 59, 32768, 8943, 1792, 100, 101, 108, 112, 114, 118, 119, 7969, 7983, 7996, 8009, 8057, 8147, 8152, 97, 114, 114, 512, 108, 114, 7977, 7980, 59, 32768, 10552, 59, 32768, 10549, 1089, 7989, 0, 0, 7993, 114, 59, 32768, 8926, 99, 59, 32768, 8927, 97, 114, 114, 512, 59, 112, 8004, 8006, 32768, 8630, 59, 32768, 10557, 1536, 59, 98, 99, 100, 111, 115, 8022, 8024, 8031, 8044, 8049, 8053, 32768, 8746, 114, 99, 97, 112, 59, 32768, 10824, 512, 97, 117, 8036, 8040, 112, 59, 32768, 10822, 112, 59, 32768, 10826, 111, 116, 59, 32768, 8845, 114, 59, 32768, 10821, 59, 32896, 8746, 65024, 1024, 97, 108, 114, 118, 8066, 8078, 8116, 8123, 114, 114, 512, 59, 109, 8073, 8075, 32768, 8631, 59, 32768, 10556, 121, 768, 101, 118, 119, 8086, 8104, 8109, 113, 1089, 8093, 0, 0, 8099, 114, 101, 99, 59, 32768, 8926, 117, 99, 99, 59, 32768, 8927, 101, 101, 59, 32768, 8910, 101, 100, 103, 101, 59, 32768, 8911, 101, 110, 33024, 164, 59, 32768, 164, 101, 97, 114, 114, 111, 119, 512, 108, 114, 8134, 8140, 101, 102, 116, 59, 32768, 8630, 105, 103, 104, 116, 59, 32768, 8631, 101, 101, 59, 32768, 8910, 101, 100, 59, 32768, 8911, 512, 99, 105, 8162, 8170, 111, 110, 105, 110, 116, 59, 32768, 8754, 110, 116, 59, 32768, 8753, 108, 99, 116, 121, 59, 32768, 9005, 4864, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 8221, 8226, 8231, 8267, 8282, 8296, 8327, 8351, 8366, 8379, 8466, 8471, 8487, 8621, 8647, 8676, 8697, 8712, 8720, 114, 114, 59, 32768, 8659, 97, 114, 59, 32768, 10597, 1024, 103, 108, 114, 115, 8240, 8246, 8252, 8256, 103, 101, 114, 59, 32768, 8224, 101, 116, 104, 59, 32768, 8504, 114, 59, 32768, 8595, 104, 512, 59, 118, 8262, 8264, 32768, 8208, 59, 32768, 8867, 572, 8271, 8278, 97, 114, 111, 119, 59, 32768, 10511, 97, 99, 59, 32768, 733, 512, 97, 121, 8287, 8293, 114, 111, 110, 59, 32768, 271, 59, 32768, 1076, 768, 59, 97, 111, 8303, 8305, 8320, 32768, 8518, 512, 103, 114, 8310, 8316, 103, 101, 114, 59, 32768, 8225, 114, 59, 32768, 8650, 116, 115, 101, 113, 59, 32768, 10871, 768, 103, 108, 109, 8334, 8339, 8344, 33024, 176, 59, 32768, 176, 116, 97, 59, 32768, 948, 112, 116, 121, 118, 59, 32768, 10673, 512, 105, 114, 8356, 8362, 115, 104, 116, 59, 32768, 10623, 59, 32896, 55349, 56609, 97, 114, 512, 108, 114, 8373, 8376, 59, 32768, 8643, 59, 32768, 8642, 1280, 97, 101, 103, 115, 118, 8390, 8418, 8421, 8428, 8433, 109, 768, 59, 111, 115, 8398, 8400, 8415, 32768, 8900, 110, 100, 512, 59, 115, 8407, 8409, 32768, 8900, 117, 105, 116, 59, 32768, 9830, 59, 32768, 9830, 59, 32768, 168, 97, 109, 109, 97, 59, 32768, 989, 105, 110, 59, 32768, 8946, 768, 59, 105, 111, 8440, 8442, 8461, 32768, 247, 100, 101, 33280, 247, 59, 111, 8450, 8452, 32768, 247, 110, 116, 105, 109, 101, 115, 59, 32768, 8903, 110, 120, 59, 32768, 8903, 99, 121, 59, 32768, 1106, 99, 1088, 8478, 0, 0, 8483, 114, 110, 59, 32768, 8990, 111, 112, 59, 32768, 8973, 1280, 108, 112, 116, 117, 119, 8498, 8504, 8509, 8556, 8570, 108, 97, 114, 59, 32768, 36, 102, 59, 32896, 55349, 56661, 1280, 59, 101, 109, 112, 115, 8520, 8522, 8535, 8542, 8548, 32768, 729, 113, 512, 59, 100, 8528, 8530, 32768, 8784, 111, 116, 59, 32768, 8785, 105, 110, 117, 115, 59, 32768, 8760, 108, 117, 115, 59, 32768, 8724, 113, 117, 97, 114, 101, 59, 32768, 8865, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59, 32768, 8966, 110, 768, 97, 100, 104, 8578, 8585, 8597, 114, 114, 111, 119, 59, 32768, 8595, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59, 32768, 8650, 97, 114, 112, 111, 111, 110, 512, 108, 114, 8608, 8614, 101, 102, 116, 59, 32768, 8643, 105, 103, 104, 116, 59, 32768, 8642, 563, 8625, 8633, 107, 97, 114, 111, 119, 59, 32768, 10512, 1088, 8638, 0, 0, 8643, 114, 110, 59, 32768, 8991, 111, 112, 59, 32768, 8972, 768, 99, 111, 116, 8654, 8666, 8670, 512, 114, 121, 8659, 8663, 59, 32896, 55349, 56505, 59, 32768, 1109, 108, 59, 32768, 10742, 114, 111, 107, 59, 32768, 273, 512, 100, 114, 8681, 8686, 111, 116, 59, 32768, 8945, 105, 512, 59, 102, 8692, 8694, 32768, 9663, 59, 32768, 9662, 512, 97, 104, 8702, 8707, 114, 114, 59, 32768, 8693, 97, 114, 59, 32768, 10607, 97, 110, 103, 108, 101, 59, 32768, 10662, 512, 99, 105, 8725, 8729, 121, 59, 32768, 1119, 103, 114, 97, 114, 114, 59, 32768, 10239, 4608, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 8774, 8788, 8807, 8844, 8849, 8852, 8866, 8895, 8929, 8977, 8989, 9004, 9046, 9136, 9151, 9171, 9184, 9199, 512, 68, 111, 8779, 8784, 111, 116, 59, 32768, 10871, 116, 59, 32768, 8785, 512, 99, 115, 8793, 8801, 117, 116, 101, 33024, 233, 59, 32768, 233, 116, 101, 114, 59, 32768, 10862, 1024, 97, 105, 111, 121, 8816, 8822, 8835, 8841, 114, 111, 110, 59, 32768, 283, 114, 512, 59, 99, 8828, 8830, 32768, 8790, 33024, 234, 59, 32768, 234, 108, 111, 110, 59, 32768, 8789, 59, 32768, 1101, 111, 116, 59, 32768, 279, 59, 32768, 8519, 512, 68, 114, 8857, 8862, 111, 116, 59, 32768, 8786, 59, 32896, 55349, 56610, 768, 59, 114, 115, 8873, 8875, 8883, 32768, 10906, 97, 118, 101, 33024, 232, 59, 32768, 232, 512, 59, 100, 8888, 8890, 32768, 10902, 111, 116, 59, 32768, 10904, 1024, 59, 105, 108, 115, 8904, 8906, 8914, 8917, 32768, 10905, 110, 116, 101, 114, 115, 59, 32768, 9191, 59, 32768, 8467, 512, 59, 100, 8922, 8924, 32768, 10901, 111, 116, 59, 32768, 10903, 768, 97, 112, 115, 8936, 8941, 8960, 99, 114, 59, 32768, 275, 116, 121, 768, 59, 115, 118, 8950, 8952, 8957, 32768, 8709, 101, 116, 59, 32768, 8709, 59, 32768, 8709, 112, 512, 49, 59, 8966, 8975, 516, 8970, 8973, 59, 32768, 8196, 59, 32768, 8197, 32768, 8195, 512, 103, 115, 8982, 8985, 59, 32768, 331, 112, 59, 32768, 8194, 512, 103, 112, 8994, 8999, 111, 110, 59, 32768, 281, 102, 59, 32896, 55349, 56662, 768, 97, 108, 115, 9011, 9023, 9028, 114, 512, 59, 115, 9017, 9019, 32768, 8917, 108, 59, 32768, 10723, 117, 115, 59, 32768, 10865, 105, 768, 59, 108, 118, 9036, 9038, 9043, 32768, 949, 111, 110, 59, 32768, 949, 59, 32768, 1013, 1024, 99, 115, 117, 118, 9055, 9071, 9099, 9128, 512, 105, 111, 9060, 9065, 114, 99, 59, 32768, 8790, 108, 111, 110, 59, 32768, 8789, 1082, 9077, 0, 0, 9081, 109, 59, 32768, 8770, 97, 110, 116, 512, 103, 108, 9088, 9093, 116, 114, 59, 32768, 10902, 101, 115, 115, 59, 32768, 10901, 768, 97, 101, 105, 9106, 9111, 9116, 108, 115, 59, 32768, 61, 115, 116, 59, 32768, 8799, 118, 512, 59, 68, 9122, 9124, 32768, 8801, 68, 59, 32768, 10872, 112, 97, 114, 115, 108, 59, 32768, 10725, 512, 68, 97, 9141, 9146, 111, 116, 59, 32768, 8787, 114, 114, 59, 32768, 10609, 768, 99, 100, 105, 9158, 9162, 9167, 114, 59, 32768, 8495, 111, 116, 59, 32768, 8784, 109, 59, 32768, 8770, 512, 97, 104, 9176, 9179, 59, 32768, 951, 33024, 240, 59, 32768, 240, 512, 109, 114, 9189, 9195, 108, 33024, 235, 59, 32768, 235, 111, 59, 32768, 8364, 768, 99, 105, 112, 9206, 9210, 9215, 108, 59, 32768, 33, 115, 116, 59, 32768, 8707, 512, 101, 111, 9220, 9230, 99, 116, 97, 116, 105, 111, 110, 59, 32768, 8496, 110, 101, 110, 116, 105, 97, 108, 101, 59, 32768, 8519, 4914, 9262, 0, 9276, 0, 9280, 9287, 0, 0, 9318, 9324, 0, 9331, 0, 9352, 9357, 9386, 0, 9395, 9497, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 32768, 8786, 121, 59, 32768, 1092, 109, 97, 108, 101, 59, 32768, 9792, 768, 105, 108, 114, 9293, 9299, 9313, 108, 105, 103, 59, 32768, 64259, 1082, 9305, 0, 0, 9309, 103, 59, 32768, 64256, 105, 103, 59, 32768, 64260, 59, 32896, 55349, 56611, 108, 105, 103, 59, 32768, 64257, 108, 105, 103, 59, 32896, 102, 106, 768, 97, 108, 116, 9337, 9341, 9346, 116, 59, 32768, 9837, 105, 103, 59, 32768, 64258, 110, 115, 59, 32768, 9649, 111, 102, 59, 32768, 402, 833, 9361, 0, 9366, 102, 59, 32896, 55349, 56663, 512, 97, 107, 9370, 9375, 108, 108, 59, 32768, 8704, 512, 59, 118, 9380, 9382, 32768, 8916, 59, 32768, 10969, 97, 114, 116, 105, 110, 116, 59, 32768, 10765, 512, 97, 111, 9399, 9491, 512, 99, 115, 9404, 9487, 1794, 9413, 9443, 9453, 9470, 9474, 0, 9484, 1795, 9421, 9426, 9429, 9434, 9437, 0, 9440, 33024, 189, 59, 32768, 189, 59, 32768, 8531, 33024, 188, 59, 32768, 188, 59, 32768, 8533, 59, 32768, 8537, 59, 32768, 8539, 772, 9447, 0, 9450, 59, 32768, 8532, 59, 32768, 8534, 1285, 9459, 9464, 0, 0, 9467, 33024, 190, 59, 32768, 190, 59, 32768, 8535, 59, 32768, 8540, 53, 59, 32768, 8536, 775, 9478, 0, 9481, 59, 32768, 8538, 59, 32768, 8541, 56, 59, 32768, 8542, 108, 59, 32768, 8260, 119, 110, 59, 32768, 8994, 99, 114, 59, 32896, 55349, 56507, 4352, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 9537, 9547, 9575, 9582, 9595, 9600, 9679, 9684, 9694, 9700, 9705, 9725, 9773, 9779, 9785, 9810, 9917, 512, 59, 108, 9542, 9544, 32768, 8807, 59, 32768, 10892, 768, 99, 109, 112, 9554, 9560, 9572, 117, 116, 101, 59, 32768, 501, 109, 97, 512, 59, 100, 9567, 9569, 32768, 947, 59, 32768, 989, 59, 32768, 10886, 114, 101, 118, 101, 59, 32768, 287, 512, 105, 121, 9587, 9592, 114, 99, 59, 32768, 285, 59, 32768, 1075, 111, 116, 59, 32768, 289, 1024, 59, 108, 113, 115, 9609, 9611, 9614, 9633, 32768, 8805, 59, 32768, 8923, 768, 59, 113, 115, 9621, 9623, 9626, 32768, 8805, 59, 32768, 8807, 108, 97, 110, 116, 59, 32768, 10878, 1024, 59, 99, 100, 108, 9642, 9644, 9648, 9667, 32768, 10878, 99, 59, 32768, 10921, 111, 116, 512, 59, 111, 9655, 9657, 32768, 10880, 512, 59, 108, 9662, 9664, 32768, 10882, 59, 32768, 10884, 512, 59, 101, 9672, 9675, 32896, 8923, 65024, 115, 59, 32768, 10900, 114, 59, 32896, 55349, 56612, 512, 59, 103, 9689, 9691, 32768, 8811, 59, 32768, 8921, 109, 101, 108, 59, 32768, 8503, 99, 121, 59, 32768, 1107, 1024, 59, 69, 97, 106, 9714, 9716, 9719, 9722, 32768, 8823, 59, 32768, 10898, 59, 32768, 10917, 59, 32768, 10916, 1024, 69, 97, 101, 115, 9734, 9737, 9751, 9768, 59, 32768, 8809, 112, 512, 59, 112, 9743, 9745, 32768, 10890, 114, 111, 120, 59, 32768, 10890, 512, 59, 113, 9756, 9758, 32768, 10888, 512, 59, 113, 9763, 9765, 32768, 10888, 59, 32768, 8809, 105, 109, 59, 32768, 8935, 112, 102, 59, 32896, 55349, 56664, 97, 118, 101, 59, 32768, 96, 512, 99, 105, 9790, 9794, 114, 59, 32768, 8458, 109, 768, 59, 101, 108, 9802, 9804, 9807, 32768, 8819, 59, 32768, 10894, 59, 32768, 10896, 34304, 62, 59, 99, 100, 108, 113, 114, 9824, 9826, 9838, 9843, 9849, 9856, 32768, 62, 512, 99, 105, 9831, 9834, 59, 32768, 10919, 114, 59, 32768, 10874, 111, 116, 59, 32768, 8919, 80, 97, 114, 59, 32768, 10645, 117, 101, 115, 116, 59, 32768, 10876, 1280, 97, 100, 101, 108, 115, 9867, 9882, 9887, 9906, 9912, 833, 9872, 0, 9879, 112, 114, 111, 120, 59, 32768, 10886, 114, 59, 32768, 10616, 111, 116, 59, 32768, 8919, 113, 512, 108, 113, 9893, 9899, 101, 115, 115, 59, 32768, 8923, 108, 101, 115, 115, 59, 32768, 10892, 101, 115, 115, 59, 32768, 8823, 105, 109, 59, 32768, 8819, 512, 101, 110, 9922, 9932, 114, 116, 110, 101, 113, 113, 59, 32896, 8809, 65024, 69, 59, 32896, 8809, 65024, 2560, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 9958, 9963, 10015, 10020, 10026, 10060, 10065, 10085, 10147, 10171, 114, 114, 59, 32768, 8660, 1024, 105, 108, 109, 114, 9972, 9978, 9982, 9988, 114, 115, 112, 59, 32768, 8202, 102, 59, 32768, 189, 105, 108, 116, 59, 32768, 8459, 512, 100, 114, 9993, 9998, 99, 121, 59, 32768, 1098, 768, 59, 99, 119, 10005, 10007, 10012, 32768, 8596, 105, 114, 59, 32768, 10568, 59, 32768, 8621, 97, 114, 59, 32768, 8463, 105, 114, 99, 59, 32768, 293, 768, 97, 108, 114, 10033, 10048, 10054, 114, 116, 115, 512, 59, 117, 10041, 10043, 32768, 9829, 105, 116, 59, 32768, 9829, 108, 105, 112, 59, 32768, 8230, 99, 111, 110, 59, 32768, 8889, 114, 59, 32896, 55349, 56613, 115, 512, 101, 119, 10071, 10078, 97, 114, 111, 119, 59, 32768, 10533, 97, 114, 111, 119, 59, 32768, 10534, 1280, 97, 109, 111, 112, 114, 10096, 10101, 10107, 10136, 10141, 114, 114, 59, 32768, 8703, 116, 104, 116, 59, 32768, 8763, 107, 512, 108, 114, 10113, 10124, 101, 102, 116, 97, 114, 114, 111, 119, 59, 32768, 8617, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8618, 102, 59, 32896, 55349, 56665, 98, 97, 114, 59, 32768, 8213, 768, 99, 108, 116, 10154, 10159, 10165, 114, 59, 32896, 55349, 56509, 97, 115, 104, 59, 32768, 8463, 114, 111, 107, 59, 32768, 295, 512, 98, 112, 10176, 10182, 117, 108, 108, 59, 32768, 8259, 104, 101, 110, 59, 32768, 8208, 5426, 10211, 0, 10220, 0, 10239, 10255, 10267, 0, 10276, 10312, 0, 0, 10318, 10371, 10458, 10485, 10491, 0, 10500, 10545, 10558, 99, 117, 116, 101, 33024, 237, 59, 32768, 237, 768, 59, 105, 121, 10226, 10228, 10235, 32768, 8291, 114, 99, 33024, 238, 59, 32768, 238, 59, 32768, 1080, 512, 99, 120, 10243, 10247, 121, 59, 32768, 1077, 99, 108, 33024, 161, 59, 32768, 161, 512, 102, 114, 10259, 10262, 59, 32768, 8660, 59, 32896, 55349, 56614, 114, 97, 118, 101, 33024, 236, 59, 32768, 236, 1024, 59, 105, 110, 111, 10284, 10286, 10300, 10306, 32768, 8520, 512, 105, 110, 10291, 10296, 110, 116, 59, 32768, 10764, 116, 59, 32768, 8749, 102, 105, 110, 59, 32768, 10716, 116, 97, 59, 32768, 8489, 108, 105, 103, 59, 32768, 307, 768, 97, 111, 112, 10324, 10361, 10365, 768, 99, 103, 116, 10331, 10335, 10357, 114, 59, 32768, 299, 768, 101, 108, 112, 10342, 10345, 10351, 59, 32768, 8465, 105, 110, 101, 59, 32768, 8464, 97, 114, 116, 59, 32768, 8465, 104, 59, 32768, 305, 102, 59, 32768, 8887, 101, 100, 59, 32768, 437, 1280, 59, 99, 102, 111, 116, 10381, 10383, 10389, 10403, 10409, 32768, 8712, 97, 114, 101, 59, 32768, 8453, 105, 110, 512, 59, 116, 10396, 10398, 32768, 8734, 105, 101, 59, 32768, 10717, 100, 111, 116, 59, 32768, 305, 1280, 59, 99, 101, 108, 112, 10420, 10422, 10427, 10444, 10451, 32768, 8747, 97, 108, 59, 32768, 8890, 512, 103, 114, 10432, 10438, 101, 114, 115, 59, 32768, 8484, 99, 97, 108, 59, 32768, 8890, 97, 114, 104, 107, 59, 32768, 10775, 114, 111, 100, 59, 32768, 10812, 1024, 99, 103, 112, 116, 10466, 10470, 10475, 10480, 121, 59, 32768, 1105, 111, 110, 59, 32768, 303, 102, 59, 32896, 55349, 56666, 97, 59, 32768, 953, 114, 111, 100, 59, 32768, 10812, 117, 101, 115, 116, 33024, 191, 59, 32768, 191, 512, 99, 105, 10504, 10509, 114, 59, 32896, 55349, 56510, 110, 1280, 59, 69, 100, 115, 118, 10521, 10523, 10526, 10531, 10541, 32768, 8712, 59, 32768, 8953, 111, 116, 59, 32768, 8949, 512, 59, 118, 10536, 10538, 32768, 8948, 59, 32768, 8947, 59, 32768, 8712, 512, 59, 105, 10549, 10551, 32768, 8290, 108, 100, 101, 59, 32768, 297, 828, 10562, 0, 10567, 99, 121, 59, 32768, 1110, 108, 33024, 239, 59, 32768, 239, 1536, 99, 102, 109, 111, 115, 117, 10585, 10598, 10603, 10609, 10615, 10630, 512, 105, 121, 10590, 10595, 114, 99, 59, 32768, 309, 59, 32768, 1081, 114, 59, 32896, 55349, 56615, 97, 116, 104, 59, 32768, 567, 112, 102, 59, 32896, 55349, 56667, 820, 10620, 0, 10625, 114, 59, 32896, 55349, 56511, 114, 99, 121, 59, 32768, 1112, 107, 99, 121, 59, 32768, 1108, 2048, 97, 99, 102, 103, 104, 106, 111, 115, 10653, 10666, 10680, 10685, 10692, 10697, 10702, 10708, 112, 112, 97, 512, 59, 118, 10661, 10663, 32768, 954, 59, 32768, 1008, 512, 101, 121, 10671, 10677, 100, 105, 108, 59, 32768, 311, 59, 32768, 1082, 114, 59, 32896, 55349, 56616, 114, 101, 101, 110, 59, 32768, 312, 99, 121, 59, 32768, 1093, 99, 121, 59, 32768, 1116, 112, 102, 59, 32896, 55349, 56668, 99, 114, 59, 32896, 55349, 56512, 5888, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 10761, 10783, 10789, 10799, 10804, 10957, 11011, 11047, 11094, 11349, 11372, 11382, 11409, 11414, 11451, 11478, 11526, 11698, 11711, 11755, 11823, 11910, 11929, 768, 97, 114, 116, 10768, 10773, 10777, 114, 114, 59, 32768, 8666, 114, 59, 32768, 8656, 97, 105, 108, 59, 32768, 10523, 97, 114, 114, 59, 32768, 10510, 512, 59, 103, 10794, 10796, 32768, 8806, 59, 32768, 10891, 97, 114, 59, 32768, 10594, 4660, 10824, 0, 10830, 0, 10838, 0, 0, 0, 0, 0, 10844, 10850, 0, 10867, 10870, 10877, 0, 10933, 117, 116, 101, 59, 32768, 314, 109, 112, 116, 121, 118, 59, 32768, 10676, 114, 97, 110, 59, 32768, 8466, 98, 100, 97, 59, 32768, 955, 103, 768, 59, 100, 108, 10857, 10859, 10862, 32768, 10216, 59, 32768, 10641, 101, 59, 32768, 10216, 59, 32768, 10885, 117, 111, 33024, 171, 59, 32768, 171, 114, 2048, 59, 98, 102, 104, 108, 112, 115, 116, 10894, 10896, 10907, 10911, 10915, 10919, 10923, 10928, 32768, 8592, 512, 59, 102, 10901, 10903, 32768, 8676, 115, 59, 32768, 10527, 115, 59, 32768, 10525, 107, 59, 32768, 8617, 112, 59, 32768, 8619, 108, 59, 32768, 10553, 105, 109, 59, 32768, 10611, 108, 59, 32768, 8610, 768, 59, 97, 101, 10939, 10941, 10946, 32768, 10923, 105, 108, 59, 32768, 10521, 512, 59, 115, 10951, 10953, 32768, 10925, 59, 32896, 10925, 65024, 768, 97, 98, 114, 10964, 10969, 10974, 114, 114, 59, 32768, 10508, 114, 107, 59, 32768, 10098, 512, 97, 107, 10979, 10991, 99, 512, 101, 107, 10985, 10988, 59, 32768, 123, 59, 32768, 91, 512, 101, 115, 10996, 10999, 59, 32768, 10635, 108, 512, 100, 117, 11005, 11008, 59, 32768, 10639, 59, 32768, 10637, 1024, 97, 101, 117, 121, 11020, 11026, 11040, 11044, 114, 111, 110, 59, 32768, 318, 512, 100, 105, 11031, 11036, 105, 108, 59, 32768, 316, 108, 59, 32768, 8968, 98, 59, 32768, 123, 59, 32768, 1083, 1024, 99, 113, 114, 115, 11056, 11060, 11072, 11090, 97, 59, 32768, 10550, 117, 111, 512, 59, 114, 11067, 11069, 32768, 8220, 59, 32768, 8222, 512, 100, 117, 11077, 11083, 104, 97, 114, 59, 32768, 10599, 115, 104, 97, 114, 59, 32768, 10571, 104, 59, 32768, 8626, 1280, 59, 102, 103, 113, 115, 11105, 11107, 11228, 11231, 11250, 32768, 8804, 116, 1280, 97, 104, 108, 114, 116, 11119, 11136, 11157, 11169, 11216, 114, 114, 111, 119, 512, 59, 116, 11128, 11130, 32768, 8592, 97, 105, 108, 59, 32768, 8610, 97, 114, 112, 111, 111, 110, 512, 100, 117, 11147, 11153, 111, 119, 110, 59, 32768, 8637, 112, 59, 32768, 8636, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 32768, 8647, 105, 103, 104, 116, 768, 97, 104, 115, 11180, 11194, 11204, 114, 114, 111, 119, 512, 59, 115, 11189, 11191, 32768, 8596, 59, 32768, 8646, 97, 114, 112, 111, 111, 110, 115, 59, 32768, 8651, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 32768, 8621, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 32768, 8907, 59, 32768, 8922, 768, 59, 113, 115, 11238, 11240, 11243, 32768, 8804, 59, 32768, 8806, 108, 97, 110, 116, 59, 32768, 10877, 1280, 59, 99, 100, 103, 115, 11261, 11263, 11267, 11286, 11298, 32768, 10877, 99, 59, 32768, 10920, 111, 116, 512, 59, 111, 11274, 11276, 32768, 10879, 512, 59, 114, 11281, 11283, 32768, 10881, 59, 32768, 10883, 512, 59, 101, 11291, 11294, 32896, 8922, 65024, 115, 59, 32768, 10899, 1280, 97, 100, 101, 103, 115, 11309, 11317, 11322, 11339, 11344, 112, 112, 114, 111, 120, 59, 32768, 10885, 111, 116, 59, 32768, 8918, 113, 512, 103, 113, 11328, 11333, 116, 114, 59, 32768, 8922, 103, 116, 114, 59, 32768, 10891, 116, 114, 59, 32768, 8822, 105, 109, 59, 32768, 8818, 768, 105, 108, 114, 11356, 11362, 11368, 115, 104, 116, 59, 32768, 10620, 111, 111, 114, 59, 32768, 8970, 59, 32896, 55349, 56617, 512, 59, 69, 11377, 11379, 32768, 8822, 59, 32768, 10897, 562, 11386, 11405, 114, 512, 100, 117, 11391, 11394, 59, 32768, 8637, 512, 59, 108, 11399, 11401, 32768, 8636, 59, 32768, 10602, 108, 107, 59, 32768, 9604, 99, 121, 59, 32768, 1113, 1280, 59, 97, 99, 104, 116, 11425, 11427, 11432, 11440, 11446, 32768, 8810, 114, 114, 59, 32768, 8647, 111, 114, 110, 101, 114, 59, 32768, 8990, 97, 114, 100, 59, 32768, 10603, 114, 105, 59, 32768, 9722, 512, 105, 111, 11456, 11462, 100, 111, 116, 59, 32768, 320, 117, 115, 116, 512, 59, 97, 11470, 11472, 32768, 9136, 99, 104, 101, 59, 32768, 9136, 1024, 69, 97, 101, 115, 11487, 11490, 11504, 11521, 59, 32768, 8808, 112, 512, 59, 112, 11496, 11498, 32768, 10889, 114, 111, 120, 59, 32768, 10889, 512, 59, 113, 11509, 11511, 32768, 10887, 512, 59, 113, 11516, 11518, 32768, 10887, 59, 32768, 8808, 105, 109, 59, 32768, 8934, 2048, 97, 98, 110, 111, 112, 116, 119, 122, 11543, 11556, 11561, 11616, 11640, 11660, 11667, 11680, 512, 110, 114, 11548, 11552, 103, 59, 32768, 10220, 114, 59, 32768, 8701, 114, 107, 59, 32768, 10214, 103, 768, 108, 109, 114, 11569, 11596, 11604, 101, 102, 116, 512, 97, 114, 11577, 11584, 114, 114, 111, 119, 59, 32768, 10229, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 10231, 97, 112, 115, 116, 111, 59, 32768, 10236, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 10230, 112, 97, 114, 114, 111, 119, 512, 108, 114, 11627, 11633, 101, 102, 116, 59, 32768, 8619, 105, 103, 104, 116, 59, 32768, 8620, 768, 97, 102, 108, 11647, 11651, 11655, 114, 59, 32768, 10629, 59, 32896, 55349, 56669, 117, 115, 59, 32768, 10797, 105, 109, 101, 115, 59, 32768, 10804, 562, 11671, 11676, 115, 116, 59, 32768, 8727, 97, 114, 59, 32768, 95, 768, 59, 101, 102, 11687, 11689, 11695, 32768, 9674, 110, 103, 101, 59, 32768, 9674, 59, 32768, 10731, 97, 114, 512, 59, 108, 11705, 11707, 32768, 40, 116, 59, 32768, 10643, 1280, 97, 99, 104, 109, 116, 11722, 11727, 11735, 11747, 11750, 114, 114, 59, 32768, 8646, 111, 114, 110, 101, 114, 59, 32768, 8991, 97, 114, 512, 59, 100, 11742, 11744, 32768, 8651, 59, 32768, 10605, 59, 32768, 8206, 114, 105, 59, 32768, 8895, 1536, 97, 99, 104, 105, 113, 116, 11768, 11774, 11779, 11782, 11798, 11817, 113, 117, 111, 59, 32768, 8249, 114, 59, 32896, 55349, 56513, 59, 32768, 8624, 109, 768, 59, 101, 103, 11790, 11792, 11795, 32768, 8818, 59, 32768, 10893, 59, 32768, 10895, 512, 98, 117, 11803, 11806, 59, 32768, 91, 111, 512, 59, 114, 11812, 11814, 32768, 8216, 59, 32768, 8218, 114, 111, 107, 59, 32768, 322, 34816, 60, 59, 99, 100, 104, 105, 108, 113, 114, 11841, 11843, 11855, 11860, 11866, 11872, 11878, 11885, 32768, 60, 512, 99, 105, 11848, 11851, 59, 32768, 10918, 114, 59, 32768, 10873, 111, 116, 59, 32768, 8918, 114, 101, 101, 59, 32768, 8907, 109, 101, 115, 59, 32768, 8905, 97, 114, 114, 59, 32768, 10614, 117, 101, 115, 116, 59, 32768, 10875, 512, 80, 105, 11890, 11895, 97, 114, 59, 32768, 10646, 768, 59, 101, 102, 11902, 11904, 11907, 32768, 9667, 59, 32768, 8884, 59, 32768, 9666, 114, 512, 100, 117, 11916, 11923, 115, 104, 97, 114, 59, 32768, 10570, 104, 97, 114, 59, 32768, 10598, 512, 101, 110, 11934, 11944, 114, 116, 110, 101, 113, 113, 59, 32896, 8808, 65024, 69, 59, 32896, 8808, 65024, 3584, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 11978, 11984, 12061, 12075, 12081, 12095, 12100, 12104, 12170, 12181, 12188, 12204, 12207, 12223, 68, 111, 116, 59, 32768, 8762, 1024, 99, 108, 112, 114, 11993, 11999, 12019, 12055, 114, 33024, 175, 59, 32768, 175, 512, 101, 116, 12004, 12007, 59, 32768, 9794, 512, 59, 101, 12012, 12014, 32768, 10016, 115, 101, 59, 32768, 10016, 512, 59, 115, 12024, 12026, 32768, 8614, 116, 111, 1024, 59, 100, 108, 117, 12037, 12039, 12045, 12051, 32768, 8614, 111, 119, 110, 59, 32768, 8615, 101, 102, 116, 59, 32768, 8612, 112, 59, 32768, 8613, 107, 101, 114, 59, 32768, 9646, 512, 111, 121, 12066, 12072, 109, 109, 97, 59, 32768, 10793, 59, 32768, 1084, 97, 115, 104, 59, 32768, 8212, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59, 32768, 8737, 114, 59, 32896, 55349, 56618, 111, 59, 32768, 8487, 768, 99, 100, 110, 12111, 12118, 12146, 114, 111, 33024, 181, 59, 32768, 181, 1024, 59, 97, 99, 100, 12127, 12129, 12134, 12139, 32768, 8739, 115, 116, 59, 32768, 42, 105, 114, 59, 32768, 10992, 111, 116, 33024, 183, 59, 32768, 183, 117, 115, 768, 59, 98, 100, 12155, 12157, 12160, 32768, 8722, 59, 32768, 8863, 512, 59, 117, 12165, 12167, 32768, 8760, 59, 32768, 10794, 564, 12174, 12178, 112, 59, 32768, 10971, 114, 59, 32768, 8230, 112, 108, 117, 115, 59, 32768, 8723, 512, 100, 112, 12193, 12199, 101, 108, 115, 59, 32768, 8871, 102, 59, 32896, 55349, 56670, 59, 32768, 8723, 512, 99, 116, 12212, 12217, 114, 59, 32896, 55349, 56514, 112, 111, 115, 59, 32768, 8766, 768, 59, 108, 109, 12230, 12232, 12240, 32768, 956, 116, 105, 109, 97, 112, 59, 32768, 8888, 97, 112, 59, 32768, 8888, 6144, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 12294, 12315, 12364, 12376, 12393, 12472, 12496, 12547, 12553, 12636, 12641, 12703, 12725, 12747, 12752, 12876, 12881, 12957, 13033, 13089, 13294, 13359, 13384, 13499, 512, 103, 116, 12299, 12303, 59, 32896, 8921, 824, 512, 59, 118, 12308, 12311, 32896, 8811, 8402, 59, 32896, 8811, 824, 768, 101, 108, 116, 12322, 12348, 12352, 102, 116, 512, 97, 114, 12329, 12336, 114, 114, 111, 119, 59, 32768, 8653, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8654, 59, 32896, 8920, 824, 512, 59, 118, 12357, 12360, 32896, 8810, 8402, 59, 32896, 8810, 824, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8655, 512, 68, 100, 12381, 12387, 97, 115, 104, 59, 32768, 8879, 97, 115, 104, 59, 32768, 8878, 1280, 98, 99, 110, 112, 116, 12404, 12409, 12415, 12420, 12452, 108, 97, 59, 32768, 8711, 117, 116, 101, 59, 32768, 324, 103, 59, 32896, 8736, 8402, 1280, 59, 69, 105, 111, 112, 12431, 12433, 12437, 12442, 12446, 32768, 8777, 59, 32896, 10864, 824, 100, 59, 32896, 8779, 824, 115, 59, 32768, 329, 114, 111, 120, 59, 32768, 8777, 117, 114, 512, 59, 97, 12459, 12461, 32768, 9838, 108, 512, 59, 115, 12467, 12469, 32768, 9838, 59, 32768, 8469, 836, 12477, 0, 12483, 112, 33024, 160, 59, 32768, 160, 109, 112, 512, 59, 101, 12489, 12492, 32896, 8782, 824, 59, 32896, 8783, 824, 1280, 97, 101, 111, 117, 121, 12507, 12519, 12525, 12540, 12544, 833, 12512, 0, 12515, 59, 32768, 10819, 111, 110, 59, 32768, 328, 100, 105, 108, 59, 32768, 326, 110, 103, 512, 59, 100, 12532, 12534, 32768, 8775, 111, 116, 59, 32896, 10861, 824, 112, 59, 32768, 10818, 59, 32768, 1085, 97, 115, 104, 59, 32768, 8211, 1792, 59, 65, 97, 100, 113, 115, 120, 12568, 12570, 12575, 12596, 12602, 12608, 12623, 32768, 8800, 114, 114, 59, 32768, 8663, 114, 512, 104, 114, 12581, 12585, 107, 59, 32768, 10532, 512, 59, 111, 12590, 12592, 32768, 8599, 119, 59, 32768, 8599, 111, 116, 59, 32896, 8784, 824, 117, 105, 118, 59, 32768, 8802, 512, 101, 105, 12613, 12618, 97, 114, 59, 32768, 10536, 109, 59, 32896, 8770, 824, 105, 115, 116, 512, 59, 115, 12631, 12633, 32768, 8708, 59, 32768, 8708, 114, 59, 32896, 55349, 56619, 1024, 69, 101, 115, 116, 12650, 12654, 12688, 12693, 59, 32896, 8807, 824, 768, 59, 113, 115, 12661, 12663, 12684, 32768, 8817, 768, 59, 113, 115, 12670, 12672, 12676, 32768, 8817, 59, 32896, 8807, 824, 108, 97, 110, 116, 59, 32896, 10878, 824, 59, 32896, 10878, 824, 105, 109, 59, 32768, 8821, 512, 59, 114, 12698, 12700, 32768, 8815, 59, 32768, 8815, 768, 65, 97, 112, 12710, 12715, 12720, 114, 114, 59, 32768, 8654, 114, 114, 59, 32768, 8622, 97, 114, 59, 32768, 10994, 768, 59, 115, 118, 12732, 12734, 12744, 32768, 8715, 512, 59, 100, 12739, 12741, 32768, 8956, 59, 32768, 8954, 59, 32768, 8715, 99, 121, 59, 32768, 1114, 1792, 65, 69, 97, 100, 101, 115, 116, 12767, 12772, 12776, 12781, 12785, 12853, 12858, 114, 114, 59, 32768, 8653, 59, 32896, 8806, 824, 114, 114, 59, 32768, 8602, 114, 59, 32768, 8229, 1024, 59, 102, 113, 115, 12794, 12796, 12821, 12842, 32768, 8816, 116, 512, 97, 114, 12802, 12809, 114, 114, 111, 119, 59, 32768, 8602, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8622, 768, 59, 113, 115, 12828, 12830, 12834, 32768, 8816, 59, 32896, 8806, 824, 108, 97, 110, 116, 59, 32896, 10877, 824, 512, 59, 115, 12847, 12850, 32896, 10877, 824, 59, 32768, 8814, 105, 109, 59, 32768, 8820, 512, 59, 114, 12863, 12865, 32768, 8814, 105, 512, 59, 101, 12871, 12873, 32768, 8938, 59, 32768, 8940, 105, 100, 59, 32768, 8740, 512, 112, 116, 12886, 12891, 102, 59, 32896, 55349, 56671, 33536, 172, 59, 105, 110, 12899, 12901, 12936, 32768, 172, 110, 1024, 59, 69, 100, 118, 12911, 12913, 12917, 12923, 32768, 8713, 59, 32896, 8953, 824, 111, 116, 59, 32896, 8949, 824, 818, 12928, 12931, 12934, 59, 32768, 8713, 59, 32768, 8951, 59, 32768, 8950, 105, 512, 59, 118, 12942, 12944, 32768, 8716, 818, 12949, 12952, 12955, 59, 32768, 8716, 59, 32768, 8958, 59, 32768, 8957, 768, 97, 111, 114, 12964, 12992, 12999, 114, 1024, 59, 97, 115, 116, 12974, 12976, 12983, 12988, 32768, 8742, 108, 108, 101, 108, 59, 32768, 8742, 108, 59, 32896, 11005, 8421, 59, 32896, 8706, 824, 108, 105, 110, 116, 59, 32768, 10772, 768, 59, 99, 101, 13006, 13008, 13013, 32768, 8832, 117, 101, 59, 32768, 8928, 512, 59, 99, 13018, 13021, 32896, 10927, 824, 512, 59, 101, 13026, 13028, 32768, 8832, 113, 59, 32896, 10927, 824, 1024, 65, 97, 105, 116, 13042, 13047, 13066, 13077, 114, 114, 59, 32768, 8655, 114, 114, 768, 59, 99, 119, 13056, 13058, 13062, 32768, 8603, 59, 32896, 10547, 824, 59, 32896, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8603, 114, 105, 512, 59, 101, 13084, 13086, 32768, 8939, 59, 32768, 8941, 1792, 99, 104, 105, 109, 112, 113, 117, 13104, 13128, 13151, 13169, 13174, 13179, 13194, 1024, 59, 99, 101, 114, 13113, 13115, 13120, 13124, 32768, 8833, 117, 101, 59, 32768, 8929, 59, 32896, 10928, 824, 59, 32896, 55349, 56515, 111, 114, 116, 1086, 13137, 0, 0, 13142, 105, 100, 59, 32768, 8740, 97, 114, 97, 108, 108, 101, 108, 59, 32768, 8742, 109, 512, 59, 101, 13157, 13159, 32768, 8769, 512, 59, 113, 13164, 13166, 32768, 8772, 59, 32768, 8772, 105, 100, 59, 32768, 8740, 97, 114, 59, 32768, 8742, 115, 117, 512, 98, 112, 13186, 13190, 101, 59, 32768, 8930, 101, 59, 32768, 8931, 768, 98, 99, 112, 13201, 13241, 13254, 1024, 59, 69, 101, 115, 13210, 13212, 13216, 13219, 32768, 8836, 59, 32896, 10949, 824, 59, 32768, 8840, 101, 116, 512, 59, 101, 13226, 13229, 32896, 8834, 8402, 113, 512, 59, 113, 13235, 13237, 32768, 8840, 59, 32896, 10949, 824, 99, 512, 59, 101, 13247, 13249, 32768, 8833, 113, 59, 32896, 10928, 824, 1024, 59, 69, 101, 115, 13263, 13265, 13269, 13272, 32768, 8837, 59, 32896, 10950, 824, 59, 32768, 8841, 101, 116, 512, 59, 101, 13279, 13282, 32896, 8835, 8402, 113, 512, 59, 113, 13288, 13290, 32768, 8841, 59, 32896, 10950, 824, 1024, 103, 105, 108, 114, 13303, 13307, 13315, 13319, 108, 59, 32768, 8825, 108, 100, 101, 33024, 241, 59, 32768, 241, 103, 59, 32768, 8824, 105, 97, 110, 103, 108, 101, 512, 108, 114, 13330, 13344, 101, 102, 116, 512, 59, 101, 13338, 13340, 32768, 8938, 113, 59, 32768, 8940, 105, 103, 104, 116, 512, 59, 101, 13353, 13355, 32768, 8939, 113, 59, 32768, 8941, 512, 59, 109, 13364, 13366, 32768, 957, 768, 59, 101, 115, 13373, 13375, 13380, 32768, 35, 114, 111, 59, 32768, 8470, 112, 59, 32768, 8199, 2304, 68, 72, 97, 100, 103, 105, 108, 114, 115, 13403, 13409, 13415, 13420, 13426, 13439, 13446, 13476, 13493, 97, 115, 104, 59, 32768, 8877, 97, 114, 114, 59, 32768, 10500, 112, 59, 32896, 8781, 8402, 97, 115, 104, 59, 32768, 8876, 512, 101, 116, 13431, 13435, 59, 32896, 8805, 8402, 59, 32896, 62, 8402, 110, 102, 105, 110, 59, 32768, 10718, 768, 65, 101, 116, 13453, 13458, 13462, 114, 114, 59, 32768, 10498, 59, 32896, 8804, 8402, 512, 59, 114, 13467, 13470, 32896, 60, 8402, 105, 101, 59, 32896, 8884, 8402, 512, 65, 116, 13481, 13486, 114, 114, 59, 32768, 10499, 114, 105, 101, 59, 32896, 8885, 8402, 105, 109, 59, 32896, 8764, 8402, 768, 65, 97, 110, 13506, 13511, 13532, 114, 114, 59, 32768, 8662, 114, 512, 104, 114, 13517, 13521, 107, 59, 32768, 10531, 512, 59, 111, 13526, 13528, 32768, 8598, 119, 59, 32768, 8598, 101, 97, 114, 59, 32768, 10535, 9252, 13576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13579, 0, 13596, 13617, 13653, 13659, 13673, 13695, 13708, 0, 0, 13713, 13750, 0, 13788, 13794, 0, 13815, 13890, 13913, 13937, 13944, 59, 32768, 9416, 512, 99, 115, 13583, 13591, 117, 116, 101, 33024, 243, 59, 32768, 243, 116, 59, 32768, 8859, 512, 105, 121, 13600, 13613, 114, 512, 59, 99, 13606, 13608, 32768, 8858, 33024, 244, 59, 32768, 244, 59, 32768, 1086, 1280, 97, 98, 105, 111, 115, 13627, 13632, 13638, 13642, 13646, 115, 104, 59, 32768, 8861, 108, 97, 99, 59, 32768, 337, 118, 59, 32768, 10808, 116, 59, 32768, 8857, 111, 108, 100, 59, 32768, 10684, 108, 105, 103, 59, 32768, 339, 512, 99, 114, 13663, 13668, 105, 114, 59, 32768, 10687, 59, 32896, 55349, 56620, 1600, 13680, 0, 0, 13684, 0, 13692, 110, 59, 32768, 731, 97, 118, 101, 33024, 242, 59, 32768, 242, 59, 32768, 10689, 512, 98, 109, 13699, 13704, 97, 114, 59, 32768, 10677, 59, 32768, 937, 110, 116, 59, 32768, 8750, 1024, 97, 99, 105, 116, 13721, 13726, 13741, 13746, 114, 114, 59, 32768, 8634, 512, 105, 114, 13731, 13735, 114, 59, 32768, 10686, 111, 115, 115, 59, 32768, 10683, 110, 101, 59, 32768, 8254, 59, 32768, 10688, 768, 97, 101, 105, 13756, 13761, 13766, 99, 114, 59, 32768, 333, 103, 97, 59, 32768, 969, 768, 99, 100, 110, 13773, 13779, 13782, 114, 111, 110, 59, 32768, 959, 59, 32768, 10678, 117, 115, 59, 32768, 8854, 112, 102, 59, 32896, 55349, 56672, 768, 97, 101, 108, 13800, 13804, 13809, 114, 59, 32768, 10679, 114, 112, 59, 32768, 10681, 117, 115, 59, 32768, 8853, 1792, 59, 97, 100, 105, 111, 115, 118, 13829, 13831, 13836, 13869, 13875, 13879, 13886, 32768, 8744, 114, 114, 59, 32768, 8635, 1024, 59, 101, 102, 109, 13845, 13847, 13859, 13864, 32768, 10845, 114, 512, 59, 111, 13853, 13855, 32768, 8500, 102, 59, 32768, 8500, 33024, 170, 59, 32768, 170, 33024, 186, 59, 32768, 186, 103, 111, 102, 59, 32768, 8886, 114, 59, 32768, 10838, 108, 111, 112, 101, 59, 32768, 10839, 59, 32768, 10843, 768, 99, 108, 111, 13896, 13900, 13908, 114, 59, 32768, 8500, 97, 115, 104, 33024, 248, 59, 32768, 248, 108, 59, 32768, 8856, 105, 573, 13917, 13924, 100, 101, 33024, 245, 59, 32768, 245, 101, 115, 512, 59, 97, 13930, 13932, 32768, 8855, 115, 59, 32768, 10806, 109, 108, 33024, 246, 59, 32768, 246, 98, 97, 114, 59, 32768, 9021, 5426, 13972, 0, 14013, 0, 14017, 14053, 0, 14058, 14086, 0, 0, 14107, 14199, 0, 14202, 0, 0, 14229, 14425, 0, 14438, 114, 1024, 59, 97, 115, 116, 13981, 13983, 13997, 14009, 32768, 8741, 33280, 182, 59, 108, 13989, 13991, 32768, 182, 108, 101, 108, 59, 32768, 8741, 1082, 14003, 0, 0, 14007, 109, 59, 32768, 10995, 59, 32768, 11005, 59, 32768, 8706, 121, 59, 32768, 1087, 114, 1280, 99, 105, 109, 112, 116, 14028, 14033, 14038, 14043, 14046, 110, 116, 59, 32768, 37, 111, 100, 59, 32768, 46, 105, 108, 59, 32768, 8240, 59, 32768, 8869, 101, 110, 107, 59, 32768, 8241, 114, 59, 32896, 55349, 56621, 768, 105, 109, 111, 14064, 14074, 14080, 512, 59, 118, 14069, 14071, 32768, 966, 59, 32768, 981, 109, 97, 116, 59, 32768, 8499, 110, 101, 59, 32768, 9742, 768, 59, 116, 118, 14092, 14094, 14103, 32768, 960, 99, 104, 102, 111, 114, 107, 59, 32768, 8916, 59, 32768, 982, 512, 97, 117, 14111, 14132, 110, 512, 99, 107, 14117, 14128, 107, 512, 59, 104, 14123, 14125, 32768, 8463, 59, 32768, 8462, 118, 59, 32768, 8463, 115, 2304, 59, 97, 98, 99, 100, 101, 109, 115, 116, 14152, 14154, 14160, 14163, 14168, 14179, 14182, 14188, 14193, 32768, 43, 99, 105, 114, 59, 32768, 10787, 59, 32768, 8862, 105, 114, 59, 32768, 10786, 512, 111, 117, 14173, 14176, 59, 32768, 8724, 59, 32768, 10789, 59, 32768, 10866, 110, 33024, 177, 59, 32768, 177, 105, 109, 59, 32768, 10790, 119, 111, 59, 32768, 10791, 59, 32768, 177, 768, 105, 112, 117, 14208, 14216, 14221, 110, 116, 105, 110, 116, 59, 32768, 10773, 102, 59, 32896, 55349, 56673, 110, 100, 33024, 163, 59, 32768, 163, 2560, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 14249, 14251, 14254, 14258, 14263, 14336, 14348, 14367, 14413, 14418, 32768, 8826, 59, 32768, 10931, 112, 59, 32768, 10935, 117, 101, 59, 32768, 8828, 512, 59, 99, 14268, 14270, 32768, 10927, 1536, 59, 97, 99, 101, 110, 115, 14283, 14285, 14293, 14302, 14306, 14331, 32768, 8826, 112, 112, 114, 111, 120, 59, 32768, 10935, 117, 114, 108, 121, 101, 113, 59, 32768, 8828, 113, 59, 32768, 10927, 768, 97, 101, 115, 14313, 14321, 14326, 112, 112, 114, 111, 120, 59, 32768, 10937, 113, 113, 59, 32768, 10933, 105, 109, 59, 32768, 8936, 105, 109, 59, 32768, 8830, 109, 101, 512, 59, 115, 14343, 14345, 32768, 8242, 59, 32768, 8473, 768, 69, 97, 115, 14355, 14358, 14362, 59, 32768, 10933, 112, 59, 32768, 10937, 105, 109, 59, 32768, 8936, 768, 100, 102, 112, 14374, 14377, 14402, 59, 32768, 8719, 768, 97, 108, 115, 14384, 14390, 14396, 108, 97, 114, 59, 32768, 9006, 105, 110, 101, 59, 32768, 8978, 117, 114, 102, 59, 32768, 8979, 512, 59, 116, 14407, 14409, 32768, 8733, 111, 59, 32768, 8733, 105, 109, 59, 32768, 8830, 114, 101, 108, 59, 32768, 8880, 512, 99, 105, 14429, 14434, 114, 59, 32896, 55349, 56517, 59, 32768, 968, 110, 99, 115, 112, 59, 32768, 8200, 1536, 102, 105, 111, 112, 115, 117, 14457, 14462, 14467, 14473, 14480, 14486, 114, 59, 32896, 55349, 56622, 110, 116, 59, 32768, 10764, 112, 102, 59, 32896, 55349, 56674, 114, 105, 109, 101, 59, 32768, 8279, 99, 114, 59, 32896, 55349, 56518, 768, 97, 101, 111, 14493, 14513, 14526, 116, 512, 101, 105, 14499, 14508, 114, 110, 105, 111, 110, 115, 59, 32768, 8461, 110, 116, 59, 32768, 10774, 115, 116, 512, 59, 101, 14520, 14522, 32768, 63, 113, 59, 32768, 8799, 116, 33024, 34, 59, 32768, 34, 5376, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 14575, 14597, 14603, 14608, 14775, 14829, 14865, 14901, 14943, 14966, 15000, 15139, 15159, 15176, 15182, 15236, 15261, 15267, 15309, 15352, 15360, 768, 97, 114, 116, 14582, 14587, 14591, 114, 114, 59, 32768, 8667, 114, 59, 32768, 8658, 97, 105, 108, 59, 32768, 10524, 97, 114, 114, 59, 32768, 10511, 97, 114, 59, 32768, 10596, 1792, 99, 100, 101, 110, 113, 114, 116, 14623, 14637, 14642, 14650, 14672, 14679, 14751, 512, 101, 117, 14628, 14632, 59, 32896, 8765, 817, 116, 101, 59, 32768, 341, 105, 99, 59, 32768, 8730, 109, 112, 116, 121, 118, 59, 32768, 10675, 103, 1024, 59, 100, 101, 108, 14660, 14662, 14665, 14668, 32768, 10217, 59, 32768, 10642, 59, 32768, 10661, 101, 59, 32768, 10217, 117, 111, 33024, 187, 59, 32768, 187, 114, 2816, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 14703, 14705, 14709, 14720, 14723, 14727, 14731, 14735, 14739, 14744, 14748, 32768, 8594, 112, 59, 32768, 10613, 512, 59, 102, 14714, 14716, 32768, 8677, 115, 59, 32768, 10528, 59, 32768, 10547, 115, 59, 32768, 10526, 107, 59, 32768, 8618, 112, 59, 32768, 8620, 108, 59, 32768, 10565, 105, 109, 59, 32768, 10612, 108, 59, 32768, 8611, 59, 32768, 8605, 512, 97, 105, 14756, 14761, 105, 108, 59, 32768, 10522, 111, 512, 59, 110, 14767, 14769, 32768, 8758, 97, 108, 115, 59, 32768, 8474, 768, 97, 98, 114, 14782, 14787, 14792, 114, 114, 59, 32768, 10509, 114, 107, 59, 32768, 10099, 512, 97, 107, 14797, 14809, 99, 512, 101, 107, 14803, 14806, 59, 32768, 125, 59, 32768, 93, 512, 101, 115, 14814, 14817, 59, 32768, 10636, 108, 512, 100, 117, 14823, 14826, 59, 32768, 10638, 59, 32768, 10640, 1024, 97, 101, 117, 121, 14838, 14844, 14858, 14862, 114, 111, 110, 59, 32768, 345, 512, 100, 105, 14849, 14854, 105, 108, 59, 32768, 343, 108, 59, 32768, 8969, 98, 59, 32768, 125, 59, 32768, 1088, 1024, 99, 108, 113, 115, 14874, 14878, 14885, 14897, 97, 59, 32768, 10551, 100, 104, 97, 114, 59, 32768, 10601, 117, 111, 512, 59, 114, 14892, 14894, 32768, 8221, 59, 32768, 8221, 104, 59, 32768, 8627, 768, 97, 99, 103, 14908, 14934, 14938, 108, 1024, 59, 105, 112, 115, 14918, 14920, 14925, 14931, 32768, 8476, 110, 101, 59, 32768, 8475, 97, 114, 116, 59, 32768, 8476, 59, 32768, 8477, 116, 59, 32768, 9645, 33024, 174, 59, 32768, 174, 768, 105, 108, 114, 14950, 14956, 14962, 115, 104, 116, 59, 32768, 10621, 111, 111, 114, 59, 32768, 8971, 59, 32896, 55349, 56623, 512, 97, 111, 14971, 14990, 114, 512, 100, 117, 14977, 14980, 59, 32768, 8641, 512, 59, 108, 14985, 14987, 32768, 8640, 59, 32768, 10604, 512, 59, 118, 14995, 14997, 32768, 961, 59, 32768, 1009, 768, 103, 110, 115, 15007, 15123, 15127, 104, 116, 1536, 97, 104, 108, 114, 115, 116, 15022, 15039, 15060, 15086, 15099, 15111, 114, 114, 111, 119, 512, 59, 116, 15031, 15033, 32768, 8594, 97, 105, 108, 59, 32768, 8611, 97, 114, 112, 111, 111, 110, 512, 100, 117, 15050, 15056, 111, 119, 110, 59, 32768, 8641, 112, 59, 32768, 8640, 101, 102, 116, 512, 97, 104, 15068, 15076, 114, 114, 111, 119, 115, 59, 32768, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 32768, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 32768, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 32768, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 32768, 8908, 103, 59, 32768, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 32768, 8787, 768, 97, 104, 109, 15146, 15151, 15156, 114, 114, 59, 32768, 8644, 97, 114, 59, 32768, 8652, 59, 32768, 8207, 111, 117, 115, 116, 512, 59, 97, 15168, 15170, 32768, 9137, 99, 104, 101, 59, 32768, 9137, 109, 105, 100, 59, 32768, 10990, 1024, 97, 98, 112, 116, 15191, 15204, 15209, 15229, 512, 110, 114, 15196, 15200, 103, 59, 32768, 10221, 114, 59, 32768, 8702, 114, 107, 59, 32768, 10215, 768, 97, 102, 108, 15216, 15220, 15224, 114, 59, 32768, 10630, 59, 32896, 55349, 56675, 117, 115, 59, 32768, 10798, 105, 109, 101, 115, 59, 32768, 10805, 512, 97, 112, 15241, 15253, 114, 512, 59, 103, 15247, 15249, 32768, 41, 116, 59, 32768, 10644, 111, 108, 105, 110, 116, 59, 32768, 10770, 97, 114, 114, 59, 32768, 8649, 1024, 97, 99, 104, 113, 15276, 15282, 15287, 15290, 113, 117, 111, 59, 32768, 8250, 114, 59, 32896, 55349, 56519, 59, 32768, 8625, 512, 98, 117, 15295, 15298, 59, 32768, 93, 111, 512, 59, 114, 15304, 15306, 32768, 8217, 59, 32768, 8217, 768, 104, 105, 114, 15316, 15322, 15328, 114, 101, 101, 59, 32768, 8908, 109, 101, 115, 59, 32768, 8906, 105, 1024, 59, 101, 102, 108, 15338, 15340, 15343, 15346, 32768, 9657, 59, 32768, 8885, 59, 32768, 9656, 116, 114, 105, 59, 32768, 10702, 108, 117, 104, 97, 114, 59, 32768, 10600, 59, 32768, 8478, 6706, 15391, 15398, 15404, 15499, 15516, 15592, 0, 15606, 15660, 0, 0, 15752, 15758, 0, 15827, 15863, 15886, 16000, 16006, 16038, 16086, 0, 16467, 0, 0, 16506, 99, 117, 116, 101, 59, 32768, 347, 113, 117, 111, 59, 32768, 8218, 2560, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 15424, 15426, 15429, 15441, 15446, 15458, 15463, 15482, 15490, 15495, 32768, 8827, 59, 32768, 10932, 833, 15434, 0, 15437, 59, 32768, 10936, 111, 110, 59, 32768, 353, 117, 101, 59, 32768, 8829, 512, 59, 100, 15451, 15453, 32768, 10928, 105, 108, 59, 32768, 351, 114, 99, 59, 32768, 349, 768, 69, 97, 115, 15470, 15473, 15477, 59, 32768, 10934, 112, 59, 32768, 10938, 105, 109, 59, 32768, 8937, 111, 108, 105, 110, 116, 59, 32768, 10771, 105, 109, 59, 32768, 8831, 59, 32768, 1089, 111, 116, 768, 59, 98, 101, 15507, 15509, 15512, 32768, 8901, 59, 32768, 8865, 59, 32768, 10854, 1792, 65, 97, 99, 109, 115, 116, 120, 15530, 15535, 15556, 15562, 15566, 15572, 15587, 114, 114, 59, 32768, 8664, 114, 512, 104, 114, 15541, 15545, 107, 59, 32768, 10533, 512, 59, 111, 15550, 15552, 32768, 8600, 119, 59, 32768, 8600, 116, 33024, 167, 59, 32768, 167, 105, 59, 32768, 59, 119, 97, 114, 59, 32768, 10537, 109, 512, 105, 110, 15578, 15584, 110, 117, 115, 59, 32768, 8726, 59, 32768, 8726, 116, 59, 32768, 10038, 114, 512, 59, 111, 15597, 15600, 32896, 55349, 56624, 119, 110, 59, 32768, 8994, 1024, 97, 99, 111, 121, 15614, 15619, 15632, 15654, 114, 112, 59, 32768, 9839, 512, 104, 121, 15624, 15629, 99, 121, 59, 32768, 1097, 59, 32768, 1096, 114, 116, 1086, 15640, 0, 0, 15645, 105, 100, 59, 32768, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 32768, 8741, 33024, 173, 59, 32768, 173, 512, 103, 109, 15664, 15681, 109, 97, 768, 59, 102, 118, 15673, 15675, 15678, 32768, 963, 59, 32768, 962, 59, 32768, 962, 2048, 59, 100, 101, 103, 108, 110, 112, 114, 15698, 15700, 15705, 15715, 15725, 15735, 15739, 15745, 32768, 8764, 111, 116, 59, 32768, 10858, 512, 59, 113, 15710, 15712, 32768, 8771, 59, 32768, 8771, 512, 59, 69, 15720, 15722, 32768, 10910, 59, 32768, 10912, 512, 59, 69, 15730, 15732, 32768, 10909, 59, 32768, 10911, 101, 59, 32768, 8774, 108, 117, 115, 59, 32768, 10788, 97, 114, 114, 59, 32768, 10610, 97, 114, 114, 59, 32768, 8592, 1024, 97, 101, 105, 116, 15766, 15788, 15796, 15808, 512, 108, 115, 15771, 15783, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 32768, 8726, 104, 112, 59, 32768, 10803, 112, 97, 114, 115, 108, 59, 32768, 10724, 512, 100, 108, 15801, 15804, 59, 32768, 8739, 101, 59, 32768, 8995, 512, 59, 101, 15813, 15815, 32768, 10922, 512, 59, 115, 15820, 15822, 32768, 10924, 59, 32896, 10924, 65024, 768, 102, 108, 112, 15833, 15839, 15857, 116, 99, 121, 59, 32768, 1100, 512, 59, 98, 15844, 15846, 32768, 47, 512, 59, 97, 15851, 15853, 32768, 10692, 114, 59, 32768, 9023, 102, 59, 32896, 55349, 56676, 97, 512, 100, 114, 15868, 15882, 101, 115, 512, 59, 117, 15875, 15877, 32768, 9824, 105, 116, 59, 32768, 9824, 59, 32768, 8741, 768, 99, 115, 117, 15892, 15921, 15977, 512, 97, 117, 15897, 15909, 112, 512, 59, 115, 15903, 15905, 32768, 8851, 59, 32896, 8851, 65024, 112, 512, 59, 115, 15915, 15917, 32768, 8852, 59, 32896, 8852, 65024, 117, 512, 98, 112, 15927, 15952, 768, 59, 101, 115, 15934, 15936, 15939, 32768, 8847, 59, 32768, 8849, 101, 116, 512, 59, 101, 15946, 15948, 32768, 8847, 113, 59, 32768, 8849, 768, 59, 101, 115, 15959, 15961, 15964, 32768, 8848, 59, 32768, 8850, 101, 116, 512, 59, 101, 15971, 15973, 32768, 8848, 113, 59, 32768, 8850, 768, 59, 97, 102, 15984, 15986, 15996, 32768, 9633, 114, 566, 15991, 15994, 59, 32768, 9633, 59, 32768, 9642, 59, 32768, 9642, 97, 114, 114, 59, 32768, 8594, 1024, 99, 101, 109, 116, 16014, 16019, 16025, 16031, 114, 59, 32896, 55349, 56520, 116, 109, 110, 59, 32768, 8726, 105, 108, 101, 59, 32768, 8995, 97, 114, 102, 59, 32768, 8902, 512, 97, 114, 16042, 16053, 114, 512, 59, 102, 16048, 16050, 32768, 9734, 59, 32768, 9733, 512, 97, 110, 16058, 16081, 105, 103, 104, 116, 512, 101, 112, 16067, 16076, 112, 115, 105, 108, 111, 110, 59, 32768, 1013, 104, 105, 59, 32768, 981, 115, 59, 32768, 175, 1280, 98, 99, 109, 110, 112, 16096, 16221, 16288, 16291, 16295, 2304, 59, 69, 100, 101, 109, 110, 112, 114, 115, 16115, 16117, 16120, 16125, 16137, 16143, 16154, 16160, 16166, 32768, 8834, 59, 32768, 10949, 111, 116, 59, 32768, 10941, 512, 59, 100, 16130, 16132, 32768, 8838, 111, 116, 59, 32768, 10947, 117, 108, 116, 59, 32768, 10945, 512, 69, 101, 16148, 16151, 59, 32768, 10955, 59, 32768, 8842, 108, 117, 115, 59, 32768, 10943, 97, 114, 114, 59, 32768, 10617, 768, 101, 105, 117, 16173, 16206, 16210, 116, 768, 59, 101, 110, 16181, 16183, 16194, 32768, 8834, 113, 512, 59, 113, 16189, 16191, 32768, 8838, 59, 32768, 10949, 101, 113, 512, 59, 113, 16201, 16203, 32768, 8842, 59, 32768, 10955, 109, 59, 32768, 10951, 512, 98, 112, 16215, 16218, 59, 32768, 10965, 59, 32768, 10963, 99, 1536, 59, 97, 99, 101, 110, 115, 16235, 16237, 16245, 16254, 16258, 16283, 32768, 8827, 112, 112, 114, 111, 120, 59, 32768, 10936, 117, 114, 108, 121, 101, 113, 59, 32768, 8829, 113, 59, 32768, 10928, 768, 97, 101, 115, 16265, 16273, 16278, 112, 112, 114, 111, 120, 59, 32768, 10938, 113, 113, 59, 32768, 10934, 105, 109, 59, 32768, 8937, 105, 109, 59, 32768, 8831, 59, 32768, 8721, 103, 59, 32768, 9834, 3328, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 16322, 16327, 16332, 16337, 16339, 16342, 16356, 16368, 16382, 16388, 16394, 16405, 16411, 33024, 185, 59, 32768, 185, 33024, 178, 59, 32768, 178, 33024, 179, 59, 32768, 179, 32768, 8835, 59, 32768, 10950, 512, 111, 115, 16347, 16351, 116, 59, 32768, 10942, 117, 98, 59, 32768, 10968, 512, 59, 100, 16361, 16363, 32768, 8839, 111, 116, 59, 32768, 10948, 115, 512, 111, 117, 16374, 16378, 108, 59, 32768, 10185, 98, 59, 32768, 10967, 97, 114, 114, 59, 32768, 10619, 117, 108, 116, 59, 32768, 10946, 512, 69, 101, 16399, 16402, 59, 32768, 10956, 59, 32768, 8843, 108, 117, 115, 59, 32768, 10944, 768, 101, 105, 117, 16418, 16451, 16455, 116, 768, 59, 101, 110, 16426, 16428, 16439, 32768, 8835, 113, 512, 59, 113, 16434, 16436, 32768, 8839, 59, 32768, 10950, 101, 113, 512, 59, 113, 16446, 16448, 32768, 8843, 59, 32768, 10956, 109, 59, 32768, 10952, 512, 98, 112, 16460, 16463, 59, 32768, 10964, 59, 32768, 10966, 768, 65, 97, 110, 16473, 16478, 16499, 114, 114, 59, 32768, 8665, 114, 512, 104, 114, 16484, 16488, 107, 59, 32768, 10534, 512, 59, 111, 16493, 16495, 32768, 8601, 119, 59, 32768, 8601, 119, 97, 114, 59, 32768, 10538, 108, 105, 103, 33024, 223, 59, 32768, 223, 5938, 16538, 16552, 16557, 16579, 16584, 16591, 0, 16596, 16692, 0, 0, 0, 0, 0, 16731, 16780, 0, 16787, 16908, 0, 0, 0, 16938, 1091, 16543, 0, 0, 16549, 103, 101, 116, 59, 32768, 8982, 59, 32768, 964, 114, 107, 59, 32768, 9140, 768, 97, 101, 121, 16563, 16569, 16575, 114, 111, 110, 59, 32768, 357, 100, 105, 108, 59, 32768, 355, 59, 32768, 1090, 111, 116, 59, 32768, 8411, 108, 114, 101, 99, 59, 32768, 8981, 114, 59, 32896, 55349, 56625, 1024, 101, 105, 107, 111, 16604, 16641, 16670, 16684, 835, 16609, 0, 16624, 101, 512, 52, 102, 16614, 16617, 59, 32768, 8756, 111, 114, 101, 59, 32768, 8756, 97, 768, 59, 115, 118, 16631, 16633, 16638, 32768, 952, 121, 109, 59, 32768, 977, 59, 32768, 977, 512, 99, 110, 16646, 16665, 107, 512, 97, 115, 16652, 16660, 112, 112, 114, 111, 120, 59, 32768, 8776, 105, 109, 59, 32768, 8764, 115, 112, 59, 32768, 8201, 512, 97, 115, 16675, 16679, 112, 59, 32768, 8776, 105, 109, 59, 32768, 8764, 114, 110, 33024, 254, 59, 32768, 254, 829, 16696, 16701, 16727, 100, 101, 59, 32768, 732, 101, 115, 33536, 215, 59, 98, 100, 16710, 16712, 16723, 32768, 215, 512, 59, 97, 16717, 16719, 32768, 8864, 114, 59, 32768, 10801, 59, 32768, 10800, 116, 59, 32768, 8749, 768, 101, 112, 115, 16737, 16741, 16775, 97, 59, 32768, 10536, 1024, 59, 98, 99, 102, 16750, 16752, 16757, 16762, 32768, 8868, 111, 116, 59, 32768, 9014, 105, 114, 59, 32768, 10993, 512, 59, 111, 16767, 16770, 32896, 55349, 56677, 114, 107, 59, 32768, 10970, 97, 59, 32768, 10537, 114, 105, 109, 101, 59, 32768, 8244, 768, 97, 105, 112, 16793, 16798, 16899, 100, 101, 59, 32768, 8482, 1792, 97, 100, 101, 109, 112, 115, 116, 16813, 16868, 16873, 16876, 16883, 16889, 16893, 110, 103, 108, 101, 1280, 59, 100, 108, 113, 114, 16828, 16830, 16836, 16850, 16853, 32768, 9653, 111, 119, 110, 59, 32768, 9663, 101, 102, 116, 512, 59, 101, 16844, 16846, 32768, 9667, 113, 59, 32768, 8884, 59, 32768, 8796, 105, 103, 104, 116, 512, 59, 101, 16862, 16864, 32768, 9657, 113, 59, 32768, 8885, 111, 116, 59, 32768, 9708, 59, 32768, 8796, 105, 110, 117, 115, 59, 32768, 10810, 108, 117, 115, 59, 32768, 10809, 98, 59, 32768, 10701, 105, 109, 101, 59, 32768, 10811, 101, 122, 105, 117, 109, 59, 32768, 9186, 768, 99, 104, 116, 16914, 16926, 16931, 512, 114, 121, 16919, 16923, 59, 32896, 55349, 56521, 59, 32768, 1094, 99, 121, 59, 32768, 1115, 114, 111, 107, 59, 32768, 359, 512, 105, 111, 16942, 16947, 120, 116, 59, 32768, 8812, 104, 101, 97, 100, 512, 108, 114, 16956, 16967, 101, 102, 116, 97, 114, 114, 111, 119, 59, 32768, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8608, 4608, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 17016, 17021, 17026, 17043, 17057, 17072, 17095, 17110, 17119, 17139, 17172, 17187, 17202, 17290, 17330, 17336, 17365, 17381, 114, 114, 59, 32768, 8657, 97, 114, 59, 32768, 10595, 512, 99, 114, 17031, 17039, 117, 116, 101, 33024, 250, 59, 32768, 250, 114, 59, 32768, 8593, 114, 820, 17049, 0, 17053, 121, 59, 32768, 1118, 118, 101, 59, 32768, 365, 512, 105, 121, 17062, 17069, 114, 99, 33024, 251, 59, 32768, 251, 59, 32768, 1091, 768, 97, 98, 104, 17079, 17084, 17090, 114, 114, 59, 32768, 8645, 108, 97, 99, 59, 32768, 369, 97, 114, 59, 32768, 10606, 512, 105, 114, 17100, 17106, 115, 104, 116, 59, 32768, 10622, 59, 32896, 55349, 56626, 114, 97, 118, 101, 33024, 249, 59, 32768, 249, 562, 17123, 17135, 114, 512, 108, 114, 17128, 17131, 59, 32768, 8639, 59, 32768, 8638, 108, 107, 59, 32768, 9600, 512, 99, 116, 17144, 17167, 1088, 17150, 0, 0, 17163, 114, 110, 512, 59, 101, 17156, 17158, 32768, 8988, 114, 59, 32768, 8988, 111, 112, 59, 32768, 8975, 114, 105, 59, 32768, 9720, 512, 97, 108, 17177, 17182, 99, 114, 59, 32768, 363, 33024, 168, 59, 32768, 168, 512, 103, 112, 17192, 17197, 111, 110, 59, 32768, 371, 102, 59, 32896, 55349, 56678, 1536, 97, 100, 104, 108, 115, 117, 17215, 17222, 17233, 17257, 17262, 17280, 114, 114, 111, 119, 59, 32768, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 32768, 8597, 97, 114, 112, 111, 111, 110, 512, 108, 114, 17244, 17250, 101, 102, 116, 59, 32768, 8639, 105, 103, 104, 116, 59, 32768, 8638, 117, 115, 59, 32768, 8846, 105, 768, 59, 104, 108, 17270, 17272, 17275, 32768, 965, 59, 32768, 978, 111, 110, 59, 32768, 965, 112, 97, 114, 114, 111, 119, 115, 59, 32768, 8648, 768, 99, 105, 116, 17297, 17320, 17325, 1088, 17303, 0, 0, 17316, 114, 110, 512, 59, 101, 17309, 17311, 32768, 8989, 114, 59, 32768, 8989, 111, 112, 59, 32768, 8974, 110, 103, 59, 32768, 367, 114, 105, 59, 32768, 9721, 99, 114, 59, 32896, 55349, 56522, 768, 100, 105, 114, 17343, 17348, 17354, 111, 116, 59, 32768, 8944, 108, 100, 101, 59, 32768, 361, 105, 512, 59, 102, 17360, 17362, 32768, 9653, 59, 32768, 9652, 512, 97, 109, 17370, 17375, 114, 114, 59, 32768, 8648, 108, 33024, 252, 59, 32768, 252, 97, 110, 103, 108, 101, 59, 32768, 10663, 3840, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 17420, 17425, 17437, 17443, 17613, 17617, 17623, 17667, 17672, 17678, 17693, 17699, 17705, 17711, 17754, 114, 114, 59, 32768, 8661, 97, 114, 512, 59, 118, 17432, 17434, 32768, 10984, 59, 32768, 10985, 97, 115, 104, 59, 32768, 8872, 512, 110, 114, 17448, 17454, 103, 114, 116, 59, 32768, 10652, 1792, 101, 107, 110, 112, 114, 115, 116, 17469, 17478, 17485, 17494, 17515, 17526, 17578, 112, 115, 105, 108, 111, 110, 59, 32768, 1013, 97, 112, 112, 97, 59, 32768, 1008, 111, 116, 104, 105, 110, 103, 59, 32768, 8709, 768, 104, 105, 114, 17501, 17505, 17508, 105, 59, 32768, 981, 59, 32768, 982, 111, 112, 116, 111, 59, 32768, 8733, 512, 59, 104, 17520, 17522, 32768, 8597, 111, 59, 32768, 1009, 512, 105, 117, 17531, 17537, 103, 109, 97, 59, 32768, 962, 512, 98, 112, 17542, 17560, 115, 101, 116, 110, 101, 113, 512, 59, 113, 17553, 17556, 32896, 8842, 65024, 59, 32896, 10955, 65024, 115, 101, 116, 110, 101, 113, 512, 59, 113, 17571, 17574, 32896, 8843, 65024, 59, 32896, 10956, 65024, 512, 104, 114, 17583, 17589, 101, 116, 97, 59, 32768, 977, 105, 97, 110, 103, 108, 101, 512, 108, 114, 17600, 17606, 101, 102, 116, 59, 32768, 8882, 105, 103, 104, 116, 59, 32768, 8883, 121, 59, 32768, 1074, 97, 115, 104, 59, 32768, 8866, 768, 101, 108, 114, 17630, 17648, 17654, 768, 59, 98, 101, 17637, 17639, 17644, 32768, 8744, 97, 114, 59, 32768, 8891, 113, 59, 32768, 8794, 108, 105, 112, 59, 32768, 8942, 512, 98, 116, 17659, 17664, 97, 114, 59, 32768, 124, 59, 32768, 124, 114, 59, 32896, 55349, 56627, 116, 114, 105, 59, 32768, 8882, 115, 117, 512, 98, 112, 17685, 17689, 59, 32896, 8834, 8402, 59, 32896, 8835, 8402, 112, 102, 59, 32896, 55349, 56679, 114, 111, 112, 59, 32768, 8733, 116, 114, 105, 59, 32768, 8883, 512, 99, 117, 17716, 17721, 114, 59, 32896, 55349, 56523, 512, 98, 112, 17726, 17740, 110, 512, 69, 101, 17732, 17736, 59, 32896, 10955, 65024, 59, 32896, 8842, 65024, 110, 512, 69, 101, 17746, 17750, 59, 32896, 10956, 65024, 59, 32896, 8843, 65024, 105, 103, 122, 97, 103, 59, 32768, 10650, 1792, 99, 101, 102, 111, 112, 114, 115, 17777, 17783, 17815, 17820, 17826, 17829, 17842, 105, 114, 99, 59, 32768, 373, 512, 100, 105, 17788, 17809, 512, 98, 103, 17793, 17798, 97, 114, 59, 32768, 10847, 101, 512, 59, 113, 17804, 17806, 32768, 8743, 59, 32768, 8793, 101, 114, 112, 59, 32768, 8472, 114, 59, 32896, 55349, 56628, 112, 102, 59, 32896, 55349, 56680, 59, 32768, 8472, 512, 59, 101, 17834, 17836, 32768, 8768, 97, 116, 104, 59, 32768, 8768, 99, 114, 59, 32896, 55349, 56524, 5428, 17871, 17891, 0, 17897, 0, 17902, 17917, 0, 0, 17920, 17935, 17940, 17945, 0, 0, 17977, 17992, 0, 18008, 18024, 18029, 768, 97, 105, 117, 17877, 17881, 17886, 112, 59, 32768, 8898, 114, 99, 59, 32768, 9711, 112, 59, 32768, 8899, 116, 114, 105, 59, 32768, 9661, 114, 59, 32896, 55349, 56629, 512, 65, 97, 17906, 17911, 114, 114, 59, 32768, 10234, 114, 114, 59, 32768, 10231, 59, 32768, 958, 512, 65, 97, 17924, 17929, 114, 114, 59, 32768, 10232, 114, 114, 59, 32768, 10229, 97, 112, 59, 32768, 10236, 105, 115, 59, 32768, 8955, 768, 100, 112, 116, 17951, 17956, 17970, 111, 116, 59, 32768, 10752, 512, 102, 108, 17961, 17965, 59, 32896, 55349, 56681, 117, 115, 59, 32768, 10753, 105, 109, 101, 59, 32768, 10754, 512, 65, 97, 17981, 17986, 114, 114, 59, 32768, 10233, 114, 114, 59, 32768, 10230, 512, 99, 113, 17996, 18001, 114, 59, 32896, 55349, 56525, 99, 117, 112, 59, 32768, 10758, 512, 112, 116, 18012, 18018, 108, 117, 115, 59, 32768, 10756, 114, 105, 59, 32768, 9651, 101, 101, 59, 32768, 8897, 101, 100, 103, 101, 59, 32768, 8896, 2048, 97, 99, 101, 102, 105, 111, 115, 117, 18052, 18068, 18081, 18087, 18092, 18097, 18103, 18109, 99, 512, 117, 121, 18058, 18065, 116, 101, 33024, 253, 59, 32768, 253, 59, 32768, 1103, 512, 105, 121, 18073, 18078, 114, 99, 59, 32768, 375, 59, 32768, 1099, 110, 33024, 165, 59, 32768, 165, 114, 59, 32896, 55349, 56630, 99, 121, 59, 32768, 1111, 112, 102, 59, 32896, 55349, 56682, 99, 114, 59, 32896, 55349, 56526, 512, 99, 109, 18114, 18118, 121, 59, 32768, 1102, 108, 33024, 255, 59, 32768, 255, 2560, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 18145, 18152, 18166, 18171, 18186, 18191, 18196, 18204, 18210, 18216, 99, 117, 116, 101, 59, 32768, 378, 512, 97, 121, 18157, 18163, 114, 111, 110, 59, 32768, 382, 59, 32768, 1079, 111, 116, 59, 32768, 380, 512, 101, 116, 18176, 18182, 116, 114, 102, 59, 32768, 8488, 97, 59, 32768, 950, 114, 59, 32896, 55349, 56631, 99, 121, 59, 32768, 1078, 103, 114, 97, 114, 114, 59, 32768, 8669, 112, 102, 59, 32896, 55349, 56683, 99, 114, 59, 32896, 55349, 56527, 512, 106, 110, 18221, 18224, 59, 32768, 8205, 106, 59, 32768, 8204]);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Generated using scripts/write-decode-map.ts\n// prettier-ignore\nexports.default = new Uint16Array([1024, 97, 103, 108, 113, 9, 23, 27, 31, 1086, 15, 0, 0, 19, 112, 59, 32768, 38, 111, 115, 59, 32768, 39, 116, 59, 32768, 62, 116, 59, 32768, 60, 117, 111, 116, 59, 32768, 34]);\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.JUMP_OFFSET_BASE = exports.BinTrieFlags = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_1 = __importDefault(require(\"./generated/decode-data-html\"));\nexports.htmlDecodeTree = decode_data_html_1.default;\nvar decode_data_xml_1 = __importDefault(require(\"./generated/decode-data-xml\"));\nexports.xmlDecodeTree = decode_data_xml_1.default;\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"HAS_VALUE\"] = 32768] = \"HAS_VALUE\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 32512] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"MULTI_BYTE\"] = 128] = \"MULTI_BYTE\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nexports.JUMP_OFFSET_BASE = 48 /* ZERO */ - 1;\nfunction getDecoder(decodeTree) {\n    return function decodeHTMLBinary(str, strict) {\n        var ret = \"\";\n        var lastIdx = 0;\n        var strIdx = 0;\n        while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n            ret += str.slice(lastIdx, strIdx);\n            lastIdx = strIdx;\n            // Skip the \"&\"\n            strIdx += 1;\n            // If we have a numeric entity, handle this separately.\n            if (str.charCodeAt(strIdx) === 35 /* NUM */) {\n                // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n                var start = strIdx + 1;\n                var base = 10;\n                var cp = str.charCodeAt(start);\n                if ((cp | 32 /* To_LOWER_BIT */) === 120 /* LOWER_X */) {\n                    base = 16;\n                    strIdx += 1;\n                    start += 1;\n                }\n                while (((cp = str.charCodeAt(++strIdx)) >= 48 /* ZERO */ &&\n                    cp <= 57 /* NINE */) ||\n                    (base === 16 &&\n                        (cp | 32 /* To_LOWER_BIT */) >= 97 /* LOWER_A */ &&\n                        (cp | 32 /* To_LOWER_BIT */) <= 102 /* LOWER_F */))\n                    ;\n                if (start !== strIdx) {\n                    var entity = str.substring(start, strIdx);\n                    var parsed = parseInt(entity, base);\n                    if (str.charCodeAt(strIdx) === 59 /* SEMI */) {\n                        strIdx += 1;\n                    }\n                    else if (strict) {\n                        continue;\n                    }\n                    ret += decode_codepoint_1.default(parsed);\n                    lastIdx = strIdx;\n                }\n                continue;\n            }\n            var result = null;\n            var excess = 1;\n            var treeIdx = 0;\n            var current = decodeTree[treeIdx];\n            for (; strIdx < str.length; strIdx++, excess++) {\n                treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n                if (treeIdx < 0)\n                    break;\n                current = decodeTree[treeIdx];\n                // If the branch is a value, store it and continue\n                if (current & BinTrieFlags.HAS_VALUE) {\n                    // If we have a legacy entity while parsing strictly, just skip the number of bytes\n                    if (strict && str.charCodeAt(strIdx) !== 59 /* SEMI */) {\n                        // No need to consider multi-byte values, as the legacy entity is always a single byte\n                        treeIdx += 1;\n                    }\n                    else {\n                        // If this is a surrogate pair, combine the higher bits from the node with the next byte\n                        result =\n                            current & BinTrieFlags.MULTI_BYTE\n                                ? String.fromCharCode(decodeTree[++treeIdx], decodeTree[++treeIdx])\n                                : String.fromCharCode(decodeTree[++treeIdx]);\n                        excess = 0;\n                    }\n                }\n            }\n            if (result != null) {\n                ret += result;\n                lastIdx = strIdx - excess + 1;\n            }\n        }\n        return ret + str.slice(lastIdx);\n    };\n}\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n    if (current <= 128) {\n        return char === current ? nodeIdx : -1;\n    }\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 8;\n    if (branchCount === 0) {\n        return -1;\n    }\n    if (branchCount === 1) {\n        return char === decodeTree[nodeIdx] ? nodeIdx + 1 : -1;\n    }\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    if (jumpOffset) {\n        var value = char - exports.JUMP_OFFSET_BASE - jumpOffset;\n        return value < 0 || value > branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        var mid = (lo + hi) >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_1.default);\nfunction decodeHTML(str) {\n    return htmlDecoder(str, false);\n}\nexports.decodeHTML = decodeHTML;\nfunction decodeHTMLStrict(str) {\n    return htmlDecoder(str, true);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\nfunction decodeXML(str) {\n    return xmlDecoder(str, true);\n}\nexports.decodeXML = decodeXML;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_codepoint_1 = __importDefault(require(\"entities/lib/decode_codepoint\"));\nvar decode_1 = require(\"entities/lib/decode\");\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 10 /* NewLine */ ||\n        c === 9 /* Tab */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\nfunction isEndOfTagSection(c) {\n    return c === 47 /* Slash */ || c === 62 /* Gt */ || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= 48 /* Zero */ && c <= 57 /* Nine */;\n}\nfunction isASCIIAlpha(c) {\n    return ((c >= 97 /* LowerA */ && c <= 122 /* LowerZ */) ||\n        (c >= 65 /* UpperA */ && c <= 90 /* UpperZ */));\n}\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\nvar Sequences = {\n    Cdata: new Uint16Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n    CdataEnd: new Uint16Array([0x5d, 0x5d, 0x3e]),\n    CommentEnd: new Uint16Array([0x2d, 0x2d, 0x3e]),\n    ScriptEnd: new Uint16Array([\n        0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n    ]),\n    StyleEnd: new Uint16Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n    TitleEnd: new Uint16Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]), // `</title`\n};\nvar Tokenizer = /** @class */ (function () {\n    function Tokenizer(_a, cbs) {\n        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */\n        this._state = 1 /* Text */;\n        /** The read buffer. */\n        this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */\n        this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */\n        this._index = 0;\n        /**\n         * Data that has already been processed will be removed from the buffer occasionally.\n         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n         */\n        this.bufferOffset = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n        this.baseState = 1 /* Text */;\n        /** For special parsing behavior inside of script and style tags. */\n        this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */\n        this.running = true;\n        /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n        this.ended = false;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        this.trieResult = null;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? decode_1.xmlDecodeTree : decode_1.htmlDecodeTree;\n    }\n    Tokenizer.prototype.reset = function () {\n        this._state = 1 /* Text */;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this._index = 0;\n        this.bufferOffset = 0;\n        this.baseState = 1 /* Text */;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.ended = false;\n    };\n    Tokenizer.prototype.write = function (chunk) {\n        if (this.ended)\n            return this.cbs.onerror(Error(\".write() after done!\"));\n        this.buffer += chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function (chunk) {\n        if (this.ended)\n            return this.cbs.onerror(Error(\".end() after done!\"));\n        if (chunk)\n            this.write(chunk);\n        this.ended = true;\n        if (this.running)\n            this.finish();\n    };\n    Tokenizer.prototype.pause = function () {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function () {\n        this.running = true;\n        if (this._index < this.buffer.length) {\n            this.parse();\n        }\n        if (this.ended) {\n            this.finish();\n        }\n    };\n    /**\n     * The start of the current section.\n     */\n    Tokenizer.prototype.getAbsoluteSectionStart = function () {\n        return this.sectionStart + this.bufferOffset;\n    };\n    /**\n     * The current index within all of the written data.\n     */\n    Tokenizer.prototype.getAbsoluteIndex = function () {\n        return this.bufferOffset + this._index;\n    };\n    Tokenizer.prototype.stateText = function (c) {\n        if (c === 60 /* Lt */ ||\n            (!this.decodeEntities && this.fastForwardTo(60 /* Lt */))) {\n            if (this._index > this.sectionStart) {\n                this.cbs.ontext(this.getSection());\n            }\n            this._state = 2 /* BeforeTagName */;\n            this.sectionStart = this._index;\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateSpecialStartSequence = function (c) {\n        var isEnd = this.sequenceIndex === this.currentSequence.length;\n        var isMatch = isEnd\n            ? // If we are at the end of the sequence, make sure the tag name has ended\n                isEndOfTagSection(c)\n            : // Otherwise, do a case-insensitive comparison\n                (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        }\n        else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this._state = 3 /* InTagName */;\n        this.stateInTagName(c);\n    };\n    /** Look for an end tag. For <title> tags, also decode entities. */\n    Tokenizer.prototype.stateInSpecialTag = function (c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === 62 /* Gt */ || isWhitespace(c)) {\n                var endOfText = this._index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    var actualIndex = this._index;\n                    this._index = endOfText;\n                    this.cbs.ontext(this.getSection());\n                    this._index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        }\n        else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === 38 /* Amp */) {\n                    this._state = 25 /* BeforeEntity */;\n                }\n            }\n            else if (this.fastForwardTo(60 /* Lt */)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        }\n        else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === 60 /* Lt */);\n        }\n    };\n    Tokenizer.prototype.stateCDATASequence = function (c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this._state = 21 /* InCommentLike */;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this._index + 1;\n            }\n        }\n        else {\n            this.sequenceIndex = 0;\n            this._state = 16 /* InDeclaration */;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    };\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */\n    Tokenizer.prototype.fastForwardTo = function (c) {\n        while (++this._index < this.buffer.length) {\n            if (this.buffer.charCodeAt(this._index) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */\n        this._index = this.buffer.length - 1;\n        return false;\n    };\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */\n    Tokenizer.prototype.stateInCommentLike = function (c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                // Remove 2 trailing chars\n                var section = this.buffer.slice(this.sectionStart, this._index - 2);\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(section);\n                }\n                else {\n                    this.cbs.oncomment(section);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this._index + 1;\n                this._state = 1 /* Text */;\n            }\n        }\n        else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        }\n        else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */\n    Tokenizer.prototype.isTagStartChar = function (c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    };\n    Tokenizer.prototype.startSpecial = function (sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this._state = 23 /* SpecialStartSequence */;\n    };\n    Tokenizer.prototype.stateBeforeTagName = function (c) {\n        if (c === 33 /* ExclamationMark */) {\n            this._state = 15 /* BeforeDeclaration */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 63 /* Questionmark */) {\n            this._state = 17 /* InProcessingInstruction */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (this.isTagStartChar(c)) {\n            var lower = c | 0x20;\n            this.sectionStart = this._index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            }\n            else {\n                this._state =\n                    !this.xmlMode && lower === Sequences.ScriptEnd[2]\n                        ? 22 /* BeforeSpecialS */\n                        : 3 /* InTagName */;\n            }\n        }\n        else if (c === 47 /* Slash */) {\n            this._state = 5 /* BeforeClosingTagName */;\n        }\n        else {\n            this._state = 1 /* Text */;\n            this.stateText(c);\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function (c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n        if (isWhitespace(c)) {\n            // Ignore\n        }\n        else if (c === 62 /* Gt */) {\n            this._state = 1 /* Text */;\n        }\n        else {\n            this._state = this.isTagStartChar(c)\n                ? 6 /* InClosingTagName */\n                : 20 /* InSpecialComment */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function (c) {\n        if (c === 62 /* Gt */ || isWhitespace(c)) {\n            this.cbs.onclosetag(this.getSection());\n            this.sectionStart = -1;\n            this._state = 7 /* AfterClosingTagName */;\n            this.stateAfterClosingTagName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n        // Skip everything until \">\"\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n        if (c === 62 /* Gt */) {\n            this.cbs.onopentagend();\n            if (this.isSpecial) {\n                this._state = 24 /* InSpecialTag */;\n                this.sequenceIndex = 0;\n            }\n            else {\n                this._state = 1 /* Text */;\n            }\n            this.baseState = this._state;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 47 /* Slash */) {\n            this._state = 4 /* InSelfClosingTag */;\n        }\n        else if (!isWhitespace(c)) {\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n        if (c === 62 /* Gt */) {\n            this.cbs.onselfclosingtag();\n            this._state = 1 /* Text */;\n            this.baseState = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        }\n        else if (!isWhitespace(c)) {\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function (c) {\n        if (c === 61 /* Eq */ || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 10 /* AfterAttributeName */;\n            this.stateAfterAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function (c) {\n        if (c === 61 /* Eq */) {\n            this._state = 11 /* BeforeAttributeValue */;\n        }\n        else if (c === 47 /* Slash */ || c === 62 /* Gt */) {\n            this.cbs.onattribend(undefined);\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (!isWhitespace(c)) {\n            this.cbs.onattribend(undefined);\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n        if (c === 34 /* DoubleQuote */) {\n            this._state = 12 /* InAttributeValueDq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 39 /* SingleQuote */) {\n            this._state = 13 /* InAttributeValueSq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (!isWhitespace(c)) {\n            this.sectionStart = this._index;\n            this._state = 14 /* InAttributeValueNq */;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n        if (c === quote ||\n            (!this.decodeEntities && this.fastForwardTo(quote))) {\n            this.cbs.onattribdata(this.getSection());\n            this.sectionStart = -1;\n            this.cbs.onattribend(String.fromCharCode(quote));\n            this._state = 8 /* BeforeAttributeName */;\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this.baseState = this._state;\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n        this.handleInAttributeValue(c, 34 /* DoubleQuote */);\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n        this.handleInAttributeValue(c, 39 /* SingleQuote */);\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n        if (isWhitespace(c) || c === 62 /* Gt */) {\n            this.cbs.onattribdata(this.getSection());\n            this.sectionStart = -1;\n            this.cbs.onattribend(null);\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this.baseState = this._state;\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n        if (c === 91 /* OpeningSquareBracket */) {\n            this._state = 19 /* CDATASequence */;\n            this.sequenceIndex = 0;\n        }\n        else {\n            this._state =\n                c === 45 /* Dash */\n                    ? 18 /* BeforeComment */\n                    : 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInDeclaration = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.ondeclaration(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.onprocessinginstruction(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function (c) {\n        if (c === 45 /* Dash */) {\n            this._state = 21 /* InCommentLike */;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this._index + 1;\n        }\n        else {\n            this._state = 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInSpecialComment = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.oncomment(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n        var lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        }\n        else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        }\n        else {\n            this._state = 3 /* InTagName */;\n            this.stateInTagName(c); // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeEntity = function (c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        if (c === 35 /* Num */) {\n            this._state = 26 /* BeforeNumericEntity */;\n        }\n        else if (c === 38 /* Amp */) {\n            // We have two `&` characters in a row. Stay in the current state.\n        }\n        else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.trieResult = null;\n            this._state = 27 /* InNamedEntity */;\n            this.stateInNamedEntity(c);\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function (c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0, decode_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this._index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        // If the branch is a value, store it and continue\n        if (this.trieCurrent & decode_1.BinTrieFlags.HAS_VALUE) {\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== 59 /* Semi */) {\n                // No need to consider multi-byte values, as the legacy entity is always a single byte\n                this.trieIndex += 1;\n            }\n            else {\n                // Add 1 as we have already incremented the excess\n                var entityStart = this._index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n                }\n                // If this is a surrogate pair, combine the higher bits from the node with the next byte\n                this.trieResult =\n                    this.trieCurrent & decode_1.BinTrieFlags.MULTI_BYTE\n                        ? String.fromCharCode(this.entityTrie[++this.trieIndex], this.entityTrie[++this.trieIndex])\n                        : String.fromCharCode(this.entityTrie[++this.trieIndex]);\n                this.entityExcess = 0;\n                this.sectionStart = this._index + 1;\n            }\n        }\n    };\n    Tokenizer.prototype.emitNamedEntity = function () {\n        if (this.trieResult) {\n            this.emitPartial(this.trieResult);\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateBeforeNumericEntity = function (c) {\n        if ((c | 0x20) === 120 /* LowerX */) {\n            this.entityExcess++;\n            this._state = 29 /* InHexEntity */;\n        }\n        else {\n            this._state = 28 /* InNumericEntity */;\n            this.stateInNumericEntity(c);\n        }\n    };\n    Tokenizer.prototype.decodeNumericEntity = function (base, strict) {\n        var entityStart = this._index - this.entityExcess - 1;\n        var numberStart = entityStart + 2 + (base >> 4);\n        if (numberStart !== this._index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n            }\n            // Parse entity\n            var entity = this.buffer.substring(numberStart, this._index);\n            var parsed = parseInt(entity, base);\n            this.emitPartial((0, decode_codepoint_1.default)(parsed));\n            this.sectionStart = this._index + Number(strict);\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function (c) {\n        if (c === 59 /* Semi */) {\n            this.decodeNumericEntity(10, true);\n        }\n        else if (!isNumber(c)) {\n            if (this.allowLegacyEntity()) {\n                this.decodeNumericEntity(10, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n        else {\n            this.entityExcess++;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function (c) {\n        if (c === 59 /* Semi */) {\n            this.decodeNumericEntity(16, true);\n        }\n        else if ((c < 97 /* LowerA */ || c > 102 /* LowerF */) &&\n            (c < 65 /* UpperA */ || c > 70 /* UpperF */) &&\n            !isNumber(c)) {\n            if (this.allowLegacyEntity()) {\n                this.decodeNumericEntity(16, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n        else {\n            this.entityExcess++;\n        }\n    };\n    Tokenizer.prototype.allowLegacyEntity = function () {\n        return (!this.xmlMode &&\n            (this.baseState === 1 /* Text */ ||\n                this.baseState === 24 /* InSpecialTag */));\n    };\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */\n    Tokenizer.prototype.cleanup = function () {\n        // If we are inside of text, emit what we already have.\n        if (this.running &&\n            this.sectionStart !== this._index &&\n            (this._state === 1 /* Text */ ||\n                (this._state === 24 /* InSpecialTag */ &&\n                    this.sequenceIndex === 0))) {\n            // TODO: We could emit attribute data here as well.\n            this.cbs.ontext(this.buffer.substr(this.sectionStart));\n            this.sectionStart = this._index;\n        }\n        var start = this.sectionStart < 0 ? this._index : this.sectionStart;\n        this.buffer =\n            start === this.buffer.length ? \"\" : this.buffer.substr(start);\n        this._index -= start;\n        this.bufferOffset += start;\n        if (this.sectionStart > 0) {\n            this.sectionStart = 0;\n        }\n    };\n    Tokenizer.prototype.shouldContinue = function () {\n        return this._index < this.buffer.length && this.running;\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */\n    Tokenizer.prototype.parse = function () {\n        while (this.shouldContinue()) {\n            var c = this.buffer.charCodeAt(this._index);\n            if (this._state === 1 /* Text */) {\n                this.stateText(c);\n            }\n            else if (this._state === 23 /* SpecialStartSequence */) {\n                this.stateSpecialStartSequence(c);\n            }\n            else if (this._state === 24 /* InSpecialTag */) {\n                this.stateInSpecialTag(c);\n            }\n            else if (this._state === 19 /* CDATASequence */) {\n                this.stateCDATASequence(c);\n            }\n            else if (this._state === 12 /* InAttributeValueDq */) {\n                this.stateInAttributeValueDoubleQuotes(c);\n            }\n            else if (this._state === 9 /* InAttributeName */) {\n                this.stateInAttributeName(c);\n            }\n            else if (this._state === 21 /* InCommentLike */) {\n                this.stateInCommentLike(c);\n            }\n            else if (this._state === 20 /* InSpecialComment */) {\n                this.stateInSpecialComment(c);\n            }\n            else if (this._state === 8 /* BeforeAttributeName */) {\n                this.stateBeforeAttributeName(c);\n            }\n            else if (this._state === 3 /* InTagName */) {\n                this.stateInTagName(c);\n            }\n            else if (this._state === 6 /* InClosingTagName */) {\n                this.stateInClosingTagName(c);\n            }\n            else if (this._state === 2 /* BeforeTagName */) {\n                this.stateBeforeTagName(c);\n            }\n            else if (this._state === 10 /* AfterAttributeName */) {\n                this.stateAfterAttributeName(c);\n            }\n            else if (this._state === 13 /* InAttributeValueSq */) {\n                this.stateInAttributeValueSingleQuotes(c);\n            }\n            else if (this._state === 11 /* BeforeAttributeValue */) {\n                this.stateBeforeAttributeValue(c);\n            }\n            else if (this._state === 5 /* BeforeClosingTagName */) {\n                this.stateBeforeClosingTagName(c);\n            }\n            else if (this._state === 7 /* AfterClosingTagName */) {\n                this.stateAfterClosingTagName(c);\n            }\n            else if (this._state === 22 /* BeforeSpecialS */) {\n                this.stateBeforeSpecialS(c);\n            }\n            else if (this._state === 14 /* InAttributeValueNq */) {\n                this.stateInAttributeValueNoQuotes(c);\n            }\n            else if (this._state === 4 /* InSelfClosingTag */) {\n                this.stateInSelfClosingTag(c);\n            }\n            else if (this._state === 16 /* InDeclaration */) {\n                this.stateInDeclaration(c);\n            }\n            else if (this._state === 15 /* BeforeDeclaration */) {\n                this.stateBeforeDeclaration(c);\n            }\n            else if (this._state === 18 /* BeforeComment */) {\n                this.stateBeforeComment(c);\n            }\n            else if (this._state === 17 /* InProcessingInstruction */) {\n                this.stateInProcessingInstruction(c);\n            }\n            else if (this._state === 27 /* InNamedEntity */) {\n                this.stateInNamedEntity(c);\n            }\n            else if (this._state === 25 /* BeforeEntity */) {\n                this.stateBeforeEntity(c);\n            }\n            else if (this._state === 29 /* InHexEntity */) {\n                this.stateInHexEntity(c);\n            }\n            else if (this._state === 28 /* InNumericEntity */) {\n                this.stateInNumericEntity(c);\n            }\n            else {\n                // `this._state === State.BeforeNumericEntity`\n                this.stateBeforeNumericEntity(c);\n            }\n            this._index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function () {\n        if (this._state === 27 /* InNamedEntity */) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this._index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    /** Handle any trailing data. */\n    Tokenizer.prototype.handleTrailingData = function () {\n        var data = this.buffer.substr(this.sectionStart);\n        if (this._state === 21 /* InCommentLike */) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(data);\n            }\n            else {\n                this.cbs.oncomment(data);\n            }\n        }\n        else if (this._state === 28 /* InNumericEntity */ &&\n            this.allowLegacyEntity()) {\n            this.decodeNumericEntity(10, false);\n            // All trailing data will have been consumed\n        }\n        else if (this._state === 29 /* InHexEntity */ &&\n            this.allowLegacyEntity()) {\n            this.decodeNumericEntity(16, false);\n            // All trailing data will have been consumed\n        }\n        else if (this._state === 3 /* InTagName */ ||\n            this._state === 8 /* BeforeAttributeName */ ||\n            this._state === 11 /* BeforeAttributeValue */ ||\n            this._state === 10 /* AfterAttributeName */ ||\n            this._state === 9 /* InAttributeName */ ||\n            this._state === 13 /* InAttributeValueSq */ ||\n            this._state === 12 /* InAttributeValueDq */ ||\n            this._state === 14 /* InAttributeValueNq */ ||\n            this._state === 6 /* InClosingTagName */) {\n            /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */\n        }\n        else {\n            this.cbs.ontext(data);\n        }\n    };\n    Tokenizer.prototype.getSection = function () {\n        return this.buffer.substring(this.sectionStart, this._index);\n    };\n    Tokenizer.prototype.emitPartial = function (value) {\n        if (this.baseState !== 1 /* Text */ &&\n            this.baseState !== 24 /* InSpecialTag */) {\n            this.cbs.onattribdata(value);\n        }\n        else {\n            this.cbs.ontext(value);\n        }\n    };\n    return Tokenizer;\n}());\nexports.default = Tokenizer;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Parser = void 0;\nvar Tokenizer_1 = __importDefault(require(\"./Tokenizer\"));\nvar formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\",\n]);\nvar pTag = new Set([\"p\"]);\nvar tableSectionTags = new Set([\"thead\", \"tbody\"]);\nvar ddtTags = new Set([\"dd\", \"dt\"]);\nvar rtpTags = new Set([\"rt\", \"rp\"]);\nvar openImpliesClose = new Map([\n    [\"tr\", new Set([\"tr\", \"th\", \"td\"])],\n    [\"th\", new Set([\"th\"])],\n    [\"td\", new Set([\"thead\", \"th\", \"td\"])],\n    [\"body\", new Set([\"head\", \"link\", \"script\"])],\n    [\"li\", new Set([\"li\"])],\n    [\"p\", pTag],\n    [\"h1\", pTag],\n    [\"h2\", pTag],\n    [\"h3\", pTag],\n    [\"h4\", pTag],\n    [\"h5\", pTag],\n    [\"h6\", pTag],\n    [\"select\", formTags],\n    [\"input\", formTags],\n    [\"output\", formTags],\n    [\"button\", formTags],\n    [\"datalist\", formTags],\n    [\"textarea\", formTags],\n    [\"option\", new Set([\"option\"])],\n    [\"optgroup\", new Set([\"optgroup\", \"option\"])],\n    [\"dd\", ddtTags],\n    [\"dt\", ddtTags],\n    [\"address\", pTag],\n    [\"article\", pTag],\n    [\"aside\", pTag],\n    [\"blockquote\", pTag],\n    [\"details\", pTag],\n    [\"div\", pTag],\n    [\"dl\", pTag],\n    [\"fieldset\", pTag],\n    [\"figcaption\", pTag],\n    [\"figure\", pTag],\n    [\"footer\", pTag],\n    [\"form\", pTag],\n    [\"header\", pTag],\n    [\"hr\", pTag],\n    [\"main\", pTag],\n    [\"nav\", pTag],\n    [\"ol\", pTag],\n    [\"pre\", pTag],\n    [\"section\", pTag],\n    [\"table\", pTag],\n    [\"ul\", pTag],\n    [\"rt\", rtpTags],\n    [\"rp\", rtpTags],\n    [\"tbody\", tableSectionTags],\n    [\"tfoot\", tableSectionTags],\n]);\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\",\n]);\nvar foreignContextElements = new Set([\"math\", \"svg\"]);\nvar htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignobject\",\n    \"desc\",\n    \"title\",\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ (function () {\n    function Parser(cbs, options) {\n        if (options === void 0) { options = {}; }\n        var _a, _b, _c, _d, _e;\n        this.options = options;\n        /** The start index of the last event. */\n        this.startIndex = 0;\n        /** The end index of the last event. */\n        this.endIndex = 0;\n        /**\n         * Store the start index of the current open tag,\n         * so we can update the start index for attributes.\n         */\n        this.openTagStart = 0;\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames =\n            (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    // Tokenizer event handlers\n    /** @internal */\n    Parser.prototype.ontext = function (data) {\n        var _a, _b;\n        var idx = this.tokenizer.getAbsoluteIndex();\n        this.endIndex = idx - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n        this.startIndex = idx;\n    };\n    Parser.prototype.isVoidElement = function (name) {\n        return !this.options.xmlMode && voidElements.has(name);\n    };\n    /** @internal */\n    Parser.prototype.onopentagname = function (name) {\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.emitOpenTag(name);\n    };\n    Parser.prototype.emitOpenTag = function (name) {\n        var _a, _b, _c, _d;\n        this.openTagStart = this.startIndex;\n        this.tagname = name;\n        var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);\n        if (impliesClose) {\n            while (this.stack.length > 0 &&\n                impliesClose.has(this.stack[this.stack.length - 1])) {\n                var el = this.stack.pop();\n                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, el, true);\n            }\n        }\n        if (!this.isVoidElement(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            }\n            else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);\n        if (this.cbs.onopentag)\n            this.attribs = {};\n    };\n    Parser.prototype.endOpenTag = function (isImplied) {\n        var _a, _b;\n        this.startIndex = this.openTagStart;\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);\n            this.attribs = null;\n        }\n        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {\n            this.cbs.onclosetag(this.tagname, true);\n        }\n        this.tagname = \"\";\n    };\n    /** @internal */\n    Parser.prototype.onopentagend = function () {\n        this.endOpenTag(false);\n        // Set `startIndex` for next node\n        this.startIndex = this.endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onclosetag = function (name) {\n        var _a, _b, _c, _d, _e, _f;\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) ||\n            htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (!this.isVoidElement(name)) {\n            var pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    var count = this.stack.length - pos;\n                    while (count--) {\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop(), count !== 0);\n                    }\n                }\n                else\n                    this.stack.length = pos;\n            }\n            else if (!this.options.xmlMode && name === \"p\") {\n                this.emitOpenTag(name);\n                this.closeCurrentTag(true);\n            }\n        }\n        else if (!this.options.xmlMode && name === \"br\") {\n            // We can't go through `emitOpenTag` here, as `br` would be implicitly closed.\n            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);\n            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, name, {}, true);\n            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, name, false);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = this.endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onselfclosingtag = function () {\n        if (this.options.xmlMode ||\n            this.options.recognizeSelfClosing ||\n            this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag(false);\n            // Set `startIndex` for next node\n            this.startIndex = this.endIndex + 1;\n        }\n        else {\n            // Ignore the fact that the tag is self-closing.\n            this.onopentagend();\n        }\n    };\n    Parser.prototype.closeCurrentTag = function (isOpenImplied) {\n        var _a, _b;\n        var name = this.tagname;\n        this.endOpenTag(isOpenImplied);\n        // Self-closing tags will be on the top of the stack\n        if (this.stack[this.stack.length - 1] === name) {\n            // If the opening tag isn't implied, the closing tag has to be implied.\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);\n            this.stack.pop();\n        }\n    };\n    /** @internal */\n    Parser.prototype.onattribname = function (name) {\n        this.startIndex = this.tokenizer.getAbsoluteSectionStart();\n        if (this.lowerCaseAttributeNames) {\n            name = name.toLowerCase();\n        }\n        this.attribname = name;\n    };\n    /** @internal */\n    Parser.prototype.onattribdata = function (value) {\n        this.attribvalue += value;\n    };\n    /** @internal */\n    Parser.prototype.onattribend = function (quote) {\n        var _a, _b;\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);\n        if (this.attribs &&\n            !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n    };\n    Parser.prototype.getInstructionName = function (value) {\n        var idx = value.search(reNameEnd);\n        var name = idx < 0 ? value : value.substr(0, idx);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    /** @internal */\n    Parser.prototype.ondeclaration = function (value) {\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        if (this.cbs.onprocessinginstruction) {\n            var name_1 = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"!\" + name_1, \"!\" + value);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = this.endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onprocessinginstruction = function (value) {\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        if (this.cbs.onprocessinginstruction) {\n            var name_2 = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"?\" + name_2, \"?\" + value);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = this.endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.oncomment = function (value) {\n        var _a, _b, _c, _d;\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n        // Set `startIndex` for next node\n        this.startIndex = this.endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.oncdata = function (value) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        }\n        else {\n            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, \"[CDATA[\" + value + \"]]\");\n            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = this.endIndex + 1;\n    };\n    /** @internal */\n    Parser.prototype.onerror = function (err) {\n        var _a, _b;\n        (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    };\n    /** @internal */\n    Parser.prototype.onend = function () {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            // Set the end index for all remaining tags\n            this.endIndex = this.startIndex;\n            for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i], true))\n                ;\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */\n    Parser.prototype.reset = function () {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.startIndex = 0;\n        this.endIndex = 0;\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n    };\n    /**\n     * Resets the parser, then parses a complete document and\n     * pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */\n    Parser.prototype.parseComplete = function (data) {\n        this.reset();\n        this.end(data);\n    };\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */\n    Parser.prototype.write = function (chunk) {\n        this.tokenizer.write(chunk);\n    };\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */\n    Parser.prototype.end = function (chunk) {\n        this.tokenizer.end(chunk);\n    };\n    /**\n     * Pauses parsing. The parser won't emit events until `resume` is called.\n     */\n    Parser.prototype.pause = function () {\n        this.tokenizer.pause();\n    };\n    /**\n     * Resumes parsing after `pause` was called.\n     */\n    Parser.prototype.resume = function () {\n        this.tokenizer.resume();\n    };\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.parseChunk = function (chunk) {\n        this.write(chunk);\n    };\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.done = function (chunk) {\n        this.end(chunk);\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n", "// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n", "var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\n", "// PTSSParser.js - A PTSS Parser in JavaScript\n// Copyright (C) 2020\n// License: TBD.\n\nexport {Parser} from './parser.js'\nexport {Stylesheet} from './ptss/stylesheet.js'\nexport {loadSheet} from './sheets/index.js'\n", "export * from './block.js'\nexport * from './inline.js'\nexport * from './table.js'\nexport * from './serialization.js'\n", "import {InlineSequence, Inline, BlockTable, TableMeta, toJSON, inlineBodyText} from './index.js'\n\n/**\n * todo![model] Review STIR types for coherency:\n *  - `STIR` is defined in the `textplain` package, not here in `stir`\n *  - `STIR` is defined as:       `Block | InlineSequence`.\n *    Why isn't it one of these?\n *                                `Block | Inline`\n *                                `BlockSequence | InlineSequence`\n *  - `Block.body` is defined as: `BlockSequence | BlockTable | InlineSequence | undefined`\n *    - Why can't `Block.body` be just a single `Block`, e.g. a `Block` with the\n *      content model `{title: Inline, body: Block}`?\n *  - `traverseBodyTree` takes a single root `Block`, but the content model\n *    of many things is not `Block`, forcing the caller to do the same switch\n *    statement and collection element looping that `traverseBodyTree` does\n *    internally. Shouldn't `traverseBodyTree` take the same type as\n *    `Block.body`, e.g.: `BlockSequence | BlockTable | InlineSequence`?\n *  - We have a lot of complexity / redundancy in many method signatures.\n *    e.g. Shouldn't `stirType`, `isBlock`, `isBlockSequence`, `isInlineSequence`\n *    just take type `STIR`?\n */\n\n// todo[arch] consider adding [toJSON](https://javascript.info/json) implementations to all IR classes.\n\n// todo[perf] Optional Properties VS Undefined Properties\n//   For both ptss and ir nodes, we are declaring properties as\n//        public listOrdered: boolean | undefined\n//   instead of as\n//        public listOrdered?: boolean\n//   For two intended reasons:\n//     1. we can set tsconfig `exactOptionalPropertyTypes`\n//     2. all class instances will have the same property slots, thus the\n//        same \"hidden class\".\n//   I say \"intended\" because I do not know if #2 is true, and if it has any\n//   significant performance benefit.\n//\n//  In any case, I may switch to the type intersection method I used for\n//  Cell in ir/table.ts.\n\n// todo[perf] is there performance benefit to using Javascript plain objects (i.e. no\n// prototype) for STIR nodes?  See https://stackoverflow.com/a/37994079/8910547 for some\n// useful knowledge.\n//\n// I think i made a quick attempt that failed once, but it may be worth another\n// try later.\n\nexport type BlockSequence = Block[]\n\n// todo[spec, stir] Why `{ [name: string]: { title: InlineSequence } }`?\n//   - Why not just just a list of exported names: `string[]`?\n//     - Yes, a list of the names of all deep linkable items is *all* we need\n//       to identify valid cross-assembly references, and treat all others as\n//       errors or something to pass through as is. But we also want to support\n//       cross references where the label of the link is automatically the title\n//       of the thing linked to.\n//   - Then why not just `{ [name: string]: InlineSequence }`?\n//      While initially `title` is all we need, we don't want to paint ourselves\n//      into into a corner. We don't want to break things if we decide that other\n//      info about the referent will be useful, e.g. `summary` text, down the\n//      road. And even if the standard adds no new properties, we want to allow\n//      users to add custom properties.\n//   - Why not point to the actual referent, either as direct link or\n//     referent ID? Because:\n//     - It goes too far. Exports are for references, with metadata useful in\n//       rendering references. It is not there to support transclusions, to\n//       support programmatically walking \"the web\" of a text assembly.\n//     - We want to GC STIRs once they are rendered, only keeping in memory\n//       the minimum needed to resolve deep cross references, no more.\nexport type Exports = { [name: string]: { title: InlineSequence } }\n\n// this set must be (1) kept up to date and (2) be augmented with custom types at runtime\n// todo[stir] this is unused, but maybe use to form that basis for registering type metadata (per\n//  idea under traverseBodyTree).   See `meta` info block in `stir-design.json5` file.\nconst blockTypes = new Set(['paragraph', 'heading', 'section', 'list_item', 'list', 'block_quote', 'code_block',\n    'thematic_break', 'interjection', 'verse', 'table', 'html_block', 'block', 'structured_text_intermediate_representation'])\n\nexport function stirType (v: Block | BlockSequence | BlockTable | Inline | InlineSequence | undefined)\n    : 'iSeq' | 'bSeq' | 'bTable' | 'block' | 'inline' | undefined | 'unknown' {\n    if (v === undefined) {\n        return undefined\n    }\n    if (typeof v === 'string') {\n        return 'iSeq'\n    }\n    if (Array.isArray(v)) {\n        const elem = v[0]\n        if (elem === undefined) { //todo[perf, spec] per TS type narrowing, this case isn't possible.\n            return 'unknown'\n        }\n        if (typeof elem === 'string' || '_type' in elem) {\n            return 'iSeq'\n        }\n        if (Array.isArray(elem)) {\n            return 'bTable'\n        }\n        return 'bSeq'\n    }\n    if (typeof v === 'object') {\n        if ('_type' in v) {\n            return 'inline'\n        }\n        if ('type' in v) {\n            return 'block'\n        }\n    }\n    return 'unknown'\n}\n\nexport function isBlock (v: Block | BlockSequence | BlockTable | Inline | InlineSequence | undefined): v is Block {\n    return stirType(v) === 'block'\n}\n\nexport function isInline (v: Block | BlockSequence | BlockTable | Inline | InlineSequence | undefined): v is Inline {\n    return stirType(v) === 'inline'\n}\n\nexport function isBlockSequence (v: Block | BlockSequence | BlockTable | Inline | InlineSequence | undefined): v is BlockSequence {\n    return stirType(v) === 'bSeq'\n}\n\nexport function isInlineSequence (v: Block | BlockSequence | BlockTable | Inline | InlineSequence | undefined): v is InlineSequence {\n    return stirType(v) === 'iSeq'\n}\n\n\n// this set must be (1) kept up to date and (2) be augmented with custom types at runtime\n// todo![spec, STIR] probably the right way to do this is to make 'isSectioningRoot' a property of the STIR\n//   type that must be declared, and the definitions of the built-in types below have that property set,\n//   and types that extend a built-in inherit that value, which they can override.\nconst sectioningRoots = new Set(['list_item', 'list', 'block_quote', 'interjection', 'table'])\n\n/**\n * Returns the `/` delimited \"ID path\" from the from the containing sectioning\n * root (or STIR root if there is none) to the `node`.\n */\nexport function idPath (node: Block | undefined): { path: string, sectioningRoot: Block | undefined } {\n    let path = ''\n    while (node !== undefined) {\n        if (node.isSectioningRoot()) {\n            return {path, sectioningRoot: node}\n        }\n        if (node.id !== undefined) {\n            path = path === '' ? node.id : node.id + '/' + path\n            break\n        }\n        node = node.parent\n    }\n    return {path, sectioningRoot: undefined}\n}\n\n/**\n * If the node does not have an id, assigns one. {@link seenIDs} will be used\n * to determine uniqueness, and will be updated to include the new id if one\n * is created.\n *\n * todo![now, references] the only remaining ID creating code that should\n *   remain in stir2html is code that converts this ID into HTML friendly\n *   form (search for regexes that contains `p{L}`, etc).\n */\nexport function assignUniqueID (node: Block,\n                                seenIDs: { [key: string]: boolean }) {\n    let id = node.id\n    if (id !== undefined) {\n        return\n    }\n    if (node.type === 'heading') {\n        id = inlineBodyText(node.body as InlineSequence)\n    } else if (node.type === 'section') {\n        id = inlineBodyText(node.title as InlineSequence)\n    } else {\n        throw new Error('not yet implemented')\n    }\n\n    if (id in seenIDs) {\n        // declaring outside of the loop. See https://github.com/microsoft/TypeScript/issues/54790\n        let newID\n        // we start with `2` because having `some_heading` and `some_heading 1` is confusing\n        for (let i = 2; i < Number.MAX_VALUE; i++) {\n            newID = `${id} ${i}`\n            if (!(newID in seenIDs)) {\n                id = newID\n                break\n            }\n        }\n    }\n\n    node.id = id\n    seenIDs[id] = true\n}\n\nexport type Source = undefined | (\n    {\n        lineStart: number | undefined,\n        lineEnd: number | undefined\n    }\n    & unknown)\n\n/**\n * Block: a node in the IR tree.\n */\nexport class Block {\n\n    //todo[api] Maybe should just add a dictionary for the element type specific properties?\n\n    //todo[api] all properties that are NOT part of the representation of the structured text,\n    // e.g. all properties that are meta, should be prefix, e.g. with \"_\" or \"$\" or something\n    // that is compatible with JSON (and other formats ideally).\n    //\n    // This will:\n    //  - makes it clear which properties are part of the representation and which are meta\n    //  - makes it easy to filter out meta when outputting the STIR, e.g. bin/ptss-parser\n    //    should output the canonical STIR for the content without all the crap!\n    //    - there can be an option for including sourceMap info, but all the other crap\n    //      should be nixed.\n\n    // todo![model] not sure I like `type` + `subtype`. It limits the hierarchy to two levels.\n    //   - \uD83C\uDF08\uD83C\uDF36 Also I think if instead of `subType` we have `parentType` or `extendsType`, then\n    //     we end up with the gracefully degrading extensible STIR that we are aiming for.\n    //     For example:\n    //       - Interjection: `type: Interjection;  extends: Block` //\uD83C\uDF36 built-in, but even if it weren't, would get fallback render from Block\n    //       - Warning: `type: Warning;  extends: Interjection`    //\uD83C\uDF36 built-in, but even if it weren't, would get fallback render from Interjection\n    //       - Info: `type: Info;  extends: Interjection`          //\uD83C\uDF36 built-in, but even if it weren't, would get fallback render from Interjection\n    //       - Danger: `type: Danger;  extends: Warning`  // \uD83C\uDF08\uD83C\uDF36\uD83C\uDF08\uD83C\uDF36 NOT built-in, more severe than Warning, but gets fallback render from Warning.\n    /* e.g. paragraph, heading, item, block_quote, strong, image... */\n    public type: string\n    public subType: string | undefined //todo![now] rename to 'subtype'\n\n    public id: string | undefined\n\n\n    /**\n     * The Block that contains this Block, i.e. it's parent Block\n     * in the content hierarchy.\n     *\n     * todo![now] adding `parent` and associated methods:\n     *\n     *   MIGHT SIMPLIFY MANY THINGS:\n     *    0. WOAH: DOES ParseContainer GO AWAY or get drastically simplified?\n     *    1. tight list renderer won't need to pass any flags in\n     *       HTMLOut... we can just check the containing list props.\n     *    2. TOC gen might not need all the complexity i have\n     *       to track levels.\n     *    3. does it simplify some parsing logic, e.g. around content\n     *       models and the like?\n     *    4. Look at all code where I create a STACK as I process nodes.\n     *    5. ???\n     *\n     *  SHOULD HAVE NEGLIGIBLE COST:\n     *    - the cardinality of block elements is small\n     *    - as long as we don't need to do this for Inline elements\n     *\n     *  BUT WON'T HELP WHEN WE DO NEED IT FOR INLINE ELEMENTS\n     *    - so far at least one case:\n     *      - calculating the section path of NamedValue declarations,\n     *        since we want to support named Inline elements as well.\n     *        There is an easy/free alternative for this case: we\n     *        pass the current section hierarchy from ParseContainer\n     *        as a parameter to NamedValues.define(...).\n     *\n     * todo[spec, API] Block.parent or Block.container?\n     *\n     * @type {Block | undefined} only root block has no parent.\n     */\n    parent: Block | undefined\n\n    public get isRoot (): boolean {\n        return this.parent === undefined\n    }\n\n    /**\n     * The main content.\n     *\n     *! `body` is special.\n     *    - the ***body tree*** forms the main content tree\n     *      - it is the tree defined by all the body edges (links from\n     *        parent nodes to `body` children, to their `body` children, and\n     *        so on)\n     *      - the primary content of Containers is in `body`\n     *      - table cell content is its `body`\n     *      - there may be other branches sprouting off from the main body\n     *        tree (e.g. a table `footer` with complex content), but even within\n     *        these \"spurs\" the body tree is primary.\n     *\n     *    - recurseBodyTree walks the block/inline tree defined by body.\n     *\n     *      It is used, for example, to:\n     *      - recursively search for elements needing targeting IDs.\n     *      - recursively search for InlineSequence fields needing parsing.\n     *\n     *      No other part of a content tree is recursed this way automatically.\n     *      SEE notes under recurseBodyTree for how to expand the traversal\n     *      to other parts of of a block's content tree.\n     *\n     *    - if a Container style declaration doesn't specify what to do with\n     *      the container body, it is automatically mapped to the STIR element's\n     *      body. This is not just a convenience; it's an intuitive assumption\n     *      and it allows for terser definitions.\n     *\n     * todo[docs, RepoDoc] The above belongs in the user guide. But it is also\n     *   useful here. \"RepoDoc solves this and keeps your documentation DRY\n     *   by allowing you to put it in one place and link to it from all others.\n     *   If you decide, for example, that the project should be end-user\n     *   documentation-driven, you can put more specification and explanation\n     *   in the end-user docs and link to it from the parts of the code that\n     *   implement it or must conform to it.\"\n     */\n    public body: BlockSequence | BlockTable | InlineSequence | undefined\n\n    public title: InlineSequence | undefined\n\n    // for heading type\n    public level: number | undefined\n\n    // for table type\n    public head: BlockTable | undefined\n    public tableMeta: TableMeta | undefined\n\n    // for list type\n    public listOrdered: boolean | undefined\n    public listStartNum: number | undefined  // defaults to one\n    /**\n     * todo[spec] TEMP HACK. Need abstract info. This isn't arbitrary presentation,\n     *   as certain types of documents (e.g. legal) expect certain kinds of numbering.\n     *   THOUGH arguably that could be implemented/enforced in the renderer, rather than\n     *   in the STIR? But the downside of that is said info will be lost if we ever support\n     *   storage of the STIR, or if the user wants to use a third party renderer. But putting\n     *   it in the STIR spec, we force all renderers to support all the numbering systems, or\n     *   at least the default set.\n     *   - we might use [HTML's list-style-type](https://www.w3.org/TR/CSS2/generate.html#propdef-list-style-type)\n     *   - or we might see what DocBook, LaText or PDF does.\n     *   - BUT i want to be able to do things like Chinese numbers.\n     *   - perhaps even allow a style sheet to create an arbitrary sequence by providing a list of characters,\n     *     long enough for the longest list it supports (more lists are short anyway).\n     */\n    public listStyle: 'decimal' | undefined\n\n    // for code block type\n    public info: string | undefined\n\n    // Hints are info that renderers are not required to support.\n    /// See STIR spec.\n    public _hints?: { [key: string]: unknown }\n\n    // todo[arch] the only way support arbitrary props.\n    //  maybe: https://stackoverflow.com/questions/44243060/use-enum-as-restricted-key-type-in-typescript\n    //  or: https://stackoverflow.com/questions/54542318/using-an-enum-as-a-dictionary-key\n    // todo: leverage TS 4.4's Template String Pattern Index Signatures ????\n    //   https://devblogs.microsoft.com/typescript/announcing-typescript-4-4-beta/#symbol-template-signatures\n    //   We could say that all custom props are prefixed with 'x-' (like custom HTML/CSS props)\n    //      // Permit any property starting with 'x-'.\n    //      [key: `x-${string}`]: unknown\n    // todo[api] is the way Vinyl supports custom properties useful for STIR?\n    //   https://www.npmjs.com/package/vinyl#extending-vinyl\n    //   see `builtInFields`/`File.isCustomProp` in src.\n    [key: string]: unknown\n\n    /**\n     * This member is a private \"hook\" for parsers to store for each IR node\n     * information about the corresponding source plain text. This is NOT part\n     * of the Structured Text Intermediate Representation spec, and thus is\n     * private to any particular parser implementation, not to be relied on by\n     * any third-party downstream tool.\n     *\n     * For example, the reference PTSS parser implementation stores:\n     *\n     * 1. details about the corresponding plain text source used during the\n     *    parse process, including a function that is called to check if the\n     *    block continues on the next line.\n     *\n     * 2. the location of the corresponding plain text block within the source,\n     *    which is then used to annotate the corresponding nodes in the rendered\n     *    HTML.\n     *\n     * 3. Other information useful for debugging.\n     *\n     * todo[perf] in memory efficient mode should we could clear this field after\n     *    the ParsedIrElement is fully parsed?\n     *\n     * todo[api] despite what I wrote above, if this can adhere to the sourceMap\n     *    spec, then at least those parts represented here are NOT private, and\n     *    could be an *optional* feature of a STIR fully defined by the spec.\n     */\n    source: Source\n\n    constructor (type: string) {\n        this.type = type\n    }\n\n    get hints (): { [key: string]: unknown } {\n        if (this._hints === undefined) {\n            this._hints = {}\n        }\n        return this._hints\n    }\n\n    appendToBody (content: Block): void {\n        if (this.body === undefined) {\n            this.body = [content]\n        } else if (isBlockSequence(this.body)) {\n            (this.body as BlockSequence).push(content)\n        } else {\n            throw new Error('internal error: attempting to add block to non-BlockSequence')\n        }\n        content.parent = this\n    }\n\n    toString () {\n        return toJSON(this, 2, true)\n    }\n\n    /**\n     * Returns a string that uniquely identifies this Block\n     * suitable for debugging or debug log purposes.\n     *\n     * todo[errors] consider using this, or an improved form of this, or\n     *  something similar for end-user error messages, that uniquely\n     *  identifies the source of the error in the source. *At the very\n     *  least* it must include the source position as the value returned\n     *  by this does.\n     *\n     * todo![now, references] replace all debug calls to toString with this.\n     */\n    toDebugString (): string {\n        return this.toHierarchyString()\n    }\n\n    /**\n     * Returns a single line representing the parent container (nesting)\n     * hierarchy of this Block, along with the start line info for each\n     * block in the hierarchy, if available.\n     *\n     * ! Used by ptss-parser's debug logging. Do not change unless the\n     *    impact on said debug log is intentional.\n     */\n    toHierarchyString (): string {\n        if (this.parent === undefined) {\n            // starting every debug string with\n            //   \"structured_text_intermediate_representation(ln 1)/\"\n            // is useless info\n            return '/'\n        }\n\n        let s = this.parent.toDebugString()\n        // we don't need a delimiter if the parent is the root\n        if (s.length > 1) s += '/'\n        s += this.type\n        if (this.source?.lineStart) {\n            s += '(ln ' + this.source?.lineStart + ')'\n        }\n        return s\n    }\n\n    /**\n     * @returns whether or not the block tree rooted in this block\n     *   contains at least one `section` block. Excludes any nested\n     *   sectioning roots from the search.\n     */\n    hasSections (): boolean {\n        let result = false\n        this.traverseBodyTree(function (node) {\n            if (node.type === 'section') {\n                result = true\n                return 2 //found one, we can stop traversal\n            }\n            // don't search into nested sectioning roots\n            return node.isSectioningRoot() ? 1 : 0\n        })\n        return result\n    }\n\n    isSectioningRoot (): boolean {\n        return sectioningRoots.has(this.type)\n    }\n\n    /**\n     * Traverses the \"body tree\" rooted in this Block in preorder, calling\n     * `blockFunc` for each node.\n     *\n     * \u2139\uFE0F If some other branches than body branches need to be included in the\n     * traversal, the implementation of the `blockFunc` can do that based on\n     * knowledge of the content model of the block in question. i.e. the\n     * `blockFunc` can call this function for any non-body rooted branch.\n     *   > # \uD83D\uDFE7 but this doesn't cover used-defined custom block types. See below.\n     *\n     * \u2139\uFE0F If the body branches of Inlines need to be included in the\n     * traversal, the implementation of the `blockFunc` can do that, calling\n     * Inline.traverseInlineBodyTree for each desired inline component of the\n     * block in question's content model.\n     *\n     * `blockFunc` return values\n     * -------------------------\n     * - `0`: continue traversal\n     * - `1`: do not traverse the children of this node, but continue traversal\n     * - `2`: abort traversal immediately\n     *\n     * todo[perf] an alternate solution is for the caller to also provide a\n     *   `childFilter` function. The filter is applied to the node (after the\n     *   `blockFunc`, and only those children returned by the filter are traversed.\n     *   This will give both the greatest amount of control (i.e. not just \"body tree\")\n     *   while remaining very efficient. If no filter is given, all `body`\n     *   children will be traversed. PERHAPS, have both versions, `traverseBodyTree`\n     *   and `traverseFilteredTree`.\n     *\n     * todo[arch] \uD83D\uDFE7 Some client functions are themselves generic, e.g.\n     *   `parseBlockInlines`. But that method has hardcoded logic to parse the inline\n     *   values of the b.body and b.title, and will fail to parse the inline content\n     *   values of fields of custom block types.\n     *   Some approaches that could work:\n     *     A. Iterate over all properties, looking for ones with values of a\n     *        type that would need processing (e.g. BlockSequence)\n     *     B. Each block type definition includes a list of field names that\n     *        contain content, besides the standard `body` field.\n     *\n     * todo[arch, perf] would this method and its callers benefit if it supported\n     *   both pre- and post-order traversal callbacks like textAssembly/travers.ts?\n     *\n     * todo![tables] we have hardcoded logic for type='table' below. See above notes\n     */\n    traverseBodyTree (blockFunc: (block: Block) => 0 | 1 | 2): void {\n        const stack: Block[] = [this]\n        let node: Block\n        let body: BlockSequence | BlockTable | InlineSequence | undefined\n\n        while (stack.length > 0) {\n            node = stack.pop() as Block\n            switch (blockFunc(node)) {\n                case 0: // continue down this branch\n                    body = node.body\n\n                    // push children on stack in reverse order so they are popped in preorder\n                    if (body) {\n                        const type = stirType(body)\n                        if (type === 'bSeq') {\n                            for (let i = body.length - 1; i >= 0; i--) {\n                                stack.push(body[i] as Block)\n                            }\n                        } else if (type === 'bTable') {\n                            const table: BlockTable = body as BlockTable\n                            for (let i = table.length - 1; i >= 0; i--) {\n                                const row = table[i]\n                                for (let j = row.length - 1; j >= 0; j--) {\n                                    stack.push(row[j])\n                                }\n                            }\n                        }\n                    }\n                    if (node.head) {\n                        const table: BlockTable = node.head as BlockTable\n                        for (let i = table.length - 1; i >= 0; i--) {\n                            const row = table[i]\n                            for (let j = row.length - 1; j >= 0; j--) {\n                                stack.push(row[j])\n                            }\n                        }\n                    }\n                    break\n                case 1: // don't descend this branch, but continue traversal\n                    break\n                case 2: // abort traversal\n                    return\n            }\n        }\n    }\n}\n", "import json5 from 'json5'\nimport {Block, BlockSequence} from './block.js'\nimport {Inline, InlineSequence} from './inline.js'\n\n// todo[arch, serialization] if this gets too complex, consider using\n//  - https://www.npmjs.com/package/class-transformer\n\n// For eventual serialized JSON pipelines, see if this makes a performance\n// difference:\n// https://www.npmjs.com/package/fast-json-stringify\n\n// todo[spec, robustness, gracefulness] should we rely on duck typing rather than `instanceof` ?\n\n/**\n * This will be fully or partially constructed from the head of the STIR-JSON\n * file (the spec will state that the very first key(s) of the JSON object MUST BE\n * X as we need read the type info from it before we can correctly interpret the\n * rest of the JSON.\n *\n * todo[spec, stir, serialization] we could serialize either (TBD):\n *   - all types, both fixed spec-defined types and custom types defined by style sheet\n *   - OR, just the custom types, as others are defined by the spec.\n *   - OR, we support both (compact vs full forms)\n */\nconst typeMap: { [key: string]: 'block' | 'inline' | undefined } = {\n    structured_text_intermediate_representation: 'block',\n    paragraph: 'block',\n    section: 'block',\n    heading: 'block',\n    list: 'block',\n    list_item: 'block',\n    table: 'block',\n    block_quote: 'block',\n    interjection: 'block',\n    code_block: 'block',\n    emph: 'inline',\n    strong: 'inline',\n    xref: 'inline',\n    code: 'inline'\n}\n\nexport const blockTypes = Object.keys(typeMap).filter(k => typeMap[k] === 'block')\nexport const inlineTypes = Object.keys(typeMap).filter(k => typeMap[k] === 'inline')\n\n/**\n * Serialize a complete STIR tree or fragment into its standard JSON form.\n */\nexport function toJSON (stir: Block | BlockSequence | Inline | InlineSequence,\n                        space?: string | number | undefined,\n                        isFragment = false): string {\n    return JSON.stringify(stir,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function (key: string, value: any) {\n            // keys starting with `~` are temp processing data\n            if (key[0] === '~') {\n                return undefined\n            }\n            if (!isFragment && key === '' && value === stir) {\n                if (!(value instanceof Block)) {\n                    throw new TypeError(`argument to stir.toJSON not a STIR. Expecting Block, encountered ${\n                        typeof value === 'object' ?\n                            value.constructor ?\n                                value.constructor.name\n                                :\n                                typeof value\n                            :\n                            typeof value\n                    }`)\n                }\n                const r: Record<string, unknown> = {\n                    // todo[spec, stir, serialization] 'STIR' or 'structured_text_intermediate_representation' ?\n                    //   - adding 30-40 bytes isn't an issue.\n                    //   - we can be like most tech and use code like 'STIR'\n                    //   - or we can be more explicit (and also never have to worry about ambiguity/name collision)\n                    // todo[spec, stir, versioning]\n                    //   - using type and subtype as below ONLY makes sense if it is consistent with the semantics\n                    //     of those properties as used on non-root nodes.\n                    //   - consider these options:\n                    //     - version is part of type:\n                    //       ```\n                    //       type: 'structured_text_intermediate_representation,v1'\n                    //       subtype: 'basic_profile'\n                    //       ```\n                    //     - traditional separate version field:\n                    //       ```\n                    //       type: 'structured_text_intermediate_representation'\n                    //       subtype: 'technical'\n                    //       version: '1'\n                    //       ```\n                    type: 'structured_text_intermediate_representation',\n                    subtype: 'basic V1',  // this is my idea of different STIR profiles\n                    types: {\n                        block: blockTypes,\n                        inline: inlineTypes\n                    }\n                }\n                for (const k in value) {\n                    if (k !== 'source' && k !== 'type') {\n                        r[k] = value[k]\n                    }\n                }\n                return r\n            }\n            if (!value || typeof value !== 'object' || Array.isArray(value)) {\n                return value\n            }\n            if (value instanceof Block || value.type === 'cell') {\n                //! parent is NOT part of the STIR spec, though obviously\n                // the parent is implied by the structure, and can be\n                // reconstituted as a Block.ts instance with a parent pointer.\n\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const {parent, source, ...rest} = value\n                return rest\n            }\n            if (value instanceof Inline) {\n                const r: Record<string, unknown> = {}\n                for (const k in value) {\n                    if (k === '_type') {\n                        r['type'] = value[k]\n                    } else if (k === 'referent') {\n                        const referent = value[k]\n                        if (typeof referent === 'object') {\n                            //todo![serialization] fromJSON needs to do the\n                            //  reverse: reconstitute this reference as a\n                            //  direct pointer to the element.\n                            r['referent'] = `@id:${referent.id}`\n                        } else {\n                            r['referent'] = referent\n                        }\n                    } else {\n                        r[k] = value[k]\n                    }\n                }\n                return r\n            }\n            return value\n        }, space)\n}\n\n/**\n * Deserializes a STIR tree from JSON into TextPlain's\n * classes rather than plain JS objects.\n *\n * Possible alternative ways to unmarshal STIR data:\n *   https://github.com/typestack/class-transformer\n *   https://stackoverflow.com/questions/5873624/parse-json-string-into-a-particular-object-prototype-in-javascript\n *   https://www.npmjs.com/package/typescript-json-serializer\n *   https://serialazy.teqlab.net/#getting-started\n */\nexport function fromJSON (stirJSON: string): Block {\n    const o = json5.parse(stirJSON, function (key, value) {\n        if (!value || typeof value !== 'object' || Array.isArray(value)) {\n            return value\n        }\n        const isRoot = key === ''\n        if (value.type) {\n            switch (typeMap[value.type]) {\n                case 'block': {\n                    const block = new Block(value.type)\n                    for (const k in value) {\n                        if (k === 'body') {\n                            const body = value.body\n                            if (Array.isArray(body) && body[0] instanceof Block) {\n                                body.forEach(b => {\n                                    block.appendToBody(b)\n                                })\n                            } else {\n                                block.body = body\n                            }\n                        } else if (!isRoot || (k !== 'subtype' && k !== 'types')) {\n                            block[k] = value[k]\n                        }\n                    }\n                    return block\n                }\n                case 'inline': {\n                    const inline = new Inline(value.type)\n                    for (const k in value) {\n                        if (k !== 'type') {\n                            inline[k] = value[k]\n                        }\n                    }\n                    return inline\n                }\n                default:\n                    throw new TypeError(`unknown type \"${value.type}\"`)\n            }\n        }\n        return value\n    })\n    return o as Block\n}\n\n\n/**\n * See https://github.com/microsoft/TypeScript/issues/1897\n * I saw it again by chance in https://github.com/iammerrick/json-lisp/blob/master/index.ts\n */\nexport type JSONValue =\n    | string\n    | number\n    | boolean\n    | null\n    | JSONValue[]\n    | { [key: string]: JSONValue }\n\n\nexport interface JSONObject {\n    [k: string]: JSONValue\n}\n", "import type {Block} from './block.js'\nimport {toJSON} from './serialization.js'\n\nexport type InlineSequence = string | (Inline | string)[]\n\nexport class Inline {\n\n    /**\n     * e.g. paragraph, heading, item, block_quote, strong, image...\n     *\n     * todo[api, arch] TEMP HACK: JSON deserialization code is currently using\n     * the `_` prefix or lack thereof to distinguish between Block and Inline\n     * elements in the JSON representation. See `fromJSON` and `fromObject`.\n     */\n    protected readonly _type: string\n    public subtype: string | undefined\n\n    public id: string | undefined\n\n    /**\n     * The main content.\n     *\n     *! `body` is special.\n     *    - It is the main content tree\n     *    - recurseInlineBodyTree walks the inline tree defined by body. It is used, for example, to:\n     *      - recursively search for elements needing targeting IDs.\n     *      No other part of a block's content model is recursively searched for these things.\n     */\n    public body?: InlineSequence\n\n    // link, image\n    public referent: Block | Inline | string | undefined\n    public desc: string | undefined\n\n    [key: string]: unknown\n\n    constructor (type: string) {\n        this._type = type\n    }\n\n    get type (): string {\n        return this._type\n    }\n\n    bodyAppend (content: Inline | string | InlineSequence): void {\n        if (this.body === undefined) {\n            if (typeof content === 'string' || Array.isArray(content)) {\n                this.body = content\n            } else {\n                this.body = [content]\n            }\n        } else if (typeof this.body === 'string') {\n            if (Array.isArray(content)) {\n                this.body = [this.body, ...content]\n            } else {\n                this.body = [this.body, content]\n            }\n        } else {\n            if (Array.isArray(content)) {\n                this.body.push(...content)\n            } else {\n                this.body.push(content)\n            }\n        }\n    }\n\n    toString () {\n        return toJSON(this, 2, true)\n    }\n\n    inlineBodyText():string {\n        return inlineBodyText([this])\n    }\n\n    traverseBodyTree(func: (inline: Inline | string) => void): void {\n        traverseInlineBodyTree([this], func)\n    }\n}\n\n//todo![now, test] make sure this doesn't produce run-on words.\nexport function inlineBodyText (seq: InlineSequence): string {\n    if (!seq || seq === '') {\n        return ''\n    }\n    let text = ''\n    traverseInlineBodyTree(seq, function (inline): void {\n        if (typeof inline === 'string') {\n            text += inline\n        }\n    })\n    return text\n}\n\n/**\n *\n * todo[perf, arch] would a this traverse benefit from a non-recursive\n *    implementation like `traverseBodyTree`? And with both pre- and\n *    post-order traversal callbacks like textAssembly/travers.ts?\n *\n * @param {InlineSequence} seq\n * @param {(inline: (Inline | string)) => void} func\n */\nexport function traverseInlineBodyTree (seq: InlineSequence, func: (inline: Inline | string) => void): void {\n    if (typeof seq === 'string') {\n        func(seq)\n    } else {\n        for (const item of seq) {\n            func(item)\n\n            // recurse body tree\n            if (typeof item !== 'string' && item.body) {\n                traverseInlineBodyTree(item.body, func)\n            }\n        }\n    }\n}\n", "import * as ir from '../../stir/index.js'\n\n\n// todo![now, references] ALSO, DON'T WE NEED TO ESCAPE SLASHES `/` AND HASHES `#`\n//   since they are part of the syntax?\n//   - \uD83E\uDDEA ADD TEST CASES both to help decide and to have coverage.\n// todo![now, references] is this right for PTSS and/or STIR?\n//   - of course, we don't want case-sensitive names\n//   - of course, we don't want newlines to be relevant.\n//   - \uD83E\uDDEA ADD TEST CASES both to help decide and to have coverage.\n// todo[spec, named values] is this what we want for the final?\n//  - See https://github.com/commonmark/commonmark.js/issues/168\n//  - chose to end with lower case, because that's what we want names to look like in STIR and in HTML IDs\n//  - for some reason, `.toUpperCase().toLowerCase()` doesn't work; at least one CommonMark test breaks.\n//  - so perhaps this is the way to go, or is a temp hack, IDK.\nexport function normalizeName (s: string): string {\n    return s.trim().replace(/[ \\t\\r\\n]+/, ' ').toLowerCase().toUpperCase().toLowerCase()\n}\n\nexport type ValueType = 'element' | 'href' | 'metadata' | 'counter' | 'substitution'\n\nexport type Value = ElementValue | HrefValue | SubstitutionValue\n\nexport type ElementValue = { type: 'element', element: ir.Block | ir.Inline }\n\n/**\n *\n * href `desc`\n * -----------\n * HTML semantics of `title` attribute (to which this gets written:\n *  - whatwg.org (same as w3.org):\n *\n *    3.2.6.1 The title attribute\n *\n *    The title attribute represents advisory information for the element, such as would be appropriate for a tooltip. On a link, this could be the title or a description of the target resource; on an image, it could be the image credit or a description of the image; on a paragraph, it could be a footnote or commentary on the text; on a citation, it could be further information about the source; on interactive content, it could be a label for, or instructions for, use of the element; and so forth. The value is text.\n *\n *    Relying on the title attribute is currently discouraged as many user agents do not expose the attribute in an accessible manner as required by this specification (e.g., requiring a pointing device such as a mouse to cause a tooltip to appear, which excludes keyboard-only users and touch-only users, such as anyone with a modern phone or tablet).\n *\n *    If this attribute is omitted from an element, then it implies that the title attribute of the nearest ancestor HTML element with a title attribute set is also relevant to this element. Setting the attribute overrides this, explicitly stating that the advisory information of any ancestors is not relevant to this element. Setting the attribute to the empty string indicates that the element has no advisory information.\n *\n *    If the title attribute's value contains U+000A LINE FEED (LF) characters, the content is split into multiple lines. Each U+000A LINE FEED (LF) character represents a line break.\n *\n */\nexport type HrefValue = { type: 'href', url: string, desc: string | undefined }\n\nexport type SubstitutionValue = { type: 'substitution', content: ir.InlineSequence }\n\n//! just ideas\nexport type MetadataValue = { type: 'metadata', value: string }\nexport type CounterValue = { type: 'counter', count: number }\n// todo[spec] just an idea: support things like tabular data,\n//  perhaps loaded from external files\nexport type DataSetValue = { type: 'data', data: unknown }\n\n\nexport type NamedValue = { name: string, value: Value }\n\nexport function stringifyNamedValue (nv: NamedValue): string {\n    return stringifyNameAndValue(nv.name, nv.value)\n}\n\nexport function stringifyNameAndValue (name: string, v: Value): string {\n    return `${name} -> ${stringifyValue(v)}`\n}\n\nexport function stringifyValue (v: Value): string {\n    if (v.type === 'href') {\n        let s = `href (url=\"${v.url}\"`\n        if (v.desc) s += `, desc=\"${v.desc}\"`\n        return s + ')'\n    } else if (v.type === 'substitution') {\n        return `substitution for \"${JSON.stringify(v.content)}\"`\n    } else {\n        const element = v.element\n        if (element instanceof ir.Inline) {\n            return `inline (${element.type} \"${element.inlineBodyText()}\")`\n        } else {\n            return `block (${element.toDebugString()})`\n        }\n    }\n}\n", null, null, null, null, "// the reason we use `mdurl/encode` rather than the built-in encodeURI is because the former\n// has logic to avoid double-encoding.\nimport {decodeHTML} from 'entities/lib/decode.js'\n\nconst C_BACKSLASH = 92\nexport const ENTITY = '&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});'\n\nconst reBackslashOrAmp = /[\\\\&]/\n\nexport const ESCAPABLE = '[!\"#$%&\\'()*+,./:;<=>?@[\\\\\\\\\\\\]^_`{|}~-]'\n\nconst reEntityOrEscapedChar = new RegExp('\\\\\\\\' + ESCAPABLE + '|' + ENTITY, 'gi')\n\nconst reAttribSpecial = new RegExp('[&<>\"]', 'g')\n\nconst reTextSpecial = new RegExp('[&<>]', 'g')\n\nconst reWhitespace = /\\s/\n\nexport function isWhitespace(ch: string) {\n    return reWhitespace.test(ch)\n}\n\nconst unescapeChar = function (s: string): string {\n    if (s.charCodeAt(0) === C_BACKSLASH) {\n        return s.charAt(1)\n    } else {\n        return decodeHTML(s)\n    }\n}\n\n// Replace entities and backslash escapes with literal characters.\nexport const unescapeString = function (s: string): string {\n    if (reBackslashOrAmp.test(s)) {\n        return s.replace(reEntityOrEscapedChar, unescapeChar)\n    } else {\n        return s\n    }\n}\n\nconst replaceUnsafeAttribChar = function (s: string): string {\n    switch (s) {\n        case '&':\n            return '&amp;'\n        case '<':\n            return '&lt;'\n        case '>':\n            return '&gt;'\n        case '\"':\n            return '&quot;'\n        default:\n            return s\n    }\n}\n\nexport const escapeAttrib = function (s: string): string {\n    if (reAttribSpecial.test(s)) {\n        return s.replace(reAttribSpecial, replaceUnsafeAttribChar)\n    } else {\n        return s\n    }\n}\n\nconst escapeTextChar = function (s: string): string {\n    switch (s) {\n        case '&':\n            return '&amp;'\n        case '<':\n            return '&lt;'\n        case '>':\n            return '&gt;'\n        default:\n            return s\n    }\n}\n\nexport const escapeText = function (s: string): string {\n    if (reTextSpecial.test(s)) {\n        return s.replace(reTextSpecial, escapeTextChar)\n    } else {\n        return s\n    }\n}\n", "import type {Stylesheet} from './stylesheet.js'\nimport {ValueType, NamedValue, normalizeName} from './namedValue.js'\nimport type {Expression} from './expression.js'\nimport type * as ir from '../../stir/index.js'\nimport type {Line} from '../line.js'\nimport {unescapeString} from '../../orphans/parseUtil.js'\n\n// todo[arch] Do we need an enum that spans both Block and Inline\n//   types, or should we instead have the two enums, BlockStyleType\n//   and InlineStyleType?\nexport enum BaseStyleType {\n    Segment,\n    Chunk,\n    Container,\n    List,\n    Table,\n    TEMP_HTML_HACK\n}\n\nexport type BlockStyleType =\n    BaseStyleType.Chunk |\n    BaseStyleType.Container |\n    BaseStyleType.List |\n    BaseStyleType.Table |\n    BaseStyleType.TEMP_HTML_HACK\n\n// todo[spec] will there be more than one kind of InlineStyle? If not,\n//   shouldn't we just rename BaseStyleType.Segment to BaseStyleType.Inline?\nexport type InlineStyleType =\n    BaseStyleType.Segment\n\nexport type ParseEffects = {\n    irBlock?: ir.Block | undefined\n    ptNamedValue?: NamedValue | undefined\n    startLine?: Line //! we only need startLine here as long as we keep support for backward matching\n    endLine?: Line\n}\n\nexport type NamedValueExpressions = {\n    type: ValueType,\n    name: Expression;\n    value: 'self' | Expression;\n    description?: Expression\n}\n\n/**\n * The interface for the various elemental styled block parsers:\n * {@link ChunkStyle}, {@link ContainerStyle}, {@link ListStyle} and\n * {@link TableStyle}.\n *\n * Responsible for\n *  - recognizing instances of the associated style declaration in\n *    the plain text\n *  - parsing those instances\n *  - executing the declared style property {@link Expression}s.\n *  - construct the expected IR Block, PT NamedValue, or both\n */\nexport interface ElementalBlockStyle {\n    baseType: BlockStyleType\n    name: string\n\n    styleSheet: Stylesheet\n\n    /**\n     * todo[RepoDoc] i should be able to point to the PTSS spec\n     *   section describing these options.\n     */\n    indent: string // valid values defined within each base type\n\n    //todo[doc] make sure all the rules in the impls of this method are\n    //  represented in the user docs.\n    initAndValidate: () => void\n\n    // todo[spec] rethink canInterruptParagraph & canInterruptLazy\n    //   - should this instead be canInterruptTextChunk?\n    //   - These two should maybe be replaced by a better logical\n    //     model, OR AT LEAST renamed? Look at the settings for\n    //     Pandoc-markdown-strict List. Does it make sense when you read it?\n    //   - the default value for this (perhaps here, perhaps per style type)\n    //     should be such that new style authors shouldn't have to set them to get the\n    //     most natural behavior, and certainly should have to set or even understand\n    //     the complexities of lazy continuation if they are not using it.\n    canInterruptParagraph: boolean\n    canInterruptLazy: boolean\n\n    //todo[spec] there probably should be some validation to prevent inconsistency\n    // between this and the interruption controls above? In BlockTreeParser, we\n    // don't even check the above if consumesBackChunk is true. So we can either\n    // not validate and in the docs say that this has precedence over those, or\n    // we do validation and force style defs to be logical. I lean toward the latter.\n    consumesBackChunk: boolean\n\n    irNode?: { [key: string]: Expression }\n\n    ptNamedValue?: NamedValueExpressions\n\n    // todo[arch] if chunk style is the only one that only ever uses fromBackLine,\n    //  can i put it at the end and then remove it from this generic interface?\n    //  i.e. i'm passing undefined in to ALL other style.parse methods. If it is\n    //  at the end, then i can remove it from here and keep it as an optional\n    //  param on ChunkStyle.\n    /**\n     * Returns null if doesn't match\n     */\n    parse: (fromLine: Line,\n            fromBackLine: Line | null,\n            lookahead: boolean) => ParseEffects | null\n}\n\n//! should NOT be executed every parse attempt. Instead, call\n//  during initAndValidate and set any style properties from the match.\nexport const RE_MARKDOWN_INDENT = /markdown\\((\\d+),(\\d+)\\)/\n\nexport function evalIRBlockPropertyExpr (expressions: { [property: string]: Expression },\n                                         irBlock: ir.Block,\n                                         headMatch: string[] | null,\n                                         tailMatch: string[] | null,\n                                         bodyMatch: string[] | null,\n                                         markerMatch: string[] | null,\n                                         righterMatch: string[] | null): void {\n    console.debug('EVALUATING IR PROPERTY EXPRESSIONS:')\n    console.group()\n    for (const property in expressions) {\n        const exp = expressions[property]\n        console.debug(`${property} <-- ${exp.toString()}`)\n        console.group()\n        irBlock[property] = exp.evaluate(headMatch, tailMatch, bodyMatch, markerMatch, righterMatch)\n        console.groupEnd()\n    }\n    console.groupEnd()\n}\n\nexport function evalPTNamedValueExpr (expressions: NamedValueExpressions,\n                                      irNode: ir.Block | ir.Inline | undefined,\n                                      headMatch: string[] | null,\n                                      tailMatch: string[] | null,\n                                      bodyMatch: string[] | null,\n                                      markerMatch: string[] | null,\n                                      righterMatch: string[] | null): NamedValue | undefined {\n    console.debug('APPLYING PT REF-DEF PROPERTY EXPRESSIONS:')\n    console.group()\n\n    console.debug(`expression: name <-- ${JSON.stringify(expressions.name)}`)\n    const name = expressions.name.evaluate(\n        headMatch, tailMatch, bodyMatch, markerMatch, righterMatch) as string\n\n    // todo![ptss spec] move any CommonMark-specific stuff out of this and into\n    //  style sheet Expressions that are applied to produce the args to this.\n\n    const normalizedName = normalizeName(name)\n    // todo![now, references] any other name validation?\n    if (normalizedName === '') {\n        console.debug('  invalid NamedValue definition: invalid name:', JSON.stringify(name))\n        return undefined\n    }\n\n    let nv: NamedValue, href: string, desc: string | undefined, content: ir.InlineSequence\n    switch (expressions.type) {\n        case 'element':\n            // todo[now, references, spec, expressions] should `self` by an\n            //   expression func that returns the current node? would allow\n            //   for expressions such as `['parent' ['self']]` etc.\n            if (expressions.value === 'self' && irNode !== undefined) {\n                nv = {name: normalizedName, value: {type: 'element', element: irNode}}\n            } else {\n                throw new TypeError(`style sheet error: invalid referent-element Named Value declaration. value: ${expressions.value}, irNode:${irNode}}`)\n            }\n            break\n        case 'href':\n            console.debug(`expression: value <-- ${JSON.stringify(expressions.value)}`)\n            href = (expressions.value as Expression).evaluate(\n                headMatch, tailMatch, bodyMatch, markerMatch, righterMatch) as string\n            href = unescapeString(href)\n\n            console.debug(`expression: description <-- ${JSON.stringify(expressions.description)}`)\n            desc = expressions.description?.evaluate(\n                headMatch, tailMatch, bodyMatch, markerMatch, righterMatch) as string | undefined\n            if (desc !== undefined) {\n                desc = unescapeString(desc)\n            }\n\n            nv = {name: normalizedName, value: {type: 'href', url: href, desc: desc}}\n            break\n        case 'substitution':\n            console.debug(`expression: value <-- ${JSON.stringify(expressions.value)}`)\n            content = (expressions.value as Expression).evaluate(\n                headMatch, tailMatch, bodyMatch, markerMatch, righterMatch) as ir.InlineSequence\n            nv = {name: normalizedName, value: {type: 'substitution', content: content}}\n            break\n        case 'metadata':\n        case 'counter':\n            throw new TypeError(`${expressions.type} Named Value not yet supported`)\n    }\n\n    console.groupEnd()\n    return nv\n}\n", "import type {ElementalBlockStyle} from './elementalBlockStyle.js'\nimport type {Line} from '../line.js'\n\nconst defaultContinuesFunc = (): boolean => false\n\n/**\n * Represents an element in the source plain text.\n */\nexport class Block {\n    style: ElementalBlockStyle\n\n    // todo: do we really need/want sourcepos info?\n    //   pandoc sourcepos extension\n    //   https://github.com/commonmark/commonmark.js/issues/29\n    lineStart: number | undefined\n    lineEnd: number | undefined\n\n    // CONTAINER META DATA\n    // if the sloppiness limit of successive lines of a container\n    // is different from the stylesheet limit, this\n    // field will be set.\n    public sloppiness: number | undefined\n    public indent = 0\n    public padding: boolean | undefined\n    public topBorderChar: string | undefined\n    public topBorderLength: number | undefined\n    public leftBorderChar: string | undefined\n    public bottomBorderChar: string | undefined\n\n    // if whether the last line *attributed to this container* is a\n    // blank line (within the context of the container, i.e. the text\n    // belonging to the container's structure or to that if its parent\n    // container structures are not counted). When during parsing, the\n    // \"ownership\" of the blank line is transferred to a child or\n    // parent container, this value will be updated.\n    // todo[arch, performance] might be able to greatly simplify all the\n    //  blank line attribution logic the way this PR did for CommonMark.js:\n    //    https://github.com/commonmark/commonmark.js/pull/269\n    //  Specifically, a blank line belongs to a container ONLY under the\n    //  following conditions:\n    //  - if there is a source position gap between two items *in* the\n    //    container (item2.lineEnd - item1.lineStart), that is a blank line\n    //    in the container.\n    //  - if the container has a bottom border, and there is a source position\n    //    gap between the list item in the and the bottom border, that is a\n    //    blank line in the container. Likewise at the top border.\n    //  - if the container has a left border, an the current parse line is\n    //    blank, it belongs to the container.\n    //  - otherwise if the current parse line is blank, whether it belongs to\n    //    the current container depends on whether the container continues past\n    //    the current line\n    public lastLineBlank = false\n\n    // LIST META DATA\n    public listBulletChar: string | undefined\n    public listDelimiter: string | undefined\n    public listContentIndent: number | undefined\n    //todo[lookahead] HACK to implement Markdown rule that list item can't only start\n    //  with one blank. Continues method needs this info. Punt better solution\n    //  as parsing architecture and continues method still in flux.\n    public endItemIfNextLineBlank = false\n\n    // html blocks\n    _htmlBlockType: number | undefined = undefined\n\n    constructor (style: ElementalBlockStyle) {\n        this.style = style\n    }\n\n    /**\n     * This method only applicable if the ptss.Block is a container.\n     *\n     * If the element continues on the line, the line's parse state will\n     * be advanced accordingly. Otherwise the line's parse state will remain\n     * unchanged.\n     *\n     * todo[perf] delete after done this to save memory?\n     *\n     * todo[arch] do we really need this per ParsedIrElement? rather than per ElementalBlockStyle?\n     */\n    continues: (line: Line) => boolean = defaultContinuesFunc\n    //todo[arch] consider moving continues to ParseContainer. Why?:\n    //  - Don't have to look up parseContainer.irContainer.source.continues(), just parseContainer.continues()\n    //  - The continues method often needs details about the source. In that case we can keep a reference to\n    //    the source in ParseContainer, or just do parseContainer.irContainer.source\n    //    BUT most of the time continues doesn't doesn't need anything?\n    //    -- or do we create a closure over the needed source info?\n    //  - whatever we attach to ParseContainer will get garbage collected sooner.\n\n    toString () {\n        const style = this.style.styleSheet.name\n        return JSON.stringify(this, function (k, v) {\n            if (k === 'style') {\n                return style\n            } else if (v === undefined) {\n                return undefined\n            }\n            return v\n        })\n    }\n\n}\n", "import {Block} from './block.js'\nimport type {NamedValue} from './namedValue.js'\nimport {BaseStyleType, ElementalBlockStyle, evalPTNamedValueExpr, evalIRBlockPropertyExpr, BlockStyleType, ParseEffects, RE_MARKDOWN_INDENT, NamedValueExpressions} from './elementalBlockStyle.js'\nimport type {Expression} from './expression.js'\nimport type {Stylesheet} from './stylesheet.js'\nimport * as ir from '../../stir/index.js'\nimport type {Line} from '../line.js'\n\nexport class ChunkStyle implements ElementalBlockStyle {\n    name: string\n    baseType: BlockStyleType = BaseStyleType.Chunk\n\n    public indent: 'yes' | 'no' | 'optional' = 'no'\n\n    //structure\n    headPattern?: RegExp\n    bodyPattern?: RegExp\n    tailPattern?: RegExp\n\n    // todo[spec] Ditch maxLines? Replace with 'single line' | 'multiline'\n    //  Reasoning:\n    //    - *Let Humans Decide* principle. Let the author of the content\n    //      decide that a tail anchored chunk is too long to be seen as\n    //      such by the human eye. Max lines should be a guideline, not\n    //      a rule enforced by machines on humans.\n    //  \uD83E\uDD43 OTOH, what about a Setext heading that is 50 lines long?\n    //    that's just crazy, and forward parsing that far is really\n    //    expensive, and guess what? it's really expensive for the human\n    //    eye too! So we have a maxLines too!!!  So I think we leave it\n    //    in and strongly recommend that for any \"natural style\", it should\n    //    be generous (for Always Be Recognizing principle), but that being\n    //    too generous doesn't actually help that principle and it hurts\n    //    alignment with the human eye AND it costs in performance (e.g.\n    //    a document with long paragraphs with many soft breaks to stay\n    //    within 60 cals is going to fwd parse EVERY LINE for many lines!\n    maxLines?: number //todo[test] missing test cases covering styles with maxLines > 1\n\n    canInterruptParagraph = false\n    canInterruptLazy = false\n\n    lazyContinuation = false\n\n    interruptibleBy: ElementalBlockStyle[] = []\n\n    consumesBackChunk = false\n\n    styleSheet: Stylesheet\n\n    // property expressions\n    private _irNode?: { [key: string]: Expression }\n    private _ptNamedValue?: NamedValueExpressions\n\n    constructor (name: string, styleSheet: Stylesheet) {\n        this.name = name\n        this.styleSheet = styleSheet\n    }\n\n    get irNode (): { [p: string]: Expression } {\n        if (this._irNode === undefined) {\n            this._irNode = {}\n        }\n        return this._irNode\n    }\n\n    set ptNamedValue (value: NamedValueExpressions) {\n        this._ptNamedValue = value\n    }\n\n    //todo![validation] missing checks in some styles that i do in others. Need\n    //  to implement the common ones in a shared function declared in Block.ts\n    initAndValidate (): void {\n        if (this._ptNamedValue?.value === 'self' && this._irNode === undefined) {\n            throw new Error(`ptNamedValue.value is set to ${this._ptNamedValue.value} but the style is not configured to generate one`)\n        }\n\n        // todo![adjacency] construction of this filter would be moved to\n        //   adjacency control logic?\n        this.interruptibleBy =\n            this.styleSheet.blockStyles\n                .filter(s => s.canInterruptParagraph && s !== this)\n\n        const match = RE_MARKDOWN_INDENT.exec(this.indent)\n        if (match) {\n            throw new Error(`markdown mode indent is not supported for chunks`)\n        }\n        if (this.maxLines === 1) {\n            if (!this.headPattern) {\n                throw new Error('single-line chunk styles require a head pattern')\n            }\n            if (this.tailPattern) {\n                //todo[spec] Currently:\n                //  1. we don't allow this combo\n                //  2. but we DO allow a head+tail pattern to end up\n                //     being one-line. See code below.\n                //  Thus we are saying:\n                //  - You CAN have a head+tail.\n                //  - It MAY end up being one line or multiple lines.\n                //  - But you CANNOT require it to be one line.\n                //  Does this make sense?\n                //  .\n                //  ======== IMPLEMENTATION ============\n                //  We could update the `if maxLines === 1` clause of open(),\n                //  OR we can implement it in a latter clause since Line.fwdChunk\n                //  supports the single line case (i think), and let the more\n                //  generic maxLines check there handle it.\n                //  .\n                //  Look at what's most efficient. Could even nix the entire\n                //  `if maxLines === 1` clause if the Line.fwdChunk is as efficient.\n                throw new Error('single-line chunk styles CANNOT have tail-pattern')\n            }\n        }\n\n        if (!this.headPattern && !this.tailPattern) {\n            // the only exception to this is the default: paragraph\n            throw new Error('chunk styles must have a head or tail pattern')\n        }\n\n        // todo[spec] what about indented with tail?\n        if (this.consumesBackChunk) {\n            if (this.headPattern) {\n                throw new Error('chunk styles with head pattern cannot match backwards')\n            }\n            if (!this.tailPattern) {\n                throw new Error('chunk styles without tail pattern cannot match backwards')\n            }\n            if (this.maxLines === 1) {\n                throw new Error('single line chunk styles cannot match backwards')\n            }\n        }\n    }\n\n    /**\n     * Returns null if doesn't match\n     *\n     * todo[test] all variations of structure in Chunk docs\n     *\n     *  todo[perf] HOW TO AVOID REDUNDANT \"FAIL\" PARSES?\n     *     - WE ALREADY avoid redundant success parses by opportunistically\n     *       saving container continuation done for any fwd parse requests\n     *       in the state of each Line.\n     *     - what if we did that for FAILED parsing? e.g. that we already\n     *       checked a line for a bottom border before?\n     *       - we could attach the info to the Line\n     *       - we could also save the info in the ContainerStyle instance,\n     *         just a single number representing \"we've already checked\n     *         every line up to this line N for this particular feature,\n     *         e.g. this instances bottom border.\n     *  todo[fwd-parsing] IDEA: We save various fwd parse discoveries\n     *   in Line or other:\n     *     - We ALREADY save parsed container continuation\n     *     - We CAN save new element start detection\n     *       - this may have to be tentative if whether an element starts\n     *         depends on adjacency rules with the previous element which we\n     *         haven't yet determined\n     *     - We can save indentation/whitespace parsing\n     *       e.g. we have EOC (end of content), so we could add:\n     *       - SOC (start of content), or perhaps pContainerSOC.\n     *         if pContainerSOC:\n     *             pContainerSOL < pContainerSOC < EOC\n     *         > \uD83D\uDCE5\u2753 we have pContainerSOL, and it looks like we are setting\n     *         > it correctly, but are we actually using it?\n     *       - see similar note in tableStyle.\n     */\n    parse (firstLine: Line, fromBackLine: Line | null, lookahead = false): ParseEffects | null {\n        const src = firstLine.src\n        let lastLine: Line\n\n        // uncomment and use this line to trigger the debugger at a certain line\n        //if (firstLine.srcLine().startsWith('   ```\\n') debugger\n\n        // indent will be zero if there is slop (which would be already parsed out)\n        const indent = firstLine.parseSpaces()\n        if (indent === 0 && this.indent === 'yes') {\n            return null\n        }\n        if (indent > 0 && this.indent === 'no') {\n            return null\n        }\n\n        const startOffset = firstLine.ptr\n\n        // undefined: style does not have head/tail pattern\n        // null: pattern did not match\n        let headMatch: RegExpMatchArray | null = null\n        let tailMatch: RegExpMatchArray | null = null\n        let bodyMatch: string[] | null = null\n\n        //! initAndValidate() guarantees valid combinations if isSingleLine, headPattern and tailPattern\n        if (this.maxLines === 1) {\n\n            //! single-line, head anchored\n\n            const headPattern = this.headPattern as RegExp\n            headPattern.lastIndex = startOffset\n            headMatch = headPattern.exec(src)\n            if (!headMatch) return null\n\n            console.debug(`parse Chunk: ${this.name} (single-line, head anchored)`)\n            console.group()\n            console.debug(`indent: ${indent}`)\n            console.debug(`headMatch: ${JSON.stringify(headMatch)}  index: ${headMatch?.index}  lastIndex: ${headPattern.lastIndex}`)\n\n            // ==== MATCH CERTAINTY =====\n            if (lookahead) {\n                console.groupEnd()\n                return {}\n            }\n            firstLine.ptr = headPattern.lastIndex\n            if (this.bodyPattern) {\n                this.bodyPattern.lastIndex = firstLine.ptr\n                bodyMatch = this.bodyPattern.exec(src)\n                if (bodyMatch) {\n                    console.debug(`bodyMatch: ${JSON.stringify(bodyMatch)} lastIndex: ${this.bodyPattern.lastIndex}`)\n                } else {\n                    bodyMatch = [firstLine.remainingSlice()]\n                }\n            } else {\n                bodyMatch = [firstLine.remainingSlice()]\n            }\n            console.debug(`body: ${JSON.stringify(bodyMatch[0])}`)\n            lastLine = firstLine\n\n        } else if (this.headPattern) {\n\n            //! multiline, head anchored\n            //   - anchor head on first line\n            //   - if tail, search ahead for tail match line\n            //     - body = everything between head and tail OR bodyPattern match\n            //   - else\n            //     - body = everything between head and next blank line OR bodyPattern match\n\n            this.headPattern.lastIndex = startOffset\n            headMatch = this.headPattern.exec(src)\n            if (!headMatch) return null\n            firstLine.ptr = this.headPattern.lastIndex\n            console.debug(`parse Chunk: ${this.name} (multiline, head anchored)`)\n            console.group()\n            console.debug(`indent: ${indent}`)\n            console.debug(`headMatch: ${JSON.stringify(headMatch)}  index: ${headMatch?.index}  lastIndex: ${this.headPattern.lastIndex}`)\n\n            const r = firstLine.fwdChunk(indent,\n                this.bodyPattern, this.tailPattern,\n                false, this.maxLines,\n                //! interruption checks SHOULD NOT be recursive!\n                lookahead ? undefined : this.interruptibleBy,\n                this.styleSheet.sloppyMargin, this.lazyContinuation)\n            if (r === null) {\n                console.debug('ABORT: match failed')\n                console.groupEnd()\n                return null\n            }\n            [bodyMatch, tailMatch, lastLine] = r\n\n            if (this.tailPattern) {\n                console.debug(`tailMatch: ${JSON.stringify(tailMatch)}  index: ${tailMatch?.index}  lastIndex: ${this.tailPattern.lastIndex}`)\n            }\n            console.debug(`bodyMatch: ${JSON.stringify(bodyMatch)}`)\n            if (lookahead) {\n                console.groupEnd()\n                return {}\n            }\n\n        } else if (!this.consumesBackChunk) {\n\n            //! multiline, tail anchored, forward matching\n\n            console.debug(`parse Chunk: ${this.name} (multiline, tail anchored, forward matching)`)\n            console.group()\n            console.debug(`indent: ${indent}`)\n            const tailPattern = this.tailPattern as RegExp\n\n            //todo[test] add tests for maxLines\n            const r = firstLine.fwdChunk(indent,\n                this.bodyPattern, this.tailPattern,\n                false, this.maxLines,\n                //! interruption checks SHOULD NOT be recursive!\n                lookahead ? undefined : this.interruptibleBy,\n                this.styleSheet.sloppyMargin, this.lazyContinuation)\n            if (r === null) {\n                //todo[spec] tail pattern in this case is optional according to spec,\n                //  this should be handled by style property assertion instead\n                console.debug('ABORT: match failed')\n                console.groupEnd()\n                return null\n            }\n            [bodyMatch, tailMatch, lastLine] = r\n\n            if (bodyMatch[0].length === 0) {\n                // Chunk spec says a body is required for a tail-anchored chunk.\n                // Update spec first if someone comes up with a use case against this rule.\n                console.debug('ABORT: empty body')\n                console.groupEnd()\n                return null\n            }\n\n            console.debug(`tailMatch: ${JSON.stringify(tailMatch)}  index: ${tailMatch?.index}  lastIndex: ${tailPattern.lastIndex}`)\n            console.debug(`bodyMatch: ${JSON.stringify(bodyMatch)}`)\n            if (lookahead) {\n                console.groupEnd()\n                return {}\n            }\n\n        } else {\n\n            //! multiline, tail anchored, backward matching\n            //   - body = backLines + curLine residual\n\n            if (fromBackLine === null) {\n                return null\n            }\n\n            lastLine = firstLine\n            firstLine = fromBackLine\n            if (this.maxLines) {\n                if (lastLine.num - firstLine.num + 1 > this.maxLines) return null\n            }\n            const tailPattern = this.tailPattern as RegExp\n            tailPattern.lastIndex = startOffset\n            tailMatch = tailPattern.exec(src)\n            if (!tailMatch) return null\n            console.debug(`parse Chunk: ${this.name} (multiline, tail anchored, backward matching)`)\n            console.group()\n            console.debug(`tailMatch: ${JSON.stringify(tailMatch)}  index: ${tailMatch?.index}  lastIndex: ${tailPattern.lastIndex}`)\n            bodyMatch = [src.slice(startOffset, tailMatch.index)]\n\n            let l = fromBackLine\n            let u = ''\n            while (l.num < lastLine.num) {\n                u += l.remainingSlice()\n                l = l.next as Line\n            }\n\n            console.debug(`using back unresolved: ${JSON.stringify(u)}`)\n            if (u !== '') {\n                bodyMatch[0] = u + bodyMatch[0]\n            } else {\n                // Chunk spec says a body is required for a tail-anchored chunk.\n                // Update spec first if someone comes up with a use case against this rule.\n                console.debug('ABORT: empty body')\n                console.groupEnd()\n                return null\n            }\n            console.debug(`body: ${JSON.stringify(bodyMatch[0])}`)\n            if (lookahead) {\n                console.groupEnd()\n                return {}\n            }\n            if (this.bodyPattern) {\n                this.bodyPattern.lastIndex = 0\n                bodyMatch = this.bodyPattern.exec(bodyMatch[0])\n                console.debug(`bodyMatch: ${JSON.stringify(bodyMatch)} lastIndex: ${this.bodyPattern.lastIndex}`)\n            }\n        }\n\n        let irBlock: ir.Block | undefined = undefined\n        if (this._irNode !== undefined) {\n            const ptBlock = new Block(this)\n            ptBlock.lineStart = firstLine.num\n            ptBlock.lineEnd = lastLine.num\n\n            //the type should get overwritten by expression.\n            // todo[spec] what should the default be? it should be the base type for blocks.\n            //    whatever it is, it must be in the STIR dictionary, with default rendering semantics spelled out.\n            irBlock = new ir.Block('block')\n            evalIRBlockPropertyExpr(this._irNode, irBlock, headMatch, tailMatch, bodyMatch, null, null)\n            irBlock.source = ptBlock\n        }\n\n        let ptNamedValue: NamedValue | undefined = undefined\n        if (this._ptNamedValue !== undefined) {\n            ptNamedValue = evalPTNamedValueExpr(this._ptNamedValue, irBlock,\n                headMatch, tailMatch, bodyMatch, null, null)\n        }\n\n        if (irBlock === undefined && ptNamedValue === undefined) {\n            console.debug('ABORT: no output artifacts')\n            console.groupEnd()\n            return null\n        }\n\n        console.groupEnd()\n        //todo[arch] do we really need to return lastLine from all these style parse open methods, since\n        //  internally they are all setting ptBlock.lineEnd? Cant BlockTreeParser pull the value\n        //  from there if it needs it? Or does keeping it here somehow makes things clearer?\n        return {irBlock: irBlock, ptNamedValue: ptNamedValue, startLine: firstLine, endLine: lastLine}\n    }\n\n}\n", "import type * as ptss from './ptss/index.js'\nimport type * as ir from '../stir/index.js'\nimport type {Line} from './line.js'\n\n\n/*\ntodo[arch] convert ParseContainer to hierarchy?\n - AbstractParseContainer\n   - Physical ParseContainer\n   - List Virtual ParseContainer\n   - Section Virtual ParseContainer\n \u203C\uFE0F ONLY do this if easy and it will help the other work.\n */\n\n/**\n * A stack of ParseContainers (connected via the `parent` field) represents\n * a nested container hierarchy parsed from the plain text.\n *\n * A hierarchy of ParseContainers, representing *concrete containers*, and any\n * open child *virtual containers* (list or sections) that they reference is\n * used to represent the nested container hierarchy of any point in the plain\n * text.\n *\n *\n * concrete containers\n * -------------------\n * The concrete participants are explicitly defined by lexical\n * elements such as a left border of `>` for blockquotes or the leading\n * `12. <body>` of a list item. Both their beginning and end are defined by\n * their lexical structure.\n *\n * They have a `continues` function that determines if the container ends at\n * the current parse point.\n *\n *\n * virtual containers\n * ------------------\n * Lists and Sections are *virtual containers*: they don't have an independent\n * concrete lexical manifestation but exist by virtue of other elements. Lists\n * come into being at the start of a sequence of list items and end at the end\n * of that sequence. Sections come into being at the occurrence of a\n * section head and end at the occurrence of another section head, or the end\n * of their containing sectioning root (their containing ParseContainer).\n *\n * They don't have a `continues` function.\n *\n *\n * the hierarchy\n * -------------\n * A ParseContainer's`parent` ParseContainer is not necessarily its direct\n * parent container in the abstract nesting hierarchy. This is simply a parser\n * implementation detail.\n *\n * For example, if the curParseContainer for a line points at `B` in the\n * following:\n *\n * ```\n *   ParseContainer A:\n *     openList: L1\n *\n *   List L1:\n *     body: [B]\n *\n *   ParseContainer B:\n *     parent: A\n * ```\n *\n * It means the nested container hierarchy for the line is `A > L1 > B` and `B`\n * is the tip.\n *\n * The `parent` property of a ParseContainer simply points back to the closest\n * *concrete* ancestor, which may or may not be its direct parent. In the above\n * example, if container `B` terminates, the line's curParseContainer is moved\n * to `A`, but `A` is not the tip. Since List L1 is still open, L1 represents\n * the current tip.\n *\n * See the implementation of the `append___` methods to see the logic for\n * determining the current *tip*.\n *\n * Likewise:\n * ```\n *   ParseContainer A:\n *     sectionStack: [A1, A1.2, A1.2.1]\n *     openList: L1\n *\n *   Section A1 > Section A1.2 > Section A1.2.1 > List L1 > ParseContainer B\n *\n *   ParseContainer B:\n *     parent: A\n * ```\n *\n * means the actual nesting structure is:\n * ```\n * A > A1 > A1.2 > A1.2.1 > L1 > B\n * ```\n *\n *\n * how elements are correctly inserted into the hierarchy\n * ------------------------------------------------------\n * See rules under {@link append}.\n */\nexport class ParseContainer {\n    parent: ParseContainer | null\n\n    /** the ir.Block associated with this ParseContainer */\n    irContainer: ir.Block\n\n    /**\n     * Lists are \"retroactive, virtual\" containers in plain text: We can't\n     * parse them; instead we parse list items and then retroactively create\n     * a List container to wrap adjacent list items of the same style. If the\n     * last item parsed in a container is a list item, the `openList` will\n     * point to that item's containing list. Otherwise it will be null.\n     *\n     * An open list is closed in one of two ways:\n     *  - we encounter a non-list item. The parser must set this to null\n     *  - this ParseContainer ends (e.g. a block quote ends, or the parent\n     *    list item for a nested list ends). When this happens, the parser\n     *    will no longer point to this ParseContainer, so its openList value\n     *    is no longer relevant.\n     */\n    openList: ir.Block | null = null\n\n    sectionStack: ir.Block[] | undefined = undefined\n\n\n    constructor (irContainer: ir.Block, parent: ParseContainer | null = null) {\n        this.irContainer = irContainer\n        this.parent = parent\n    }\n\n    public toString (): string {\n        let hierarchy = this.tip().toHierarchyString()\n        if (hierarchy.length > 50) {\n            const i1 = hierarchy.indexOf('/') + 1\n            const i2 = hierarchy.slice(0, hierarchy.lastIndexOf('/')).lastIndexOf('/')\n            hierarchy = hierarchy.slice(0, i1) + '...' + hierarchy.slice(i2)\n        }\n        return hierarchy\n    }\n\n    private hierarchy (tip: boolean): string {\n        let s\n        if (this.parent === null) {\n            s = ''\n        } else {\n            s = this.parent.hierarchy(false) + '/' + this.irContainer.type\n            if (tip && this.irContainer.source?.lineStart) {\n                s += '(ln ' + this.irContainer.source?.lineStart + ')'\n            }\n        }\n\n        if (this.sectionStack?.length) {\n            let section\n            for (section of this.sectionStack) {\n                s += '/section-L' + section.level\n            }\n            if (tip && section && section.source?.lineStart) {\n                s += '(ln ' + section.source?.lineStart + ')'\n            }\n        }\n\n        if (this.openList) {\n            if (tip) {\n                // parenthesis to indicate that the list being open is\n                // contingent on the type of next item encountered\n                s += '/*list'\n                if (this.openList.source?.lineStart) {\n                    s += '(ln ' + this.openList.source?.lineStart + ')'\n                }\n            } else {\n                s += '/list'\n            }\n        }\n\n        return s === '' ? '/' : s\n    }\n\n    public root (): ParseContainer {\n        let root = this as ParseContainer\n        while (root.parent !== null) {\n            root = root.parent\n        }\n        return root\n    }\n\n    public tip (): ir.Block {\n        if (this.openList !== null) {\n            return this.openList\n        }\n        if (this.sectionStack !== undefined && this.sectionStack.length > 0) {\n            return this.sectionStack.at(-1) as ir.Block\n        }\n        return this.irContainer\n    }\n\n    /**\n     * See rules under {@link append}.\n     *\n     * *! This method assumes section structure is created from heading levels.\n     *    If we decide to support a an implicit [[hierarchy syntax]], then\n     *    sections would not have numbered levels (currently taken from the\n     *    heading. Arguably, levels numbers are redundant in the STIR given\n     *    that sections are nested (unless it is important to support skipped\n     *    levels, e.g. an H4 child of an H2). In any case,\n     *     1. this method would simple add the new section to the current\n     *        section, and\n     *     2. we'd need to add a `closeSection` method that gets called when\n     *        we parse the explicit termination of the section as defined by\n     *        the syntax.\n     *\n     * @param newSection\n     */\n    appendSection (newSection: ir.Block): void {\n        if (this.openList != null) {\n            console.debug(`\u274C${this.toString()}`)\n            this.openList = null\n        }\n\n        const stack = this.sectionStack\n        if (stack === undefined || stack.length === 0) {\n            console.debug(`\uD83C\uDF31 opening new section within ${this.toString()}`)\n            this.irContainer.appendToBody(newSection)\n            this.sectionStack = [newSection]\n        } else {\n            let curSection: ir.Block\n            for (let i = stack.length - 1; i >= 0; i--) {\n                curSection = stack[i]\n                if ((curSection.level as number) < (newSection.level as number)) {\n                    console.debug(`\uD83C\uDF31 opening new section within ${this.toString()}`)\n                    curSection.appendToBody(newSection)\n                    stack.push(newSection)\n                    return //todo[arch] i don't like this return here, or this whole if/else. can do better?\n                }\n                console.debug(`\u274C closing section ${this.toString()}`)\n                stack.pop()\n            }\n            console.debug(`\uD83C\uDF31 opening new section within ${this.toString()}`)\n            this.irContainer.appendToBody(newSection)\n            this.sectionStack = [newSection]\n        }\n    }\n\n    /**\n     * See rules under {@link append}.\n     *\n     * @param item\n     * @param newList if given, this list will first be appended, then the item\n     *                appended to it. if non is given, the item will be added to\n     *                the existing open list.\n     */\n    appendListItem (item: ir.Block, newList: ir.Block | undefined): void {\n        //todo[doc]: Move this to docs:\n        // Why List is not handled as a container on the stack:\n        //  1. While STIR/HTML etc have an explicit List container...\n        //  2. In plain text the container is only *implied*. A list is the set\n        //     of consecutive list items (of the same style/kind)\n        //  3. The ContainerStack represents the *physical PTSS container* structure,\n        //     while the STIR tree represents the IR's structure. They are not\n        //     necessarily identical.\n        //  4. It makes sense that PTSS parsing mimics #2, not creating a container stack\n        //     item for List (since when parsing continuation, there is nothing to parse\n        //     for the List), and just creating IR List containers on the fly when a new\n        //     list is detected, and adding items to the previous item's list if it matches\n        //     that item's style. [should we move the style source info to the item?]\n        // Or as I put it before: WE PARSE LISTS JUST AS THE HUMAN EYE DOES.\n        //    The style governs list **items** and are so associated in the IR. When\n        //    list items with identical styles are adjacent in the text, they are\n        //    naturally collected together into the same list. (doesn't matter whether\n        //    that's determined on the fly as the text stream is processed or as a\n        //    post-facto step).\n        let list\n        if (newList !== undefined) {\n            this.append(newList)\n            list = newList\n        } else {\n            console.debug('\u2795 adding to existing list')\n            list = this.openList as ir.Block\n\n            if ((this.irContainer.source as ptss.Block).lastLineBlank) {\n                console.debug('  set commonmark.list.tight to FALSE for list starting on line',\n                    this.irContainer.source?.lineStart)\n                list.hints['commonmark.list.tight'] = false;\n                (this.irContainer.source as ptss.Block).lastLineBlank = false\n            }\n        }\n\n        console.debug(`\uD83C\uDF31 appending ${item.type} to ${list.toDebugString()}`)\n        const ptContainer = list.source as ptss.Block\n\n        // if last line was blank AND this is not the first item in the list\n        if (ptContainer.lastLineBlank && list.body) {\n            list.hints['hints.commonmark.list.tight'] = false\n            console.debug('  set commonmark.list.tight to FALSE for list starting on line', ptContainer.lineStart)\n        }\n\n        ptContainer.lastLineBlank = false\n        console.debug(`  CLEARED LAST BLANK for ${list.type}`)\n\n        list.appendToBody(item)\n    }\n\n\n    /**\n     * Rules for determining where exactly new block elements are added into\n     * the nested container hierarchy managed by ParseContainer:\n     *\n     *   cpc = curParseContainer\n     *\n     *   The tip to add new elements in precedence order:\n     *     - cpc.openList  (if list item, else close list)\n     *     - section at head of cpc.sectionStack\n     *     - cpc.irContainer\n     *\n     *   When a List is added:\n     *     - sets cpc.openList to List\n     *        (it will have been null since a nested List isn't\n     *         ever a direct child of a List, but of a List Item)\n     *     - list is appended as child of tip (see above)\n     *        (and it thus becomes the tip)\n     *\n     *   When a List Item is added:\n     *     - if this is the first item in a new list, that will have already\n     *       been determined and the new List will be added first.\n     *     - item added to cpc.openList\n     *     - since it is a container, it will be associated\n     *       with a new ParseContainer whose parent is cpc, and\n     *       become the new cpc and tip\n     *     - since the call site for adding list items is dedicated to\n     *       list items, and since the add item logic is very unique, purely\n     *       for performance purposes we have a separate {@link appendListItem}\n     *       method. We could easily have merged that logic into this method\n     *       inside of an if-else, but that doesn't make much sense.\n     *\n     *   When a new Section is encountered:\n     *     - sets cpc.openList to null\n     *     - pops sections off the cpc.sectionStack that are of same level or higher\n     *       (THIS or closing of parent ParseContainer is how a Section terminates)\n     *     - section is appended as child of tip (see above)\n     *     - section pushed onto cpc.sectionStack\n     *       (and thus is the new tip)\n     *     - since the call site for adding sections items is dedicated to\n     *       sections, and since the add section logic is very unique, purely\n     *       for performance purposes we have a separate {@link appendSection}\n     *       method. We could easily have merged that logic into this method\n     *       inside of an if-else, but that doesn't make much sense.\n     *\n     *   When any other element is added:\n     *     - sets cpc.openList to null\n     *       (THIS or closing of parent ParseContainer is how a List terminates)\n     *     - element appended as child of tip (see above)\n     *     - if it is a container, it will be associated\n     *       with a new ParseContainer whose parent is pc, and\n     *       become the new cpc and tip\n     *\n     */\n    append (content: ir.Block): void {\n        // any open list closes since we know we are not adding a list item\n        // (that has a dedicated appendItemToList method)\n        if (this.openList != null) {\n            // because list items are added via appendItemToList not this method,\n            // we know `content` is not a list item. Thus any open list is closed.\n            console.debug(`\u274C${this.toString()}`)\n            this.openList = null\n        }\n\n        const irContainer = this.irContainer\n        const ptContainer = irContainer.source as ptss.Block\n\n        if (content.type === 'list') {\n            console.debug(`\uD83C\uDF31 opening new list within ${this.toString()}`)\n            this.openList = content\n        } else {\n            console.debug(`\uD83C\uDF31 appending ${content.type} to ${this.toString()}`)\n        }\n\n        let tip = this.sectionStack?.at(-1)\n        if (tip === undefined) {\n            tip = irContainer\n\n            // if appending to list item: if last line was blank AND this is not the first content\n            if (tip.type === 'list_item' && ptContainer.lastLineBlank && tip.body) {\n                const parent = this.parent as ParseContainer\n                const enclosingContainer = parent.openList ? parent.openList : parent?.irContainer as ir.Block\n                enclosingContainer.hints['commonmark.list.tight'] = false\n                console.debug('  set commonmark.list.tight to FALSE for list starting on line',\n                    enclosingContainer.source?.lineStart)\n            }\n        }\n\n        ptContainer.lastLineBlank = false\n        console.debug(`  CLEARED LAST BLANK for ${irContainer.type}`)\n\n        // todo[spec] doing it here sometimes doesn't always do the right thing.\n        //  Perhaps moving it to BlockTreeParser's code that executes right after\n        //  the call to this method, where it has more info available.\n        setLineEndUpTree(this, content.source!.lineEnd as number)\n        tip.appendToBody(content)\n    }\n}\n\n// set lineEnd all the way up the container stack\nfunction setLineEndUpTree (pContainer: ParseContainer, lineEnd: number) {\n    let c: ParseContainer | null = pContainer\n    while (c !== null) {\n        c.irContainer.source!.lineEnd = lineEnd\n        if (c.openList !== null) {\n            c.openList.source!.lineEnd = lineEnd\n        }\n        c = c.parent\n    }\n    if (pContainer.sectionStack !== undefined) {\n        for (const block of pContainer.sectionStack) {\n            block.source!.lineEnd = lineEnd\n        }\n    }\n}\n\n/**\n * Given a line and the deepest container from the previous line,\n * this function determines whether the container or any of its\n * parents continues on this line. It updates the line's state\n * as follows:\n *   - `line.pContainer` is set to the deepest ParseContainer from the given\n *      ParseContainer that continues on this line.\n *   - if a bottom border occurs on this line:\n *     - `line.pContainer` is set to the container to which the\n *        bottom border belongs. This could be *any* of the\n *        containers in the stack.\n *     - `line.pContainerBottomBorder` is set to the pattern match results\n *        from the border pattern\n *     - if the bottom border spans multiple lines, line.pContainerBottomBorder\n *       is set for each of these lines.\n *     By definition, the parent container of the one terminated by\n *     a bottom border can now be assumed to be the \"current container\".\n *     But we can't close the just terminated container quite yet: There\n *     may be unresolved lines from before the bottom border that first\n *     need to be resolved; that is the responsibility of the caller.\n *   - the character parse state of the line will be updated\n *     to reflect the consumption of container elements (indentation,\n *     borders).\n *\n *   todo[spec] If the bottom border spans multiple lines, the state of\n *       each line should be updated. Most often it will be one line, and\n *       the next most often will be two, and at the very least the first\n *       and last need to be updated (the first because this call might\n *       be done for lookahead (e.g. table parser), meaning it will be\n *       called again later on the first line when regular parsing\n *       resumes and arrives at it, and the last line of course because\n *       it represents the farthest reach of parsing so far that we\n *       don't want to redo redundantly. Since 3 or more will be rare,\n *       don't sweat it and update all lines for consistency.\n *\n * @param pContainer ContainerStack node\n * @param line\n */\nexport function parseContinuation (pContainer: ParseContainer, line: Line): void {\n    // previously determined to this level of nesting.\n    // This will be the path for lines at the root container, the most common case\n    if (line.pContainer === pContainer) {\n        console.debug(`previously parsed${line.pContainerBottomBorder ? ' \uD83C\uDD71 bottom border' : ''}`)\n        return\n    }\n\n    // first check enclosing container continuation (recursive)\n    if (line.pContainer !== pContainer.parent) {\n        parseContinuation(pContainer.parent as ParseContainer, line)\n        if (line.pContainer !== pContainer.parent || line.pContainerBottomBorder !== null) {\n            console.debug('\u274C' + pContainer.toString())\n            return\n        }\n    }\n\n    if ((pContainer.irContainer.source as ptss.Block).continues(line)) {\n        line.pContainer = pContainer\n        console.debug(pContainer.toString())\n        console.debug('  ' + line.toString())\n    } else {\n        console.debug('\u274C' + pContainer.toString())\n    }\n}\n", "import * as ptss from './ptss/index.js'\n\n/*\ntodo[debug] can we leverage Javascript tagged templates to automatically handle\nformatting output for complex object, e.g. STIR nodes?\n\nAnd example from an article on tagged templates:\n```\n// Let's say we want to write a way to log arbitrary strings containing a number, but format the number.\n// We can use tagged templates for that.\nfunction formatNumbers(strings: TemplateStringsArray, number: number): string {\n  return strings[0] + number.toFixed(2) + strings[1];\n}\nconsole.log(formatNumbers`This is the value: ${0}, it's important.`); // This is the value: 0.00, it's important.\n\n// Or if we wanted to \"translate\" (change to lowercase here) translation keys within strings.\nfunction translateKey(key: string): string {\n  return key.toLocaleLowerCase();\n}\nfunction translate(strings: TemplateStringsArray, ...expressions: string[]): string {\n  return strings.reduce((accumulator, currentValue, index) => accumulator + currentValue + translateKey(expressions[index] ?? ''), '');\n}\nconsole.log(translate`Hello, this is ${'NAME'} to say ${'MESSAGE'}.`); // Hello, this is name to say message.\n```\n*/\n\nexport function stringifyTruncate (s: string, max = 50): string {\n    if (s.length > max) {\n        return JSON.stringify(s.slice(0, max)).slice(0, max + 1) + '... (TRUNCATED)'\n    }\n    return JSON.stringify(s)\n}\n\n\n/**\n * Constructs a one-time use replacer (uses a closure to\n * maintain an index of seen items to handle circularity)\n *\n * For use with JSON.stringify. Handles circularity\n * and tries to remove noise.\n *\n * todo![debug] maybe replace with a debugStringify\n *  to make call sites cleaner and also avoid the\n *  frequent mistake of forgetting to add `()` to\n *  call this method for the replacer.\n *\n * todo![debug] is this redundant with serialization.ts?\n */\nexport const stringifyReplacerForDebugLogging = () => {\n    const seen = new WeakSet()\n    return (k: string, v: unknown) => {\n        if (!v) {\n            return v\n        }\n\n        if (k === 'source') {\n            return undefined\n        }\n\n        if (v instanceof ptss.Stylesheet) {\n            return {stylesheet: v.name}\n        }\n\n        if (v instanceof RegExp) {\n            return v.source\n        }\n\n        if (typeof v === 'object') {\n            if (seen.has(v)) {\n                return `\uD83C\uDFF7`\n            }\n            seen.add(v)\n        }\n\n        return v\n    }\n}\n", "// todo![fwd-parsing] look at back-burnered branch: `study/fwdchunk-optimize`\n\n// todo[optimization] if memory allocation of individual Lines is expensive:\n//   - we could allocate them in array-blocks, N Lines at a time, with next()\n//     pointing to the next element in the array except for the last Line in\n//     any block.\n//   - we could use an object pool to re-use Line instances.\n\nimport {ParseContainer, parseContinuation} from './parseContainer.js'\nimport {isWhitespace} from '../orphans/parseUtil.js'\nimport {stringifyTruncate} from './debugUtil.js'\nimport type {ElementalBlockStyle} from './ptss/index.js'\n\n/** Represents a plain text source line. */\nexport class Line {\n    // line number within src, 1-based\n    readonly num: number\n\n    // start of line\n    readonly SOL: number\n\n    /**\n     * End Of Content: points to the position immediately after the last\n     * non-whitespace character on the line.\n     * - If line is all whitespace, it will be the same value as `SOL`\n     * - If line has no trailing whitespace it will be the same value as `EOL`.\n     */\n    readonly EOC: number\n\n    /**\n     * End Of Line: points to the newline character at the end of the line,\n     * except for the last line if the file does not end with a newline it\n     * points to the position after the last pos in the file.\n     *\n     * In either case,\n     *  - the full content of the line is always `src.substring(SOL, EOL)`\n     *  - the trailing whitespace is always `src.substring(EOC, EOL)`\n     *  - the remaining part of the line is always `src.substring(ptr, EOL)`\n     */\n    readonly EOL: number\n\n    //! The fields and properties prefixed with \"ptr\" are tightly\n    //  coupled and represent the left-to-right progress of parsing\n    //  this Line. `Line.ptr` is a straightforward pointer to a\n    //  specific char position in the line, and is `Line.src`\n    //  relative. But because of tab expansion, advancing one space\n    //  is not always as simple as incrementing `ptr`. If there are\n    //  unconsumed \"virtual\" spaces from an earlier tab char,\n    //  advancing may simply decrement `ptrTabRemainder` and\n    //  increment `ptrColumnAdj` instead. See the unit tests for a\n    //  better understanding.\n\n    // current parse position, relative to src\n    ptr: number\n\n    // add to `Line.ptr` to arrive at column (one-based)\n    ptrColumnAdj = 0\n\n    get ptrColumn (): number {\n        return this.ptr - this.SOL + 1 + this.ptrColumnAdj\n    }\n\n    // number of spaces from last tab not yet consumed\n    ptrTabRemainder = 0\n\n    private _next: Line | null = null\n\n    /**\n     * Returns the next line.\n     * If this is the last line in the src, returns null.\n     *\n     * Does no parsing or updating of Line state other than\n     * to find the EOL if hasn't been determined yet. If this\n     * is the first time the next line has been retrieved, it\n     * will be initialized to starting state, unparsed, container\n     * set to root and ptr set to SOL.\n     */\n    get next (): Line | null {\n        if (this._next) {\n            return this._next\n        }\n\n        const nextSOL = this.EOL + 1\n        if (nextSOL < this.src.length) {\n            return this._next = new Line(this.src, this.num + 1, nextSOL, this._pContainer.root())\n        } else {\n            return null\n        }\n    }\n\n    //! The fields and properties prefixed with \"pContainer\" are tightly\n    //  coupled.\n\n    // the container context as of the current parse point, Line.ptr\n    private _pContainer: ParseContainer\n\n    get pContainer (): ParseContainer {\n        return this._pContainer\n    }\n\n    set pContainer (value: ParseContainer) {\n        this._pContainer = value\n        this.pContainerSOL = this.ptr\n        this.pContainerSlop = 0\n    }\n\n    // offset of the start of content for `Line.pContainer`\n    pContainerSOL: number\n\n    // number of slop spaces parsed within `Line.pContainer`\n    pContainerSlop = 0\n\n    // If not null, a bottom border for `Line.pContainer` was parsed on this line.\n    // For BlockTreeParser control flow based on whether a bottom border was\n    // encountered.\n    //\n    // todo[containers] per the comments on the parseContinuation function, this\n    //   is supposed to contain content from the bottom border, supporting\n    //   multi-line bottom borders, so styles that have content within\n    //   the borders can extract and map the content via ptss.expressions.\n    //   --\n    //   THIS HAS YET TO BE IMPLEMENTED.\n    //   - \uD83D\uDFE7 If the bottom border spans multiple Lines, which one's\n    //      pContainerBottomBorder is set? And that one contains the content\n    //      from all the lines? May need to revisit this design idea.\n    //   - \uD83D\uDFE7 Line so far doesn't hold parsing matches or any other high level\n    //      content parsing data, just low-level index pointers, etc. Probably\n    //      any bottom border content match should be returned by the parse\n    //      method to its caller via separate return value, as opposed to\n    //      shoe-horning it into Line. ???\n    pContainerBottomBorder: string[] | null\n\n    readonly src: string\n\n    constructor (src: string, num: number, offset: number, rootContainer: ParseContainer) {\n        this.src = src\n        this.num = num\n        this._pContainer = rootContainer\n        this.SOL = this.pContainerSOL = this.ptr = offset\n        this.pContainerBottomBorder = null\n\n        // We determine EOC and EOL up front because:\n        //   1. We almost always check if the line is blank before anything else\n        //      (in the BlockTreeParser iteration over lines), and to do this\n        //      we essentially do the same thing to figure out EOC and EOL.\n        //   2. WE frequently check if the remaining part of the line is blank\n        //      outside of BlockTreeParser.\n        //   3. We frequently check to see if we've reached EOL as we parse\n        //      a line (`if line.ptr === line.EOL`).\n        //   4. EOL is necessary for `Line.next` (`nextLine.SOL = curLine.EOL + 1`)\n        //   5. We need EOL to extract the remaining part of the line\n        //   6. Every time a fwdBlock is requested, even if some or all of the\n        //      fwdBlock is rejected/not consumed.\n        //   7. To mark the line as consumed (line.ptr = line.EOL)\n        const EOF = src.length\n        let i = src.indexOf('\\n', offset)\n        if (i === -1) {\n            this.EOL = EOF\n            i = EOF\n        } else {\n            this.EOL = i\n        }\n        //search for EOC in reverse, as trailing whitespace should be rare,\n        //and a forward search will likely traverse many chars.\n        do {\n            i--\n        } while (i >= offset && isWhitespace(src.charAt(i)))\n        this.EOC = i + 1\n    }\n\n    toString (): string {\n        return `[line ${this.num}] sol:${this.SOL} eoc:${this.EOC} eol:${this.EOL} len:${this.EOL - this.SOL + 1} ` +\n               ` ptr:${this.ptr}(col:${this.ptrColumn} col+:${this.ptrColumnAdj} tab%:${this.ptrTabRemainder}) ` +\n               ` pCon:[${this._pContainer.toString()}${(this.pContainerBottomBorder ? `\uD83C\uDD71` : ``)}` +\n               ` sol:${this.pContainerSOL} slop:${this.pContainerSlop}] ` +\n               ` r:${stringifyTruncate(this.remainingSlice(), 15)}`\n    }\n\n    /**\n     * Saves the current ptr state so that we can speculatively parse\n     * ahead and backtrack on match fail. Use the restore() method on\n     * the returned object to restore that state.\n     *\n     * A single checkpoint can be restored multiple times as\n     * {@link LineCheckpoint.restore} is idempotent. For example, see its use\n     * in {@link ./BlockTreeParser}'s \"try each style\" parse loop.\n     *\n     * Since checkpoints are separate objects from Line, multiple checkpoints\n     * can be created for the same Line.\n     *\n     * todo![parsing] i'm pretty sure we don't want to checkpoint {@link Line._next}:\n     *   - we'd be throwing out the EOC and EOL parsing.\n     *   - the alternative would be for checkpoint to checkpoint the full _next\n     *     chain of lines one-by-one, and likewise restore whole chains. This is\n     *     wasteful as most of the time we don't speculatively parse past the\n     *     cur line or 2 lines.\n     *   - What we are already doing now is perfect: make local decisions on how\n     *     to efficiently speculatively parse. For example see how\n     *     {@link fwdChunkToTailOrBlank} checkpoints all the Lines it touches in\n     *     the _next sequence.\n     *   .\n     *   IF this is right:\n     *   - COMMIT TO THIS APPROACH AND DOCUMENT IT HERE OR SOMEWHERE.\n     *   - delete the outdated TODOs such as the one at the end of this TSDoc\n     *\n     * todo![perf] is what we are doing in {@link fwdChunkToTailOrBlank}\n     *   unnecessary? review. Remove and run tests to make sure.\n     *\n     * todo![arch] checkpoint does not save and restore Line.pContainer* state.\n     *   Either:\n     *     - change that fact (we may need it for speculative parsing, e.g. tables)\n     *     - add a warning to this doc that checkpoint usage can't span any\n     *       parsing of containers\n     *       - rely on tests to catch violations of this.\n     *       - put fail-fast logic that invalidates any checkpoints if pContainer\n     *         is updated.\n     *   GIVEN THE COMPLEXITY OF WHAT I JUST WROTE, just checkpoint the pContainer\n     *   state already! Premature optimization!\n     */\n    checkpoint (): LineCheckpoint {\n        return new Line.Checkpoint(this, this.ptr, this.ptrColumnAdj, this.ptrTabRemainder, this.pContainerSlop)\n    }\n\n    static Checkpoint = class implements LineCheckpoint {\n        line: Line\n        ptr: number\n        ptrColumnAdj: number\n        ptrTabRemainder: number\n        pContainerSlop: number\n\n        constructor (line: Line, ptr: number, ptrColumnAdj: number, ptrTabRemainder: number, pContainerSlop: number) {\n            this.line = line\n            this.ptr = ptr\n            this.ptrColumnAdj = ptrColumnAdj\n            this.ptrTabRemainder = ptrTabRemainder\n            this.pContainerSlop = pContainerSlop\n        }\n\n        restore (): void {\n            const line = this.line\n            line.ptr = this.ptr\n            line.ptrColumnAdj = this.ptrColumnAdj\n            line.ptrTabRemainder = this.ptrTabRemainder\n            line.pContainerSlop = this.pContainerSlop\n        }\n    }\n\n    /**\n     * Advances the ptr state max spaces and returns the amount. Because\n     * of tab expansion, `Line.column` will advance the number of spaces\n     * returned, but this does not always translate to `Line.ptr`\n     * incrementing by the same amount or even at all.\n     *\n     * @param max\n     * @param cancelIfMore if true and spaces exceed max, cancels the operation,\n     *        leaving the line state unchanged.\n     */\n    parseSpaces (max: number = Number.POSITIVE_INFINITY, cancelIfMore = false): number {\n        const src = this.src\n        let spaces = 0\n        let colAdj = 0\n\n        //first consume any tab remainder\n        if (this.ptrTabRemainder !== 0) {\n            if (cancelIfMore && this.ptrTabRemainder > max) {\n                return 0\n            }\n            spaces = colAdj = this.ptrTabRemainder\n        }\n\n        let ptr = this.ptr\n        while (spaces < max) {\n            if (src.charAt(ptr) === ' ') {\n                spaces++\n                ptr++\n            } else if (src.charAt(ptr) === '\\t') {\n                const tabSpaces = 4 - ((ptr - this.SOL + this.ptrColumnAdj + colAdj) % 4)\n                spaces += tabSpaces\n                colAdj = tabSpaces - 1\n                ptr++\n            } else {\n                break\n            }\n        }\n\n        if (spaces > max) {\n            if (cancelIfMore) {\n                return 0\n            }\n            this.ptr = ptr\n            const over = spaces - max\n            this.ptrColumnAdj += colAdj - over\n            this.ptrTabRemainder = over\n            spaces = max\n        } else {\n            if (cancelIfMore && src.charAt(ptr) === ' ') {\n                return 0\n            }\n            this.ptr = ptr\n            this.ptrColumnAdj += colAdj\n            this.ptrTabRemainder = 0 //consumed at the top of this method\n        }\n\n        return spaces\n    }\n\n    /**\n     * Skip leading spaces up to max.\n     */\n    parseSlop (max: number, cancelIfMore = false) {\n        this.pContainerSlop = this.parseSpaces(max, cancelIfMore)\n    }\n\n    /**\n     * Parses `min` number of consecutive `ch`, returning the number parsed.\n     * @param ch\n     */\n    parseChars (ch: string): number {\n        //todo[perf] see if using /c{min,}/ regexp would be more efficient.\n        const src = this.src\n        let ptr = this.ptr\n        let n = 0\n        while (src.charAt(ptr) === ch) {\n            n++\n            ptr++\n        }\n        this.ptr = ptr\n        return n\n    }\n\n    /**\n     * todo[parsing] placeholder idea for factoring out oft repeated\n     *  regex matching and parsing logic for these purposes:\n     *  - DRY, simplify cod\n     *  - encapsulation (of native Line-internals)\n     *  - performance (doing line specific parsing inside Line\n     *    may have benefits)\n     *\n     * Executes the regex at Line.ptr. If it matches:\n     *  - updates Line.ptr\n     *  - returns any match groups (perhaps {@link RegExpMatchArray} or\n     *    {@link RegExpExecArray}\n     * @param regex\n     */\n    parseMatch (regex: RegExp) {\n        return\n    }\n\n    // todo![perf] evaluate new RegExp stuff:\n    //   - `d` flag, just get start and end indices of match back:\n    //     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\n    //   - use `search`?\n    //       \"When you want to know whether a pattern is found in a string, use the\n    //       test() or search() methods; for more information (but slower execution)\n    //       use the exec() or match() methods. If you use exec() or match() and if\n    //       the match succeeds, these methods return an array and update properties\n    //       of the ...\n\n    /**\n     * todo![perf] see note on `d` flag, `test` and `search` above.\n     * todo![fwd-parsing} useful?\n     *\n     * Executes the regex at Line.ptr, but with no side affects.\n     * Instead, returns the indices of the match, so the caller\n     * can efficiently decide whether and when it will update\n     * Line state as a result.\n     * @param regex\n     */\n    searchMatch (regex: RegExp): [start: number, end: number] {\n        //todo Perhaps returns more indices, for any match groups.\n        //  See the `d` regex flag.\n        return [-1, -1]\n    }\n\n    /**\n     * todo![perf] see note on `d` flag, `test` and `search` above.\n     * todo![fwd-parsing} useful?\n     *\n     * Tests the regex at Line.ptr. No side affects\n     * @param regex\n     */\n    testMatch (regex: RegExp): boolean {\n        return false\n    }\n\n    /**\n     * returns the entire line, inclusive of EOL char (newline) if there is\n     * one (there may not be one at EOF).\n     */\n    srcLine (): string {\n        return this.src.slice(this.SOL, this.EOL + 1)\n    }\n\n    // todo[perf] if this gets called a lot for the same line at the same ptr,\n    //  (e.g. multiple styles trying to match), we could cache the value, and of\n    //  course clear it if the the ptr changes (and thus invalidating it)\n    //  - BUT ARGUABLY if this is getting called more than once per line, we\n    //    are probably doing something wrong in the parsing logic.\n    //  .\n    //   \uD83E\uDD43 easy test: count all calls, and after test suite, do a histogram of\n    //     the number of calls per line.\n    /**\n     * returns the content from `Line.ptr` to EOL, inclusive of EOL char\n     * (newline) if there is one (there may not be one at EOF)\n     * and prepended by any unconsumed spaces from tab expansion.\n     */\n    remainingSlice (): string {\n        if (this.ptrTabRemainder) {\n            return ' '.repeat(this.ptrTabRemainder) + this.src.slice(this.ptr, this.EOL + 1)\n        } else {\n            return this.src.slice(this.ptr, this.EOL + 1)\n        }\n    }\n\n    remainingIsBlank (): boolean {\n        return this.ptr >= this.EOC\n    }\n\n    /**\n     * If the next line hasn't already been determined to continue this line's\n     * pContainer, then it will be parsed for that now.\n     * todo![perf] if it has already previously been parsed to the same\n     *   attempted container depth and failed, we'll end up redoing that\n     *   work here. It may or may not be worth adding state and logic to\n     *   avoid this.\n     *\n     * By default the next line is returned if and only if it does continue\n     * this line's (deepest) pContainer *explicitly* (i.e. not lazily),\n     * returning `null` if it does not.\n     *\n     * For bottom-bordered containers, the line(s) that are the bottom\n     * border ar considered part of the container, and are returned as such.\n     * They have no content besides the border. The caller can check to the\n     * {@link pContainerBottomBorder} property.\n     *\n     * todo![test] need tests for this option\n     * But if `allowSloppy` is `true`, then the next line will be returned if\n     * it might lazily continue this line's pContainer. This will be true if\n     * the remaining part of the line isn't empty and isn't a container bottom\n     * border. Unlike {@link next} the returned line's parse state and\n     * pContainer value will reflect the deepest continuing container even if\n     * it doesn't continue all of them. This is needed for forward parsing\n     * elements that can span lazily continued lines, e.g. CommonMark Setext\n     * headings.\n     */\n    get nextInContainer (): Line | null {\n        return this.getNextInContainer()\n    }\n\n    getNextInContainer (allowLazy = false): Line | null {\n        if (this.pContainerBottomBorder !== null) {\n            return null\n        }\n        const next = this.next\n        if (next === null) {\n            return null\n        }\n        // always true when we are in root container, so already optimized\n        if (next._pContainer === this._pContainer) {\n            return next\n        }\n\n        // todo[fwd-parsing] How do we know whether we've already made\n        //   the `parseContinuation` call before? i.e. whenever we parse fwd via\n        //   `nextInContainer`, we stop either on a blank line or a next line\n        //   that is not in the cur Container. But if the next style parse does\n        //   the same thing, we redundantly do the `parseContinuation` call below.\n        //   OPTIONS:\n        //     A. If the container continues on the next line:\n        //        - we would not make it past the above checks AS LONG AS next._container\n        //          is updated? If we DO NOT have a guarantee that the caller will do that,\n        //          we should update Line._container in parseContinuation ALONG WITH the\n        //          other Line state changes made. IT SHOULD BE AN ATOMIC change anyway.\n        //     B. If the container terminates on this line:\n        //        - \uD83D\uDCE5 we need to store that fact somehow.\n        //     C. If the next line is a closing border:\n        //        - \uD83D\uDCE5 we need to store that fact, both for the sake of\n        //          this method, but also so that the bottom border doesn't need to\n        //          be parsed twice.\n        //   .\n        //   For neither A, B or C do we need to reset anything the way we used to\n        //   clear line._nextInContainer when the container changes. This is because\n        //   for each of the paths A, B and C:\n        //     A. If this line's container changes, we WILL now make it past the above\n        //        checks and a new parseContinuation will be triggered.\n        //     B. If we find a new nested container on this line, it won't change the\n        //        fact that a parent container failed to continue on the next line.\n        //     C. Same as for B: it won't change the fact.\n        console.debug(`nextInContainer: parseContinuation: ${this._pContainer.toString()}  from line`, next.num, `${JSON.stringify(next.srcLine())}`)\n        console.group()\n        console.debug(next.toString())\n        parseContinuation(this._pContainer, next)\n        console.groupEnd()\n\n        if (next._pContainer !== this._pContainer) {\n            if (allowLazy && next.pContainerBottomBorder === null && !next.remainingIsBlank()) {\n                return next\n            }\n            return null\n        }\n\n        return next\n    }\n\n    /**\n     * Extract a block of content from current container context, starting from\n     * this line and line.ptr, and ending on whichever of the following occurs\n     * first:\n     *  - a blank line (non inclusive), *if* `stopOnBlank` is true.\n     *  - the line matching `stopPattern` (inclusive), if such pattern is given.\n     *  - the last line of this line's container\n     *  - EOF\n     */\n    fwdBlock (stopOnBlank: boolean, stopPattern?: RegExp): [text: string, endLine: Line] {\n        return fwdBlock(this, stopOnBlank, stopPattern)\n    }\n\n    /**\n     * Extracts a chunk (cannot span blank line) of content from current container\n     * context, starting from this line and line.ptr.\n     *\n     * IMPORTANT: It is assumed that the line on which this is called belongs to\n     * the current element, and therefor the following will ONLY be applied to\n     * subsequent lines:\n     * - parsing start of line indent or slop\n     * - interruption checks\n     *\n     * The extent of the chunk is determined as follows:\n     *  - If `tailPattern` given:\n     *    - to the line ending in this pattern if such is found.\n     *      - BUT if trailingBlankRequired is true, and the line following\n     *        the matching line is not blank, returns null\n     *    - if no such match is found before a blank line or end of container or file\n     *      is encountered, it returns null\n     *\n     *  - If `tailPattern` is NOT given:\n     *    - to a blank line, end of container or EOF, whichever comes first.\n     *\n     *  - In addition, indentation rules and interruption checks will be applied\n     *    and can also terminate teh chunk.\n     *\n     * Because we don't want TextPlain to reject inputs or exit with errors,\n     * we are going to silently ignore the case where the regex doesn't consume\n     * to an EOL. Consuming even a single char of a line constitutes consuming it.\n     * (todo[doc] Add this to PTSS spec)\n     *\n     * @returns [<the last line of the chunk>,\n     *    <the body of the chunk up to but not including the tailPattern>,\n     *    <the RegExpMatchArray resulting from the tailPattern match>]\n     *\n     *! \u26A0\uFE0F DO NOT pass in allowedInterruptions if this call is itself part\n     *     of an interruption check. All it will do is waste CPU cycles on a\n     *     recursive check when a recursive check makes no sense!\n     */\n    fwdChunk (indent = 0,\n              bodyPattern?: RegExp,\n              tailPattern?: RegExp,\n              trailingBlankRequired = true,\n              //todo![test] ZERO test coverage for non-default values for the\n              //  next four args\n              maxLines = Number.MAX_VALUE,\n              allowedInterruptions: ElementalBlockStyle[] | undefined = undefined,\n              sloppyMargin = 0,\n              allowLazy = false)\n        // todo: string[] vs RegExpMatchArray inconsistency: unintentional.\n        //   just got code to work. Cleanup later\n        : [bodyMatch: string[], tailMatch: RegExpMatchArray | null, endLine: Line] | null {\n\n        // todo![fwd-parsing] what about indent > 0 ???\n        if (tailPattern !== undefined || trailingBlankRequired || bodyPattern === undefined) {\n            return fwdChunkToTailOrBlank(this, indent, tailPattern,\n                trailingBlankRequired, bodyPattern, maxLines, allowedInterruptions,\n                sloppyMargin, allowLazy)\n        }\n        return fwdChunkToBodyMatch(this, bodyPattern, indent, maxLines, allowedInterruptions,\n            sloppyMargin, allowLazy)\n    }\n\n    /**\n     * Rules:\n     *    - \u2705 FIRST: current element always controls whether it can be interrupted. For\n     *      example, a left border container with continuing left border doesn't\n     *      check for interruption at all (the matching left border takes precedence)\n     *      and a table that clearly sees table continuation because of column\n     *      patterns doesn't check for interruption.\n     *      - \uD83D\uDCE5 Make sure this is in the rules.\n     *\n     *    - \u2705 SECOND, the set of style that *could* interrupt the current\n     *      element is calculated, essentially applying adjacency rules.\n     *\n     *      Currently this is a static list calculated when the style is\n     *      initialized, but if it needed to be more dynamic, it could do that).\n     *\n     *      We can evolve this into something like my idea for *adjacency\n     *      control*, or *interruption control*. Adjacency control may\n     *      result in violations of the \"Always be recognizing rule\", so\n     *      would only be used for `strict syntax` styles sheets).\n     *      Interruption control, I think, may be compatible with\n     *      non-strict syntax style sheets.\n     *\n     *      Or we need some other generalized solution\n     *      that can, for example:\n     *      - in test-ptss-one, prevent 'Level 3/4 Setext Heading' form\n     *        interrupting 'Level 1/2 Setext Heading', which would otherwise\n     *        happen EVERY TIME!\n     *\n     *      I'm sure I'll have more examples as I implement Pandoc/GFM\n     *\n     *    - \u2705 THIRD, each allowed interrupting style DECIDES whether it interrupts.\n     *      1. Obviously it has to match to interrupt, something it decides.\n     *      2. BUT EVEN ON A MATCH, it may decline, e.g.:\n     *         - The style may require a preceding blank line.\n     *         - A list item may decline if the start num is not 1 (CommonMark rule)\n     *         - A list item may decide to interrupt ONLY if there are at least\n     *           two items in the list (potential *Natural* rule)\n     *      3. Precedence rules apply. The interrupted element doesn't get to choose.\n     *      4. Likewise, the interrupted element doesn't get to choose a subset of\n     *         allowed styles that can interrupt.\n     *         - IF WE ALLOW THIS, it will only be a quirk mode for certain legacy styles.\n     *      5. If we implement adjacency control, the rules for that may reduce the\n     *         set of styles that can interrupt, but the interrupted element again\n     *         doesn't get to control that.\n     *\n     * todo![docs, spec, interruption] move the above into ptss docs or test cases.\n     *   dev strategy \uD83C\uDF36:\n     *    - STOP TRYING TO DO ALL THIS IN YOUR HEAD, IMAGINING ALL THE PERMUTATIONS.\n     *      Instead: create test cases that cover all the permutation, and let those\n     *      drive the code, parsing principles and the PTSS spec.\n     *      - Gracedown.ptss & RubyRhod.ptss\n     *      - MarkdownHS.ptss\n     *        -- This can do better than GFM/CommonMark, and *disregard their rules\n     *           when they clearly violate what the human eye sees*.\n     *           \uD83D\uDCE5 Do I have this documented as MarkdownHS's purpose?\n     *      - PlainJane.ptss\n     */\n    checkStyleMatch (styles: ElementalBlockStyle[]) {\n        console.debug('checking for interruption')\n        console.group()\n        const checkpoint = this.checkpoint()\n        for (const style of styles) {\n            const r = style.parse(this, null, true)\n            checkpoint.restore()\n            if (r !== null) {\n                console.debug(`Interruption by ${style}`)\n                console.groupEnd()\n                return true\n            }\n        }\n        console.groupEnd()\n        return false\n    }\n\n}\n\n\n//todo[arch] either figure out how to make this inner to Line, or use namespaces ??\nexport type LineCheckpoint = {\n    line: Line;\n    ptr: number;\n    ptrColumnAdj: number;\n    ptrTabRemainder: number;\n    /**\n     * Restores the line's state back to its state when the checkpoint was\n     * made.\n     *\n     * `restore` is idempotent and can be called repeatedly to restore a line\n     * to the same point any number of times.\n     */\n    restore (): void\n}\n\n// todo![now] is there a reason the functions below aren't private class members?\n//   can use # to enforce this.\n\nfunction fwdBlock (startLine: Line,\n                   stopOnBlank: boolean,\n                   stopOnPattern?: RegExp): [text: string, endLine: Line] {\n    console.debug(`fwdBlock: startLine:${startLine.num}` +\n                  ` stopOnBlank:${stopOnBlank} stopPattern:${stopOnPattern}`)\n    console.group()\n\n    //todo![perf] why CAN'T WE DO ROOT CONTAINER OPTIMIZATION?\n    // not just here, but in the other block extraction methods?\n    // Can I resurrect the logic i nixed soon after HWM, which some\n    // adjustments obviously (there was a reason i nixed it)\n    //console.debug(`\uD83D\uDCA5 ROOT OPTIMIZATION ROUTE`)\n\n    let content = ''\n    let line = startLine\n    for (; ;) {\n        const s = line.remainingSlice()\n        content += s\n        console.debug('+', line.num, JSON.stringify(s))\n        if (stopOnPattern) {\n            stopOnPattern.lastIndex = 0\n            if (stopOnPattern.test(s)) {\n                break\n            }\n        }\n        const nextLine = line.nextInContainer\n        if (nextLine === null\n            || (stopOnBlank && nextLine.remainingIsBlank())\n            || nextLine.pContainerBottomBorder !== null) {\n            break\n        }\n        line = nextLine\n    }\n    console.debug(`endLine: ${line}`)\n    console.groupEnd()\n    return [content, line]\n}\n\n/**\n * fwd to tailPattern if given, else to blank line. If blankAfterTail is true, then\n * succeeds only on tail match AND blank line boundary.\n *\n * todo[perf] The root optimization discussed under fwdChunkToBodyMatch might\n *   make more sense for this method, as I think it will be used more, e.g.\n *   Setext Headings.\n *\n * todo[test] AllowLazy is NOT tested at all, no styles as of this writing\n *    use it for body match defined chunks\n */\nfunction fwdChunkToTailOrBlank (startLine: Line,\n                                indent: number,\n                                tailPattern?: RegExp,\n                                blankAfterTail = true,\n                                bodyPattern?: RegExp,\n                                maxLines = Number.MAX_VALUE,\n                                allowedInterruptions: ElementalBlockStyle[] | undefined = undefined,\n                                sloppyMargin = 0,\n                                allowLazy = false)\n// todo: string[] vs inconsistency: unintentional. just got code to work. Cleanup later\n    : [bodyMatch: string[], tailMatch: RegExpMatchArray | null, endLine: Line] | null {\n\n    console.debug(`fwdChunk: startLine:${startLine.num} indent:${indent} ` +\n                  `tailPattern:${tailPattern} blankAfterTail:${blankAfterTail} ` +\n                  `bodyPattern:${bodyPattern} maxLines:${maxLines} ` +\n                  `allowedInterruptions:${allowedInterruptions !== undefined} ` +\n                  `sloppyMargin:${sloppyMargin} allowLazy:${allowLazy} `)\n    console.group()\n\n    let body = ''\n    let bodyMatch: string[] | null\n    let tailMatch: RegExpMatchArray | null = null\n    const checkpoints: LineCheckpoint[] = []\n\n    // first line is special:\n    //  - it's already had any slop or indent parsed out\n    //  - a head pattern may have already consumed part of it\n    //  - it cannot be interrupted, both because has already\n    //    been partially consumed AND because precedence is how\n    //    you beat a style on the first line.\n    const firstRemaining = startLine.remainingSlice()\n    let lastLine = startLine\n    if (tailPattern) {\n        tailPattern.lastIndex = 0\n        tailMatch = tailPattern.exec(firstRemaining)\n        if (tailMatch) {\n            const b4tail = firstRemaining.slice(0, tailMatch.index)\n            if (b4tail.length > 0) {\n                body += b4tail\n                console.debug('+', lastLine.num, JSON.stringify(b4tail))\n            }\n            console.debug('\uD83C\uDD83', lastLine.num, JSON.stringify(tailMatch[0]))\n        }\n    }\n\n    let i = 1\n    if (!tailMatch) {\n        body += firstRemaining\n        console.debug('+', lastLine.num, JSON.stringify(firstRemaining))\n\n        for (; i < maxLines; i++) {\n            const line = lastLine.getNextInContainer(allowLazy)\n            if (line === null\n                || line.remainingIsBlank()\n                || line.pContainerBottomBorder !== null) {\n                break\n            }\n            //todo[sloppiness] per compare/sloppiness.md tests as well as all per\n            //  all non-tail matching via fwd parsing styles, sloppiness ONLY\n            //  applies to the anchor line, not every line of the chunk.\n            //  -\n            //  CHOOSE:\n            //  - stick with this model, and fix this code (are any tests failing because of this?)\n            //  - make it optional, e.g. let style sheet decide whether sloppiness applies to every line,\n            //    though i'm not sure if that won't break everything!\n            //  - decide that it ALWAYS applies to every line... but I think that DOES break everything.\n            //  ALSO:\n            //  - see notes in sloppiness.md. We may need a more fine grained model rather\n            //    than just a style sheet-wide sloppiness setting.\n            if (sloppyMargin > 0 || indent > 0) {\n                const cp = line.checkpoint()\n                line.parseSlop(sloppyMargin, true)\n                if (line.parseSpaces(indent) < indent) {\n                    cp.restore()\n                    break\n                }\n                checkpoints.push(cp)\n            }\n            const s = line.remainingSlice()\n            if (tailPattern) {\n                tailPattern.lastIndex = 0\n                tailMatch = tailPattern.exec(s)\n                if (tailMatch) {\n                    const b4tail = s.slice(0, tailMatch.index)\n                    lastLine = line\n                    if (b4tail.length > 0) {\n                        body += b4tail\n                        console.debug('+', lastLine.num, JSON.stringify(b4tail))\n                    }\n                    console.debug('\uD83C\uDD83', lastLine.num, JSON.stringify(tailMatch[0]))\n                    break\n                }\n            }\n            if (allowedInterruptions && line.checkStyleMatch(allowedInterruptions)) {\n                break\n            }\n            body += s\n            lastLine = line\n            console.debug('+', lastLine.num, JSON.stringify(s))\n        }\n    }\n\n    // enforce tail rules\n    if (i === maxLines) {\n        restoreCheckpoints(checkpoints)\n        console.debug('maxLines exceeded')\n        console.groupEnd()\n        return null\n    }\n    if (tailPattern) {\n        if (tailMatch === null\n            // or if the next line in the same container is not blank\n            || (blankAfterTail\n                //! i'm pretty sure we don't want a lazy non-blank line to fail the\n                //   match, i.e. we don't want to call getNextInContainer(allowLazy)\n                //   as we do above.\n                && lastLine.nextInContainer\n                && !lastLine.nextInContainer.remainingIsBlank())) {\n            restoreCheckpoints(checkpoints)\n            console.debug('failed tail match')\n            console.groupEnd()\n            return null\n        }\n    }\n\n    console.debug(`body: ${JSON.stringify(body)}`)\n    if (bodyPattern) {\n        bodyPattern.lastIndex = 0\n        bodyMatch = bodyPattern.exec(body)\n\n        if (!bodyMatch) {\n            restoreCheckpoints(checkpoints)\n            console.debug('failed body match')\n            console.groupEnd()\n            return null\n        }\n\n        console.debug(`bodyMatch: ${JSON.stringify(bodyMatch)} lastIndex: ${bodyPattern.lastIndex}`)\n\n    } else {\n        bodyMatch = [body]\n    }\n\n    console.debug(`tailMatch ${tailMatch}`)\n    console.groupEnd()\n    return [bodyMatch, tailMatch, lastLine]\n}\n\n\n/**\n *\n * todo[perf] we are reading lines until we reach a blank line or end of\n *   container, without checking for a body match after each successive time.\n *   I think this is smart: maybe 9 times out of 10 chunks that rely on this\n *   (e.g. link ref defs) will have a blank line after. Later, we can assess\n *   this empirically be scanning a large corpus of documents.\n *\n *\n * todo[perf] Optimize for root container, prob at least 90% of cases? \uD83C\uDFC8\n * ------------------------------------------------------------------\n * The current implementation extracts out the \"nested\"\n * part of each line. This is unnecessary CPU and memory usage for\n * for far more common root container content.\n *\n * CONSIDERATIONS\n * --------------\n * ### Maybe not worth it, at least not for v0.1\n *  - For Link Ref Def parsing,\n *     - We were already at 80% of Commonmark.js's perf\n *     - 62% of markdown-it's.\n *    This is using the practical samples, not the patho\n *    cases in the samples from Commonmark.js's codebase.\n *  - 20% performance loss, or even the 40% compared to\n *    Markdown-it, for this particular parsing case will\n *    translate to a tiny even negligible fraction of the\n *    cost of parsing a typical document if few or rarely\n *    occurring styles use it. For CommonMark, it's just\n *    LinkRefDefs, which are relatively infrequent.\n *\n * ### Results of trial implementation Aug 2020\n * - Using practical link ref def bench samples, it yielded a\n *   10% gain for root link ref defs and, as expected,\n *   0% gain for those nested in block quotes.\n * - FAR MORE IMPORTANTLY, using a truly practical sample\n *   of README files showed 0% gain even though all its\n *   link ref defs were root level.\n *\n * ### The optimization itself had inefficiencies\n * - Javascript does not support end-bounded regex matching.\n *   One can specify the start index only. Thus the Regex\n *   may match many many lines past the first blank or even\n *   past many blank lines, or even past nested container\n *   starts, and the best we can do is *after the fact* see\n *   if the match crossed a blank line and reject the match.\n *   - One solution is to dynamically update the user-defined\n *     regex to incorporate a blank line check. We don't want\n *     to complicate things for the user and make them do it.\n *     TBD whether this is possible. Not all fwd chunks are\n *     required to end on a blank line, so we can't just append\n *     a blank line constraint at the end. We'd have to modify\n *     the pattern internally to make sure none of its parts\n *     can match `/\\n\\w+\\n/`\n *\n * ### IF WE CAN INCORPORATE THE BLANK LINE CHECK INTO THE REGEX...\n * it might be a gain for cheap. Because we\n * - could ditch the line-by-line check for blank lines that\n *   we do now, though that should be cheap since Line.ts makes\n *   it nearly free on subsequence calls.\n * - we could run through the lines of the match after the fact\n *   to see if it was interrupted on any of the lines.\n *\n * ### More natural styles might not use fwdChunkToBodyMatch anyway.\n * They might be more likely to have tail or blank line delimiters,\n * not an arbitrary body match like Link Ref Def. In fact, just\n * looking at the complexity of its bodyPattern begs for something\n * more author friendly.\n *\n * \uD83C\uDF36 In fact, a hanging indent syntax consistent with footnotes\n *    makes far more sense.\n *\n * ### conclusion: PUNT\n * Unless we see evidence that fwdChunk to body match parsing\n * is causing a significant amount of impact for any reasonable\n * style sheet design against reasonable input samples, stop\n * worrying about this for now, if ever.\n *\n *\n * todo[test] allowLazy is NOT tested at all, no styles as of this writing\n *    use it for body match defined chunks.\n *\n */\nfunction fwdChunkToBodyMatch (startLine: Line,\n                              bodyPattern: RegExp,\n                              indent: number,\n                              maxLines = Number.MAX_VALUE,\n                              allowedInterruptions: ElementalBlockStyle[] | undefined = undefined,\n                              sloppyMargin = 0,\n                              allowLazy = false)\n    : [bodyMatch: string[], tailMatch: null, endLine: Line] | null {\n\n    console.debug(`fwdChunkToBodyMatch: startLine:${startLine.num} ` +\n                  `bodyPattern:${bodyPattern} indent:${indent} maxLines:${maxLines} ` +\n                  `allowedInterruptions:${allowedInterruptions !== undefined} ` +\n                  `sloppyMargin:${sloppyMargin} allowLazy:${allowLazy} `)\n    console.group()\n\n    // startLine has already had leading whitespace parsed and\n    // is uninterruptible, so we deal with it first\n    let content = startLine.remainingSlice()\n    const lines: Line[] = [startLine]\n    const offsets: number[] = [0]\n    const checkpoints: Array<LineCheckpoint | null> = [null] // startLine no checkpoint\n\n    let line: Line | null = startLine\n    for (let i = 1; i < maxLines; i++) {\n        line = line.getNextInContainer(allowLazy)\n        if (line === null\n            || line.remainingIsBlank()\n            || line.pContainerBottomBorder !== null) {\n            break\n        }\n        if (sloppyMargin > 0 || indent > 0) {\n            // parsing spaces messes with a line's parse state\n            const cp = line.checkpoint()\n            line.parseSlop(sloppyMargin, true)\n            if (line.parseSpaces(indent) < indent) {\n                cp.restore()\n                break\n            }\n            checkpoints.push(cp)\n        } else if (allowedInterruptions && line.checkStyleMatch(allowedInterruptions)) {\n            break\n        } else {\n            // we only need to checkpoint a line when we mess with its parse state\n            checkpoints.push(null)\n        }\n        offsets.push(content.length)\n        content += line.remainingSlice()\n        lines.push(line)\n    }\n    console.debug(`fwd block: ${JSON.stringify(content)}`)\n\n    bodyPattern.lastIndex = 0\n    const bodyMatch = bodyPattern.exec(content)\n    if (!bodyMatch) {\n        restoreCheckpoints(checkpoints)\n        console.debug('failed body match')\n        console.groupEnd()\n        return null\n    }\n    console.debug(`bodyMatch: ${JSON.stringify(bodyMatch)} lastIndex: ${bodyPattern.lastIndex}`)\n\n    // figure out lines consumed (see doc above), restoring checkpoint for those not\n    const len = bodyMatch[0].length\n    let i = offsets.length\n    for (; ;) {\n        if (i < 0) {\n            console.debug('unexpected: body match, but zero lines')\n            console.groupEnd()\n            return null\n        }\n        i--\n        line = lines[i]\n        if (len > offsets[i]) {\n            break\n        }\n        checkpoints[i]?.restore()\n    }\n    console.debug(`lines ${startLine.num}-${line.num}`)\n\n    console.groupEnd()\n    return [bodyMatch, null, line]\n}\n\nfunction restoreCheckpoints (checkpoints: (LineCheckpoint | null)[]): void {\n    for (const cpt of checkpoints) {\n        cpt?.restore()\n    }\n}\n", "import * as ptss from './ptss/index.js'\nimport * as ir from '../stir/index.js'\nimport {Line} from './line.js'\nimport {parseContinuation, ParseContainer} from './parseContainer.js'\nimport type {NamedValues} from './namedValues.js'\nimport {stringifyTruncate} from './debugUtil.js'\n\nenum TryResult {\n    NO_MATCH,\n    MATCHED_PARTIAL_LINE, //todo[arch] or MATCHED_CONTAINER_MARGIN?\n    MATCHED_TO_EOL\n}\n\n\n//todo[doc] merge this with the class doc below. MAYBE move most of it to Parsing Design doc.\n//\n//  State:\n//    - **BlockTreeParser**\n//       - **The STIR tree**, incrementally built up as we parse.\n//       - where we are vertically (curLine)\n//         (where we are horizontally within each line is\n//         maintained by Line)\n//       - current container nesting (curContainer Stack)\n//       - any lazily continuing container\n//       - pending back chunk\n//       - access to fwd lines\n//       - **Line** maintains the \"horizontal parsing state\", for each line:\n//          - responsible for parsing spaces, tabs, columns, EOL.\n//          - the last parsed position for the line\n//          - the corresponding ContainerStack entry for that parsed position\n//\n//   Parsing:\n//    - **BlockTreeParser** parses sequences and nestings of blocks.\n//      - Delegates to ptss.ElementalBlockStyle parsers the parsing of\n//        each specific block style.\n//      - Constructs the block-level IR tree.\n//    - **ptss.ElementalBlockStyle** parsers specific block styles,\n//      delegating to Line for whitespace parsing.\n//      - Constructs block-level IR nodes, populating them\n//        with content or values derived from the parsed\n//        text.\n//    - **Line** parses the whitespace parts of the line.\n//    - **InlineParser** parses all marked up (non-literal)\n//      text content of the block-level IR nodes, attaching\n//      text-level IR nodes.\n/**\n * BlockTreeParser parses sequences and nestings of blocks. It is analogous\n * to InlineParser, which parses sequences and nestings of inline structures.\n *\n * The recognition and parsing of each type and style of block is\n * handed off to the {@link ptss.ElementalBlockStyle} implementations: {@link ptss.ChunkStyle},\n * {@link ptss.ContainerStyle}, {@link ptss.ListStyle} and {@link TableStyle}.\n * BlockTreeParser enforces the precedence of BlockStyles as declared by the Stylesheet.\n *\n * While the ptss.ElementalBlockStyle parsers will produce individual block-level IR elements and\n * block-level PTSS NamedValues, BlockTreeParser is responsible for assembling them into the\n * IR tree and resolving all the links.\n *\n *  todo[doc] REWRITE OR DISCARD THE BELOW. Otherwise we move it to a\n *    README.md or other file supported by JDoc.\n *\n *  - it starts with the root container\n *  - when it encounters a nested container, it uses a stack to\n *    handle nesting rather than using recursion\n *  - In effective it is Recursive Descent block parsing, even if\n *    not in literal implementation. This is not just for efficiency.\n *    Given the complexities of lazy continuation and sloppiness,\n *    stack-based recursive parsing won't be as simple as recursion\n *    usually is.\n *    We use:\n *    - a stack only to track the current nesting of containers.\n *    - it only parses out nested text blocks on a need-to basis.\n *    - it parses a container's contents, i.e. sequence of block elements\n *    - following the stylesheet's declared precedence order, it\n *      gives each style a shot, handing off element parsing to that\n *      style's parser.\n *    - it enforces container-level rules, e.g. element adjacency\n *      (e.g. canInterruptParagraph).\n *  - it maintains the container-level parse state.\n *  - it constructs the IR tree from nodes created by the style\n *    specific parsers.\n *\n */\nexport class BlockTreeParser {\n    /* the inputs */\n    private readonly src: string\n    private readonly styleSheet: ptss.Stylesheet\n\n    /* the output */\n    private readonly irRoot: ir.Block\n\n    /**\n     * The current line at which the next parse decision is rooted.\n     *\n     * It *does not necessarily* demarcate the boundary between what we've finished\n     * parsing and what we have yet to parse, as there may be\n     * unresolved prior lines if {@link unresolvedFrom} is set.\n     */\n    private curLine: Line\n\n    // the current non-lazy container being parsed\n    private curPContainer: ParseContainer\n    private readonly rootPContainer: ParseContainer\n\n    /**\n     * @link{curLazyPContainer} and @link{curPContainerHasLazyLines} track\n     * lazy continuation for style sheets that require it.\n     *\n     * todo[perf] what's the overhead for styles that don't use it?\n     *\n     *  @link{curLazyPContainer} represents the container that owns the\n     *  unresolved back chunk because it began in this container.\n     *  So it will only be non-null when:\n     *   - there is an unresolved back chunk\n     *   - they are NOT owned by the current non-lazy container (curContainer).\n     *  @link{curLazyPContainer} may become the curContainer again if a\n     *  subsequent line matching parses for the container *non-lazily*.\n     *  In this case, @link{curPContainerHasLazyLines} keeps track of the fact\n     *  that the container includes one or more lazy lines. This is needed as\n     *  some styles my not support laziness and therefore cannot consume those\n     *  lines.\n     *\n     * ILLUSTRATED EXAMPLE\n     * -------------------\n     * Given:\n     *\n     *    > this container\n     *    has lazy\n     *    > lines\n     *\n     * When on line 1, after parsing the `>`:\n     *    curPContainer = <block quote>\n     *    curLazyPContainer = null\n     *    curPContainerHasLazyLines = false\n     * When on line 2, after parseContinuation(curPContainer, line)\n     *    curPContainer = <root>\n     *    curLazyPContainer = <block quote>\n     *    curPContainerHasLazyLines = false\n     * When on line 3, after parseContinuation(curPContainer, line)\n     *    curPContainer = <block quote>\n     *    curLazyPContainer = null\n     *    curPContainerHasLazyLines = true\n     */\n    private curLazyPContainer: ParseContainer | null\n    /** See explanation under @link{curLazyPContainer} */\n    private curPContainerHasLazyLines = false\n\n    //todo[parsing] redo this doc\n    /**\n     * backward view, unresolved lines.\n     * {@link curLazyPContainer}, if it is not null, owns these lines,\n     * else {@link curPContainer} owns them.\n     *\n     * null if there no unresolved lines.\n     */\n    private unresolvedFrom: Line | null\n\n    private readonly namedValues: NamedValues\n\n    public constructor (src: string,\n                        stylesheet: ptss.Stylesheet,\n                        rootIRElemType: string,\n                        namedValues: NamedValues) {\n        this.src = src\n        this.styleSheet = stylesheet\n\n        this.irRoot = ptss.ContainerStyle.newRootContainer(rootIRElemType, stylesheet)\n\n        this.rootPContainer = this.curPContainer = new ParseContainer(this.irRoot)\n        this.curLazyPContainer = null\n\n        this.namedValues = namedValues\n\n        // initialize with line 1\n        this.curLine = new Line(this.src, 1, 0, this.rootPContainer)\n        this.unresolvedFrom = null\n        this.irRoot.source!.lineStart = 1\n    }\n\n    public parse (): ir.Block {\n        do {\n            const line = this.curLine\n            console.debug()\n            console.debug(line.num, stringifyTruncate(line.srcLine()))\n            console.group()\n            console.debug(line.toString())\n\n            // uncomment and use this line to trigger the debugger at a certain line\n            //if (this.lineRemainingContent() === '- * * *\\n') debugger\n\n            // reference for efficiency  todo[perf] test whether this makes any difference, else inline it.\n            const curPContainer = this.curPContainer\n\n            // PARSE CONTAINER CONTINUATION\n            // ============================\n            // Parses line for continuation of the all the containers in the\n            // stack of nested containers still open from the previous line.\n            //\n            // optimization: no need to do this for root container\n            if (curPContainer.parent !== null) {\n                console.debug(`parsing continuation of ${curPContainer.tip().toDebugString()} in ${JSON.stringify(line.srcLine())}`)\n                console.group()\n                parseContinuation(curPContainer, line)\n                console.groupEnd()\n            }\n\n            if (line.pContainerBottomBorder !== null) {\n                // BOTTOM BORDER CONTAINER TERMINATION\n                // ===================================\n                // if the cur container or one of its parents terminated with a bottom\n                // border on this line:\n                //   - Call resolveUnresolved(), which will resolved pending back.\n                //     content and add it to the appropriate container.\n                //   - The line is resolved. DO NOT continue parsing the line as it\n                //     was occupied/owned by the bottom border. Do NOT treat the\n                //     lack of content on the line as a blank line.\n                //   - Switch to the new current container, proceed to the next\n                //     line.\n\n                console.debug(`\uD83C\uDD71 bottom border for ${line.pContainer} encountered`)\n                this.defaultResolveBackChunk(false, true)\n                this.curPContainer = this.curLine.pContainer.parent as ParseContainer\n                console.debug('......<\uFE0E', curPContainer.toString())\n\n                // end the group for this Line before continuing to the next\n                console.groupEnd()\n                continue\n            }\n\n            if (line.pContainer != curPContainer) {\n                // OTHER CONTAINER TERMINATION\n                // ===========================\n                // Current container and one or more of its parents did not continue\n                // on current line.\n                //\n                // Handle closed container vs lazy continuation possibility.\n                //\n                // CASES:\n\n                if (!this.hasUnresolvedBackChunk()) {\n                    // NO UNRESOLVED CONTENT\n                    // =====================\n                    // Any lazy continuation container is irrelevant.\n\n                    // If there is no left border, reassign any blank previously\n                    // assigned to the just closed container to the deepest\n                    // continuing parent. See doc on Structural White Space.\n                    const source = curPContainer.irContainer.source as ptss.Block\n                    if (source.lastLineBlank) {\n                        //  Blanks can't fall through a hard boundary, i.e a left\n                        //  border, in which case trailing blank line stays with\n                        //  a closing left border container.\n                        if (source.style?.baseType !== ptss.BaseStyleType.Container ||\n                            !(source.style as ptss.ContainerStyle).leftBorder) {\n                            source.lastLineBlank = false;\n                            (line.pContainer.irContainer.source as ptss.Block).lastLineBlank = true\n                            console.debug(`     reassigning LAST BLANK to ${line.pContainer.toString()}`)\n                        }\n                    }\n                } else {\n                    // THERE IS UNRESOLVED CONTENT\n                    // ===========================\n\n                    if (this.styleSheet.lazyContinuation) {\n                        // LAZINESS ENABLED\n                        // ================\n                        //  - If there IS an open lazy container, it stays open.\n                        //    The containers that parseContinuation found did\n                        //    not continue on the current line are terminated.\n                        //  - If there IS NOT an open lazy container, the entire\n                        //    container stack from the previous line stays open\n                        //    as a lazy container.\n                        //  - The unresolved content belongs to the lazy\n                        //    container. Continuity of unresolved content will\n                        //    keep the lazy container alive.\n\n                        if (!this.curLazyPContainer) {\n                            this.curLazyPContainer = curPContainer\n                        }\n                        console.debug('potential lazy container continuation onto',\n                            this.curLazyPContainer.toString())\n                    } else {\n                        // LAZINESS NOT ENABLED\n                        // ====================\n                        //  - The containers that parseContinuation found did\n                        //    not continue on the current line are terminated.\n                        //  - `defaultResolveBackChunk()` will resolved the\n                        //    back chunk and add it to the appropriate\n                        //    container.\n\n                        this.defaultResolveBackChunk(false, true)\n                    }\n                }\n\n                // Update the current container to the deepest continuing\n                // container, which was set on the current line\n                // by parseContinuation.\n                this.curPContainer = this.curLine.pContainer\n            }\n\n            if (this.curLine.remainingIsBlank()) {\n                // BLANK LINE\n                // ==========\n\n                console.debug('parse Blank Line')\n                console.group()\n                this.defaultResolveBackChunk();\n                (this.curPContainer.irContainer.source as ptss.Block).lastLineBlank = true\n                console.debug(`SET LAST BLANK for ${this.curPContainer.toString()}`)\n                console.groupEnd()\n\n                // end the group for this Line before continuing to the next\n                console.groupEnd()\n                continue\n            }\n\n            allStylesFromTop:\n                // todo![perf] AN AWESOME IDEA: ALMOST EVERY STYLE HAS A KEY CHARACTER\n                //  that must occur somewhere on the first line. For most styles,\n                //  that key character must be the first non-whitespace character.\n                //  We should be able to take advantage of this to narrow the set\n                //  of styles that could possibly match at the current parse\n                //  position. (Perhaps in the same step, we could further narrow\n                //  the set based on other factors, e.g. whether a paragraph\n                //  interruption is involved, etc.\n                //  For example:\n                //   - we may or may not support this optimization for special\n                //     chars that occur elsewhere than the first non-whitespace\n                //     position. This example assumes we don't.\n                //   - at parser initialization time, identify the lead special\n                //     character is for each style. If a style doesn't have one,\n                //     it's lead char is effectively \"any\".\n                //     - if we can't programmatically figure it out when we init\n                //       each style, we can have the style def supply it.\n                //   - during the style matching loop (i.e. this point in the\n                //     code where this comment is), parse the first non-whitespace\n                //     character and efficiently get the set of styles that could\n                //     match. Perhaps we have an array that maps char code (index\n                //     into array) to a list of styles (the value at that index).\n                //   - likewise the interrupt check loop (right now we have two,\n                //     one in TableStyle and one in Line that maybe should be\n                //     consolidated) calls this method too for smarter interrupt\n                //     checks, or maybe it has its own version which includes\n                //     narrowing logic specific to interrupts.\n                //   - This method could even incorporate the perf ideas below,\n                //     e.g. one-time indent parsing, and the filtering logic\n                //     further below (all the calls to 'continue nextStyle' that\n                //     happen without trying the current style.)\n                for (; ;) {\n                    // skip leading spaces if <= this.styleSheet.sloppyMargin AS IF\n                    // they never existed in the first place, otherwise leave the ptr as-is.\n                    line.parseSlop(this.styleSheet.sloppyMargin, true)\n\n                    // todo[perf] what if we parsed the indent right here and:\n                    //   - skipped styles with indent = NO\n                    //   - for other styles, passed the indent info down so it\n                    //     is only ever parsed once! Literal containers like\n                    //     Indented Code Blocks can even add the indent back to\n                    //     the line's content.\n                    //   DRAWBACKS:\n                    //   - element parsers would not independent of calling\n                    //     parser. An alternative is that Line saves the indent\n                    //     parsing done on a line even if reverted.\n                    //   OPPORTUNITY:\n                    //   - We have other cases where a style parser\n                    //     will throw out work (e.g. forward parse up to interrupting\n                    //     new elem start) that a subsequent style parsing redoes\n                    //     redundantly. Maybe we can have a generalized solution\n                    //     within Line for common speculative parsing that gets saved.\n\n                    //we will restore to this same checkpoint after each\n                    //   tryBlockStyle call that fails in the loop\n                    const checkpoint = this.curLine.checkpoint()\n                    nextStyle:\n                        for (const style of this.styleSheet.blockStyles) {\n                            // todo[perf] For CommonMark,\n                            //   `!style.consumesBackChunk && !style.canInterruptParagraph`\n                            //   is true for 2 of 10 styles (indentedCode, linkRefDef).\n                            //   This may be more useful for stylesheets that require\n                            //   blank lines.\n                            // todo[perf] we could also pre-process all styles and make a\n                            //   list of 'quick checks' for each of them, either by analysis\n                            //   or supporting an explicit 'perf hint' in the style declaration.\n                            //   e.g. without making function calls, we can filter candidate styles\n                            //   based on the next char in the stream (e.g. ATX would get filtered\n                            //   out immediately if no `#`). Possibly could parse the Regex's and\n                            //   determine first character invariants or similar.\n                            //   i.e. we'd be mapping trigger characters to styles.\n                            //   <br>\n                            //   Inlines\n                            //   -------\n                            //   For Inlines we could do the same, but since we have to\n                            //   scan every character of content, it would probably be more\n                            //   efficient to compile a Regex that includes all of those\n                            //   characters, and we'd execute `RegExp.exec()` with a sticky\n                            //   flag, so we can find the next match continuing either from\n                            //   where we left off or from wherever we want setting regex.index.\n                            //   <br><br>\n                            //   If we ever decide to not splice out body content but just keep\n                            //   pointers to the backing text, this can still work:\n                            //   - If the index returned goes beyond the end of inline content\n                            //     for the current element, it would mean there are no special\n                            //     inlines in that element's content.\n                            //   - If it is beyond, we can save the index for when we process the\n                            //     next element's content (e.g. is possibleInlineIndex < curPos,\n                            //     we have to do a new search, if possibleInlineIndex > curPos,\n                            //     etc\n                            // todo[perf] we are doing the same lookups (e.g. calls to\n                            //   curPContainerHasUnresolvedBackChunk()) for each style we check,\n                            //   even though the value doesn't change as we loop thru styles.\n                            //   Since we do this loop a lot should do this better?\n                            //   e.g. we can call all three of these just ahead of this\n                            //   for-loop:\n                            //     - curPContainerHasUnresolvedBackChunk\n                            //     - hasUnresolvedBackChunk\n                            //     - this.styleSheet.lazyContinuation\n                            //   Also, we can combine the latter two into a single\n                            //   bool, e.g. 'hasLazyBack'.\n                            //   That said, is it possible to have unresolved back\n                            //   that isn't included in curPContainerHasUnresolvedBackChunk\n                            //   when styleSheet.lazyContinuation === false? If not.\n                            //   we can skip the styleSheet.lazyContinuation check.\n\n                            // todo![interrupt] make sure we are apply the following\n                            //  constraints in `Line.checkStyleMatch` which is used\n                            //  for fwd matching interrupt checks, which I'm pretty\n                            //  sure must be consistent with any rules below that\n                            //  prevent a style from matching because we have\n                            //  unresolved back. At least `canInterruptParagraph` is\n                            //  enforced when we precalculate `ChunkStyle.interruptibleBy`\n\n                            // special list logic\n                            if (this.curPContainerHasUnresolvedBackChunk()) {\n                                if (!style.consumesBackChunk) {\n                                    if (!style.canInterruptParagraph) {\n                                        if (!(style instanceof ptss.ListStyle)\n                                            || !style.canInterruptParaWithinList\n                                            || this.rootPContainer.openList === null) {\n                                            continue nextStyle\n                                        }\n                                    }\n                                }\n                            }\n\n                            // if back consuming chunk isn't lazy, it should\n                            //  not be able to consume a back chunk which has\n                            //  one or more lazy lines\n                            if ((this.curLazyPContainer !== null || this.curPContainerHasLazyLines)\n                                && style instanceof ptss.ChunkStyle\n                                && style.consumesBackChunk\n                                && !style.lazyContinuation) {\n                                continue nextStyle\n                            }\n\n                            // if fwd consuming chunk can't interrupt lazy\n                            if (this.hasUnresolvedBackChunk()\n                                && !style.consumesBackChunk\n                                && this.styleSheet.lazyContinuation\n                                && !style.canInterruptLazy) {\n                                continue nextStyle\n                            }\n\n                            switch (this.tryBlockStyle(style)) {\n                                case TryResult.NO_MATCH:\n                                    // continue to next style in precedence list\n                                    checkpoint.restore()\n                                    continue nextStyle\n                                case TryResult.MATCHED_PARTIAL_LINE:\n                                    // console.debug(`line:${this._curLineNum} offset:${line.ptr}` +\n                                    //               ` tab%:${this.curTabRemainder} eol:${(this.lineEnd(line.ptr))}`)\n                                    if (line.remainingIsBlank()) {\n                                        break allStylesFromTop\n                                    }\n                                    continue allStylesFromTop\n                                case TryResult.MATCHED_TO_EOL:\n                                    break allStylesFromTop\n                            }\n                        }\n                    //no styles matched\n\n                    this.leaveCurLineUnresolved()\n                    break\n                }\n\n            console.groupEnd()\n        } while (this.advance())\n\n        console.debug()\n        console.debug('[EOF]')\n        console.group()\n        this.defaultResolveBackChunk(true, true)\n        console.groupEnd()\n        console.debug()\n\n        return this.irRoot\n    }\n\n    /**\n     * Advance to next line.\n     *\n     * @returns false if no more lines\n     */\n    private advance (): boolean {\n        if (this.curLine.next === null) {\n            return false\n        }\n\n        this.curLine = this.curLine.next\n        return true\n    }\n\n    private tryBlockStyle (blockStyle: ptss.ElementalBlockStyle): TryResult {\n        switch (blockStyle.baseType) {\n            case ptss.BaseStyleType.Chunk:\n                return this.tryChunkStyle(blockStyle as ptss.ChunkStyle)\n            case ptss.BaseStyleType.Container:\n                return this.tryContainerStyle(blockStyle as ptss.ContainerStyle)\n            case ptss.BaseStyleType.List:\n                return this.tryListStyle(blockStyle as ptss.ListStyle)\n            case ptss.BaseStyleType.Table:\n                return this.tryTableStyle(blockStyle as ptss.TableStyle)\n            case ptss.BaseStyleType.TEMP_HTML_HACK:\n                return this.tryHTMLBlockStyle(blockStyle as ptss.HTMLBlockStyle)\n        }\n    }\n\n    private tryChunkStyle (chunkStyle: ptss.ChunkStyle): TryResult {\n        //! we only support back matching from the current non-lazy container.\n        const result = chunkStyle.parse(this.curLine,\n            this.curPContainerHasUnresolvedBackChunk() ? this.unresolvedFrom : null)\n        if (!result) {\n            return TryResult.NO_MATCH\n        }\n        console.group() //untitled so that actions below appear part of chunkStyle.parse()'s group\n\n        if (result.startLine && result.endLine) {\n            if (result.startLine.num < this.curLine.num) {\n                // we back matched\n                this.clearUnresolvedBackChunk()\n\n            } else if (result.startLine.num === this.curLine.num) {\n                this.defaultResolveBackChunk()\n            }\n        } else {\n            throw new Error('start and end line expected from chunkStyle.parse')\n        }\n        this.curLine = result.endLine as Line\n\n        // handle result artifacts\n        const irBlock = result.irBlock\n        if (irBlock) {\n            console.debug(`\u2728 new chunk: ptss=${chunkStyle.name}  stir=${irBlock.type}${irBlock.subType ? '/' + irBlock.subType: ''}`)\n            // todo![spec] can only chunks introduce new sections? For example,\n            //    - why can't a container? Imagine a section hierarchy defined\n            //      by an explicit container hierarchy rather than the implicit\n            //      hierarchy of heading levels\n            //    - what about numbered lists being used to represent a numbered\n            //      hierarchy, e.g. like legal documents?\n            //   See [[Hierarchy Syntax]] for analysis.\n            //   <br>\n            //   One way to support this:\n            //   - `ParseContainer.appendImplicitSection(irBlock)` - the current `appendSection` that works for\n            //      an implicit section hierarchy from heading levels.\n            //   - `ParseContainer.appendSection(irBlock)` - works for explicit plain-text container-based sections.\n            //\n            // todo![RepoDoc] the above `[[Hierarchy Syntax]]` wikilink should resolve!\n            if (irBlock.type === 'section') {\n                this.curPContainer.appendSection(irBlock)\n            } else {\n                this.curPContainer.append(irBlock)\n            }\n        }\n        if (result.ptNamedValue) {\n            if (this.namedValues.define(result.ptNamedValue, this.curPContainer.tip())) {\n                console.debug(`\u2728 new NamedValue: ${ptss.stringifyNamedValue(result.ptNamedValue)}`)\n                console.debug('updated NamedValues:')\n                console.group()\n                console.debug(this.namedValues.toString())\n                console.groupEnd()\n            } else {\n                console.debug(`\u274C skipped NamedValue: ${ptss.stringifyNamedValue(result.ptNamedValue)}`)\n            }\n        }\n\n        console.groupEnd()\n        return TryResult.MATCHED_TO_EOL\n    }\n\n    private tryContainerStyle (containerStyle: ptss.ContainerStyle): TryResult {\n        const result = containerStyle.parse(this.curLine,\n            this.curPContainerHasUnresolvedBackChunk() ? this.unresolvedFrom : null)\n        if (!result) {\n            return TryResult.NO_MATCH\n        }\n        console.group() //untitled so that actions below appear part of containerStyle.parse()'s group\n\n        this.defaultResolveBackChunk()\n        this.curLine = result.endLine as Line\n\n        // handle result artifacts\n        const irBlock = result.irBlock as ir.Block\n        console.debug(`\u2728 new container: ptss=${containerStyle.name}  stir=${irBlock.type}${irBlock.subType ? '/' + irBlock.subType: ''}`)\n        this.curPContainer.append(irBlock)\n\n        if (result.ptNamedValue) {\n            if (this.namedValues.define(result.ptNamedValue, this.curPContainer.tip())) {\n                console.debug(`\u2728 new NamedValue: ${ptss.stringifyNamedValue(result.ptNamedValue)}`)\n                console.debug('updated NamedValues:')\n                console.group()\n                console.debug(this.namedValues.toString())\n                console.groupEnd()\n            } else {\n                console.debug(`\u274C skipped NamedValue: ${ptss.stringifyNamedValue(result.ptNamedValue)}`)\n            }\n        }\n\n        let retVal: TryResult\n        if (containerStyle.body === 'BLOCKS' || containerStyle.body === 'INLINE_OR_BLOCKS') {\n            this.addNewSubPContainerToLineAndTree(irBlock)\n            if (this.curLine.ptr === this.curLine.EOL) {\n                retVal = TryResult.MATCHED_TO_EOL\n            } else {\n                retVal = TryResult.MATCHED_PARTIAL_LINE\n            }\n        } else {\n            // for simpler, non recursive content models, the container is parsed\n            // to the end, and closed (much like parsing a chunk), so we\n            // don't update the container stack with it.\n            retVal = TryResult.MATCHED_TO_EOL\n\n            // also, if it had a bottom border, it was not included in the\n            // the `result.endLine` above, so we advance past that here:\n            if (this.curLine.next && this.curLine.next.pContainerBottomBorder !== null) {\n                this.curLine = this.curLine.next\n            }\n        }\n        console.groupEnd()\n        return retVal\n    }\n\n    private tryListStyle (listStyle: ptss.ListStyle): TryResult {\n        const firstLine = this.curLine\n\n        // todo![spec] TWO HUGE PROBLEMS\n        //  1. The CM spec says \"list item other than `1.` can't interrupt a\n        //     paragraph. It can interrupt anything else!!!!  But a back chunk\n        //     isn't necessarily a paragraph!!! The only reason we are passing\n        //     tests is because Setext (which is based on a back chunk) has\n        //     higher precedence and will have consumed any back chunk by now.\n        //     I don't like why this works, that there now is a convoluted\n        //     and unrelated reason why one has to have higher precedence than\n        //     the other.\n        //  2. we are passing curPContainerHasUnresolvedBackChunk, which is not\n        //     the same as hasUnresolvedBackChunk(), which is what we pass for\n        //     HTMLBlockStyle.\n        //     - but i think this is a flaw in the CM spec.\n        const result\n            = listStyle.parse(firstLine,\n            this.curPContainerHasUnresolvedBackChunk() ? this.unresolvedFrom : null)\n        if (!result) {\n            return TryResult.NO_MATCH\n        }\n        console.group() //untitled so that actions below appear part of chunkStyle.parse()'s group\n\n        this.defaultResolveBackChunk()\n\n        const irListItem = result.irBlock as ir.Block\n        // todo[debug] in this (and container and others?) we are only reporting the name of the style.\n        //    but should we also not report the *instance* of the style, e.g. the bullet marker?\n        //    isn't an element a combination of the style def AND specific options of that def?\n        //    e.g. Interjection{warning, indent(5)}  List{unordered, '*'}\n        //    we want to capture all the elements that determine its continuation from line to line, no?\n        console.debug(`\u2728 new list item: ptss=${listStyle.name}  stir=${irListItem.type}${irListItem.subType ? '/' + irListItem.subType: ''}`)\n        this.curPContainer.appendListItem(irListItem, result.irNewList)\n\n        this.addNewSubPContainerToLineAndTree(irListItem)\n\n        console.groupEnd()\n        return TryResult.MATCHED_PARTIAL_LINE\n    }\n\n    private tryTableStyle (tableStyle: ptss.TableStyle): TryResult {\n        const result = tableStyle.parse(this.curLine,\n            this.curPContainerHasUnresolvedBackChunk() ? this.unresolvedFrom : null)\n        if (!result) {\n            return TryResult.NO_MATCH\n        }\n        console.group() //untitled so that actions below appear part of chunkStyle.parse()'s group\n\n        this.defaultResolveBackChunk()\n        this.curLine = result.endLine as Line\n\n        // handle result artifacts\n        const irBlock = result.irBlock as ir.Block\n        console.debug(`\u2728 new table: style=${tableStyle.name} endLine=${this.curLine.num} ` +\n                      ` cols=${irBlock?.tableMeta?.head?.length} ` +\n                      ` rows=${irBlock?.body?.length}`)\n        this.curPContainer.append(irBlock)\n\n        console.groupEnd()\n        return TryResult.MATCHED_TO_EOL\n    }\n\n    private tryHTMLBlockStyle (htmlBlockStyle: ptss.HTMLBlockStyle): TryResult {\n        const result = htmlBlockStyle.parse(this.curLine, this.unresolvedFrom)\n        if (!result) {\n            return TryResult.NO_MATCH\n        }\n        console.group() //untitled so that actions below appear part of chunkStyle.parse()'s group\n\n        this.defaultResolveBackChunk()\n        this.curLine = result.endLine as Line\n\n        // handle result artifacts\n        const irBlock = result.irBlock as ir.Block\n        console.debug(`\u2728 new html block: ptss=${htmlBlockStyle.name}  stir=${irBlock.type}${irBlock.subType ? '/' + irBlock.subType: ''}`)\n        this.curPContainer.append(irBlock)\n\n        console.groupEnd()\n        return TryResult.MATCHED_TO_EOL\n    }\n\n    addNewSubPContainerToLineAndTree (containerElem: ir.Block): void {\n        this.curPContainer =\n            new ParseContainer(containerElem, this.curPContainer)\n        this.curLine.pContainer = this.curPContainer\n        console.debug(this.curLine.toString())\n    }\n\n    /**\n     * to be called when we give up on the curLine, and before calling\n     * advance() to proceed to the next line.\n     */\n    leaveCurLineUnresolved (): void {\n        console.debug(`unresolved: ${stringifyTruncate(this.curLine.remainingSlice())}`)\n        console.group()\n\n        if (this.unresolvedFrom === null) {\n            this.unresolvedFrom = this.curLine\n        } else {\n            console.debug(`since line: ${this.unresolvedFrom.num}` +\n                          `  ${stringifyTruncate(this.getUnresolvedBackChunkAndContainer(true)[0])}`)\n        }\n\n        // because lazy containers can resume, e.g. the following\n        // Markdown blockquote:\n        //     > In a block quote.\n        //     Still in the same block quote\n        //     > This does not start a new block quote; it\n        //     > continues the above block quote.\n        if (this.curLazyPContainer) {\n            this.curPContainer = this.curLazyPContainer\n            this.curPContainerHasLazyLines = true\n            this.curLazyPContainer = null\n        }\n\n        // backChunk can only resolve to something other than a list item,\n        // when it does resolve it will trigger the closure of any open list.\n        // pre-emptively closing it now simplifies the logic later.\n        if (this.curPContainer.openList !== null) {\n            console.debug(`\u274C preemptively closing list ${this.curPContainer.toString()}`)\n        }\n        this.curPContainer.openList = null\n\n        console.groupEnd()\n    }\n\n    hasUnresolvedBackChunk (): boolean {\n        return this.unresolvedFrom !== null\n    }\n\n    clearUnresolvedBackChunk (): void {\n        this.unresolvedFrom = null\n        this.curLazyPContainer = null\n        this.curPContainerHasLazyLines = false\n    }\n\n\n    //todo[perf] as paragraphs are the most common, optimizing them may be\n    //  worthwhile. Possibilities:\n    //    - Have a *virtual* built-in default style, that if not overridden, is\n    //      applied. Constructing the IR node for this style is fast, not\n    //      using ptss.Expressions.\n    //    - since most paragraphs are at the root, there is no need to extract\n    //      lines from src as we do, only to concatenate them here.\n    defaultResolveBackChunk (includeCurLine = false, containerIsClosing = false): void {\n        if (this.hasUnresolvedBackChunk()) {\n            const [content, lineStart, lineEnd, pContainer]\n                = this.getUnresolvedBackChunkAndContainer(includeCurLine)\n\n            console.debug('resolving unresolved onto' +\n                          (this.curPContainer === pContainer ? '' : ' (lazy)') +\n                          ` ${pContainer.toString()}\\n` +\n                          `    ${stringifyTruncate(content)}`)\n            console.group()\n\n            if (pContainer !== this.curPContainer) {\n                containerIsClosing = true\n            }\n\n            if (containerIsClosing\n                && ((pContainer.irContainer.source as ptss.Block)?.style as ptss.ContainerStyle).body === 'INLINE_OR_BLOCKS'\n                && pContainer.irContainer.body === undefined\n            ) {\n                ptss.evalIRBlockPropertyExpr(\n                    {\n                        body: new ptss.Expression(['parseInlines', ['body']])\n                    },\n                    pContainer.irContainer, null, null, [content], null, null)\n                console.debug(`appending inline content to ${pContainer.tip().toDebugString()}`)\n            } else {\n                const defaultBlockStyle = this.styleSheet.defaultBlockStyle\n                const ptBlock = new ptss.Block(defaultBlockStyle)\n                ptBlock.lineStart = lineStart\n                ptBlock.lineEnd = lineEnd\n                //the type should get overwritten by expression.\n                const irNode = new ir.Block('default')\n                ptss.evalIRBlockPropertyExpr(defaultBlockStyle.irNode, irNode, null, null, [content], null, null)\n                irNode.source = ptBlock\n                console.debug(`\u2728 new default elem: ptss=${defaultBlockStyle.name}  stir=${irNode.type}${irNode.subType ? '/' + irNode.subType: ''}`)\n                pContainer.append(irNode)\n            }\n            this.clearUnresolvedBackChunk()\n            console.groupEnd()\n        }\n    }\n\n\n    curPContainerHasUnresolvedBackChunk (): boolean {\n        return this.curLazyPContainer === null && this.unresolvedFrom !== null\n    }\n\n    /**\n     * Returns unresolved lines ONLY if they belong to *the\n     * current container*.\n     *\n     * If the lines are consumed, caller is responsible for setting:\n     *     this._unresolvedBackChunk = null\n     *     this._currentLineUnresolved = false\n     *\n     * (I can't think of a case where a partial resolve\n     * makes sense, forcing the default resolution on\n     * earlier lines. We can change this later.)\n     */\n    curPContainerUnresolvedFrom (): Line | null {\n        if (this.curLazyPContainer) {\n            return null\n        }\n        return this.unresolvedFrom\n    }\n\n    /**\n     * Returns the unresolved back chunk and the container to which it would belong if it\n     * were to be resolved now. It doesn't necessarily belong to the current container;\n     * if the stylesheet includes lazy continuation, it might belong to a lazily continuing\n     * container.\n     */\n    getUnresolvedBackChunkAndContainer (includeCurLine = false)\n        : [content: string, lineStart: number, lineEnd: number, pContainer: ParseContainer] {\n        if (this.unresolvedFrom === null) {\n            return ['', -1, -1, this.rootPContainer]\n        }\n\n        const c = this.curLazyPContainer ?\n            this.curLazyPContainer : this.curPContainer\n\n        // root container optimization\n        if (c === this.rootPContainer && this.curLazyPContainer === null) {\n            console.debug(`\uD83D\uDCA5 ROOT OPTIMIZATION ROUTE`)\n            if (includeCurLine) {\n                return [this.src.slice(this.unresolvedFrom.SOL, this.curLine.EOL),\n                    this.unresolvedFrom.num, this.curLine.num, c]\n            } else {\n                return [this.src.slice(this.unresolvedFrom.SOL, this.curLine.SOL),\n                    this.unresolvedFrom.num, this.curLine.num - 1, c]\n            }\n        }\n\n        let l = this.unresolvedFrom\n        let s = ''\n        while (l.num < this.curLine.num) {\n            s += l.remainingSlice()\n            l = l.next as Line\n        }\n        if (includeCurLine) {\n            s += this.curLine.remainingSlice()\n        }\n\n        // todo![parsing] assertion legit? or add null check?\n        const lineStart = (this.unresolvedFrom as Line).num\n        const lineEnd = includeCurLine ? this.curLine.num : this.curLine.num - 1\n\n        return [s, lineStart, lineEnd, c]\n    }\n\n}\n", "import {Value, SubstitutionValue, ElementValue, normalizeName, HrefValue, NamedValue, stringifyNameAndValue, stringifyValue} from './ptss/index.js'\nimport * as ir from '../stir/index.js'\n\n// todo![now, design] save this somewhere:\n//\n//  I really like the look of this gray text on gray background\n//  with the rare \u203C\uFE0F bright red icon to call out something.\n//  e.g. Obviously this is not the right contrast for text meant to be\n//  red, but for text that is generally NOT read, but only scanned for\n//  ERRORS, this seems ideal.\n\n// todo![now, references] MOVE MOST OF THESE COMMENTS INTO DOCS\n\n\n/*  TWO PROBLEMS\n\n1. We use ParseContainer to for the section context/path for `define`\n    BUT WE CANNOT do that for `valueFor` (which should be renamed to `resolve`?)\n\n    \u2753\u203C\uFE0F I think we need Block.parent\n\n2. NOT ALL REFERENTS should be pathed:\n   - section titles can be non-unique: SHOULD BE PATHED\n   - inline text that is named SHOULD NOT (HAVE TO) BE REFERENCED BY PATH\n\n   ON THE OTHER HAND: if the name is unique, it can be\n   resolved without a path regardless!\n   - REMEMBER: `./name` resolves to `name` in the current section,\n     but the simple pathless `name` resolves `name` if it is unique\n     regardless of path.\n   - REVIEW the resolution table in [NamedValues.md] in light of the above.\n\n   OPTIONS\n   -------\n   A) rely on the semantics for pathless references per [NamedValues.md]\n      - this may overlap with Option C\n   B) add a `unique name` attribute to Named ReferentValues, which, when set,\n      causes named referents to behave just like named substitutions/hrefs: only one per name\n   C) IT IS THE PLAIN TEXT AUTHOR'S RESPONSIBILITY \u2753\u203C\uFE0F\n      - Don't try to solve it with PTSS syntax/declaration distinctions/rules.\n        - The author knows what to do and should be expected to do the logical thing.\n        - If there is an ambiguity, it is the author's fault. Issue a warning/error.\n      - if a named value is expected to be unique, the author should naturally\n        make the reference without a path (i.e. `name` instead of `./name`),\n        - a reference without a path ONLY resolves to unique names.\n        - Option C1) If non-unique, we ERROR. We DITCH THE SEARCH described [NamedValues.md].\n        - Option C2) If non-unique, we WARN. We use the search described [NamedValues.md] as a fallback.\n      - if a named value is expected to be non-unique, the author should know\n        that and make the appropriate pathed reference\n      - this option is more consistent with the notion that it is not only NOT WRONG\n        but sometimes even NATURAL that multiple things have the same name and are\n        references are contextually resolved.\n        - not just section names. Maybe a table named `problems` exists in every\n          subsection. Maybe multiple recipes are in the file, one in each\n          subsection, and within each there is a list titled `ingredients`.\n      - We can always add Option B ON TOP OF Option C. Do \uD83C\uDFC8 B until something\n        shows us we *need* it.\n\n   \u2705\uD83E\uDD14 Option C seems like the best option, as even if we do B, we would do it\n        on top of C:\n        - If the `unique name` attribute is set, we ERROR. i.e. Option B results in C1\n        - If the `unique name` attribute is not set, we WARN, i.e. C2\n\n */\n\n\n//todo![now, spec, named values, references] NAMED VALUES ARE A PURELY PTSS\n//  ABSTRACTION representing referencable named values defined implicitly\n//  or explicitly through the plain text style's syntax and referencable\n//  through other syntax syntax of the style.\n//  * * *\n//  AS SUCH, Named Values only exist abstractly/logically in the source plain\n//  text and concretely in the constructs in this file DURING PARSING as a means\n//  of implementing PTSS named value definitions. They do not have a life\n//  beyond the plain text EXCEPT for those that are exported, in which case\n//  they are converted to STIR's representation with STIR's semantics.\n\n\n//todo![now, spec, named values, references] use the example of a metadata variable named `title` in a doc that\n//   happens to have a section who's title is `title`. You can argue that PTSS\n//   should simply have separate namespaces for cross-referencable element\n//   naming and metadata keys. But PTSS would rather force the stylesheet to\n//   make such namespace segregation explicit in the plain text, not implicit.\n//   e.g. the stylesheet can solve it with a syntax where all metadata names\n//   are prefixed with `$` just as all footnote names are prefixed with `^`.\n\n// todo![now, references] path-relative name resolution\n//\n// If we want path-relative name resolution, either for visibility scopes or\n// disambiguation, we need to know the path at which a NamedValue is\n// ***defined***.\n//\n// Ways we might do this:\n// - add the list of stir.Blocks that make up the path, as below\n// - just store the path string\n// - introduce `Block.parent` to the STIR model. But then we'd still have\n//   to associate the NamedValue definition with a stir.Block in the tree\n//   ***within which it was defined***, which is NOT the same as a Block\n//   that might be its *value*. (or will that never be a distinction that\n//   means anything?)\n//\n//path: stir.Block[]\n\n// todo![now, references] how do we handle hierarchical scope?    \uD83C\uDFC8\n//\n//  - FIRST: what does that mean?\n//    - as a visibility mechanism (e.g. name hiding)\n//    - as a disambiguation mechanism (pathed names, absolute and relative path semantics)\n//\n//  - SECOND: how does that play with exported names?\n//    - Does it make sense for a Named Value to be inaccessible from\n//      from some STIR internal scope because of name hiding, but it is\n//      accessible from outside the STIR?\n//      - arguably, yes: one can consider an assembly of STIRs itself as\n//        a tree, with the content of each STIR being lower level branches\n//        in the tree. Thus access from outside a STIR is analogous to a\n//        parent section having access to all the names in its subsection,\n//        provided paths are provided for disambiguation.\n//        - OTOH, what about cross-assembly references from different branches\n//          of the assembly? Isn't that analogous to references within a STIR\n//          across branches of the section hierarchy?\n//\n//          \u2705 logically the behavior should be the same for all cross-branch\n//             references, be they assembly branches or internal STIR section\n//             branches.\n\ntype PathedElementsValue = { type: 'pathed elements', map: { [pathedID: string]: ElementValue }}\n\n/**\n * NamedValues tracks the reference names assigned to plain text content\n * elements. These names are used to establish cross-reference links within that\n * content per its PTSS defined syntax and semantics.\n *\n * The names are mapped to the STIR nodes corresponding to the named elements,\n * to facilitate ptss-parser's translating the source cross-references into\n * STIR cross-references.\n *\n * An index of names and what they refer to. Used to resolve references in\n * cross-reference links, etc. They do not necessarily result in hyperlinks.\n * In printed form, a heading reference might resolve to the title of the\n * heading it refers to, rendered in italics to signify that it is a title,\n * perhaps with a page number in parenthesis.\n *\n * Ambiguity\n * ----------\n * They are \"names\" not \"IDs\" because they cannot be guaranteed to be unique.\n * The stylesheet chooses how ambiguity is handled:\n *  - strict mode: ambiguity is reported as an error and processing stops.\n *  - warn mode: ambiguity is reported as a warning and processing continues,\n *    per one of the options below.\n *  - Chosen rule: ambiguity is resolver per style sheet selected rule. PTSS\n *    spec will define one ore more rules to choose from, TBD. The spec MAY\n *    end up only having one available rule, in which case this list gets\n *    shorter/simpler.\n *  - Default resolution: ambiguity is resolved via default rule.\n *\n * todo![spec ptss TextAssembly references test] add test case where same\n *  ref name is defined for two or more elements.\n */\nexport class NamedValues {\n    /**\n     * The structure of the index enforces these namespace rules:\n     * - each unique name (sans any path prefix) can only be assigned\n     *   to exactly one of the following:\n     *   - an HREF value\n     *   - a synonym\n     *   - one or more content elements, where each content element with\n     *     the same name is the only one with that name in its immediate\n     *     containing section. In other words, a name can be associated\n     *     with multiple content elements as long as each has a unique\n     *     *section path*.\n     *\n     *     todo![now, references] multiple sections sharing the same name\n     *      is legit, but does it make sense for other elements? Can\n     *      two named inlines (e.f. key words), have the same name?\n     *      OPTIONS:\n     *      - leave it to the content author. If it doesn't make sense to\n     *        have multiple non-sections share a name, even if in separate\n     *        parent sections, they can see that. PTSS will just warn/error/skip\n     *        as it does for duplicate section names.\n     *      - have distinct rules for sections vs other elements, and change\n     *        the structure below.\n     *      - let the style sheet define the rules.\n     */\n    public index: {\n        [name: string]: HrefValue | SubstitutionValue | PathedElementsValue\n    } = {}\n\n    /**\n     *\n     * @return whether or not the definition is recognized.\n     *\n     * todo![now, references] this value currently being passed in for\n     *   section is the immediate parent, whether or not it is a section.\n     *   Need to decide what is actually correct, and either pass in a\n     *   section or change the name of this param.\n     */\n    public define (nv: NamedValue, section: ir.Block | undefined): boolean {\n        let existing = this.index[nv.name]\n        if (nv.value.type === 'element') {\n            const {path, sectioningRoot} = ir.idPath(section)\n            if (sectioningRoot !== undefined) {\n                // todo[arch, hack] not sure this is the right place to enforce\n                //   this. This might become a PTSS style sheet selectable rule,\n                //   not something inherent to named values, so belongs in the\n                //   parser proper.\n                //   OTOH, if we allow names within section roots, we will have\n                //   to decide if the name is scoped by the root when referenced,\n                //   in which case it will go here, UNLESS we create separate\n                //   NamedValue indexes as every sectioning root node.\n                return false\n            }\n\n            // todo![now, references] should this be named 'path' or 'pathedName'\n            //  rather than ID because this is about PTSS named values, not STIR\n            //  IDs, even though we end up assigning the stir node this named path\n            //  as an id later in the method.\n            const id = path ? path + '/' + nv.name : nv.name\n\n            if (existing === undefined) {\n                existing = {type: 'pathed elements', map: {}}\n                existing.map[id] = nv.value\n                this.index[nv.name] = existing\n            } else if (existing.type !== 'pathed elements') {\n                throw new Error(`PTSS Named Value TYPE collision on ${nv.name}: ${existing.type} and ${nv.value.type}`)\n            } else {\n                if (id in existing.map) {\n                    // todo![now, references, error] \uD83C\uDFC8 user can select first wins + warn or ERROR.\n                    // todo![now, references] that ir.Block.toDEBUGString() using the pContainer-like path\n                    //   would be really useful now!!!!\n                    console.warn(`PTSS Named Value ID collision for \"${id}\".`)\n                    return false\n                }\n                existing.map[id] = nv.value\n            }\n\n            nv.value.element.id = id\n        } else {\n            if (this.index[nv.name]) {\n                // CommonMark rules give precedence to first registration; others are ignored\n                // todo![now, references, spec] Should duplicate NamedValue be silently ignored, even if\n                //  they have conflicting referents/desc?\n                // todo![now, references, spec] PTSS offers stylesheets a choice of ambiguity resolution rules, e.g.\n                //  - first def wins (like CommonMark)\n                //  - scope-based (defined by section and page hierarchies)\n                //  - strict/fail-fast on any name collision.\n                return false\n            }\n            this.index[nv.name] = nv.value\n        }\n        return true\n    }\n\n    public valueFor (name: string): Value | undefined {\n        // todo[spec] this normalization is CommonMark-specific\n        // todo[arch] this normalization  call is made in many places; poor encapsulation and non-DRY\n        const v = this.index[normalizeName(name)]\n        if (v === undefined) {\n            return undefined\n        }\n        if (v.type === 'pathed elements') {\n            //! this implements the spec's unambiguous pathless reference\n            //  resolution semantics:\n            //  - if a name is uniquely associated with a single element,\n            //    a pathless reference will resolve to it\n            //  - if not unique, a path must be given.\n            // todo![now, references] What about relative path references?\n            if (name in v.map) {\n                return v.map[name]\n            }\n            if (Object.keys(v.map).length === 1) {\n                return v.map[Object.keys(v.map)[0]]\n            }\n            console.warn(`ambiguous \"${name}}\" reference: name refers to multiple entries: ${Object.keys(v.map)}`)\n            return undefined\n        }\n        return v\n    }\n\n    public toString () {\n        let s = ''\n        const sorted = Object.entries(this.index)\n            .sort((a, b) => a[0].localeCompare(b[0]))\n        for (const [name, val] of sorted) {\n            if (val.type === 'pathed elements') {\n                s += `${name}: `\n                s += '\\n'\n                for (const path in val.map) {\n                    s += `  ${path} \u279E `\n                    s += stringifyValue(val.map[path])\n                    s += '\\n'\n                }\n            } else  {\n                s += stringifyNameAndValue(name, val)\n                s += '\\n'\n            }\n        }\n        return s\n    }\n}\n", "import {unescapeString, escapeText} from '../../orphans/parseUtil.js'\nimport {BlockTreeParser} from '../blockTreeParser.js'\nimport {NamedValues} from '../namedValues.js'\nimport type {Stylesheet} from './stylesheet.js'\nimport {stringifyReplacerForDebugLogging} from '../debugUtil.js'\n\nfunction expressionError (msg: string): never {\n    throw new Error(`Expression Error: ${msg}`)\n}\n\ntype ExpressionValue = string | number | undefined | unknown\n\n/* S-Expression Notes\n\nhttps://igor.io/2012/12/06/sexpr.html\nhttps://igor.io/2012/12/14/sexpr-special-forms.html\n\niammerrick's json-lisp does something similar to what i'm doing here, but\nby implementing Lisp's model:\n  - https://www.merrickchristensen.com/articles/json-lisp/\n  - https://github.com/iammerrick/json-lisp/blob/master/index.ts\n\n*/\n\n// todo[perf] we evaluate expressions even when their input (e.g. the \"info\" righter\n//  for fenced code blocks) doesn't occur. Is it worth optimizing that out?\n\n// todo[perf] The reason that the 'parseInlines' expression defers execution is to\n//  to wait until after block parsing has identified all the linkable targets\n//  in the source, so that inline link references an be resolved.\n//  .\n//  An alternate and probably far more efficient approach: rather than defer\n//  the entire inline parse (as links are relatively rare), just defer the\n//  link resolution. So instead of flagging the entire inline string as we\n//  do here, we do the flagging at a deeper level, at the nodes that contain\n//  inline link. We could flag them, or more efficiently, push pointers to those\n//  IR nodes onto a stack, thus avoiding walking a potentially very large node\n//  tree. If the deferred link matches a link target, an IR link node is\n//  substituted. If not, a plain text node with the original plain text is\n//  substituted.\nexport const INLINE_PARSE_FLAG = '\uD83C\uDD7F\uFE0Farse\uD83D\uDEA9'\n\nfunction evaluateExpression (expression: unknown,\n                             headMatch: string[] | null,\n                             tailMatch: string[] | null,\n                             bodyMatch: string[] | null,\n                             markerMatch: string[] | null,\n                             righterMatch: string[] | null): ExpressionValue {\n    // if is terminal\n    // todo[spec] TEMP HACK: this assumes an array is an expression, thus\n    //            disallowing arrays to be values. A proper DSL will of course\n    //            solve this.\n    if (!Array.isArray(expression)) {\n        return expression as string\n    }\n\n    console.debug(JSON.stringify(expression, stringifyReplacerForDebugLogging()))\n    console.group()\n\n    //! unlike lisp, we don't treat the first item as an expression that could\n    //  evaluate to a function. If there is a good reason to do that, we could\n    //  do that here, just as we do for each of the other args below.\n    const func = expression[0]\n\n    //! as in Lisp, the `if` operator is a *special form*, with lazily evaluated branch args,\n    // (known as *normal order* evaluation) so it is special-cased here.\n    if (func === 'if') {\n        if (expression.length < 4) {\n            expressionError(`'if' expression requires 3 args. There are ${expression.length - 1}.`)\n        }\n        let value: ExpressionValue\n        if (evaluateExpression(expression[1], headMatch, tailMatch, bodyMatch, markerMatch, righterMatch)) {\n            value = evaluateExpression(expression[2], headMatch, tailMatch, bodyMatch, markerMatch, righterMatch)\n        } else {\n            value = evaluateExpression(expression[3], headMatch, tailMatch, bodyMatch, markerMatch, righterMatch)\n        }\n        console.debug(`${JSON.stringify(value, stringifyReplacerForDebugLogging())}`)\n        console.groupEnd()\n        return value\n    }\n\n    //! For the normal functions, arguments are evaluated in *Applicative order*:\n\n    const args: ExpressionValue[] = []\n    for (let i = 1; i < expression.length; i++) {\n        args.push(evaluateExpression(expression[i], headMatch, tailMatch, bodyMatch, markerMatch, righterMatch))\n    }\n\n    let value: ExpressionValue = undefined\n\n    //todo[spec] should we do more argument validation, e.g. error on unexpected args?\n    //todo[spec] as implemented, a literal value cannot happen to be a func name!\n    //   when we implement the proper S-expression syntax, we need to disambiguate values from func names.\n    switch (func) {\n        // todo![spec, expressions] consider having the 'variables' such as\n        //  head, tail, etc be distinguished from functions with '$'. But not\n        //  sure about this. Which is more elegant. What do other S-expression\n        //  syntaxes do? What do functional languages do?\n        case 'head':\n            if (headMatch) {\n                if (expression[1]) {\n                    value = headMatch[expression[1]]\n                } else {\n                    value = headMatch[0]\n                }\n            } else {\n                value = undefined\n            }\n            break\n        case 'tail':\n            if (tailMatch) {\n                if (expression[1]) {\n                    value = tailMatch[expression[1]]\n                } else {\n                    value = tailMatch[0]\n                }\n            } else {\n                value = undefined\n            }\n            break\n        case 'body':\n            if (bodyMatch) {\n                if (expression[1]) {\n                    value = bodyMatch[expression[1]]\n                } else {\n                    value = bodyMatch[0]\n                }\n            } else {\n                value = undefined\n            }\n            break\n        case 'marker':\n            if (markerMatch) {\n                if (expression[1]) {\n                    value = markerMatch[expression[1]]\n                } else {\n                    value = markerMatch[0]\n                }\n            } else {\n                value = undefined\n            }\n            break\n        case 'righter':\n            if (righterMatch) {\n                if (expression[1]) {\n                    value = righterMatch[expression[1]]\n                } else {\n                    value = righterMatch[0]\n                }\n            } else {\n                value = undefined\n            }\n            break\n        case 'length':\n            value = (args[0] as string | Array<unknown>).length\n            break\n        case 'at':\n            value = (args[0] as string | Array<unknown>).at(args[1] as number)\n            break\n        case 'trim':\n            value = (args[0] as string)?.trim()\n            break\n        case 'map': //todo[spec] rename to lookup? map implies []-to-[]?\n            value = (args[1] as Record<string, unknown>)[args[0] as string]\n            break\n        case 'match':\n            value = (args[0] as string).match(args[1] as string | RegExp)\n            break\n        case 'replace':\n            value = (args[0] as string).replace(args[1] as string | RegExp, args[2] as string)\n            break\n        case 'escape':\n            value = escapeText(args[0] as string)\n            break\n        case 'unescape':\n            value = unescapeString(args[0] as string)\n            break\n        case 'first':\n            for (let i = 0; i < args.length; i++) {\n                if (args[i] !== undefined) {\n                    value = args[i]\n                    break\n                }\n            }\n            break\n        case 'concat':\n            value = ''\n            for (let i = 0; i < args.length; i++) {\n                value += args[i] as string\n            }\n            break\n        case 'parseInlines':\n            // first arg must have evaluated to a string,\n            // else there is nothing to parse\n            if (args[0] !== undefined) {\n                value = [INLINE_PARSE_FLAG, ...args]\n            } else {\n                value = undefined\n            }\n            break\n        case 'parseBlocks':\n            if (args[0] !== undefined) {\n                const stylesheet = args[1] as Stylesheet\n                const rootType = args.length > 2 ? args[2] as string : 'dummy'\n                const btp = new BlockTreeParser(args[0] as string, stylesheet, rootType, new NamedValues())\n                const root = btp.parse()\n                value = rootType === 'dummy' ? root.body : root\n            } else {\n                value = undefined\n            }\n            break\n       default:\n            // if no args, treat as literal\n            if (args.length === 0) {\n                value = func\n            } else {\n                expressionError(`unrecognized expression function: ${func}`)\n            }\n    }\n\n    console.debug(`${JSON.stringify(value, stringifyReplacerForDebugLogging())}`)\n    console.groupEnd()\n    return value\n}\n\nexport class Expression {\n    private readonly exp: unknown\n\n    constructor (exp: unknown) {\n        this.exp = exp\n    }\n\n    //todo![arch, spec, expressions] if we need to add ANY more to this list,\n    //  switch to a map to allow arbitrary named variables to be passed in\n    //  and referenced by expressions.\n    evaluate (headMatch: string[] | null,\n              tailMatch: string[] | null,\n              bodyMatch: string[] | null,\n              markerMatch: string[] | null,\n              righterMatch: string[] | null): ExpressionValue {\n        return evaluateExpression(this.exp, headMatch, tailMatch, bodyMatch, markerMatch, righterMatch)\n    }\n\n    toString (): string {\n        return JSON.stringify(this.exp, stringifyReplacerForDebugLogging())\n    }\n}\n\n", "import type {Stylesheet} from './stylesheet.js'\nimport {BaseStyleType, ElementalBlockStyle, evalPTNamedValueExpr, evalIRBlockPropertyExpr, RE_MARKDOWN_INDENT, BlockStyleType, ParseEffects, NamedValueExpressions} from './elementalBlockStyle.js'\nimport {Block} from './block.js'\nimport type {NamedValue} from './namedValue.js'\nimport {Expression} from './expression.js'\nimport * as ir from '../../stir/index.js'\nimport type {Line} from '../line.js'\nimport {ParseContainer} from '../parseContainer.js'\n\nconst reIndentContainerTrailHack = /(\\n *)*$/\n\nexport class ContainerStyle implements ElementalBlockStyle {\n    public baseType: BlockStyleType = BaseStyleType.Container\n\n    public name: string\n\n    public indent: 'yes' | 'no' | 'optional' | `markdown(${number},${number})` = 'no'\n    private mmIndentMin = -1\n    private mmIndentMax = -1\n\n    public hangingIndent: 'no' | 'auto' | 'marker' | number = 'no'\n    public hangingIndentRequired = false\n    public marker: RegExp | undefined\n\n    //todo![now] i don't like this inconsistency where here we are using `null`\n    //  go back to `undefined` , and for bottomBorder have 'match top' mean that.\n    public topBorder: string | null = null\n    // bottomBorder:\n    // - null means: *there is no bottom border*.\n    //   - explicitly disable bottom border by setting it to '' (null for now).\n    //     If disabled, at least left border or indent must be specified, otherwise\n    //     there would be no terminal condition for the block.\n    // - undefined means: must match top border\n    // - otherwise an string representing the set of characters allowed for the border.\n    public bottomBorder: string | null | undefined = undefined\n    //todo[spec, docs, markdown flaws] CommonMark's allowing a Setext underline\n    // of a single character is rather dumb. Even two character borders or underlines\n    // is making a lot of people pay for the laziness of a few, and oh, look at\n    // this level of laziness! PTSS should be designed somehow to encourage\n    // good design and discourage bad, starting with defaults. And maybe a\n    // a stylesheet setting such as an explicit `natural` declaration that\n    // imposes stricter rules?\n    public topBorderMinLength = 8 //more dynamic rules (e.g. min length relative to content) via property expressions?\n    public topBorderMaxLength = 120\n\n    public leftBorder: string | null = null\n    // Padding is ALWAYS at most one space, otherwise there's too much\n    // ambiguity between padding and indent.\n    // - 'per first line' means the first line determines padding. This means that\n    //    if the first line has padding, and a subsequent line does not, the\n    //   left border container will terminate, and potentially a new, zero\n    //   padding container will start.\n    // - 'sloppy' is Markdown's way, which means padding is optional on a line-by-line\n    // basis, resulting in odd (bad) behavior (described in the docs)\n    public leftPadding: 'yes' | 'no' | 'per first line' | `sloppy` | undefined\n\n    public righter: RegExp | null = null\n\n    /**\n     *\n     * Source Container Content Models\n     * ===============================\n     * (distinct from and independent of target STIR element content model)\n     *\n     * INLINE_OR_BLOCKS\n     * ------\n     * InlineSequence | BlockSequence\n     *\n     * If the content of the container is a single chunk, it will be treated\n     * as an InlineSequence.\n     *\n     * BLOCKS\n     * ------\n     * BlockSequence\n     *\n     * RAW\n     * ---\n     * The term `RAW` is better than `LITERAL` because the raw source\n     * might be taken literally, or it might not (e.g. it might be\n     * inline parsed, or otherwise manipulated). This way we avoid confusion.\n     * One describes how to parse the source, and the other describes the\n     * semantics of the source.\n     *\n     * We may update the Content Model types to include a `LITERAL`, which would\n     * be a shortcut way to say `RAW` and then copy it directly to the STIR\n     * body with no manipulation. We'd only do that if it were a common enough\n     * thing to give it special terse expression.\n     *\n     * The extracted raw text will NOT include a trailing newline, as depicted\n     * below. The trailing newline is considered an artifact of the form (the\n     * bottom border cannot exist on the same line as the last line of content.\n     * Another reason, is for consistency guarantees for semantically equivalent\n     * content: a container terminated by a bottom border, a parent container\n     * EOC, or EOF should be identical. Downstream processing shouldn't have to\n     * deal with the uncertainly, have if-else logic, etc.\n     *\n     * IF the style needs the trailing newline, it can use `RAW_NL` instead.\n     * See below.\n     *\n     * This:\n     *   ~~~~~~~~~~~~~~~~~~ markdown\n     *   ``````````````\n     *   <-- from here \\n\n     *      to here -->\\n\n     *   ``````````````\n     *   ~~~~~~~~~~~~~~~~~~\n     * yields: '<-- from here \\n   to here -->'\n     *\n     * and this:\n     *   ~~~~~~~~~~~~~~~~~~ markdown\n     *   ``````````````\n     *        \\n\n     *   ``````````````\n     *   ~~~~~~~~~~~~~~~~~~\n     * yields: '     '\n     *\n     * and this:\n     *   ~~~~~~~~~~~~~~~~~~ markdown\n     *   ``````````````\n     *   \\n\n     *   ``````````````\n     *   ~~~~~~~~~~~~~~~~~~\n     * yields: ''\n     *\n     * RAW_NL\n     * ------\n     * Same as RAW but includes trailing newline (guaranteed, even at EOF).\n     * We may nix this and just have style that need it append a newline to\n     * the body via PTSS Expression.\n     *\n     * Regex\n     * -----\n     * entire match available as expression: ['body']\n     * match groups available by index, e.g.: ['body' 2]\n     *\n     *\n     * @type {'INLINE_OR_BLOCKS' | 'BLOCKS' | 'RAW' | 'RAW_NL' | RegExp}\n     *\n     * todo![spec, ptss, dsl, composition] Would it be more elegant and consistent\n     *  if we nixed 'BLOCKS' and replace it with the following?\n     *  ```\n     *  body = 'RAW' | 'RAW_NL' | RegExp = 'RAW'\n     *  irNode.body = ['parseBlocks' ['body'] ...]\n     *  ```\n     *  and also nixed 'RAW_NL' as suggested above.\n     *  - - -\n     *  PERHAPS THE ANSWER IS \"NO\".\n     *  ==KEY PRINCIPLE==:\n     *     - this `body` field makes a declaration ABOUT THE PLAIN TEXT SOURCE ELEMENT'S BODY\n     *     - irNode.body makes a declaration ABOUT THE OUTPUT STIR ELEMENT'S BODY\n     *  Thoughts, given this principle:\n     *  - keep 'BLOCKS'. It means \"the source body is composed of block\n     *    elements as defined by this style sheet. In other words, this is a\n     *    point of style sheet recursion.\"\n     *  - - -\n     *  HOW DOES COMPOSITION FIT IN?\n     *  ```\n     *  body = [\n     *    $block(heading),\n     *    'BLOCKS',\n     *    $block('Thematic Break'),\n     *    $block('paragraph')\n     *  ]\n     *  irNode.title = ['body', 1]\n     *  irNode.body = ['body', 2]\n     *  irNode.footer = ['body', 4]\n     *  ```\n     *  or we could use names (and we'd do the same with Regex groups):\n     *  ```\n     *  body = {\n     *    heading: $block(heading),\n     *    body: 'BLOCKS',\n     *    divider: $block('Thematic Break'),\n     *    footer: $block('paragraph')\n     *  }\n     *  irNode.title = ['body', 'heading']  // STIR title <= this PTSS element's \"heading\" <= PTSS container body element 1.\n     *  irNode.body = ['body', 'body']      // STIR body <= this PTSS element's \"body\" <= PTSS container body elements 2 thru n-2.\n     *  irNode.footer = ['body', 'footer']  // STIR footer <= this PTSS element's \"footer\" <= PTSS container body elements n.\n     *  ```\n     */\n    public body: 'INLINE_OR_BLOCKS' | 'BLOCKS' | 'RAW' | 'RAW_NL' | RegExp = 'INLINE_OR_BLOCKS' //todo[spec] better to default RAW?.\n\n    //todo[spec] support minLines OR allowZeroLineContainers\n    //   See case files for examples/visual analysis.\n    //   - if we have the minLine rule, we'd have to parse ahead to\n    //     make sure we have min lines. BUT CAN WE DO THIS without\n    //     having to parse the contents normally, (which we can't do\n    //     within `parse`, only BlockTreeParser can do that) and\n    //     then we'd have to back out all the parsing state changes\n    //     if min lines fails. LIKELY CRAZY COMPLEX.\n    //   - fuck `minLines`. There is no need to support any minLines\n    //     value greater than one, so we should just do\n    //     `allowZeroLineContainers`, in which case we only have to\n    //     look one line ahead, and we can do that immediately within\n    //     parse open, and existing Line checkpointing is more than\n    //     sufficient. In fact, all we have to do is make sure the\n    //     next line isn't a bottom border or end of parent container!\n\n    /** One instance of continues func to be shared by all occurrences of this style. */\n        // initialize with non-null default to avoid null check\n    public continues: (line: Line) => boolean = () => false\n\n    public canInterruptParagraph = true\n    public canInterruptLazy = true\n\n    readonly consumesBackChunk = false\n\n    public styleSheet: Stylesheet\n\n    // property expressions\n    private _irNode?: { [key: string]: Expression }\n    private _ptNamedValue?: NamedValueExpressions\n\n    constructor (name: string, styleSheet: Stylesheet) {\n        this.name = name\n        this.styleSheet = styleSheet\n    }\n\n    get irNode (): { [p: string]: Expression } {\n        if (this._irNode === undefined) {\n            this._irNode = {}\n        }\n        return this._irNode\n    }\n\n    set ptNamedValue (value: NamedValueExpressions) {\n        this._ptNamedValue = value\n    }\n\n    initAndValidate (): void {\n        if (this._ptNamedValue?.value === 'self' && this._irNode === undefined) {\n            throw new Error(`ptNamedValue.value is set to ${this._ptNamedValue.value} but the style is not configured to generate one`)\n        }\n\n        const markdownIndentMatch = RE_MARKDOWN_INDENT.exec(this.indent)\n\n        if (!markdownIndentMatch\n            && this.topBorder === null\n            && this.leftBorder === null\n            && this.indent !== 'yes'\n            && this.hangingIndent === 'no') {\n            throw new Error('invalid container style: no definitive container delimiter(s)')\n        }\n\n        if (markdownIndentMatch) {\n            this.mmIndentMin = Number.parseInt(markdownIndentMatch[1])\n            if (this.mmIndentMin < 0) {\n                throw new Error('invalid container style: indent min cannot be negative')\n            }\n            if (this.mmIndentMin <= this.styleSheet.sloppyMargin) {\n                throw new Error('invalid container style: indent min must be greater than allowed sloppy margin')\n            }\n            this.mmIndentMax = Number.parseInt(markdownIndentMatch[2])\n            if (this.mmIndentMax < this.mmIndentMin) {\n                throw new Error('invalid container style: indent max must be at least indent min')\n            }\n        }\n\n        if (this.topBorder) {\n            if (this.bottomBorder === null && this.leftBorder === null\n                && this.indent !== 'yes' && this.mmIndentMin < 1) {\n                throw new Error('invalid container style: disabling bottom border without specifying'\n                                + ' a left border or indent results in no terminal condition')\n            }\n            // todo[spec] TEMP HACK: the min length was reduced to 1 to support the\n            //  interjection container hack. When the hack is no longer needed,\n            //  what should the min be? Why not allow 1?\n            /*\n            if (this.topBorderMinLength < 1) {\n                throw new Error('topBorderMinLength too low')\n            }\n            */\n        }\n\n        if (this.leftBorder) {\n            if (!this.leftPadding) {\n                throw new Error('invalid container style: leftPadding must be specified for left border')\n            }\n        } else if (this.leftPadding) {\n            throw new Error('invalid container style: leftPadding only makes sense if there is a left border')\n        }\n\n        if (this.righter && !this.topBorder) {\n            throw new Error('invalid container style: righter only support with top border')\n        }\n\n        if (this.hangingIndent !== 'no') {\n            if (this.topBorder !== null || this.leftBorder !== null || this.bottomBorder) {\n                throw new Error('invalid container style: hanging indent containers cannot have any borders')\n            }\n\n            const noMaterialMarker =\n                this.marker === undefined ||\n                this.marker.test('') ||\n                this.marker.test(' ') ||\n                this.marker.test('\\t')\n\n            if (this.hangingIndent === 'marker') {\n                if (noMaterialMarker) {\n                    throw new Error('invalid container style: hangingIndent is \\'marker\\' but no valid marker is defined')\n                }\n            } else if (this.hangingIndent === 'auto') {\n                //\n            } else if (!(this.hangingIndent > 1)) {\n                throw new Error('invalid container style: invalid hangingIndent declaration')\n            }\n\n            if (this.canInterruptParagraph && noMaterialMarker) {\n                throw new Error('invalid container style: unmarked hanging indent containers cannot interrupt')\n            }\n        }\n\n        if (this._irNode === undefined) {\n            throw new Error('invalid container style: target irNode node not defined')\n        }\n\n        if (this._irNode.type === undefined) {\n            throw new Error('invalid container style: target irNode node type not specified')\n        }\n\n        if (Object.values(this._irNode)\n                .filter(s => JSON.stringify(s).indexOf('body') > -1)\n                .length === 0) {\n            // the default rule for `body` if one is not made explicitly\n            this._irNode.body = new Expression(['body', 0])\n            console.debug(`${this.styleSheet.name} container style \"${this.name}\" does use the source 'body' value. It will be automatically written to the STIR body.`)\n        }\n\n        this.continues = sourceContinuesFunc()\n    }\n\n    /**\n     * RETURN CASES:\n     *  - NO TOP BORDER, NO HEADER\n     *    - \"open\" IR Node with continues method\n     *    - endLine === curLine\n     *    - endLine PARTIALLY consumed\n     *  - NO TOP BORDER, WITH HEADER\n     *    - \"open\" IR Node with continues method\n     *    - endLine >= curLine (depends on how many lines header consumed)\n     *    - endLine FULLY consumed (unless we decide to support partial width header)\n     *  - TOP BORDER, NO HEADER\n     *    - \"open\" IR Node with continues method\n     *    - endLine === curLine\n     *    - endLine FULLY consumed\n     *  - TOP BORDER, WITH HEADER\n     *    - \"open\" IR Node with continues method\n     *    - endLine > curLine\n     *    - endLine FULLY consumed (unless we decide to support partial width header)\n     *  - LITERAL CONTENT MODEL\n     *    - \"closed\" IR Node. NO continues method\n     *    - endLine > curLine\n     *\n     *  BOTTOM BORDER is handled by the continues method except in the case of\n     *  LITERAL CONTENT MODEL.\n     */\n    parse (firstLine: Line, fromBackLine: Line | null, lookahead = false): ParseEffects | null {\n        //todo[test] add tests to verify the rules defined in the docs, including:\n        //  - sloppiness and block indentation are mutually exclusive\n        //    (the code subtly enforces this below, but for efficiency there aren't\n        //    any explicit assertions. This applies to chunk styles as well.\n        //  - (see the indentation vs sloppiness doc as well as others regarding\n        //    whitespace and container structure)\n\n        const src = firstLine.src\n        let endLine: Line = firstLine\n\n        // uncomment and use this line to trigger the debugger at a certain line\n        //if (src.startsWith('   ```\\n', pf.curOffset)) debugger\n\n        // indent will be zero if there is slop (which was already parsed by\n        // BlockTreeParser) because they are mutually exclusive\n        let indent\n        if (this.mmIndentMin !== -1) {\n            indent = firstLine.parseSpaces(this.mmIndentMax)\n            if (indent < this.mmIndentMin) {\n                return null\n            }\n        } else {\n            indent = firstLine.parseSpaces()\n            if (indent === 0 && this.indent === 'yes') {\n                return null\n            }\n            if (indent > 0 && this.indent === 'no') {\n                return null\n            }\n        }\n\n        // sloppiness of successive container lines is governed by\n        // rules, implemented here:\n        let successiveSloppiness\n        if (this.leftBorder) {\n            // for a left border, the stylesheet's sloppiness\n            // applies to each line, e.g.:\n            //   > this is\n            // > a sloppy\n            //  > blockquote\n            successiveSloppiness = this.styleSheet.sloppyMargin\n        } else if (indent > 0 || this.hangingIndent !== 'no') {\n            // indent and sloppiness are mutually exclusive\n            successiveSloppiness = 0\n        } else {\n            // sloppiness is limited to the sloppiness of the opening line\n            successiveSloppiness = firstLine.pContainerSlop\n        }\n\n        let topBorderChar: string | undefined\n        let topLength = 0\n        let leftBorderChar: string | undefined\n        let bottomBorderChar: string | undefined\n        let marker: string | undefined\n        let hangingIndent = 0\n        let padding: boolean | undefined\n\n        let markerMatch: RegExpMatchArray | null = null\n        let righterMatch: RegExpMatchArray | null = null\n\n        // TOP BORDER / LEFT BORDER\n        // if opening line has top border, left border starts on\n        // next line, so only one or the other can occur here.\n        if (this.topBorder) {\n            // todo[spec] header inset within topBorder:\n            //   The rules:\n            //    - inset must be separated by a space on either side\n            //    - if the inset text contains the topBorderChar, it\n            //      must either NOT exceed two in a row OR not follow\n            //      a space. This avoids ambiguity.\n            for (const c of this.topBorder) {\n                topLength = firstLine.parseChars(c)\n                if (topLength > 0) {\n                    if (topLength < this.topBorderMinLength) {\n                        return null\n                    }\n                    if (topLength > this.topBorderMaxLength) {\n                        return null\n                    }\n                    topBorderChar = c\n                    break\n                }\n            }\n            if (topBorderChar === undefined) {\n                return null\n            }\n\n            if (this.righter) {\n                this.righter.lastIndex = firstLine.ptr\n                righterMatch = this.righter.exec(src)\n                if (!righterMatch) {\n                    console.debug('ABORT: righterMatch failed')\n                    return null\n                }\n\n                // todo[spec] shouldn't this either be ignored (see notes/docs for ChunkStyles)\n                //    OR just fail the top border match as opposed to hard error like this?\n                if (righterMatch.index !== firstLine.ptr) {\n                    // Ensures content between top border and righter is not unintentionally dropped. Styles\n                    //  that want to ignore non-matching content should write their regexp accordingly.\n                    throw new Error('righter pattern failed to match match all content after top border.')\n                }\n                firstLine.ptr += righterMatch[0].length\n            }\n\n            // ==== MATCH CERTAINTY =====\n            if (lookahead) {\n                return {}\n            }\n            console.debug(`parse Container: ${this.name}  topBorder match: ${JSON.stringify(topBorderChar.repeat(topLength))}` +\n                          `  righterMatch: ${JSON.stringify(righterMatch)}`)\n            console.group()\n\n            if (this.leftBorder) {\n                leftBorderChar = this.leftBorder\n                switch (this.leftPadding) {\n                    case 'yes':\n                        padding = true\n                        break\n                    case 'no':\n                        padding = false\n                        break\n                    case 'per first line':\n                        //todo[padding, fwd-parsing] TEMP HACK: cur line is top\n                        //  border, we need to fwd-parse at least one body line\n                        padding = true\n                        break\n                    case 'sloppy':\n                        firstLine.parseSpaces(1)\n                        break\n                    default:\n                        throw new Error('invalid style declaration')\n                }\n            }\n\n            switch (this.bottomBorder) {\n                case undefined:\n                    bottomBorderChar = topBorderChar\n                    break\n                case null:\n                    bottomBorderChar = undefined\n                    break\n                default:\n                    bottomBorderChar = this.bottomBorder\n            }\n\n            if (!firstLine.remainingIsBlank()) {\n                // Ensures content is not unintentionally dropped. Styles\n                //  that want to ignore non-matching content should write their regexp accordingly.\n                throw new Error('top border / right pattern failed to match match all content after top border.')\n                // todo[errors] Perhaps we should do what DocUtils does?\n                //    see: http://rst.ninjs.org/#CmxpbmUgMQogIGxpbmUgMgogbGluZSAzCgoKaGVhZGluZyAxCj09PT09CgpoZWFkaW5nIDIKPT09PT09PT09PQoKPT09PT09PT09CmhlYWRpbmcgMwo9PT09PQoKPT09PT09PT09CmhlYWRpbmcgNAptdWx0aWxpbmUKPT09PT0KCnRoZSBlbmQuCgoKCg==\n                // todo[errors] we could have a \"strict mode\" like Handlebars: https://handlebarsjs.com/api-reference/compilation.html#handlebars-compile-template-options\n            }\n\n        } else if (this.leftBorder) {\n            leftBorderChar = src.charAt(firstLine.ptr++)\n            //todo[spec] change this to support any of a set of chars defined in the style\n            //  as we already do for top and bottom border.\n            if (leftBorderChar !== this.leftBorder) return null\n\n            switch (this.leftPadding) {\n                case 'yes':\n                    if (firstLine.parseSpaces(1) === 0) {\n                        return null\n                    }\n                    padding = true\n                    break\n                case 'no':\n                    padding = false\n                    break\n                case 'per first line':\n                    padding = firstLine.parseSpaces(1) === 1\n                    break\n                case 'sloppy':\n                    firstLine.parseSpaces(1)\n                    // padding remains undefined, meaning it can be sloppy (optional on a per-line basis)\n                    break\n                default:\n                    throw new Error('invalid style declaration')\n            }\n\n            // ==== MATCH CERTAINTY =====\n            if (lookahead) {\n                return {}\n            }\n            console.debug(`parse Container: ${this.name}  leftBorder match: ${JSON.stringify(this.leftBorder)}}`)\n            console.group()\n        } else {\n            // must be some kind of indent container\n            if (this.hangingIndent === 'no') {\n                // simple indent demarcated container\n\n                // ==== MATCH CERTAINTY =====\n                if (lookahead) {\n                    return {}\n                }\n                console.debug(`parse Container: ${this.name}  indent match: ${indent}`)\n                console.group()\n            } else {\n                // hanging indent container\n\n                let markerLen = 0\n                if (this.marker !== undefined) {\n                    this.marker.lastIndex = firstLine.ptr\n                    markerMatch = this.marker.exec(src)\n                    if (markerMatch === null) {\n                        return null\n                    }\n                    markerLen = markerMatch![0].length\n                    // marker must be followed by a space or newline\n                    if (src[firstLine.ptr + markerLen] !== ' '\n                        && src[firstLine.ptr + markerLen] !== '\\t'\n                        && src[firstLine.ptr + markerLen] !== '\\n') {\n                        return null\n                    }\n                    if (!lookahead) {\n                        firstLine.ptr += markerLen\n                        if (this.hangingIndent === 'marker') {\n                            //! same as ListStyle (with the exception of Markdown quirks which we'll need to\n                            //   make non-default before implementing ListStyle as hanging-marker\n                            hangingIndent = firstLine.pContainerSlop + indent + markerLen + firstLine.parseSpaces()\n                            console.debug(`parse Container: ${this.name}  hanging marker match: ${markerMatch}  indent: ${hangingIndent}`)\n                            console.group()\n                        } else if (this.hangingIndent !== 'auto') {\n                            firstLine.parseSpaces()\n                            hangingIndent = firstLine.pContainerSlop + indent + this.hangingIndent\n                            console.debug(`parse Container: ${this.name}  hanging marker match: ${markerMatch}  hanging indent match: ${hangingIndent}`)\n                            console.group()\n                        }\n                    }\n                }\n\n                // look at next non-empty line to figure out hanging indent\n                // if it can't be determined from the first line OR if\n                // there must be at least one hanging indent line for a match.\n                if (hangingIndent === 0 || this.hangingIndentRequired) {\n                    let nextLine = firstLine.nextInContainer\n                    // skip blank lines\n                    while (nextLine !== null && nextLine.remainingIsBlank()) {\n                        nextLine = nextLine.nextInContainer\n                    }\n                    if (nextLine === null) {\n                        //! Unmarked hanging indent requires at least one following,\n                        //  indented line. Otherwise it's just a regular paragraph/chunk.\n                        if (markerLen === 0 || this.hangingIndentRequired) {\n                            return null\n                        }\n                        // we have a single line marked hanging indent\n                        if (lookahead) {\n                            return {}\n                        }\n                        // This value doesn't matter as we've hit end of\n                        // container. Set high to make any bug obvious.\n                        hangingIndent = 999\n                    } else {\n                        // line lookahead to determine next line indent\n                        const cp = nextLine.checkpoint()\n                        let nextIndent = nextLine.parseSpaces()\n                        cp.restore()\n                        if (this.hangingIndent === 'auto') {\n                            if (nextIndent < firstLine.pContainerSlop + indent + 1) {\n                                if (markerLen === 0 || this.hangingIndentRequired) {\n                                    return null\n                                }\n                                // We definitely have a single line marked\n                                // hanging indent. Set this value to >1 so that\n                                // it doesn't consume the non indented lines\n                                // that immediately follow. We'll set it high\n                                // to make any bug obvious.\n                                nextIndent = 999\n                            }\n                            if (lookahead) {\n                                return {}\n                            }\n                            hangingIndent = nextIndent\n                        } else {\n                            hangingIndent = firstLine.pContainerSlop + indent + (this.hangingIndent as number)\n                            if (nextIndent < hangingIndent || this.hangingIndentRequired) {\n                                return null\n                            }\n                            if (lookahead) {\n                                return {}\n                            }\n                        }\n                    }\n                    firstLine.parseSpaces()\n                    console.debug(`parse Container: ${this.name}  hanging indent match: ${hangingIndent}${this.hangingIndent === 'auto' ? '(auto)' : ''}`)\n                    console.group()\n                }\n            }\n        }\n\n        console.debug(`max sloppiness:${successiveSloppiness}  indent:${indent}  padding:${padding}`)\n\n        //todo[spec] if there is a headerPattern, match against it.\n        //  apply header property expressions\n\n        const ptBlock = new Block(this)\n        ptBlock.style = this\n        ptBlock.sloppiness = successiveSloppiness\n        ptBlock.indent = hangingIndent || indent\n        ptBlock.padding = padding\n        if (topBorderChar) {\n            ptBlock.topBorderChar = topBorderChar\n            ptBlock.bottomBorderChar = bottomBorderChar\n            ptBlock.topBorderLength = topLength\n        }\n        ptBlock.leftBorderChar = leftBorderChar\n        ptBlock.continues = this.continues\n        ptBlock.lineStart = firstLine.num\n\n        //the type should be overwritten by expression.\n        // todo[spec] what should the default be? it should be the base type IR for containers, else just 'block'\n        //    whatever it is, it must be in the STIR dictionary, with default rendering semantics spelled out.\n        const irBlock = new ir.Block('container')\n        irBlock.source = ptBlock\n\n        let bodyMatch: string[] | null = null\n        // if a block container's body is the provenance of BlockTreeParser...\n        if (this.body === 'BLOCKS' || this.body === 'INLINE_OR_BLOCKS') {\n            // BlockTreeParser will handle parsing nested block content\n            // as well as recognizing block termination including\n            // any bottom border\n            console.debug(`body: (will be added to STIR container body as we go)`)\n\n            // todo[spec] given the way irNode/ptNamedValue expressions are evaluated (keyed by\n            //    irNode/ptNamedValue field, NOT by input) it makes sense to defer all expression\n            //    evaluation to when the container is closed and when we have\n            //    ALL the inputs, from top, left, righter, bottom border etc...\n            //    - We can implement this by moving some of the logic below to\n            //      a separate method that only is called on container close,\n            //      which happens immediately for non block containers, and later\n            //      when BlockTreeParser detects the container close for block containers.\n            //    - Or we could move that logic into a \"close\" closure for block\n            //      containers, which would nicely hold references to the inputs\n            //      (e.g. headMatch), attach that closure to the irNode.source (just\n            //      as we do with the continues method), so that BlockTreeParser can call it.\n            // todo![composition] we MUST do as described above for two reasons:\n            //    - bottom border can contain info\n            //    - irNode/ptNamedValue expressions can refer to Block elements\n        } else { //else body is RawText | RegExp\n            let body: string | undefined\n            [body, endLine] = this.extractRawBody(firstLine, irBlock,\n                leftBorderChar === undefined && bottomBorderChar === undefined)\n            console.debug(`body: ${JSON.stringify(body)}`)\n            if (body) {\n                if (this.body === 'RAW' || this.body === 'RAW_NL') {\n                    bodyMatch = [body]\n                } else { // RegExp\n                    this.body.lastIndex = 0\n                    bodyMatch = this.body.exec(body)\n                }\n            }\n            console.debug(`bodyMatch: ${JSON.stringify(bodyMatch)}`)\n        }\n        ptBlock.lineEnd = endLine.num\n\n        if (this._irNode !== undefined) {\n            evalIRBlockPropertyExpr(this._irNode, irBlock, null, null, bodyMatch, markerMatch, righterMatch)\n        }\n\n        let ptNamedValue: NamedValue | undefined = undefined\n        if (this._ptNamedValue !== undefined) {\n            ptNamedValue = evalPTNamedValueExpr(this._ptNamedValue, irBlock,\n                null, null, bodyMatch, markerMatch, righterMatch)\n        }\n\n        console.groupEnd()\n        return {irBlock: irBlock, ptNamedValue: ptNamedValue, endLine: endLine}\n    }\n\n    // faster and simpler to extract raw container content here and now than leaving it to BlockTreeParser\n    extractRawBody (line: Line, irBlock: ir.Block, isIndentContainer: boolean): [text: string, endLine: Line] {\n        line.pContainer = new ParseContainer(irBlock, line.pContainer)\n        console.debug(`extracting raw content for ${line.pContainer}`)\n        console.group()\n\n        let body: string\n        let endLine: Line\n\n        //todo[perf] interestingly fenced code block in the root container\n        //  DOESN'T get to take advantage of the optimized version of line.fwdBlock()\n        //  because even though the content has no left margin and thus could be\n        //  extracted in one go rather than line-by-line, it is technically not at\n        //  root level (WE JUST ADDED IT ABOVE IN THE FIRST LINE OF THIS METHOD)\n        //  We could change the logic to recognize any content extraction\n        //  situation where there is no left margin (i.e. either root container, or\n        //  a container with ZERO left margin).\n\n        if (line.ptr === line.EOL) {\n            // path taken when first line is a top border\n\n            const nextLine = line.nextInContainer\n            if (nextLine !== null && nextLine.pContainerBottomBorder === null) {\n                [body, endLine] = nextLine.fwdBlock(false)\n            } else {\n                // when we have a top border that opens a container\n                // but it ends without a single line of content. See\n                // *Source Container Content Model* spec.\n                //\n                // todo[errors, strict] We could decide that a strict style would\n                //  not allow this and return an error if this occurs for a strict\n                //  style.\n                console.groupEnd()\n                return ['', line]\n                //todo[spec, rst] how does this jive with RST's retroactive nesting?\n                //  - the way to do RST's logic is to parse whitespace up front,\n                //    way ahead until it ends, and then backtrack on the interpretation.\n                //  .\n                //                BUT FIRST\n                //    really look at RST's behavior. Is it really Human?\n            }\n        } else {\n            [body, endLine] = line.fwdBlock(false)\n        }\n\n        if (isIndentContainer) {\n            //! If the raw content is not bound by borders, it is thus only delineated by\n            //  indentation. As such the content continues up to but not including the first\n            //  blank line. Remember, for an indent-only container, there is no way to\n            //  *visually* distinguish between trailing blank lines belonging to the container\n            //  vs belonging to the parent container. PTSS always assume the later, here\n            //  in this case as well as in others such as list items. If raw content must\n            //  include trailing blanks lines, then use a style with a left or bottom border.\n            //\n            // todo[fwd-parsing] TEMP HACK: if we properly fwd-parsed the\n            //  extent of the indent container, we wouldn't do the hack below.\n            //  But since extra blank lines are skipped anyway, this hack HAS\n            //  ONLY ONE CONSEQUENCE: the endLine will be wrong, but it will\n            //  only result in the source-pos meta data being wrong, and not in\n            //  a horrible way (it will just include the blank lines). Should\n            //  fix this, but low priority.\n            if (this.body === 'RAW') {\n                body = body.replace(reIndentContainerTrailHack, '')\n            } else {\n                body = body.replace(reIndentContainerTrailHack, '\\n')\n            }\n        } else {\n            // Border containers support trailing blank lines. So we only\n            // strip the final newline. We must use this conditional to cover\n            // the rare case there is no trailing newline because the last line\n            // terminated with an EOF rather than EOL.\n\n            if (this.body === 'RAW') {\n                if (body.at(-1) === '\\n') {\n                    body = body.slice(0, -1)\n                }\n            } else {\n                if (body.at(-1) !== '\\n') {\n                    body += '\\n'\n                }\n            }\n        }\n\n        console.groupEnd()\n        return [body, endLine]\n    }\n\n    // todo[spec] there maybe should be an explicit document style, which in most cases will\n    //   always match (as the hardcoded one below does), but imagine a document style that\n    //   supports optional or required front matter, or BOM chars, etc.\n    static newRootContainer (rootIRElemType: string, ptss: Stylesheet): ir.Block {\n        const ptRoot = new Block(ptss.rootContainerStyle)\n        ptRoot.continues = () => true\n\n        const irRoot = new ir.Block(rootIRElemType) //todo[spec] should be getting type from the style def?\n        irRoot.source = ptRoot\n        return irRoot\n    }\n\n}\n\nfunction sourceContinuesFunc (): (line: Line) => boolean {\n    return function (this: Block, line: Line): boolean {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const ptBlock = this\n        const style = ptBlock.style as ContainerStyle\n        const indent = ptBlock.indent\n\n        // line.remainingIsBlank() is super efficient, as is the\n        // logic within this case, so we do this case first.\n        if (line.remainingIsBlank()) {\n            if (style.leftBorder !== null) {\n                console.debug(`container closed on previous non-blank line \u2B05\uFE0F `)\n                return false\n            }\n            // we only need to bother parsing out the\n            // indent for RAW content\n            if (style.body === 'RAW' || style.body === 'RAW_NL') {\n                line.parseSpaces(indent)\n            }\n            return true\n        }\n\n        const src = line.src\n        const cp = line.checkpoint()\n\n        // slop and indentation are mutually exclusive\n        if (indent > 0) {\n            // an outdent terminates the container\n            const spaces = line.parseSpaces(indent)\n            if (spaces < indent) {\n                console.debug(`container closed on previous line: reached end of indent \u2B05\uFE0F `)\n                cp.restore()\n                return false\n            }\n        } else if (ptBlock.sloppiness !== undefined && ptBlock.sloppiness > 0) {\n            // Content between fences is stripped of slop up to the slop of the\n            // top fence, but not more, even if it is less than the amount of\n            // slop allowed by the stylesheet.\n            line.parseSlop(ptBlock.sloppiness, style.body !== 'RAW_NL')\n        }\n\n        const bottomBorderCharSet = ptBlock.bottomBorderChar as string\n        if (bottomBorderCharSet) {\n            const bbcp = line.checkpoint()\n\n            // BEGIN Markdown sloppy fenced container logic hack\n            //   Unlike the normal slop logic for the content between the top\n            //   and bottom fences (see above), the bottom fence can have more\n            //   slop than the top fence, up to the max for the stylesheet.\n            //   todo[spec]: I think this should only be MARKDOWN-MODE-ONLY\n            //     behavior. OTOH, I don't think non-Markdown stylesheets will\n            //     allow slop at all. TBD.\n            if (indent === 0) {\n                // because we already parsed slop up to the top fence's slop,\n                // we only need to parse any additional spaces up to the max\n                if (line.pContainerSlop < style.styleSheet.sloppyMargin) {\n                    line.parseSpaces(style.styleSheet.sloppyMargin - line.pContainerSlop, true)\n                }\n            }\n            // END Markdown logic hack\n\n            for (const c of bottomBorderCharSet) {\n                const len = line.parseChars(c)\n                if (len > 0) {\n                    if (len >= (ptBlock.topBorderLength as number) && line.remainingIsBlank()) {\n                        console.debug(`container closes on this line: bottom border encountered \uD83C\uDD71 `)\n                        // todo[arch] line.pContainerBottomBorder is supposed to\n                        //   contain content from the bottom border, supporting\n                        //   multi-line bottom borders, so styles that have\n                        //   content within the borders can extract and map the\n                        //   content via ptss.expressions.\n                        line.pContainerBottomBorder = []\n                        return true\n                    }\n                    break\n                }\n            }\n            bbcp.restore()\n        }\n\n        if (style.leftBorder) {\n            if (src.charAt(line.ptr) !== ptBlock.leftBorderChar) {\n                cp.restore()\n                console.debug(`container closed on previous line: reached end of left border \u23F9 `)\n                return false\n            }\n            line.ptr++\n\n            // empty content ALWAYS matches.\n            if (line.remainingIsBlank()) {\n                return true\n            }\n\n            if (ptBlock.padding === undefined) {\n                line.parseSpaces(1)\n            } else if (ptBlock.padding) {\n                if (line.parseSpaces(1) === 0) {\n                    console.debug(`container closed on previous line: MISSING CONTAINER LEFT PADDING \u23F9 `)\n                    cp.restore()\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n}\n\n", "import {BaseStyleType, ElementalBlockStyle, BlockStyleType, ParseEffects, RE_MARKDOWN_INDENT} from './elementalBlockStyle.js'\nimport {Block} from './block.js'\nimport * as ir from '../../stir/index.js'\nimport type {Line} from '../line.js'\nimport type {Stylesheet} from './stylesheet.js'\n\ntype ListParseEffects = ParseEffects & { irNewList: ir.Block | undefined }\n\nexport class ListStyle implements ElementalBlockStyle {\n    name: string\n    baseType: BlockStyleType = BaseStyleType.List\n\n    public indent: 'yes' | 'no' | 'optional' = 'no'\n\n    unorderedMarkers = ''\n    orderedMarkers = ''\n\n    orderedMarkerPattern = /$/\n\n    honorStartNum = true\n\n    // This is set to true, because sometimes a list can.\n    // the actual parse logic may impose more restrictive logic\n    // (e.g. only if the list item number is 1).\n    canInterruptParagraph = true\n    canInterruptParaWithinList = true\n    canInterruptLazy = true\n\n    readonly consumesBackChunk = false\n\n    styleSheet: Stylesheet\n\n    constructor (name: string, styleSheet: Stylesheet) {\n        this.name = name\n        this.styleSheet = styleSheet\n    }\n\n    /* one instance of continues func to be shared by all occurrences of this style*/\n    public continues = listItemContinuesFunc()\n\n    initAndValidate (): void {\n        const match = RE_MARKDOWN_INDENT.exec(this.indent)\n        if (match) {\n            throw Error(`markdown mode indent is not supported for list items`)\n        }\n        if (this.canInterruptParagraph && !this.canInterruptParaWithinList) {\n            throw Error(`if canInterruptParagraph is set true, canInterruptParaWithinList must also be true`)\n        }\n        this.orderedMarkerPattern = new RegExp('(\\\\d{1,9})([' + this.orderedMarkers + '])', 'y')\n        return\n    }\n\n\n    parse (firstLine: Line, fromBackLine: Line | null, lookahead = false)\n        : ListParseEffects | null {\n\n        const src = firstLine.src\n\n        // indent will be zero if there is slop (which would be already parsed out)\n        const indent = firstLine.parseSpaces()\n        if (indent === 0 && this.indent === 'yes') {\n            return null\n        }\n        if (indent > 0 && this.indent === 'no') {\n            return null\n        }\n\n        let listOrdered: boolean | undefined\n        let bulletChar: string | undefined\n        let delimiter: string | undefined\n        let startNum: number | undefined\n\n        let markerLen = 0\n        let paddingLen = 0\n        let lineContentBlank = false\n\n        const checkpoint = firstLine.checkpoint()\n        /////////// try unordered pattern ////////////\n        // reBulletListMarker = /([*+-])([ ]+|$)/my\n        for (const c of this.unorderedMarkers) {\n            if (src[firstLine.ptr] === c) {\n                bulletChar = c\n                firstLine.ptr++\n                break\n            }\n        }\n        if (bulletChar) {\n            markerLen = bulletChar.length\n            if (firstLine.remainingIsBlank()) {\n                // if first line of item is blank, it is normal for the line\n                // to end on the marker with no trailing space, in which case\n                // we assume padding of 1.\n                // todo[spec, padding] Is \"assume padding of 1\" this a Markdown Mode\n                //   only rule? Non-Markdown could parse ahead to the next\n                //   line to determine the actual padding.\n                lineContentBlank = true\n                paddingLen = 1\n                listOrdered = false\n            } else {\n                //todo[spec, markdown] Markdown rule: If the spaces is > 4, only parse one\n                //  space as padding. This allows an Indented Code Block to occur\n                //  on the first line of an item.\n                //  .\n                //  How to generalize?\n                //  - Markdown Mode?\n                //  - a max padding setting on the style declaration?\n                //  - ??\n                paddingLen = firstLine.parseSpaces(4, true)\n                if (paddingLen === 0) {\n                    //todo[perf] there's a bit of redundant re-parsing of the same\n                    //  spaces as we make two calls to parseSpaces as well\n                    //  as the earlier parsing to see if we have a blank line. Can\n                    //  we combine this into a single parseSpaces,\n                    //  e.g. with `min` and `checkForBlank` args?\n                    paddingLen = firstLine.parseSpaces(1)\n                    if (paddingLen === 1) {\n                        listOrdered = false\n                    }\n                } else {\n                    listOrdered = false\n                }\n            }\n        }\n\n        /////////// try ordered pattern ////////////\n        // reOrderedListMarker = /(\\d{1,9})([.)])([ ]+|$)/my\n        if (listOrdered === undefined) {\n            checkpoint.restore()\n            this.orderedMarkerPattern.lastIndex = firstLine.ptr\n            const match = this.orderedMarkerPattern.exec(src)\n            if (match) {\n                startNum = parseInt(match[1])\n                delimiter = match[2]\n                markerLen = match[1].length + delimiter.length\n                firstLine.ptr += markerLen\n                if (firstLine.remainingIsBlank()) {\n                    lineContentBlank = true\n                    paddingLen = 1\n                    listOrdered = true\n                } else {\n                    paddingLen = firstLine.parseSpaces(4, true)\n                    if (paddingLen === 0) {\n                        paddingLen = firstLine.parseSpaces(1)\n                        if (paddingLen === 1) {\n                            listOrdered = true\n                        }\n                    } else {\n                        listOrdered = true\n                    }\n\n                }\n            }\n        }\n\n        if (listOrdered === undefined) {\n            return null\n        }\n\n        //  CommonMark rules for list paragraph interruption:\n        //  Only a list starting at 1 can interrupt a paragraph. This\n        //  restriction only applies if the paragraph in same container\n        //  (i.e. not one lazily continuing from another)\n        // todo[spec, markdown] this should be decided by the stylesheet.\n        //    Also, might be better handled/generalized by my adjacency control idea.\n        if (fromBackLine !== null) {\n            if ((startNum && startNum !== 1)\n                || lineContentBlank) {\n                return null\n            }\n        }\n\n        console.debug(`parse ListItem: ${listOrdered ? 'ordered' : 'unordered'}`)\n        console.group()\n\n        // ==== MATCH CERTAINTY =====\n        if (lookahead) {\n            console.groupEnd()\n            return {irNewList: undefined}\n        }\n\n        if (lineContentBlank) {\n            console.debug('first line is blank')\n        }\n\n        //!  With this logic we are including slop rather than\n        //   ignoring it as we normally do. This is because in this one\n        //   case, CommonMark doesn't treat slop as slop, and actually\n        //   goes for alignment (except not really, since when the list\n        //   is within a sloppy blockquote, alignment goes out the window!\n        const contentIndent = indent + firstLine.pContainerSlop + markerLen + paddingLen\n        console.debug(`contentIndent:${contentIndent} offset:${firstLine.ptr}`)\n\n        const ptListItem = new Block(this)\n        ptListItem.style = this\n        ptListItem.lineStart = firstLine.num\n        ptListItem.lineEnd = firstLine.num\n        ptListItem.indent = indent\n        ptListItem.listContentIndent = contentIndent\n        ptListItem.continues = this.continues\n\n        //todo[spec, markdown] Markdown Mode rule that list item can only start with\n        //  one blank line. This is a hack impl for now. See note on field\n        if (lineContentBlank) {\n            ptListItem.endItemIfNextLineBlank = true\n        }\n\n        const irListItem = new ir.Block('list_item')\n        irListItem.source = ptListItem\n\n        let newList: ir.Block | undefined\n        const curList = firstLine.pContainer.openList\n        if (!curList\n            || listOrdered !== curList.listOrdered\n            || delimiter !== (curList.source as Block).listDelimiter\n            || bulletChar !== (curList.source as Block).listBulletChar) {\n\n            const ptList = new Block(this)\n            ptList.listBulletChar = bulletChar\n            ptList.listDelimiter = delimiter\n            ptList.lineStart = firstLine.num\n            ptList.lineEnd = firstLine.num\n\n            newList = new ir.Block('list')\n            newList.source = ptList\n            newList.listOrdered = listOrdered\n            if (listOrdered) {\n                newList.listStyle = 'decimal'\n                if (this.honorStartNum) {\n                    newList.listStartNum = startNum\n                }\n            }\n\n            //todo[spec, markdown] HACK this and the code that sets it to false elsewhere is\n            //  CommonMark specific. Can it be moved into a stylesheet setting?\n            //  A property expression?\n            newList.hints['commonmark.list.tight'] = true\n\n            console.debug(`starting new List: ordered:${(listOrdered)} bullet:${(bulletChar)} delim:${(delimiter)} start:${(startNum)}`)\n        }\n\n        console.groupEnd()\n        return {irBlock: irListItem, ptNamedValue: undefined, endLine: firstLine, irNewList: newList}\n    }\n}\n\nfunction listItemContinuesFunc (): (line: Line) => boolean {\n    return function (this: Block, line: Line): boolean {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const ptBlock = this\n        if (line.remainingIsBlank()) {\n            return !ptBlock.endItemIfNextLineBlank\n        } else {\n            const cp = line.checkpoint()\n            const contentIndent = ptBlock.listContentIndent as number\n            const indent = line.parseSpaces(contentIndent)\n            if (indent !== contentIndent) {\n                cp.restore()\n                return false\n            }\n            return true\n        }\n    }\n}\n", "import {BaseStyleType, ElementalBlockStyle, BlockStyleType, ParseEffects, RE_MARKDOWN_INDENT} from './elementalBlockStyle.js'\nimport {Block} from './block.js'\nimport {Expression, INLINE_PARSE_FLAG} from './expression.js'\nimport type {Stylesheet} from './stylesheet.js'\nimport * as ir from '../../stir/index.js'\nimport type {Line} from '../line.js'\nimport {stringifyTruncate, stringifyReplacerForDebugLogging} from '../debugUtil.js'\n\n\nexport class TableStyle implements ElementalBlockStyle {\n    name: string\n    baseType: BlockStyleType = BaseStyleType.Table\n\n    public indent: 'yes' | 'no' | 'optional' = 'no'\n\n    public tableType: 'sv' | 'ag' = 'ag'\n\n    ///// SV table structure (TBD some fields may be shared with AG table) /////\n    //todo![spec] consider making this SVTableStyle.ts, sep from AGTableStyle.ts,\n    //    both a subclass of TableStyle.\n    //    This is an internal breakdown, doesn't impact PTSS style settings,\n    //    as the tableType value can decide which class to instantiate.\n\n    //todo![spec, arch] possible AGTablesStyle.ts strategy:\n    //  - See notes under PTSS-REF/tables_AG.html#cell-content-model\n    //  - If the AG Table cell spans multiple lines, collect it into\n    //    a single `\\n` delimited string.\n    //  - Similarly to how we tag the SV table cell content with `INLINE_PARSE_FLAG`,\n    //    tag the AG table cell with `NESTED_BLOCK_SEQUENCE_PARSE_FLAG`. Later\n    //    we will walk the tree and for each cell encountered with this flag we\n    //    will call textplain.Parser.parse with the cell as the ir.block serving\n    //    as the root container for that call.\n    //  - We *could* do away with the deferred parsing for both inline and nexted\n    //    block parsing simply by every place where we set one of the above flags\n    //    just make the inline or block parse calls right then and there.\n\n    public heading: 'none' | 'first row' | 'delimited, optional' | 'delimited, required' = 'none'\n    public headingDelim?: string //e.g. '-'\n    public delimIntersection?: string // e.g. '|-+', defaults to columnsDelim\n\n    // todo![spec]: consistent border prop semantics with containerStyle?\n\n    // if non-null, the top border will be required\n    public topBorder?: string\n\n    // bottomBorder:\n    // - null means: *there is no bottom border*.\n    // - undefined means: must match top border\n    // - otherwise an string representing the set of characters allowed for the border.\n    public bottomBorder: string | null | undefined = undefined\n\n    public sideBorder?: string //e.g. '|'\n    public sideBorderLeftRule: 'always' | 'never' | 'optional' | 'lazy' = 'optional'\n    public sideBorderRightRule: 'match' | 'never' | 'lazy' = 'match'\n\n    public columnsDelim?: string //e.g. '|'\n    public columnsNumber: 'per head delim' | 'per first row' | 'per widest row' = 'per head delim'\n    public columnsAlignIndicator?: string //e.g. ':'\n\n    public bodyRowAtLeastOneMarker: 'yes' | 'no' = 'yes'\n    public bodyRowTooShort: 'as-is' | 'add-empty' /* | 'span last cell' */ = 'as-is'\n    public bodyRowTooLong: 'as-is' | 'truncate' /* | 'merge last cell' */ = 'as-is'\n\n    public cell: Expression | undefined\n\n    // if given, allows field values to be wrapped by the given pair of chars.\n    // When so wrapped, any special chars need not be escaped. If more than one\n    // quote char pair is given, use of one can allow the unescaped use of the\n    // other(s). For example, if:\n    //      columnsDelim  ,\n    //      escapeChar    /\n    //      quoteChars    \"\"''\u23A1\u23A6\n    // all of the following are equivalent:\n    //      'She said, \"Hi!\"'\n    //      \u23A1She said, \"Hi!\"\u23A6\n    //      She said\\, \\\"Hi!\\\"\n    // todo[spec] review\"\n    //   https://en.wikipedia.org/wiki/Comma-separated_values\n    //   https://en.wikipedia.org/wiki/Delimiter-separated_values\n    //   https://en.wikipedia.org/wiki/Tab-separated_values\n    public quoteCharPairs?: string\n\n    // todo![spec] to allow a stylesheet to achieve\n    //  backward GFM compatibility.\n    public gfmQuirks = false\n\n    canInterruptParagraph = true\n    canInterruptLazy = true\n\n    interruptibleBy: ElementalBlockStyle[] = []\n\n    readonly consumesBackChunk = false\n\n    styleSheet: Stylesheet\n\n    // property expressions\n    private _irNode?: { [key: string]: Expression }\n    private _ptNode?: { [key: string]: Expression }\n\n    //todo![spec] start with ^ ???\n\n    // instance copies so parse methods are reentrant\n    //   for parallel executing parser instances.\n    private RE_H_DELIM = new RegExp('')\n    private RE_INTERSECTION = new RegExp('')\n    //todo![spec] use style defined chars\n    //todo![spec] support different sep and right border\n    private RE_DATA = /(?:(?:(?:\\\\\\|)|[^|\\n])*)/y\n\n\n    constructor (name: string, styleSheet: Stylesheet) {\n        this.name = name\n        this.styleSheet = styleSheet\n    }\n\n    get irNode (): { [p: string]: Expression } {\n        if (this._irNode === undefined) {\n            this._irNode = {}\n        }\n        return this._irNode\n    }\n\n    get ptNode (): { [p: string]: Expression } {\n        if (this._ptNode === undefined) {\n            this._ptNode = {}\n        }\n        return this._ptNode\n    }\n\n    initAndValidate (): void {\n        // todo![adjacency] construction of this filter would be moved to\n        //   adjacency control logic?\n        this.interruptibleBy =\n            this.styleSheet.blockStyles\n                .filter(s => s.baseType !== BaseStyleType.Table)\n\n        const match = RE_MARKDOWN_INDENT.exec(this.indent)\n        if (match) {\n            throw new Error(`markdown mode indent is not supported for tables`)\n        }\n        if (this.tableType === 'sv') {\n            if (this.heading.startsWith('delimited')) {\n                if (this.headingDelim === undefined) {\n                    throw new Error(`headingDelim must be specified for heading type ${this.headingDelim}`)\n                }\n                if (this.columnsDelim === undefined) {\n                    throw new Error(`columnsDelim must be specified`)\n                }\n\n                let delimPattern = '[ \\\\t]*'\n                if (this.columnsAlignIndicator) {\n                    delimPattern += `(${this.columnsAlignIndicator})?`\n                }\n                // todo[test] need to escape some headingDelim choices, and add test cases accordingly\n                delimPattern += this.headingDelim + '+'\n                if (this.columnsAlignIndicator) {\n                    delimPattern += `(${this.columnsAlignIndicator})?`\n                }\n                delimPattern += '[ \\\\t]*'\n                this.RE_H_DELIM = RegExp(delimPattern, 'y')\n\n                let intersectionPattern = ''\n                if (this.delimIntersection === undefined) {\n                    intersectionPattern = this.columnsDelim\n                } else if (this.delimIntersection.length === 1) {\n                    intersectionPattern = this.delimIntersection\n                } else {\n                    intersectionPattern = '[' + this.delimIntersection + ']'\n                }\n                this.RE_INTERSECTION = new RegExp(intersectionPattern, 'y')\n            } else {\n                throw new Error(`table heading type \"${this.heading}\" not yet implemented`)\n            }\n            if (this.sideBorderLeftRule !== 'never' && !this.sideBorder) {\n                throw new Error(`side border is\"${this.sideBorderLeftRule}\" but sideBorder char(s) is not specified`)\n            }\n        } else {\n            throw new Error('AG tables not yet implemented')\n        }\n\n        if (this.topBorder || this.bottomBorder) {\n            throw new Error('table top/bottom border not yet implemented')\n        }\n    }\n\n    parse (firstLine: Line, fromBackLine: Line | null, lookahead = false): ParseEffects | null {\n        const src = firstLine.src\n\n        // uncomment and use this line to trigger the debugger at a certain line\n        //if (firstLine.srcLine().startsWith('   ```\\n') debugger\n\n        const delimLine = firstLine.nextInContainer\n        if (delimLine === null || delimLine.remainingIsBlank()) {\n            return null\n        }\n\n        // indent will be zero if there is slop (which would be already parsed out)\n        const tableIndent = firstLine.parseSpaces()\n        if (tableIndent === 0 && this.indent === 'yes') {\n            return null\n        }\n        if (tableIndent > 0 && this.indent === 'no') {\n            return null\n        }\n\n        const startOffset = firstLine.ptr\n        let lineIndent: number\n        let lineHasMarker = false\n\n        //! //////////    delimLine    //////////////\n        //  first fully parse delimLine (quicker fail-fast)\n        // todo![spec] can we replace most of this with a style-custom Regex?\n        //   finish this, then try on another branch to compare speed.\n\n        // todo![spec] ???? remove all the pre-recognition debug logging ????\n        console.debug(`parse SV Table: ${this.name}`)\n        console.group()\n        console.debug('====== head delim')\n        console.debug(delimLine.num, stringifyTruncate(delimLine.srcLine()))\n        console.debug(delimLine.toString())\n        // todo![perf] we've optimized parsing of slop by making the call for\n        //  the cur line once in BlockTreeParser. But now we are undermining\n        //  that by parsing slop in this forward parse, and then throwing that\n        //  away if it turns out not to be a table (which it will MOST OF THE\n        //  TIME.\n        //  .\n        //  It's even worse for parsing Indentation, as we don't have that\n        //  optimized at all, and it's done once per line per indent-supporting\n        //  style, + one more time per line when we forward parse the delim\n        //  row here.\n        // todo![fwd-parsing] to-do in ChunkStyle.ts discusses this.\n        const delimCheckpoint = delimLine.checkpoint()\n        delimLine.parseSlop(this.styleSheet.sloppyMargin, true)\n        lineIndent = delimLine.parseSpaces(tableIndent)\n        if (lineIndent != tableIndent) {\n            delimCheckpoint.restore()\n            console.debug('ABORT: delim line mismatch')\n            console.groupEnd()\n            return null\n        }\n        let leftBorder: 'yes' | 'no' | 'lazy' = 'no'\n        let rightBorder: 'yes' | 'no' | 'lazy' = 'no'\n        if (this.sideBorderLeftRule !== 'never') {\n            if (src.charAt(delimLine.ptr) === this.sideBorder) {\n                delimLine.ptr += 1\n                leftBorder = this.sideBorderLeftRule !== 'lazy' ? 'yes' : 'lazy'\n                lineHasMarker = true\n            } else {\n                switch (this.sideBorderLeftRule) {\n                    case 'always':\n                        delimCheckpoint.restore()\n                        console.debug('ABORT: delim line mismatch')\n                        console.groupEnd()\n                        return null\n                    case 'optional':\n                        leftBorder = 'no'\n                        break\n                    case 'lazy':\n                        leftBorder = 'lazy'\n                }\n            }\n        }\n        if (this.interruption(delimLine, lineHasMarker)) {\n            delimCheckpoint.restore()\n            console.debug('ABORT: delim line interruption')\n            console.groupEnd()\n            return null\n        }\n        if (this.sideBorderRightRule !== 'never') {\n            if (this.sideBorderRightRule === 'match') {\n                rightBorder = leftBorder\n            } else {\n                rightBorder = 'lazy'\n            }\n        }\n        console.debug(`side border: ${this.sideBorder}, left=${leftBorder}, right=${rightBorder}`)\n        this.RE_H_DELIM.lastIndex = delimLine.ptr\n        let match = this.RE_H_DELIM.exec(src)\n        console.debug('col 1 match:', JSON.stringify(match), this.RE_H_DELIM.lastIndex)\n        if (match === null) {\n            delimCheckpoint.restore()\n            console.debug('ABORT: delim line mismatch')\n            console.groupEnd()\n            return null\n        }\n        const cols: ir.ColumnMeta[] = [match[1] === undefined ?\n            (match[2] === undefined ? {align: ''} : {align: 'R'}) :\n            (match[2] === undefined ? {align: 'L'} : {align: 'C'})]\n        delimLine.ptr = this.RE_H_DELIM.lastIndex\n        if (!lineHasMarker && delimLine.ptr === delimLine.EOL) {\n            delimCheckpoint.restore()\n            console.debug('ABORT: delim line mismatch')\n            console.groupEnd()\n            return null\n        }\n        // parse rest of line, build cols data\n        while (delimLine.ptr !== delimLine.EOL) {\n            if (src.charAt(delimLine.ptr) === this.sideBorder\n                && rightBorder !== 'no'\n                && delimLine.ptr + 1 === delimLine.EOC) {\n                //todo![spec] we have ditched needing to move pointer\n                // to EOL artificially to mark a line as resolved.\n                // delimLine.ptr++ should be enough as it consumes\n                // the just detected closing side border, yet replacing\n                // this with delimLine.ptr++ fails some tests. Why?\n                delimLine.ptr = delimLine.EOL\n                break\n            }\n            this.RE_INTERSECTION.lastIndex = delimLine.ptr\n            if (this.RE_INTERSECTION.exec(src)) {\n                this.RE_H_DELIM.lastIndex = delimLine.ptr + 1\n                match = this.RE_H_DELIM.exec(src)\n                console.debug(`col ${cols.length + 1} match:`, JSON.stringify(match), this.RE_H_DELIM.lastIndex)\n                if (match === null) {\n                    // missing delim segment\n                    delimCheckpoint.restore()\n                    console.debug('ABORT: delim line mismatch')\n                    console.groupEnd()\n                    return null\n                }\n                cols.push(match[1] === undefined ?\n                    (match[2] === undefined ? {align: ''} : {align: 'R'}) :\n                    (match[2] === undefined ? {align: 'L'} : {align: 'C'}))\n                delimLine.ptr = this.RE_H_DELIM.lastIndex\n            } else {\n                // unexpected char\n                console.debug(`unexpected char ${delimLine.ptr}: ${(src.charAt(delimLine.ptr))}`)\n                delimCheckpoint.restore()\n                console.debug('ABORT: delim line mismatch')\n                console.groupEnd()\n                return null\n            }\n        }\n        console.debug(`cols: ${JSON.stringify(cols)}`)\n        // didn't consume line because the remainder of the line didn't match\n        if (delimLine.ptr !== delimLine.EOL) {\n            delimCheckpoint.restore()\n            console.debug('ABORT: delim line mismatch')\n            console.groupEnd()\n            return null\n        }\n        //! /////// end parse delimiter line ////////\n\n        const irBlock = new ir.Block('table')\n\n        //////// parse header line\n        console.debug('====== headings')\n        const header = this.parseData(src, firstLine, leftBorder, rightBorder, irBlock)\n        if (header === null) {\n            delimCheckpoint.restore()\n            console.debug('ABORT: header mismatch')\n            console.groupEnd()\n            return null\n        }\n        // per GFM rules\n        if (header.length !== cols.length) {\n            delimCheckpoint.restore()\n            console.debug('ABORT: header mismatch')\n            console.groupEnd()\n            return null\n        }\n\n        // ==== MATCH CERTAINTY =====\n        if (lookahead) {\n            delimCheckpoint.restore()\n            console.groupEnd()\n            return {}\n        }\n\n        //////// parse body rows\n        console.debug('====== body')\n        let endLine = delimLine\n        const rows: ir.Row[] = []\n        for (let line = delimLine.nextInContainer;\n             line !== null && !line.remainingIsBlank();\n             line = line.nextInContainer) {\n            const checkpoint = line.checkpoint()\n            // todo![perf] see comments in the delimLine parsing section\n            //   about how we're undermining our optimization of slop\n            //   parsing and that we lack indent parsing optimization at all\n            line.parseSlop(this.styleSheet.sloppyMargin, true)\n            lineIndent = line.parseSpaces(tableIndent)\n            if (lineIndent != tableIndent) {\n                checkpoint.restore()\n                break\n            }\n            let row = this.parseData(src, line, leftBorder, rightBorder, irBlock)\n            if (row === null) {\n                checkpoint.restore()\n                break\n            }\n            if (row.length < cols.length) {\n                if (this.bodyRowTooShort === 'add-empty') {\n                    while (row.length < cols.length) {\n                        // todo![spec] remove this hack\n                        //   eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        //   @ts-ignore\n                        row.push({type: 'cell', body: '', colSpan: 1, rowSpan: 1, parent: irBlock})\n                    }\n                }\n            } else if (row.length > cols.length) {\n                if (this.bodyRowTooLong === 'truncate') {\n                    row = row.slice(0, cols.length)\n                }\n            }\n            rows.push(row)\n            endLine = line\n        }\n\n\n        const ptTable = new Block(this)\n        ptTable.style = this\n        ptTable.lineStart = firstLine.num\n        ptTable.lineEnd = endLine.num\n        ptTable.indent = tableIndent\n\n        irBlock.head = [header]\n        irBlock.body = rows\n        irBlock.tableMeta = { //todo![spec] if there is no meta, don't set these fields\n            head: cols,\n            body: cols\n        }\n        irBlock.source = ptTable\n\n        console.groupEnd()\n        return {irBlock: irBlock, ptNamedValue: undefined, endLine: endLine}\n    }\n\n    parseData (src: string,\n               line: Line,\n               leftBorder: 'yes' | 'no' | 'lazy',\n               rightBorder: 'yes' | 'no' | 'lazy',\n               irBlock: ir.Block): ir.Row | null {\n        console.debug(line.num, stringifyTruncate(line.srcLine()))\n        console.group()\n        console.debug(line.toString())\n\n        let lineHasMarker = false\n\n        if (leftBorder !== 'no') {\n            if (src.charAt(line.ptr) === this.sideBorder) {\n                line.ptr += 1\n                lineHasMarker = true\n            } else if (leftBorder === 'yes') {\n                console.groupEnd()\n                return null\n            }\n        }\n\n        if (this.interruption(line, lineHasMarker)) {\n            console.groupEnd()\n            return null\n        }\n\n        const row: ir.Row = []\n        let match: RegExpExecArray\n        while (!line.remainingIsBlank()) {\n            this.RE_DATA.lastIndex = line.ptr\n            //! type assertion valid given the regex pattern can match empty string\n            match = this.RE_DATA.exec(src) as RegExpExecArray\n            // todo![spec] use the stylesheet defined escape char, tableStyle defined quote chars, etc.\n            // todo![test] add tests for the various ways to escape/quote values\n            const fieldVal = match[0].replace(/\\\\\\|/g, '|')\n\n            // This is an attempt to generalize Gracedown's needed special handling\n            // of table cells. `cell: Expression` was added to TableStyle and\n            // new functions were added to Expressions *just* to support this.\n            //\n            // It works like this:\n            //  1. The default is that the source cell content will be treated\n            //     as inline content and parsed accordingly. The table style\n            //     definition doesn't need to specify anything. The default\n            //     table declaration is simple.\n            //  2. The style declaration can OPTIONALLY define an expression\n            //     that will be applied to the content of each source table cell\n            //     (just as one can define an arbitrary expression that is\n            //     applied to the body or title of a source element).\n            //\n            // todo![content model, spec] Is this good for the spec, or is it a\n            //   hack that needs a different solution? Is it a generalization\n            //   that will have uses for others, or will it only ever get used\n            //   for Gracedown, and thus putting the lie to \"generalization\"?\n            //   Even so, if it is elegant and cost-free, keep it anyway?\n            if (this.cell === undefined) {\n                //! for SV table, cell bodies are always an InlineSequence\n                row.push({\n                        type: 'cell',\n                        body: [INLINE_PARSE_FLAG, fieldVal],\n                        colSpan: 1,\n                        rowSpan: 1,\n                        parent: irBlock\n                    } as ir.Cell\n                )\n            } else {\n                console.debug(`EVALUATING EXPRESSION: cell <-- ${this.cell.toString()}`)\n                console.group()\n                const cellBody = this.cell.evaluate(null, null, [fieldVal], null, null)\n                console.groupEnd()\n                if (cellBody instanceof ir.Block) {\n                    if (cellBody.type === 'cell') {\n                        if (cellBody.body?.length === 1\n                            && cellBody.body[0] instanceof ir.Block\n                            && cellBody.body[0].type === 'paragraph') {\n                            row.push({\n                                    type: 'cell',\n                                    body: cellBody.body[0].body as ir.InlineSequence,\n                                    colSpan: 1,\n                                    rowSpan: 1,\n                                    parent: irBlock\n                                } as ir.Cell\n                            )\n                        } else {\n                            row.push({\n                                    ...(cellBody as ir.Block),\n                                    colSpan: 1,\n                                    rowSpan: 1,\n                                    parent: irBlock\n                                } as ir.Cell\n                            )\n                        }\n                    } else {\n                        // todo[spec] punt: we probably want to be able to handle\n                        //  anything reasonable returned by `this.cell.evaluate`\n                        throw Error('not yet thought through')\n                    }\n                } else { //it's a BlockSequence or InlineSequence\n                    row.push({\n                            type: 'cell',\n                            body: cellBody,\n                            colSpan: 1,\n                            rowSpan: 1,\n                            parent: irBlock\n                        } as ir.Cell\n                    )\n                }\n            }\n\n            line.ptr = this.RE_DATA.lastIndex\n\n            if (line.ptr === line.EOL) {\n                if (rightBorder === 'yes') {\n                    console.groupEnd()\n                    return null\n                }\n                break\n            }\n            lineHasMarker = true\n            if (src.charAt(line.ptr) !== this.columnsDelim) {\n                //! given the match pattern, the ch MUST be a right border\n                if (rightBorder === 'no') {\n                    console.groupEnd()\n                    return null\n                }\n                line.ptr += 1\n                break\n            }\n            line.ptr += 1\n\n            //! handle columnDelim/sideBorder ambiguity\n            if (this.columnsDelim === this.sideBorder\n                && rightBorder !== 'no'\n                && line.remainingIsBlank()) {\n                // what we assumed was a columnDelim is actually a right border\n                break\n            }\n        }\n\n        if (!lineHasMarker && this.bodyRowAtLeastOneMarker === 'yes') {\n            console.groupEnd()\n            return null\n        }\n\n        console.debug(`new row: ${JSON.stringify(row, stringifyReplacerForDebugLogging())}`)\n        console.groupEnd()\n        return row\n    }\n\n    interruption (line: Line, lineHasMarker: boolean) {\n        //! we only need to check for gfmQuirks table interruption\n        //  when there is no left border\n        if (!lineHasMarker && this.gfmQuirks) {\n            return line.checkStyleMatch(this.interruptibleBy)\n        } else {\n            return false\n        }\n    }\n\n}\n\n", "import type {Stylesheet} from './stylesheet.js'\nimport {BaseStyleType, ElementalBlockStyle, BlockStyleType, ParseEffects, RE_MARKDOWN_INDENT} from './elementalBlockStyle.js'\nimport {Block} from './block.js'\nimport type {Line} from '../line.js'\nimport * as ir from '../../stir/index.js'\n\n\nconst TAG_NAME = '[A-Za-z][A-Za-z0-9-]*'\nconst ATTRIBUTE_NAME = '[a-zA-Z_:][a-zA-Z0-9:._-]*'\nconst UNQUOTED_VALUE = '[^\"\\'=<>`\\\\x00-\\\\x20]+'\nconst SINGLE_QUOTED_VALUE = '\\'[^\\'\\n]*\\''\nconst DOUBLE_QUOTED_VALUE = '\"[^\"\\n]*\"'\nconst ATTRIBUTE_VALUE = '(?:' + UNQUOTED_VALUE + '|' + SINGLE_QUOTED_VALUE + '|' + DOUBLE_QUOTED_VALUE + ')'\nconst ATTRIBUTE_VALUE_SPEC = '(?:[ \\\\t]*=[ \\\\t]*' + ATTRIBUTE_VALUE + ')'\nconst ATTRIBUTE = '(?:[ \\\\t]+' + ATTRIBUTE_NAME + ATTRIBUTE_VALUE_SPEC + '?)'\nconst OPEN_TAG = '<' + TAG_NAME + ATTRIBUTE + '*' + '[ \\\\t]*/?>'\nconst CLOSE_TAG = '</' + TAG_NAME + '[ \\\\t]*[>]'\n\n//todo[markdown] shouldn't all of these start with ^ ???\nexport const reHtmlBlockOpen = [\n    /./, // dummy for 0\n    /(?:script|pre|style|textarea)(?:\\s|>)/iy,\n    /!--/y,\n    /[?]/y,\n    /![A-Za-z]/y,\n    /!\\[CDATA\\[/y,\n    /[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|[/]?[>]|$)/iy,\n    new RegExp('(?:' + OPEN_TAG.slice(1) + '|' + CLOSE_TAG.slice(1) + ')[ \\\\t]*\\n', 'y')\n]\nexport const reHtmlBlockClose = [\n    /./, // dummy for 0\n    /^.*<\\/(?:script|pre|style|textarea)>/iym,\n    /^.*-->/ym,\n    /^.*\\?>/ym,\n    /^.*>/ym,\n    /^.*]]>/ym\n]\n\n//todo[markdown, arch, spec] HTML blocks aren't a \"style\". It's a Markdown Mode\n//   special case that cannot be customized, and doesn't follow\n//   any normal rules that deserve being generalized. It would\n//   be better to special case this as something else, and just\n//   use Typescript's union type support to handle including it\n//\n//todo[spec] Consider alternate rules for embedded HTML blocks,\n//   e.g. HTML that doesn't necessarily consume whole lines,\n//        that act as if they dont' exist for parsing purposes,\n//        just inserted in-site in the output. Or does this\n//        already exist with inline HTML?\nexport class HTMLBlockStyle implements ElementalBlockStyle {\n    baseType: BlockStyleType = BaseStyleType.TEMP_HTML_HACK\n    name: string\n\n    public indent: 'yes' | 'no' | 'optional' = 'no'\n\n    canInterruptParagraph = true\n    canInterruptLazy = true\n\n    readonly consumesBackChunk = false\n\n    styleSheet: Stylesheet\n\n    constructor (name: string, styleSheet: Stylesheet) {\n        this.name = name\n        this.styleSheet = styleSheet\n    }\n\n    initAndValidate (): void {\n        const match = RE_MARKDOWN_INDENT.exec(this.indent)\n        if (match) {\n            throw new Error(`markdown mode indent is not supported for HTML blocks`)\n        }\n        return\n    }\n\n    parse (firstLine: Line, fromBackLine: Line | null, lookahead = false): ParseEffects | null {\n        const src = firstLine.src\n\n        // indent will be zero if there is slop (which would be already parsed out)\n        const indent = firstLine.parseSpaces()\n        if (indent === 0 && this.indent === 'yes') {\n            return null\n        }\n        if (indent > 0 && this.indent === 'no') {\n            return null\n        }\n\n        let startOffset = firstLine.ptr\n\n        if (src.charAt(startOffset) !== '<') {\n            return null\n        }\n        startOffset++\n\n\n        // type 7 may not interrupt a paragraph\n        const allowedTypes = fromBackLine === null ? 7 : 6\n\n        let blockType\n        for (blockType = 1; blockType <= 7; blockType++) {\n            const regExp = reHtmlBlockOpen[blockType]\n            regExp.lastIndex = startOffset\n            if (blockType <= allowedTypes && regExp.test(src)) {\n                console.debug('parse HTML Block:  blockType', blockType)\n                console.group()\n\n                // ==== MATCH CERTAINTY =====\n                if (lookahead) {\n                    console.groupEnd()\n                    return {}\n                }\n\n                // todo[spec, markdown] the ENTIRE line is added even if the start tag occurs midline.\n                //   This differs from Markdown 1.0.2, Pandoc and others.\n                //   The text ends up as body text in the output, but is not combined\n                //   with any continuation text on the following line into a single\n                //   paragraph.\n                firstLine.ptr = firstLine.pContainerSOL\n\n                // JUST LIKE CODE BLOCKS, HTML blocks cannot nest other blocks. So we\n                // can parse the whole block right here.\n                let blockContent, lastLine\n                if (blockType <= 5) {\n                    // closing tag terminated HTML block\n                    [blockContent, lastLine] =\n                        firstLine.fwdBlock(false, reHtmlBlockClose[blockType])\n                } else {\n                    // blank line terminated HTML block\n                    [blockContent, lastLine] = firstLine.fwdBlock(true)\n                }\n\n                const ptBlock = new Block(this)\n                ptBlock._htmlBlockType = blockType\n                ptBlock.lineStart = firstLine.num\n                ptBlock.lineEnd = lastLine.num\n\n                const irHtmlBlock = new ir.Block('html_block')\n                irHtmlBlock.source = ptBlock\n                //! Remove all trailing NEWLINES and SPACES from the block content\n                irHtmlBlock.body = blockContent.replace(/(\\n *)+$/, '')\n\n                console.groupEnd()\n                return {irBlock: irHtmlBlock, endLine: lastLine}\n            }\n        }\n\n        return null\n    }\n\n\n}\n", "import type {ElementalBlockStyle} from './elementalBlockStyle.js'\nimport {ContainerStyle} from './containerStyle.js'\nimport {ChunkStyle} from './chunkStyle.js'\nimport {Expression} from './expression.js'\n\nexport class Stylesheet {\n    //todo![spec] Maybe the name of every stylesheet should be identical to\n    // the filename (including the `.ptss` suffix):\n    //   - consistency\n    //   - simplicity\n    //   - elegant circularity\n    //   - no ambiguity\n    //   - eliminate the dumb switch statement we have in sheets/index.ts\n    //     - stylesheets should get registered with their own name as declared\n    //       in their definition.\n    // If we decide to do that:\n    //   - `+ '.ptss'` in TLP and anywhere else we have it\n    public name: string\n\n    // todo![strict syntax, errors] need to review features i've previously\n    //  rejected because of the \"do not allow parsing impasses\" principle,\n    //  since this property expressly begs for such impasses.\n    public strictSyntax = false\n\n    //! ////////////// BEGIN BLOCK-LEVEL DECLARATIONS ////////////////\n\n    public blockStyles: ElementalBlockStyle[] = []\n    public rootContainerStyle\n    public defaultBlockStyle: ChunkStyle\n\n    // this will be true if at least element style is lazy\n    _lazyContinuation = false\n\n    get lazyContinuation (): boolean {\n        return this._lazyContinuation\n    }\n\n    // See documentation on sloppyMargin vs intentional/meaningful indentation.\n    // todo![spec] i think this should be renamed to \"sloppinessLimit\"\n    //   (or even simply \"sloppiness\") as doesn't govern the entire margin of\n    //   a Chunk style. See the `compare/sloppiness.md` cases. Not how I\n    //   naturally say, \"the sloppiness limit is only applied to...\".\n    //   Writing that doc with \"sloppiness margin\" just doesn't work.\n    public sloppyMargin = 0\n\n\n    //! ////////////// BEGIN INLINE-LEVEL DECLARATIONS ////////////////\n\n    // todo[inline] TEMP HACK until we implement ptss.InlineStyle and ditch\n    //  Markdown-it. hack for now is:\n    //   - empty array is default, CommonMark inline elements\n    //   - add names of Markdown-it's inline rules for more\n    public inlineStyles: string[] = []\n\n    /**\n     * See documentation for {@link EscapeSyntax}.\n     *\n     *! the reason we define escape sequences here rather rather than entirely\n     *  within the `escape sequence` inline style is because the escape sequences\n     *  also apply in link destinations text, which are not subject to inline\n     *  style parsing. Thus we must have the escape sequence spec here so it can\n     *  be shared by the inline styled text parser AND the link destination parser.\n     */\n    public escapeSyntax: EscapeSyntax\n\n    public linkDestAllowSpaces = true\n\n\n    constructor (name: string) {\n        this.name = name\n        this.rootContainerStyle = new ContainerStyle(`${name} root container`, this)\n        // todo![now] 'structured_text_intermediate_representation' is part of the spec,\n        //   so should not be settable here!\n        this.rootContainerStyle.irNode.type = new Expression('structured_text_intermediate_representation')\n        this.rootContainerStyle.body = 'BLOCKS'\n        this.defaultBlockStyle = new ChunkStyle('Paragraph', this)\n        this.defaultBlockStyle.irNode.type = new Expression('paragraph')\n        this.defaultBlockStyle.irNode.body = new Expression(['parseInlines', ['trim', ['body']]])\n        this.escapeSyntax = {\n            escapeChar: undefined,\n            escapeLiterals: '',\n            escapeMappings: [],\n            ESCAPE_INLINE_LOOKUP: new Array<string>(256),\n            ESCAPE_LINK_DEST_LOOKUP: new Array<string>(256)\n        }\n    }\n\n    public initAndValidate (): void {\n        for (const style of this.blockStyles) {\n            if (style.styleSheet !== this) {\n                throw Error(`\"${style.name}\" is attached to \"${style.styleSheet.name}\" but added to \"${this.name}\"`)\n            }\n            try {\n                style.initAndValidate()\n            } catch (e) {\n                throw Error(`Invalid Style Declaration \"${style.name}\" in \"${this.name}\" style sheet`, {cause: e})\n            }\n            this._lazyContinuation = this.defaultBlockStyle.lazyContinuation\n            if (style instanceof ChunkStyle && style.lazyContinuation) {\n                if (!this.defaultBlockStyle.lazyContinuation) {\n                    throw Error(`Lazy continuation enabled for \"${style.name}\" but not for the default` +\n                                ` style ${this.defaultBlockStyle.name}. If any style can lazily continue,` +\n                                ` the default must be.`)\n                }\n                this._lazyContinuation = true\n            }\n        }\n        const escapeInlineLookup = this.escapeSyntax.ESCAPE_INLINE_LOOKUP\n        const escapeLinkDestLookup = this.escapeSyntax.ESCAPE_LINK_DEST_LOOKUP\n        this.escapeSyntax.escapeLiterals\n            .split('')\n            .forEach(function (ch) {\n                escapeInlineLookup[ch.charCodeAt(0)] = ch\n                escapeLinkDestLookup[ch.charCodeAt(0)] = ch\n            })\n        this.escapeSyntax.escapeMappings\n            .forEach(function (mapping) {\n                const ch1 = mapping[0]\n                if (ch1.length > 1 || ch1.charCodeAt(0) > 256) {\n                    throw Error('can only escape extended ASCII characters')\n                }\n                escapeInlineLookup[ch1.charCodeAt(0)] = mapping[1]\n            })\n    }\n\n    get (name: string): ElementalBlockStyle {\n        const style = this.blockStyles.find(style => style.name === name)\n        if (style) {\n            return style\n        }\n        if (this.defaultBlockStyle.name === name) {\n            return this.defaultBlockStyle\n        }\n        throw new Error(`not found: ${name}`)\n    }\n\n    insertAbove (existingStyle: string, newStyle: ElementalBlockStyle) {\n        const idx = this.blockStyles.findIndex(style => style.name === existingStyle)\n        if (idx === -1) {\n            if (this.defaultBlockStyle.name === existingStyle) {\n                // end of list is above defaultStyle\n                this.blockStyles.push(newStyle)\n            } else {\n                throw new Error(`not found: ${existingStyle}`)\n            }\n        }\n        this.blockStyles.splice(idx, 0, newStyle)\n    }\n\n    remove (name: string): ElementalBlockStyle {\n        const idx = this.blockStyles.findIndex(style => style.name === name)\n        if (idx === -1) {\n            if (this.defaultBlockStyle.name === name) {\n                throw new Error(`cannot remove default style, ${name}, but you can set a new one.`)\n            }\n            throw new Error(`not found: ${name}`)\n        }\n        const style = this.blockStyles[idx]\n        this.blockStyles.splice(idx, 1)\n        return style\n    }\n\n    toDebugString (): string {\n        let s = this.name + ': {\\n  block styles: {'\n        for (const blockStyle of this.blockStyles) {\n            s += '\\n    ' + blockStyle.name\n        }\n        s += '\\n  }\\n  inline styles: {'\n        for (const inlineStyle of this.inlineStyles) {\n            s += '\\n    ' + inlineStyle\n        }\n        s += '\\n  }\\n}'\n        return s\n    }\n}\n\n\n/**\n * Define the escape syntax for a plain text style.\n *\n * NOTE: this is not to be confused with the escape\n * syntax for HTML or any other rendered output, for URLs,\n * or for Javascript. Each style decides what the syntax\n * is as well as what characters have escapes.\n *\n * For example (todo: make sure this is accurate):\n *   |         | Pandoc      | HTML    | URL | Javascript |\n *   | newline | \\ + newline | <br>    |     | \\n         |\n *   | space   |             |         | %20 |            |\n *   | nbsp    | \\ + space   | &nbsp;  |     | \\xa0       |\n *   | tab     |             |         |     | \\t         |\n *   | \"       | \\\"          | &quote; |     | \\\"         |\n *\n * todo[spec] interesting: can a style use this mechanism to map an\n *   escape sequence to a newline? e.g. the way that Javascript uses\n *   `\\n`? e.g. Can it replace the current backslashEOCIsHardBreak arg?\n */\ntype EscapeSyntax = {\n    /**\n     * The character that triggers an \"escape sequence\".\n     *\n     * todo[spec] should this default to `\\`?\n     *  If we support an explicit \"Markdown mode\", then should at least\n     *  default to `\\` for that.\n     */\n    escapeChar: string | undefined\n    /**\n     * The set of characters that when escaped translate to that\n     * character itself, necessary in contexts where that character\n     * has special meaning, e.g. \"*\" in Markdown.\n     *\n     * \uD83D\uDEA9 This applies both to inline styled text and link destinations.\n     */\n    escapeLiterals: string\n    /**\n     * The set of characters that when escaped translates to another\n     * character (or character sequence), necessary when the latter\n     * cannot be expressed in visible plain text, e.g. newline or\n     * non-breaking space.\n     *\n     * \uD83D\uDEA9 This only applies to escapes in inline styled text, not in\n     *    link destinations.\n     */\n    escapeMappings: [string, string][]\n\n    // todo[spec, line breaks] should this also handle CommonMark's support\n    //  for backslash+newline being interpreted as a hard line break?\n    ESCAPE_INLINE_LOOKUP: string[]\n\n    // todo[spec] we are NOT using this to do escape substitution as we are\n    //  doing with ESCAPE_INLINE_LOOKUP. Not sure we need it. Once we decide,\n    //  maybe convert this into a boolean[]?\n    ESCAPE_LINK_DEST_LOOKUP: string[]\n}\n", "// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY\n// See update-tlds.js for encoding/decoding format\n// https://data.iana.org/TLD/tlds-alpha-by-domain.txt\nconst encodedTlds = 'aaa1rp3barth4b0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re2s2c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y0eats7k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking0channel11l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t0isalat7u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0at2delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d0network8tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0eles2s3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster5ia3d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0cys3drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7serati6ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic3tual5v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rthwesternmutual14on4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cher3ks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w0time7i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0channel7ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5m\u00F6gensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u0elos6wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2';\n// Internationalized domain names containing non-ASCII\nconst encodedUtlds = '\u03B5\u03BB1\u03C52\u0431\u04331\u0435\u043B3\u0434\u0435\u0442\u04384\u0435\u044E2\u043A\u0430\u0442\u043E\u043B\u0438\u043A6\u043E\u043C3\u043C\u043A\u04342\u043E\u043D1\u0441\u043A\u0432\u04306\u043E\u043D\u043B\u0430\u0439\u043D5\u0440\u04333\u0440\u0443\u04412\u04442\u0441\u0430\u0439\u04423\u0440\u04313\u0443\u043A\u04403\u049B\u0430\u04373\u0570\u0561\u05753\u05D9\u05E9\u05E8\u05D0\u05DC5\u05E7\u05D5\u05DD3\u0627\u0628\u0648\u0638\u0628\u064A5\u062A\u0635\u0627\u0644\u0627\u062A6\u0631\u0627\u0645\u0643\u06485\u0644\u0627\u0631\u062F\u06464\u0628\u062D\u0631\u064A\u06465\u062C\u0632\u0627\u0626\u06315\u0633\u0639\u0648\u062F\u064A\u06296\u0639\u0644\u064A\u0627\u06465\u0645\u063A\u0631\u06285\u0645\u0627\u0631\u0627\u062A5\u06CC\u0631\u0627\u06465\u0628\u0627\u0631\u062A2\u0632\u0627\u06314\u064A\u062A\u06433\u06BE\u0627\u0631\u062A5\u062A\u0648\u0646\u06334\u0633\u0648\u062F\u0627\u06463\u0631\u064A\u06295\u0634\u0628\u0643\u06294\u0639\u0631\u0627\u06422\u06282\u0645\u0627\u06464\u0641\u0644\u0633\u0637\u064A\u06466\u0642\u0637\u06313\u0643\u0627\u062B\u0648\u0644\u064A\u06436\u0648\u06453\u0645\u0635\u06312\u0644\u064A\u0633\u064A\u06275\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u06277\u0642\u06394\u0647\u0645\u0631\u0627\u06475\u067E\u0627\u06A9\u0633\u062A\u0627\u06467\u0680\u0627\u0631\u062A4\u0915\u0949\u092E3\u0928\u0947\u091F3\u092D\u093E\u0930\u09240\u092E\u094D3\u094B\u09245\u0938\u0902\u0917\u0920\u09285\u09AC\u09BE\u0982\u09B2\u09BE5\u09AD\u09BE\u09B0\u09A42\u09F0\u09A44\u0A2D\u0A3E\u0A30\u0A244\u0AAD\u0ABE\u0AB0\u0AA44\u0B2D\u0B3E\u0B30\u0B244\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE6\u0BB2\u0B99\u0BCD\u0B95\u0BC86\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD11\u0C2D\u0C3E\u0C30\u0C24\u0C4D5\u0CAD\u0CBE\u0CB0\u0CA44\u0D2D\u0D3E\u0D30\u0D24\u0D025\u0DBD\u0D82\u0D9A\u0DCF4\u0E04\u0E2D\u0E213\u0E44\u0E17\u0E223\u0EA5\u0EB2\u0EA73\u10D2\u10D42\u307F\u3093\u306A3\u30A2\u30DE\u30BE\u30F34\u30AF\u30E9\u30A6\u30C94\u30B0\u30FC\u30B0\u30EB4\u30B3\u30E02\u30B9\u30C8\u30A23\u30BB\u30FC\u30EB3\u30D5\u30A1\u30C3\u30B7\u30E7\u30F36\u30DD\u30A4\u30F3\u30C84\u4E16\u754C2\u4E2D\u4FE11\u56FD1\u570B1\u6587\u7F513\u4E9A\u9A6C\u900A3\u4F01\u4E1A2\u4F5B\u5C712\u4FE1\u606F2\u5065\u5EB72\u516B\u53662\u516C\u53F81\u76CA2\u53F0\u6E7E1\u70632\u5546\u57CE1\u5E971\u68072\u5609\u91CC0\u5927\u9152\u5E975\u5728\u7EBF2\u5927\u62FF2\u5929\u4E3B\u65593\u5A31\u4E502\u5BB6\u96FB2\u5E7F\u4E1C2\u5FAE\u535A2\u6148\u55842\u6211\u7231\u4F603\u624B\u673A2\u62DB\u80582\u653F\u52A11\u5E9C2\u65B0\u52A0\u57612\u95FB2\u65F6\u5C1A2\u66F8\u7C4D2\u673A\u67842\u6DE1\u9A6C\u95213\u6E38\u620F2\u6FB3\u95802\u70B9\u770B2\u79FB\u52A82\u7EC4\u7EC7\u673A\u67844\u7F51\u57401\u5E971\u7AD91\u7EDC2\u8054\u901A2\u8C37\u6B4C2\u8D2D\u72692\u901A\u8CA92\u96C6\u56E22\u96FB\u8A0A\u76C8\u79D14\u98DE\u5229\u6D663\u98DF\u54C12\u9910\u53852\u9999\u683C\u91CC\u62C93\u6E2F2\uB2F7\uB1371\uCEF42\uC0BC\uC1312\uD55C\uAD6D2';\n\n/**\n * @template A\n * @template B\n * @param {A} target\n * @param {B} properties\n * @return {A & B}\n */\nconst assign = (target, properties) => {\n  for (const key in properties) {\n    target[key] = properties[key];\n  }\n  return target;\n};\n\n/**\n * Finite State Machine generation utilities\n */\n\n/**\n * @template T\n * @typedef {{ [group: string]: T[] }} Collections\n */\n\n/**\n * @typedef {{ [group: string]: true }} Flags\n */\n\n// Keys in scanner Collections instances\nconst numeric = 'numeric';\nconst ascii = 'ascii';\nconst alpha = 'alpha';\nconst asciinumeric = 'asciinumeric';\nconst alphanumeric = 'alphanumeric';\nconst domain = 'domain';\nconst emoji = 'emoji';\nconst scheme = 'scheme';\nconst slashscheme = 'slashscheme';\nconst whitespace = 'whitespace';\n\n/**\n * @template T\n * @param {string} name\n * @param {Collections<T>} groups to register in\n * @returns {T[]} Current list of tokens in the given collection\n */\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n  return groups[name];\n}\n\n/**\n * @template T\n * @param {T} t token to add\n * @param {Collections<T>} groups\n * @param {Flags} flags\n */\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n  for (const k in flags) {\n    const group = registerGroup(k, groups);\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} t token to check\n * @param {Collections<T>} groups\n * @returns {Flags} group flags that contain this token\n */\nfunction flagsForToken(t, groups) {\n  const result = {};\n  for (const c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * @template T\n * @typedef {null | T } Transition\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n *\n * The template type T represents the type of the token this state accepts. This\n * should be a string (such as of the token exports in `text.js`) or a\n * MultiToken subclass (from `multi.js`)\n *\n * @template T\n * @param {T} [token] Token that this state emits\n */\nfunction State(token) {\n  if (token === void 0) {\n    token = null;\n  }\n  // this.n = null; // DEBUG: State name\n  /** @type {{ [input: string]: State<T> }} j */\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n  /** @type {[RegExp, State<T>][]} jr */\n  this.jr = [];\n  /** @type {?State<T>} jd */\n  this.jd = null;\n  /** @type {?T} t */\n  this.t = token;\n}\n\n/**\n * Scanner token groups\n * @type Collections<string>\n */\nState.groups = {};\nState.prototype = {\n  accepts() {\n    return !!this.t;\n  },\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go(input) {\n    const state = this;\n    const nextState = state.j[input];\n    if (nextState) {\n      return nextState;\n    }\n    for (let i = 0; i < state.jr.length; i++) {\n      const regex = state.jr[i][0];\n      const nextState = state.jr[i][1]; // note: might be empty to prevent default jump\n      if (nextState && regex.test(input)) {\n        return nextState;\n      }\n    }\n    // Nowhere left to jump! Return default, if any\n    return state.jd;\n  },\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has(input, exactOnly) {\n    if (exactOnly === void 0) {\n      exactOnly = false;\n    }\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta(inputs, next, flags, groups) {\n    for (let i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    let nextState;\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      // Token with maybe token groups\n      nextState = new State(next);\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts(input, next, flags, groups) {\n    let state = this;\n    const len = input.length;\n    if (!len) {\n      return state;\n    }\n    for (let i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    const state = this;\n\n    // Check if existing state given, just a basic transition\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n    const t = next;\n\n    // Take the transition with the usual default mechanisms and use that as\n    // a template for creating the next state\n    let nextState,\n      templateState = state.go(input);\n    if (templateState) {\n      nextState = new State();\n      assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n    if (t) {\n      // Ensure newly token is in the same groups as the old token\n      if (groups) {\n        if (nextState.t && typeof nextState.t === 'string') {\n          const allFlags = assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n      nextState.t = t; // overwrite anything that was previously there\n    }\n\n    state.j[input] = nextState;\n    return nextState;\n  }\n};\n\n// Helper functions to improve minification (not exported outside linkifyjs module)\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {RegExp} regexp\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string} input\n * @param {T | State<T>} [next]\n * @param {Collections<T>} [groups]\n * @param {Flags} [flags]\n */\nconst tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);\n\n/******************************************************************************\nText Tokens\nIdentifiers for token outputs from the regexp scanner\n******************************************************************************/\n\n// A valid web domain token\nconst WORD = 'WORD'; // only contains a-z\nconst UWORD = 'UWORD'; // contains letters other than a-z, used for IDN\n\n// Special case of word\nconst LOCALHOST = 'LOCALHOST';\n\n// Valid top-level domain, special case of WORD (see tlds.js)\nconst TLD = 'TLD';\n\n// Valid IDN TLD, special case of UWORD (see tlds.js)\nconst UTLD = 'UTLD';\n\n// The scheme portion of a web URI protocol. Supported types include: `mailto`,\n// `file`, and user-defined custom protocols. Limited to schemes that contain\n// only letters\nconst SCHEME = 'SCHEME';\n\n// Similar to SCHEME, except makes distinction for schemes that must always be\n// followed by `://`, not just `:`. Supported types include `http`, `https`,\n// `ftp`, `ftps`\nconst SLASH_SCHEME = 'SLASH_SCHEME';\n\n// Any sequence of digits 0-9\nconst NUM = 'NUM';\n\n// Any number of consecutive whitespace characters that are not newline\nconst WS = 'WS';\n\n// New line (unix style)\nconst NL$1 = 'NL'; // \\n\n\n// Opening/closing bracket classes\nconst OPENBRACE = 'OPENBRACE'; // {\nconst OPENBRACKET = 'OPENBRACKET'; // [\nconst OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\nconst OPENPAREN = 'OPENPAREN'; // (\nconst CLOSEBRACE = 'CLOSEBRACE'; // }\nconst CLOSEBRACKET = 'CLOSEBRACKET'; // ]\nconst CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\nconst CLOSEPAREN = 'CLOSEPAREN'; // )\n\n// Various symbols\nconst AMPERSAND = 'AMPERSAND'; // &\nconst APOSTROPHE = 'APOSTROPHE'; // '\nconst ASTERISK = 'ASTERISK'; // *\nconst AT = 'AT'; // @\nconst BACKSLASH = 'BACKSLASH'; // \\\nconst BACKTICK = 'BACKTICK'; // `\nconst CARET = 'CARET'; // ^\nconst COLON = 'COLON'; // :\nconst COMMA = 'COMMA'; // ,\nconst DOLLAR = 'DOLLAR'; // $\nconst DOT = 'DOT'; // .\nconst EQUALS = 'EQUALS'; // =\nconst EXCLAMATION = 'EXCLAMATION'; // !\nconst HYPHEN = 'HYPHEN'; // -\nconst PERCENT = 'PERCENT'; // %\nconst PIPE = 'PIPE'; // |\nconst PLUS = 'PLUS'; // +\nconst POUND = 'POUND'; // #\nconst QUERY = 'QUERY'; // ?\nconst QUOTE = 'QUOTE'; // \"\n\nconst SEMI = 'SEMI'; // ;\nconst SLASH = 'SLASH'; // /\nconst TILDE = 'TILDE'; // ~\nconst UNDERSCORE = 'UNDERSCORE'; // _\n\n// Emoji symbol\nconst EMOJI$1 = 'EMOJI';\n\n// Default token - anything that is not one of the above\nconst SYM = 'SYM';\n\nvar tk = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tWORD: WORD,\n\tUWORD: UWORD,\n\tLOCALHOST: LOCALHOST,\n\tTLD: TLD,\n\tUTLD: UTLD,\n\tSCHEME: SCHEME,\n\tSLASH_SCHEME: SLASH_SCHEME,\n\tNUM: NUM,\n\tWS: WS,\n\tNL: NL$1,\n\tOPENBRACE: OPENBRACE,\n\tOPENBRACKET: OPENBRACKET,\n\tOPENANGLEBRACKET: OPENANGLEBRACKET,\n\tOPENPAREN: OPENPAREN,\n\tCLOSEBRACE: CLOSEBRACE,\n\tCLOSEBRACKET: CLOSEBRACKET,\n\tCLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n\tCLOSEPAREN: CLOSEPAREN,\n\tAMPERSAND: AMPERSAND,\n\tAPOSTROPHE: APOSTROPHE,\n\tASTERISK: ASTERISK,\n\tAT: AT,\n\tBACKSLASH: BACKSLASH,\n\tBACKTICK: BACKTICK,\n\tCARET: CARET,\n\tCOLON: COLON,\n\tCOMMA: COMMA,\n\tDOLLAR: DOLLAR,\n\tDOT: DOT,\n\tEQUALS: EQUALS,\n\tEXCLAMATION: EXCLAMATION,\n\tHYPHEN: HYPHEN,\n\tPERCENT: PERCENT,\n\tPIPE: PIPE,\n\tPLUS: PLUS,\n\tPOUND: POUND,\n\tQUERY: QUERY,\n\tQUOTE: QUOTE,\n\tSEMI: SEMI,\n\tSLASH: SLASH,\n\tTILDE: TILDE,\n\tUNDERSCORE: UNDERSCORE,\n\tEMOJI: EMOJI$1,\n\tSYM: SYM\n});\n\n// Note that these two Unicode ones expand into a really big one with Babel\nconst ASCII_LETTER = /[a-z]/;\nconst LETTER = /\\p{L}/u; // Any Unicode character with letter data type\nconst EMOJI = /\\p{Emoji}/u; // Any Unicode emoji character\nconst EMOJI_VARIATION$1 = /\\ufe0f/;\nconst DIGIT = /\\d/;\nconst SPACE = /\\s/;\n\nvar regexp = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tASCII_LETTER: ASCII_LETTER,\n\tLETTER: LETTER,\n\tEMOJI: EMOJI,\n\tEMOJI_VARIATION: EMOJI_VARIATION$1,\n\tDIGIT: DIGIT,\n\tSPACE: SPACE\n});\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n*/\nconst NL = '\\n'; // New line character\nconst EMOJI_VARIATION = '\\ufe0f'; // Variation selector, follows heart and others\nconst EMOJI_JOINER = '\\u200d'; // zero-width joiner\n\nlet tlds = null,\n  utlds = null; // don't change so only have to be computed once\n\n/**\n * Scanner output token:\n * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')\n * - `v` is the value of the token (e.g., '123', '\u2764\uFE0F', 'com')\n * - `s` is the start index of the token in the original string\n * - `e` is the end index of the token in the original string\n * @typedef {{t: string, v: string, s: number, e: number}} Token\n */\n\n/**\n * @template T\n * @typedef {{ [collection: string]: T[] }} Collections\n */\n\n/**\n * Initialize the scanner character-based state machine for the given start\n * state\n * @param {[string, boolean][]} customSchemes List of custom schemes, where each\n * item is a length-2 tuple with the first element set to the string scheme, and\n * the second element set to `true` if the `://` after the scheme is optional\n */\nfunction init$2(customSchemes) {\n  if (customSchemes === void 0) {\n    customSchemes = [];\n  }\n  // Frequently used states (name argument removed during minification)\n  /** @type Collections<string> */\n  const groups = {}; // of tokens\n  State.groups = groups;\n  /** @type State<string> */\n  const Start = new State();\n  if (tlds == null) {\n    tlds = decodeTlds(encodedTlds);\n  }\n  if (utlds == null) {\n    utlds = decodeTlds(encodedUtlds);\n  }\n\n  // States for special URL symbols that accept immediately after start\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, '{', OPENBRACE);\n  tt(Start, '[', OPENBRACKET);\n  tt(Start, '<', OPENANGLEBRACKET);\n  tt(Start, '(', OPENPAREN);\n  tt(Start, '}', CLOSEBRACE);\n  tt(Start, ']', CLOSEBRACKET);\n  tt(Start, '>', CLOSEANGLEBRACKET);\n  tt(Start, ')', CLOSEPAREN);\n  tt(Start, '&', AMPERSAND);\n  tt(Start, '*', ASTERISK);\n  tt(Start, '@', AT);\n  tt(Start, '`', BACKTICK);\n  tt(Start, '^', CARET);\n  tt(Start, ':', COLON);\n  tt(Start, ',', COMMA);\n  tt(Start, '$', DOLLAR);\n  tt(Start, '.', DOT);\n  tt(Start, '=', EQUALS);\n  tt(Start, '!', EXCLAMATION);\n  tt(Start, '-', HYPHEN);\n  tt(Start, '%', PERCENT);\n  tt(Start, '|', PIPE);\n  tt(Start, '+', PLUS);\n  tt(Start, '#', POUND);\n  tt(Start, '?', QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, '/', SLASH);\n  tt(Start, ';', SEMI);\n  tt(Start, '~', TILDE);\n  tt(Start, '_', UNDERSCORE);\n  tt(Start, '\\\\', BACKSLASH);\n  const Num = tr(Start, DIGIT, NUM, {\n    [numeric]: true\n  });\n  tr(Num, DIGIT, Num);\n\n  // State which emits a word token\n  const Word = tr(Start, ASCII_LETTER, WORD, {\n    [ascii]: true\n  });\n  tr(Word, ASCII_LETTER, Word);\n\n  // Same as previous, but specific to non-fsm.ascii alphabet words\n  const UWord = tr(Start, LETTER, UWORD, {\n    [alpha]: true\n  });\n  tr(UWord, ASCII_LETTER); // Non-accepting\n  tr(UWord, LETTER, UWord);\n\n  // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n  // If any whitespace except newline, more whitespace!\n  const Ws = tr(Start, SPACE, WS, {\n    [whitespace]: true\n  });\n  tt(Start, NL, NL$1, {\n    [whitespace]: true\n  });\n  tt(Ws, NL); // non-accepting state to avoid mixing whitespaces\n  tr(Ws, SPACE, Ws);\n\n  // Emoji tokens. They are not grouped by the scanner except in cases where a\n  // zero-width joiner is present\n  const Emoji = tr(Start, EMOJI, EMOJI$1, {\n    [emoji]: true\n  });\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji);\n  // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy\n\n  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tr(EmojiJoiner, EMOJI, Emoji);\n  // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy\n\n  // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n  const wordjr = [[ASCII_LETTER, Word]];\n  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];\n  for (let i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n  for (let i = 0; i < utlds.length; i++) {\n    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);\n  }\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups);\n\n  // Collect the states generated by different protocols. NOTE: If any new TLDs\n  // get added that are also protocols, set the token to be the same as the\n  // protocol to ensure parsing works as expected.\n  fastts(Start, 'file', SCHEME, WORD, wordjr);\n  fastts(Start, 'mailto', SCHEME, WORD, wordjr);\n  fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups);\n\n  // Register custom schemes. Assumes each scheme is asciinumeric with hyphens\n  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  for (let i = 0; i < customSchemes.length; i++) {\n    const sch = customSchemes[i][0];\n    const optionalSlashSlash = customSchemes[i][1];\n    const flags = optionalSlashSlash ? {\n      [scheme]: true\n    } : {\n      [slashscheme]: true\n    };\n    if (sch.indexOf('-') >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true; // numbers only\n    } else if (DIGIT.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n    ts(Start, sch, sch, flags);\n  }\n\n  // Localhost token\n  ts(Start, 'localhost', LOCALHOST, {\n    ascii: true\n  });\n\n  // Set default transition for start state (some symbol)\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: assign({\n      groups\n    }, tk)\n  };\n}\n\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State<string>} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {Token[]} list of tokens, each with a type and value\n*/\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns regular case). Uses selective `toLowerCase` because\n  // lowercasing the entire string causes the length and character position to\n  // vary in some non-English strings with V8-based runtimes.\n  const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));\n  const charCount = iterable.length; // <= len if there are emojis, etc\n  const tokens = []; // return value\n\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n  let cursor = 0;\n\n  // Cursor through the array-representation of the string\n  let charCursor = 0;\n\n  // Tokenize the string\n  while (charCursor < charCount) {\n    let state = start;\n    let nextState = null;\n    let tokenLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    let charsSinceAccepts = -1;\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    }\n\n    // Roll back to the latest accepting state\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts;\n\n    // No more jumps, just make a new token from the last accepting one\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n    });\n  }\n\n  return tokens;\n}\n\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\nfunction stringToArray(str) {\n  const result = [];\n  const len = str.length;\n  let index = 0;\n  while (index < len) {\n    let first = str.charCodeAt(index);\n    let second;\n    let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n    result.push(char);\n    index += char.length;\n  }\n  return result;\n}\n\n/**\n * Fast version of ts function for when transition defaults are well known\n * @param {State<string>} state\n * @param {string} input\n * @param {string} t\n * @param {string} defaultt\n * @param {[RegExp, State<string>][]} jr\n * @returns {State<string>}\n */\nfunction fastts(state, input, t, defaultt, jr) {\n  let next;\n  const len = input.length;\n  for (let i = 0; i < len - 1; i++) {\n    const char = input[i];\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n    state = next;\n  }\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\n\n/**\n * Converts a string of Top-Level Domain names encoded in update-tlds.js back\n * into a list of strings.\n * @param {str} encoded encoded TLDs string\n * @returns {str[]} original TLDs list\n */\nfunction decodeTlds(encoded) {\n  const words = [];\n  const stack = [];\n  let i = 0;\n  let digits = '0123456789';\n  while (i < encoded.length) {\n    let popDigitCount = 0;\n    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {\n      popDigitCount++; // encountered some digits, have to pop to go one level up trie\n    }\n\n    if (popDigitCount > 0) {\n      words.push(stack.join('')); // whatever preceded the pop digits must be a word\n      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {\n        stack.pop();\n      }\n      i += popDigitCount;\n    } else {\n      stack.push(encoded[i]); // drop down a level into the trie\n      i++;\n    }\n  }\n  return words;\n}\n\n/**\n * An object where each key is a valid DOM Event Name such as `click` or `focus`\n * and each value is an event handler function.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element#events\n * @typedef {?{ [event: string]: Function }} EventListeners\n */\n\n/**\n * All formatted properties required to render a link, including `tagName`,\n * `attributes`, `content` and `eventListeners`.\n * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,\n * eventListeners: EventListeners }} IntermediateRepresentation\n */\n\n/**\n * Specify either an object described by the template type `O` or a function.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `O`\n * @template O\n * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj\n */\n\n/**\n * Specify either a function described by template type `F` or an object.\n *\n * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each\n * value should be a function with template type `F` that is called when the\n * corresponding link type is encountered.\n * @template F\n * @typedef {F | { [type: string]: F}} OptFn\n */\n\n/**\n * Specify either a value with template type `V`, a function that returns `V` or\n * an object where each value resolves to `V`.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `V`\n *\n * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).\n * Each value should either have type `V` or a function that returns V. This\n * function similarly takes a string value and a token.\n *\n * Example valid types for `Opt<string>`:\n *\n * ```js\n * 'hello'\n * (value, type, token) => 'world'\n * { url: 'hello', email: (value, token) => 'world'}\n * ```\n * @template V\n * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt\n */\n\n/**\n * See available options: https://linkify.js.org/docs/options.html\n * @typedef {{\n * \tdefaultProtocol?: string,\n *  events?: OptObj<EventListeners>,\n * \tformat?: Opt<string>,\n * \tformatHref?: Opt<string>,\n * \tnl2br?: boolean,\n * \ttagName?: Opt<any>,\n * \ttarget?: Opt<string>,\n * \trel?: Opt<string>,\n * \tvalidate?: Opt<boolean>,\n * \ttruncate?: Opt<number>,\n * \tclassName?: Opt<string>,\n * \tattributes?: OptObj<({ [attr: string]: any })>,\n *  ignoreTags?: string[],\n * \trender?: OptFn<((ir: IntermediateRepresentation) => any)>\n * }} Opts\n */\n\n/**\n * @type Required<Opts>\n */\nconst defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\n\n/**\n * Utility class for linkify interfaces to apply specified\n * {@link Opts formatting and rendering options}.\n *\n * @param {Opts | Options} [opts] Option value overrides.\n * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For\n *   internal use) default render function that determines how to generate an\n *   HTML element based on a link token's derived tagName, attributes and HTML.\n *   Similar to render option\n */\nfunction Options(opts, defaultRender) {\n  if (defaultRender === void 0) {\n    defaultRender = null;\n  }\n  let o = assign({}, defaults);\n  if (opts) {\n    o = assign(o, opts instanceof Options ? opts.o : opts);\n  }\n\n  // Ensure all ignored tags are uppercase\n  const ignoredTags = o.ignoreTags;\n  const uppercaseIgnoredTags = [];\n  for (let i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  /** @protected */\n  this.o = o;\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults,\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender(ir) {\n    return ir;\n  },\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get(key, operator, token) {\n    const isCallable = operator != null;\n    let option = this.o[key];\n    if (!option) {\n      return option;\n    }\n    if (typeof option === 'object') {\n      option = token.t in option ? option[token.t] : defaults[key];\n      if (typeof option === 'function' && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === 'function' && isCallable) {\n      option = option(operator, token.t, token);\n    }\n    return option;\n  },\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj(key, operator, token) {\n    let obj = this.o[key];\n    if (typeof obj === 'function' && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n    return obj;\n  },\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render(token) {\n    const ir = token.render(this); // intermediate representation\n    const renderFn = this.get('render', null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\nfunction noop(val) {\n  return val;\n}\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tdefaults: defaults,\n\tOptions: Options,\n\tassign: assign\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n/**\n * @param {string} value\n * @param {Token[]} tokens\n */\nfunction MultiToken(value, tokens) {\n  this.t = 'token';\n  this.v = value;\n  this.tk = tokens;\n}\n\n/**\n * Abstract class used for manufacturing tokens of text tokens. That is rather\n * than the value for a token being a small string of text, it's value an array\n * of text tokens.\n *\n * Used for grouping together URLs, emails, hashtags, and other potential\n * creations.\n * @class MultiToken\n * @property {string} t\n * @property {string} v\n * @property {Token[]} tk\n * @abstract\n */\nMultiToken.prototype = {\n  isLink: false,\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString() {\n    return this.v;\n  },\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n  */\n  toHref(scheme) {\n    return this.toString();\n  },\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString(options) {\n    const val = this.toString();\n    const truncate = options.get('truncate', val, this);\n    const formatted = options.get('format', val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '\u2026' : formatted;\n  },\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref(options) {\n    return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);\n  },\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex() {\n    return this.tk[0].s;\n  },\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject(protocol) {\n    if (protocol === void 0) {\n      protocol = defaults.defaultProtocol;\n    }\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate(options) {\n    return options.get('validate', this.toString(), this);\n  },\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render(options) {\n    const token = this;\n    const href = this.toHref(options.get('defaultProtocol'));\n    const formattedHref = options.get('formatHref', href, this);\n    const tagName = options.get('tagName', href, token);\n    const content = this.toFormattedString(options);\n    const attributes = {};\n    const className = options.get('className', href, token);\n    const target = options.get('target', href, token);\n    const rel = options.get('rel', href, token);\n    const attrs = options.getObj('attributes', href, token);\n    const eventListeners = options.getObj('events', href, token);\n    attributes.href = formattedHref;\n    if (className) {\n      attributes.class = className;\n    }\n    if (target) {\n      attributes.target = target;\n    }\n    if (rel) {\n      attributes.rel = rel;\n    }\n    if (attrs) {\n      assign(attributes, attrs);\n    }\n    return {\n      tagName,\n      attributes,\n      content,\n      eventListeners\n    };\n  }\n};\n\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class\n */\nfunction createTokenClass(type, props) {\n  class Token extends MultiToken {\n    constructor(value, tokens) {\n      super(value, tokens);\n      this.t = type;\n    }\n  }\n  for (const p in props) {\n    Token.prototype[p] = props[p];\n  }\n  Token.t = type;\n  return Token;\n}\n\n/**\n\tRepresents a list of tokens making up a valid email address\n*/\nconst Email = createTokenClass('email', {\n  isLink: true,\n  toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n\n/**\n\tRepresents some plain text\n*/\nconst Text = createTokenClass('text');\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n*/\nconst Nl = createTokenClass('nl');\n\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n*/\nconst Url = createTokenClass('url', {\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref(scheme) {\n    if (scheme === void 0) {\n      scheme = defaults.defaultProtocol;\n    }\n    // Check if already has a prefix scheme\n    return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;\n  },\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol() {\n    const tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\n\nvar multi = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tMultiToken: MultiToken,\n\tBase: MultiToken,\n\tcreateTokenClass: createTokenClass,\n\tEmail: Email,\n\tText: Text,\n\tNl: Nl,\n\tUrl: Url\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\nconst makeState = arg => new State(arg);\n\n/**\n * Generate the parser multi token-based state machine\n * @param {{ groups: Collections<string> }} tokens\n */\nfunction init$1(_ref) {\n  let {\n    groups\n  } = _ref;\n  // Types of characters the URL can definitely end in\n  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);\n\n  // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n  const qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET, CLOSEBRACE, CLOSEBRACKET, CLOSEPAREN, COLON, COMMA, DOT, EXCLAMATION, OPENANGLEBRACKET, OPENBRACE, OPENBRACKET, OPENPAREN, QUERY, QUOTE, SEMI];\n\n  // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, CLOSEBRACE, DOLLAR, EQUALS, HYPHEN, OPENBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];\n\n  // The universal starting state.\n  /**\n   * @type State<Token>\n   */\n  const Start = makeState();\n  const Localpart = tt(Start, TILDE); // Local part of the email address\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  const Domain = makeState(),\n    Scheme = makeState(),\n    SlashScheme = makeState();\n  ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)\n  ta(Start, groups.scheme, Scheme); // e.g., 'mailto'\n  ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'\n\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  const LocalpartAt = tt(Domain, AT); // Local part of the email address plus @\n\n  tt(Localpart, AT, LocalpartAt); // close to an email address now\n\n  // Local part of an email address can be e.g. 'http' or 'mailto'\n  tt(Scheme, AT, LocalpartAt);\n  tt(SlashScheme, AT, LocalpartAt);\n  const LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  const EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomain, groups.domain, EmailDomain);\n  const EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  const Email$1 = makeState(Email); // Possible email address (could have more tlds)\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1);\n\n  // Hyphen can jump back to a domain name\n  const EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen);\n\n  // Final possible email states\n  const EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)\n  /*const EmailColonPort = */\n  ta(EmailColon, groups.numeric, Email); // URL followed by colon and port numner\n\n  // Account for dots and hyphens. Hyphens are usually parts of domain names\n  // (but not TLDs)\n  const DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen\n  const DomainDot = tt(Domain, DOT); // domain followed by DOT\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  const DomainDotTld = makeState(Url); // Simplest possible URL with no query string\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  const DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)\n  const DomainDotTldColonPort = makeState(Url); // TLD followed by a port number\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);\n\n  // Long URL with optional port and maybe query string\n  const Url$1 = makeState(Url);\n\n  // URL with extra symbols at the end, followed by an opening bracket\n  const UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\n  // Query strings\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);\n\n  // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here works with or without scheme:// prefix\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1);\n\n  // Note that domains that begin with schemes are treated slighly differently\n  const SchemeColon = tt(Scheme, COLON); // e.g., 'mailto:'\n  const SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'\n  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'\n\n  const UriPrefix = tt(SlashSchemeColonSlash, SLASH); // e.g., 'http://'\n\n  // Scheme states can transition to domain states\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen);\n\n  // Force URL with scheme prefix followed by anything sane\n  ta(SchemeColon, groups.domain, Url$1);\n  tt(SchemeColon, SLASH, Url$1);\n  ta(UriPrefix, groups.domain, Url$1);\n  ta(UriPrefix, qsAccepting, Url$1);\n  tt(UriPrefix, SLASH, Url$1);\n\n  // URL, followed by an opening bracket\n  const UrlOpenbrace = tt(Url$1, OPENBRACE); // URL followed by {\n  const UrlOpenbracket = tt(Url$1, OPENBRACKET); // URL followed by [\n  const UrlOpenanglebracket = tt(Url$1, OPENANGLEBRACKET); // URL followed by <\n  const UrlOpenparen = tt(Url$1, OPENPAREN); // URL followed by (\n\n  tt(UrlNonaccept, OPENBRACE, UrlOpenbrace);\n  tt(UrlNonaccept, OPENBRACKET, UrlOpenbracket);\n  tt(UrlNonaccept, OPENANGLEBRACKET, UrlOpenanglebracket);\n  tt(UrlNonaccept, OPENPAREN, UrlOpenparen);\n\n  // Closing bracket component. This character WILL be included in the URL\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracket, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracket, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparen, CLOSEPAREN, Url$1);\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1);\n\n  // URL that beings with an opening bracket, followed by a symbols.\n  // Note that the final state can still be `UrlOpenbrace` (if the URL only\n  // has a single opening bracket for some reason).\n  const UrlOpenbraceQ = makeState(Url); // URL followed by { and some symbols that the URL can end it\n  const UrlOpenbracketQ = makeState(Url); // URL followed by [ and some symbols that the URL can end it\n  const UrlOpenanglebracketQ = makeState(Url); // URL followed by < and some symbols that the URL can end it\n  const UrlOpenparenQ = makeState(Url); // URL followed by ( and some symbols that the URL can end it\n  ta(UrlOpenbrace, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracket, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracket, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparen, qsAccepting, UrlOpenparenQ);\n  const UrlOpenbraceSyms = makeState(); // UrlOpenbrace followed by some symbols it cannot end it\n  const UrlOpenbracketSyms = makeState(); // UrlOpenbracketQ followed by some symbols it cannot end it\n  const UrlOpenanglebracketSyms = makeState(); // UrlOpenanglebracketQ followed by some symbols it cannot end it\n  const UrlOpenparenSyms = makeState(); // UrlOpenparenQ followed by some symbols it cannot end it\n  ta(UrlOpenbrace, qsNonAccepting);\n  ta(UrlOpenbracket, qsNonAccepting);\n  ta(UrlOpenanglebracket, qsNonAccepting);\n  ta(UrlOpenparen, qsNonAccepting);\n\n  // URL that begins with an opening bracket, followed by some symbols\n  ta(UrlOpenbraceQ, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceQ, qsNonAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsNonAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsNonAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsNonAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketSyms, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenSyms, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsNonAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsNonAccepting, UrlOpenbracketSyms);\n  ta(UrlOpenanglebracketSyms, qsNonAccepting, UrlOpenanglebracketSyms);\n  ta(UrlOpenparenSyms, qsNonAccepting, UrlOpenparenSyms);\n\n  // Close brace/bracket to become regular URL\n  tt(UrlOpenbracketQ, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketQ, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenQ, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceQ, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracketSyms, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketSyms, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenSyms, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceSyms, CLOSEPAREN, Url$1);\n  tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state\n  tt(Start, NL$1, Nl); // single new line\n\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\n\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State<MultiToken>} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {Token[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\nfunction run(start, input, tokens) {\n  let len = tokens.length;\n  let cursor = 0;\n  let multis = [];\n  let textTokens = [];\n  while (cursor < len) {\n    let state = start;\n    let secondState = null;\n    let nextState = null;\n    let multiLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token add\n      // the first text token to the text tokens array and try again from\n      // the next\n      cursor -= multiLength;\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      }\n\n      // Roll back to the latest accepting state\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n\n      // Create a new multitoken\n      const Multi = latestAccepting.t;\n      const subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  }\n\n  // Finally close off the textTokens (if available)\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n  return multis;\n}\n\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate\n * @param {string} input original input string\n * @param {Token[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\nfunction initMultiToken(Multi, input, tokens) {\n  const startIdx = tokens[0].s;\n  const endIdx = tokens[tokens.length - 1].e;\n  const value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\n\nconst warn = typeof console !== 'undefined' && console && console.warn || (() => {});\nconst warnAdvice = 'until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.';\n\n// Side-effect initialization state\nconst INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\n\n/**\n * @typedef {{\n * \tstart: State<string>,\n * \ttokens: { groups: Collections<string> } & typeof tk\n * }} ScannerInit\n */\n\n/**\n * @typedef {{\n * \tstart: State<MultiToken>,\n * \ttokens: typeof multi\n * }} ParserInit\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin\n */\n\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\nfunction reset() {\n  State.groups = {};\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.tokenQueue = [];\n  INIT.pluginQueue = [];\n  INIT.customSchemes = [];\n  INIT.initialized = false;\n}\n\n/**\n * Register a token plugin to allow the scanner to recognize additional token\n * types before the parser state machine is constructed from the results.\n * @param {string} name of plugin to register\n * @param {TokenPlugin} plugin function that accepts the scanner state machine\n * and available scanner tokens and collections and extends the state machine to\n * recognize additional tokens or groups.\n */\nfunction registerTokenPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid token plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    if (name === INIT.tokenQueue[i][0]) {\n      warn(`linkifyjs: token plugin \"${name}\" already registered - will be overwritten`);\n      INIT.tokenQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.tokenQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register token plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Register a linkify plugin\n * @param {string} name of plugin to register\n * @param {Plugin} plugin function that accepts the parser state machine and\n * extends the parser to recognize additional link types\n */\nfunction registerPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(`linkifyjs: plugin \"${name}\" already registered - will be overwritten`);\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.pluginQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Detect URLs with the following additional protocol. Anything with format\n * \"protocol://...\" will be considered a link. If `optionalSlashSlash` is set to\n * `true`, anything with format \"protocol:...\" will be considered a link.\n * @param {string} protocol\n * @param {boolean} [optionalSlashSlash]\n */\nfunction registerCustomProtocol(scheme, optionalSlashSlash) {\n  if (optionalSlashSlash === void 0) {\n    optionalSlashSlash = false;\n  }\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register custom scheme \"${scheme}\" ${warnAdvice}`);\n  }\n  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {\n    throw new Error('linkifyjs: incorrect scheme format.\\n 1. Must only contain digits, lowercase ASCII letters or \"-\"\\n 2. Cannot start or end with \"-\"\\n 3. \"-\" cannot repeat');\n  }\n  INIT.customSchemes.push([scheme, optionalSlashSlash]);\n}\n\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\nfunction init() {\n  // Initialize scanner state machine and plugins\n  INIT.scanner = init$2(INIT.customSchemes);\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  }\n\n  // Initialize parser state machine and plugins\n  INIT.parser = init$1(INIT.scanner.tokens);\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n  INIT.initialized = true;\n}\n\n/**\n * Parse a string into tokens that represent linkable and non-linkable sub-components\n * @param {string} str\n * @return {MultiToken[]} tokens\n */\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\n\n/**\n * Find a list of linkable items in the given string.\n * @param {string} str string to find links in\n * @param {string | Opts} [type] either formatting options or specific type of\n * links to find, e.g., 'url' or 'email'\n * @param {Opts} [opts] formatting options for final output. Cannot be specified\n * if opts already provided in `type` argument\n*/\nfunction find(str, type, opts) {\n  if (type === void 0) {\n    type = null;\n  }\n  if (opts === void 0) {\n    opts = null;\n  }\n  if (type && typeof type === 'object') {\n    if (opts) {\n      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);\n    }\n    opts = type;\n    type = null;\n  }\n  const options = new Options(opts);\n  const tokens = tokenize(str);\n  const filtered = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.isLink && (!type || token.t === type)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n  return filtered;\n}\n\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\nfunction test(str, type) {\n  if (type === void 0) {\n    type = null;\n  }\n  const tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\n\nexport { MultiToken, Options, State, createTokenClass, find, init, multi, options, regexp, registerCustomProtocol, registerPlugin, registerTokenPlugin, reset, stringToArray, test, tokenize };\n", "import * as ir from '../stir/index.js'\nimport type {Stylesheet} from './ptss/index.js'\nimport type {NamedValues} from './namedValues.js'\n\nimport * as linkify from 'linkifyjs'\n\n// Markdown-it deep imports\n// todo[arch] remove Markdown-it from package.json non-dev dependencies when we ditch Markdown-it\nimport MarkdownIt from 'markdown-it/lib/index.js'\nimport type markdownItToken from 'markdown-it/lib/token.js'\n//import markdownItUtils from 'markdown-it/lib/common/utils.js'\nimport subscript from 'markdown-it-sub'\nimport superscript from 'markdown-it-sup'\nimport highlight from 'markdown-it-mark'\n\nimport * as newline_parameterized from './mdit_rules/newline_parameterized.js'\nimport * as escape_parameterized from './mdit_rules/escape_parameterized.js'\nimport * as backticks_parameterized from './mdit_rules/backticks_parameterized.js'\nimport * as gfm_strikethrough from './mdit_rules/gfm_strikethrough.js'\nimport {createLinkDestParser} from './mdit_rules/parseLinkDest_parameterized.js'\nimport * as reference from './mdit_rules/reference.js'\nimport * as image from './mdit_rules/image.js'\nimport * as autolink from './mdit_rules/autolink.js'\nimport * as noteRef from './mdit_rules/note_ref.js'\n\n\nconst RE_OPEN_ANGLE = /<\\s*$/\nconst RE_TRAILING_SPACE_OR_OPEN_PARENS = /[ \\t(]$/\n\n\n/*\n The InlineParser object.\n\n An InlineParser keeps track of a subject (a string to be\n parsed) and a position in that subject.\n*/\nexport class InlineParser {\n    private readonly _stylesheet: Stylesheet\n\n    private readonly _markdownIt\n\n    constructor (stylesheet: Stylesheet) {\n        this._stylesheet = stylesheet\n        this._markdownIt = this.configureMarkdownIt()\n\n        //todo[smartquotes] Haven't decided where \"smart quotes\" belongs:\n        // - as a ptss-parser option\n        // - as a style sheet option\n        // - as a pipeline transform\n        // - as a renderer option\n        // - two or more of the above\n        // - all of the above\n    }\n\n    private configureMarkdownIt (): MarkdownIt {\n        // todo![inline] TEMP HACK OF A TEMP HACK. My hack is supposed\n        //   to take a list of names of Markdown-it core/inline elements\n        //   to enable.\n        //   When ready to implement, see:\n        //   - https://markdown-it.github.io/markdown-it/#MarkdownIt\n        //   - MarkdownIt.prototype.configure implementation\n        //   - markdown-it/lib/presets\n\n        const markdownIt = new MarkdownIt('zero')\n\n        const rules = []\n        for (let styleName of this._stylesheet.inlineStyles) {\n            const match = styleName.match(/^(.+?)\\((.*)\\)$/)\n            let styleArg = undefined\n            if (match) {\n                styleName = match[1]\n                styleArg = match[2]\n            }\n\n            if (styleName === 'html') {\n                markdownIt.set({'html': true})\n            } else if (styleName === 'newline') {\n                //HACK: first enabling the orig and then replacing so that it goes in the right order.\n                markdownIt.enable('newline')\n                markdownIt.inline.ruler.at('newline', newline_parameterized.tokenize)\n            } else if (styleName === 'noteRef') {\n                markdownIt.inline.ruler.before('link', 'noteRef', noteRef.createRule(styleArg))\n            } else if (styleName === 'reference') {\n                markdownIt.inline.ruler.before('link', 'reference', reference.createRule())\n            } else if (styleName === 'image') {\n                //HACK: first enabling the orig and then replacing so that it goes in the right order.\n                markdownIt.enable('image')\n                markdownIt.inline.ruler.at('image', image.createRule())\n            } else if (styleName === 'autolink') {\n                //HACK: first enabling the orig and then replacing so that it goes in the right order.\n                markdownIt.enable('autolink')\n                markdownIt.inline.ruler.at('autolink', autolink.tokenize)\n            } else if (styleName === 'gfm_strikethrough') {\n                markdownIt.inline.ruler.before('emphasis', 'gfm_strikethrough', gfm_strikethrough.tokenize)\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore @types/markdown-it is wrong. Don't have the time for their PR process ATM.\n                markdownIt.inline.ruler2.before('emphasis', 'gfm_strikethrough', gfm_strikethrough.postProcess)\n            } else if (styleName === 'escape') {\n                //HACK: first enabling the orig and then replacing so that it goes in the right order.\n                markdownIt.enable('escape')\n                markdownIt.inline.ruler.at('escape', escape_parameterized.createRule(this._stylesheet))\n            } else if (styleName === 'backticks') {\n                //HACK: first enabling the orig and then replacing so that it goes in the right order.\n                markdownIt.enable('backticks')\n                markdownIt.inline.ruler.at('backticks', backticks_parameterized.createRule(styleArg))\n            } else if (styleName === 'bare_links') {\n                // markdown-it's 'linkify' doesn't work for\n                // it inline parser, so we will do later when\n                // we process the tokens\n            } else if (styleName === 'checkbox_text') {\n                // handled by `convertTokens` below\n            } else if (styleName === 'subscript') {\n                markdownIt.use(subscript)\n            } else if (styleName === 'superscript') {\n                markdownIt.use(superscript)\n            } else if (styleName === 'text_highlight') {\n                markdownIt.use(highlight)\n            } else {\n                // just enable the corresponding built-in Markdown-it rule\n                rules.push(styleName)\n            }\n        }\n        markdownIt.enable(rules)\n\n        // Disabling Markdown-it's urlEncoding of link targets. This is a\n        // render-side and rendering format-specific concern.\n        //\n        // Markdown-it assumes all link destinations are URLs and so\n        // URL encodes them at parse time rather than at render time.\n        //\n        // But PTSS ***cannot*** make this assumption:\n        // - the dest may be internal text assembly cross-reference paths.\n        //   Encoding them would ruin them. They cannot be messed with until\n        //   AFTER they are resolved.\n        // - cannot assume the rendering is HTML. Links in different renderings\n        //   will take different forms.\n        markdownIt.normalizeLink = (s) => s\n\n        markdownIt.helpers.parseLinkDestination = createLinkDestParser(this._stylesheet)\n\n        return markdownIt\n    }\n\n    /**\n     * Implements the PTSS Expressions `parse` function.\n     *\n     *\n     * Whitespace Handling\n     * -------------------\n     * todo![stir, spec] \u2638\uFE0F Unlike HTML and Markdown, STIR is not designed for\n     *  editor convenience. It is designed for abstractness and zero-ambiguity.\n     *  All whitespace is considered deliberate.\n     *\n     *  i.e. this except from MDN on HTML whitespace DOES NOT APPLY to STIR:\n     *\n     *  > These characters allow you to format your code in a way that will\n     *  > make it easily readable by yourself and other people. In fact, much\n     *  > of our source code is full of these whitespace characters, and we\n     *  > only tend to get rid of it in a production build step to reduce\n     *  > code download sizes.\n     *\n     *  - from https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace\n     *\n     *  CONSIDER all of the CSS whitespace options and consider supporting\n     *  some or all of them.\n     *\n     * @param {string} inlineText\n     * @param {string[]} parseArgs - ptss `parse` expression args\n     * @param {NamedValues} namedValues\n     * @return {InlineSequence}\n     */\n    parse (inlineText: string,\n           parseArgs: string[] = [],\n           namedValues: NamedValues)\n        : ir.InlineSequence {\n        // console.debug('inlineText:', JSON.stringify(inlineText))\n        // console.debug('refs:', JSON.stringify(synDictionary.asMarkdownItRefMap()))\n\n        const env = {\n            namedValues: namedValues,\n            preserveWhitespace: false,\n            preserveNewlines: false,\n            newlineIsHardBreak: false,\n            backslashNewlineIsHardBreak: false,\n            backslashEOCIsHardBreak: false,\n            twoSpaceNewlineIsHardBreak: false\n        }\n\n        for (const arg of parseArgs) {\n            if (arg === 'preserveWhitespace') env.preserveWhitespace = true\n            else if (arg === 'preserveNewlines') env.preserveNewlines = true\n            else if (arg === 'newlineIsHardBreak') env.newlineIsHardBreak = true\n            else if (arg === 'backslashNewlineIsHardBreak') env.backslashNewlineIsHardBreak = true\n            else if (arg === 'backslashEOCIsHardBreak') env.backslashEOCIsHardBreak = true\n            else if (arg === 'twoSpaceNewlineIsHardBreak') env.twoSpaceNewlineIsHardBreak = true\n            else throw Error(`unrecognized parse option: '${arg}'`)\n        }\n\n        // markdown-it doesn't consistently do this internally,\n        // so let's ensure this here.\n        if (!env.preserveWhitespace) {\n            inlineText = inlineText.trim()\n        }\n\n        const tokens = new Array<markdownItToken>()\n        this._markdownIt.inline.parse(inlineText, this._markdownIt, env, tokens)\n        // console.debug('output:', JSON.stringify(tokens))\n\n        if (tokens.length === 0) {\n            return ''\n        }\n\n        const tmp = new ir.Inline('TMP') // a bit of a hack, but not a big deal\n        this.convertTokens(tmp, tokens, namedValues)\n        return tmp.body as ir.InlineSequence\n    }\n\n    convertTokens (root: ir.Inline, tokens: markdownItToken[],\n                   namedValues: NamedValues): void {\n        const bare_links = this._stylesheet.inlineStyles.includes('bare_links')\n        const checkbox_text = this._stylesheet.inlineStyles.includes('checkbox_text')\n\n        let curInline = root\n        let newInline: ir.Inline\n        const stack = [] as ir.Inline[]\n\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i]\n            switch (token.type) {\n                case 'text':\n                    if (i === 0 && checkbox_text) {\n                        if (token.content.startsWith('[ ] ')) {\n                            newInline = new ir.Inline('checkbox')\n                            curInline.bodyAppend(newInline)\n                            // we want to leave the space in between\n                            token.content = token.content.slice(3)\n                        } else if (token.content.startsWith('[x] ')) {\n                            newInline = new ir.Inline('checkbox')\n                            newInline.checked = true\n                            curInline.bodyAppend(newInline)\n                            // we want to leave the space in between\n                            token.content = token.content.slice(3)\n                        }\n                    }\n                    if (bare_links && curInline.type !== 'xref') {\n                        curInline.bodyAppend(this.parseBareLinks(token.content))\n                    } else {\n                        curInline.bodyAppend(token.content)\n                    }\n                    break\n                case 'text_special':\n                    curInline.bodyAppend(token.content)\n                    break\n                case 'softbreak':\n                    // todo![stir, spec] what is LaTeX and PDF's take on the\n                    //   following design fork?\n\n                    // todo![stir, spec] DESIGN FORK\n                    //   Regardless of fork path chosen: CommonMark's position\n                    //   that it is a rendering decision whether to treat\n                    //   newlines as soft or hard breaks goes against STIR\n                    //   principles: An author intends one thing or the other,\n                    //   that the line must break here or must flow normally.\n                    //   It makes no sense to offer any \"rendering choice\".\n                    //   .\n                    //   Below when I say \"semantic softbreak\" or \"semantic\n                    //   hardbreak\", I am referring, as usual, to the author's\n                    //   *intended* semantics.\n                    //   .\n                    //   option a: HTML/LaTeX SEMANTICS (current implementation)\n                    //   ------------------------------\n                    //   plain text, BY DEFAULT, in STIR has same semantics as\n                    //   it does in HTML, which is that newlines are rendered as\n                    //   plain whitespace and will be collapsed along with other\n                    //   adjacent whitespace to a single space, unless it is\n                    //   contained in a container that specifies otherwise,\n                    //   e.g. <pre>. Thus:\n                    //   - it shouldn't matter whether a semantic soft break is\n                    //     represented in STIR text as a space or `\\n`.\n                    //   - a semantic hard break is represented by a STIR\n                    //     `linebreak` inline element, analogous to HTML <br>.\n                    //   .\n                    //   This default is can be overridden in the style\n                    //   definition.\n                    //   .\n                    //   option b: LITERAL WHITESPACE/NEWLINES\n                    //   -------------------------------------\n                    //   Text whitespace is normalized. This means that if, for\n                    //   example, the input has HTML/LaTeX semantics, those\n                    //   semantics should be applied (newlines converted to\n                    //   spaces, then consecutive spaces collapsed) BY THE\n                    //   PARSING, BEFORE IT IS WRITTEN TO THE STIR.\n                    //   .\n                    //   The result is that STIR text can be taken literally:\n                    //   a space is a space, two spaces are two spaces, and a\n                    //   newline is a new line.\n                    //   .\n                    //   analysis\n                    //   --------\n                    //   - The fact that option B can be stated in two sentences\n                    //     pretty much sells itself.\n                    //   - But that both LaTeX and HTML go the other way can't\n                    //     be dismissed easily.\n                    //   - For option B to work, there can be no ambiguity about\n                    //     newlines in STIR text. All \"soft break\" newlines need\n                    //     to be replaced with a space (and then collapsed along\n                    //     with other spaces.\n                    //   - Normalizing whitespace would have a performance\n                    //     penalty, at least for plain text styles that have\n                    //     sloppy content (e.g. Markdown, as well as HTML).\n                    //     Ultimately we break even, as we've shifted the work\n                    //     from the final renderer (e.g. the browser doesn't\n                    //     have to do it) to the parser, but it will make\n                    //     Textplain seem less efficient in comparison. THOUGH\n                    //     this my turn out to be negligible --- should at least\n                    //     run a benchmark comparison before ditching B.\n                    //   .\n                    //   what about PRE blocks?\n                    //   ----------------------\n                    //   how do each of the two options support STIR PRE blocks?\n                    //   - if we go with option B, it seems like there is NO NEED\n                    //     for PRE blocks. \uD83E\uDD14\n                    //   - with option A, i think STIR would be exactly like\n                    //     HTML: different semantics inside a PRE block.\n                    curInline.bodyAppend('\\n')\n                    break\n                case 'hardbreak':\n                    curInline.bodyAppend(new ir.Inline('linebreak'))\n                    break\n                case 'em_open':\n                    stack.push(curInline)\n                    newInline = new ir.Inline('emph')\n                    curInline.bodyAppend(newInline)\n                    curInline = newInline\n                    break\n                case 'em_close':\n                    // trusting Markdown-it for well-formed token stream\n                    curInline = stack.pop() as ir.Inline\n                    break\n                case 'strong_open':\n                    stack.push(curInline)\n                    newInline = new ir.Inline('strong')\n                    curInline.bodyAppend(newInline)\n                    curInline = newInline\n                    break\n                case 'strong_close':\n                    // trusting Markdown-it for well-formed token stream\n                    curInline = stack.pop() as ir.Inline\n                    break\n                case 's_open':\n                    stack.push(curInline)\n                    newInline = new ir.Inline('strike')\n                    curInline.bodyAppend(newInline)\n                    curInline = newInline\n                    break\n                case 's_close':\n                    // trusting Markdown-it for well-formed token stream\n                    curInline = stack.pop() as ir.Inline\n                    break\n                case 'sub_open':\n                    stack.push(curInline)\n                    newInline = new ir.Inline('subscript')\n                    curInline.bodyAppend(newInline)\n                    curInline = newInline\n                    break\n                case 'sub_close':\n                    // trusting Markdown-it for well-formed token stream\n                    curInline = stack.pop() as ir.Inline\n                    break\n                case 'sup_open':\n                    stack.push(curInline)\n                    newInline = new ir.Inline('superscript')\n                    curInline.bodyAppend(newInline)\n                    curInline = newInline\n                    break\n                case 'sup_close':\n                    // trusting Markdown-it for well-formed token stream\n                    curInline = stack.pop() as ir.Inline\n                    break\n                case 'mark_open':\n                    stack.push(curInline)\n                    newInline = new ir.Inline('highlight')\n                    curInline.bodyAppend(newInline)\n                    curInline = newInline\n                    break\n                case 'mark_close':\n                    // trusting Markdown-it for well-formed token stream\n                    curInline = stack.pop() as ir.Inline\n                    break\n                case 'link_open':\n                    stack.push(curInline)\n                    newInline = new ir.Inline('xref')\n                    //todo![spec, doc] For the serialized form of STIR,\n                    //  the referent will always be a string, with the ID of\n                    //  the internal element in the case of an internal reference.\n                    //  But the in-memory form will have direct in-memory pointers\n                    //  to the referent.\n                    newInline.referent = token.attrGet('referent') || ''  //! would be `token.attrGet('referent')` but it's not worth changing markdown-it\n                    newInline.desc = token.attrGet('desc') || undefined\n                    curInline.bodyAppend(newInline)\n                    curInline = newInline\n                    break\n                case 'link_close':\n                    // trusting Markdown-it for well-formed token stream\n                    if (curInline.body === undefined) {\n                        // special case empty link text\n                        curInline.body = ''\n                    }\n                    curInline = stack.pop() as ir.Inline\n                    break\n                case 'image':\n                    //! 'image' is handled differently from links because\n                    //   the image inline parser creates a token with the\n                    //   children already added on.\n                    //   - this MAY BE due to the the alt text not being stylized\n                    //     like link text can be.\n                    //   - or it MAY BE just an impl difference, and we could\n                    //     sync them to the same impl.  NOT SURE.\n                    newInline = new ir.Inline('image')\n                    newInline.referent = token.attrGet('src') || ''\n                    newInline.desc = token.attrGet('desc') || undefined\n                    if (token.children && token.children.length > 0) {\n                        this.convertTokens(newInline, token.children, namedValues)\n                    } else {\n                        newInline.body = ''\n                    }\n                    curInline.bodyAppend(newInline)\n                    break\n                case 'note_ref':\n                    newInline = new ir.Inline('note_ref')\n                    newInline.referent = token.attrGet('referent') || ''\n                    curInline.bodyAppend(newInline)\n                    break\n                case 'code_inline':\n                    newInline = new ir.Inline('code')\n                    newInline.body = token.content\n                    curInline.bodyAppend(newInline)\n                    break\n                case 'html_inline':\n                    newInline = new ir.Inline('html_inline')\n                    newInline.body = token.content\n                    curInline.bodyAppend(newInline)\n                    break\n                default:\n                    throw Error(`unknown token type: \"${token.type}\"`)\n            }\n        }\n    }\n\n    // https://linkify.js.org/docs/options.html\n    // https://github.com/Hypercontext/linkifyjs\n    private parseBareLinks (text: string): ir.InlineSequence {\n        console.group(`parseBareLinks \"${text}\"`)\n        const tokens = linkify.tokenize(text)\n        if (tokens.length === 1 && !tokens[0].isLink) {\n            console.groupEnd()\n            return text\n        }\n        const seq: ir.InlineSequence = []\n        let canLink = true\n        for (const tok of tokens) {\n            console.log(tok.toString())\n            if (canLink && tok.isLink) {\n                const irRef = new ir.Inline('xref')\n                irRef.referent = tok.toHref()\n                //irRef.description = token.attrGet('desc') || undefined\n                irRef.bodyAppend(tok.v)\n                seq.push(irRef)\n                canLink = false\n            } else {\n                seq.push(tok.v)\n                canLink = RE_TRAILING_SPACE_OR_OPEN_PARENS.test(tok.v) && !RE_OPEN_ANGLE.test(tok.v)\n            }\n        }\n        console.groupEnd()\n        return seq\n    }\n}\n", "import type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\nimport markdownItUtils from 'markdown-it/lib/common/utils.js'\n\n/**\n * Modified version of markdown-it/lib/rules_inline/state_inline.js\n * Mods annotated with \"//!\" comments.\n *\n *! Modified with parameterized behavior\n */\nexport function tokenize (state: StateInline, silent: boolean) {\n    let ws, pos = state.pos\n\n    if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false }\n\n    const pmax = state.pending.length - 1\n    const max = state.posMax\n\n    // '  \\n' -> hardbreak\n    // Lookup in pending chars is bad practice! Don't copy to other rules!\n    // Pending string is stored in concat mode, indexed lookups will cause\n    // conversion to flat mode.\n    if (!silent) {\n        if (state.env.preserveNewlines) { //! PTSS inline parse function 'preserveNewlines' option\n            state.pending += '\\n'\n        } else if (state.env.newlineIsHardBreak) { //! PTSS inline parse function 'newlineIsHardBreak' option\n            state.push('hardbreak', 'br', 0)\n        } else if (state.env.twoSpaceNewlineIsHardBreak //! PTSS inline parse function 'twoSpaceNewlineIsHardBreak' option\n                   && pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n            if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n                // Find whitespaces tail of pending chars.\n                ws = pmax - 1\n                while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--\n\n                state.pending = state.pending.slice(0, ws)\n                state.push('hardbreak', 'br', 0)\n            } else {\n                state.pending = state.pending.slice(0, -1)\n                state.push('softbreak', 'br', 0)\n            }\n\n        } else {\n            state.push('softbreak', 'br', 0)\n        }\n    }\n\n    pos++\n\n    //! inline parse function 'preserveWhitespace' option\n    if (!state.env.preserveWhitespace) {\n        // skip spaces after newline (i.e. skip leading spaces on next line)\n        while (pos < max && markdownItUtils.isSpace(state.src.charCodeAt(pos))) { pos++ }\n    }\n\n    state.pos = pos\n    return true\n}\n\n", "import type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\nimport markdownItUtils from 'markdown-it/lib/common/utils.js'\nimport type {RuleTokenizer} from './types.js'\nimport type {Stylesheet} from '../ptss/index.js'\n\n\nexport function createRule (stylesheet: Stylesheet): RuleTokenizer {\n    if (stylesheet.escapeSyntax.escapeChar === undefined) {\n        throw Error(`Escape inline style enabled, but no escape char defined for ${stylesheet.name}}`)\n    }\n    const escapeCode = stylesheet.escapeSyntax.escapeChar[0].charCodeAt(0)\n    const ESCAPE_LOOKUP = stylesheet.escapeSyntax.ESCAPE_INLINE_LOOKUP\n\n    /**\n     * Modified version of markdown-it/lib/rules_inline/escape.js\n     * Mods annotated with \"//!\" comments.\n     *\n     *! Modified with parameterized behavior\n     */\n    function tokenize (state: StateInline, silent: boolean) {\n        let pos = state.pos\n\n        if (state.src.charCodeAt(pos) !== escapeCode) return false\n        pos++\n\n        if (pos >= state.posMax) {\n            //! inline parse function 'backslashEOCIsHardBreak' option\n            if (state.env.backslashEOCIsHardBreak) {\n                if (!silent) {\n                    state.push('hardbreak', 'br', 0)\n                }\n                state.pos = pos\n                return true\n            }\n            return false\n        }\n\n        let ch1 = state.src.charCodeAt(pos)\n\n        //! inline parse function 'backslashNewlineIsHardBreak' option\n        if (ch1 === 0x0A/* \\n */ && state.env.backslashNewlineIsHardBreak) {\n            if (!silent) {\n                state.push('hardbreak', 'br', 0)\n            }\n\n            pos++\n\n            //! inline parse function 'preserveWhitespace' option\n            if (!state.env.preserveWhitespace) {\n                // skip spaces after newline (i.e. skip leading spaces on next line)\n                while (pos < state.posMax) {\n                    ch1 = state.src.charCodeAt(pos)\n                    if (!markdownItUtils.isSpace(ch1)) break\n                    pos++\n                }\n            }\n\n            state.pos = pos\n            return true\n        }\n\n        if (ch1 < 256 && ESCAPE_LOOKUP[ch1] !== undefined) {\n            if (!silent) {\n                state.pending += ESCAPE_LOOKUP[ch1]\n            }\n            pos++\n            state.pos = pos\n            return true\n        }\n\n        return false\n    }\n\n    return tokenize as RuleTokenizer\n}\n", "import type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\nimport type {RuleTokenizer} from './types.js'\n\n\ntype StateWithBackticks = StateInline & { backticksScanned: boolean, backticks: number[] }\n\n\nexport function createRule (mode = 'trim'): RuleTokenizer {\n    if (!['commonmark', 'trim'].includes(mode)) {\n        throw Error(`invalid backticks mode: \"${mode}\"`)\n    }\n\n    /**\n     * Modified version of markdown-it/lib/rules_inline/backticks.js\n     * Mods annotated with \"//!\" comments.\n     *\n     *! Modified with parameterized behavior\n     */\n    function tokenize (state: StateWithBackticks, silent: boolean) {\n        let token, matchStart, matchEnd, closerLength,\n            pos = state.pos\n        const ch = state.src.charCodeAt(pos)\n\n        if (ch !== 0x60/* ` */) { return false }\n\n        const start = pos\n        pos++\n        const max = state.posMax\n\n        // scan marker length\n        while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++ }\n\n        const marker = state.src.slice(start, pos)\n        const openerLength = marker.length\n\n        if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n            if (!silent) state.pending += marker\n            state.pos += openerLength\n            return true\n        }\n\n        matchEnd = pos\n\n        // Nothing found in the cache, scan until the end of the line (or until marker is found)\n        while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n            matchEnd = matchStart + 1\n\n            // scan marker length\n            while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++ }\n\n            closerLength = matchEnd - matchStart\n\n            if (closerLength === openerLength) {\n                // Found matching closer length.\n                if (!silent) {\n                    token = state.push('code_inline', 'code', 0)\n                    token.markup = marker\n                    if (mode === 'commonmark') {\n                        token.content = state.src.slice(pos, matchStart)\n                            .replace(/\\n/g, ' ')\n                            .replace(/^ (.+) $/, '$1')\n                    } else /* if (mode === 'trim') */ {\n                        token.content = state.src.slice(pos, matchStart)\n                            .replace(/\\n/g, ' ')\n                            .trim()\n                    }\n                }\n                state.pos = matchEnd\n                return true\n            }\n\n            // Some different length found, put it in cache as upper limit of where closer can be found\n            state.backticks[closerLength] = matchStart\n        }\n\n        // Scanned through the end, didn't find anything\n        state.backticksScanned = true\n\n        if (!silent) state.pending += marker\n        state.pos += openerLength\n        return true\n    }\n\n    return tokenize as RuleTokenizer\n}\n", "import type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\n\n/**\n * Modified version of markdown-it/lib/rules_inline/strikethrough.js\n * Mods annotated with \"//!\" comments.\n *\n *! Modified with parameterized behavior\n */\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nexport function tokenize (state: StateInline, silent: boolean) {\n    const start = state.pos,\n        marker = state.src.charCodeAt(start)\n\n    if (silent) { return false }\n\n    if (marker !== 0x7E/* ~ */) { return false }\n\n    const scanned = state.scanDelims(state.pos, true)\n    const len = scanned.length\n    const ch = String.fromCharCode(marker)\n\n    if (len > 2) { return false }\n\n    const pmax = state.pending.length - 1;\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x7E/* ~ */) {\n        return false\n    }\n\n    const token = state.push('text', '', 0)\n    token.content = ch.repeat(len)\n\n    state.delimiters.push({\n        marker: marker,\n        length: len,\n        token: state.tokens.length - 1,\n        end: -1,\n        open: scanned.can_open,\n        close: scanned.can_close,\n        /**\n         *! hack. per markdown-it release note, this field has been removed\n         *  thought looks like they forgot to remove it from the d.ts file.\n         *     ## [12.3.0] - 2021-12-09\n         *     ### Changed\n         *         - `StateInline.delimiters[].jump` is removed.\n         */\n        jump: -1\n    })\n\n\n    state.pos += scanned.length\n\n    return true\n}\n\n\nfunction postProcessDelims (state: StateInline, delimiters: StateInline.Delimiter[]) {\n    const max = delimiters.length\n    for (let i = 0; i < max; i++) {\n        const startDelim = delimiters[i]\n\n        if (startDelim.marker !== 0x7E/* ~ */) {\n            continue\n        }\n\n        if (startDelim.end === -1) {\n            continue\n        }\n\n        const endDelim = delimiters[startDelim.end]\n\n        if (startDelim.length !== endDelim.length) {\n            continue\n        }\n\n        const openToken = state.tokens[startDelim.token]\n        openToken.type = 's_open'\n        openToken.tag = 's'\n        openToken.nesting = 1\n        openToken.markup = openToken.content\n        openToken.content = ''\n\n        const closeToken = state.tokens[endDelim.token]\n        closeToken.type = 's_close'\n        closeToken.tag = 's'\n        closeToken.nesting = -1\n        closeToken.markup = closeToken.content\n        closeToken.content = ''\n    }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nexport function postProcess (state: StateInline) {\n    let curr\n    const tokens_meta = state.tokens_meta,\n        max = state.tokens_meta.length\n\n    postProcessDelims(state, state.delimiters)\n\n    for (curr = 0; curr < max; curr++) {\n        const cur = tokens_meta[curr]\n        if (cur) {\n            postProcessDelims(state, cur.delimiters)\n        }\n\n        if (cur && cur.delimiters) {\n            postProcessDelims(state, cur.delimiters)\n        }\n    }\n}\n\n", "import entities from 'markdown-it/lib/common/entities.js'\nimport {isValidEntityCode, fromCodePoint} from 'markdown-it/lib/common/utils.js'\n\nconst DIGITAL_ENTITY_TEST_RE = /^#(x[a-f0-9]{1,8}|[0-9]{1,8})$/i\n\nfunction replaceEntityPattern (match: string, name: string) {\n    let code\n\n    if (Object.hasOwn(entities, name)) {\n        return entities[name]\n    }\n\n    if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n        code = name[1].toLowerCase() === 'x' ?\n            parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10)\n\n        if (isValidEntityCode(code)) {\n            return fromCodePoint(code)\n        }\n    }\n\n    return match\n}\n\nexport function createUnescaper (decodeHtmlEntities: boolean, escapeChar: string, ESCAPE_LOOKUP: string[] = [], syntaxEscapeOnly = false) {\n    // escapes the escapeChar if is a regex special character\n    const ESCAPE_CHAR_RE = escapeChar.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n    // eslint-disable-next-line no-control-regex\n    const ESCAPE_RE = new RegExp(ESCAPE_CHAR_RE + `([\\x00-\\xFF])`, 'g')\n    const ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi\n    const UNESCAPE_ALL_RE = new RegExp(ESCAPE_RE.source + '|' + ENTITY_RE.source, 'gi')\n\n    if (decodeHtmlEntities) {\n        return function (str: string) {\n            if (str.indexOf(escapeChar) < 0 && str.indexOf('&') < 0) { return str }\n\n            return str.replace(UNESCAPE_ALL_RE, function (match, escaped: string, entity: string) {\n                if (escaped) {\n                    const val = ESCAPE_LOOKUP[escaped[0].charCodeAt(0)]\n                    if (val !== undefined) {\n                        return syntaxEscapeOnly ? escaped : val\n                    }\n                    return match\n                }\n                return replaceEntityPattern(match, entity)\n            })\n        }\n    } else {\n        return function (str: string) {\n            if (str.indexOf(escapeChar) < 0) { return str }\n\n            return str.replace(ESCAPE_RE, function (match, escaped: string) {\n                const val = ESCAPE_LOOKUP[escaped[0].charCodeAt(0)]\n                if (val !== undefined) {\n                    return syntaxEscapeOnly ? escaped : val\n                }\n                return match\n            })\n        }\n    }\n}\n", "import type {Stylesheet} from '../ptss/index.js'\nimport {createUnescaper} from './unescaper_parameterized.js'\n\n\nexport function createLinkDestParser (stylesheet: Stylesheet) {\n    const allowSpaces = stylesheet.linkDestAllowSpaces\n\n    if (stylesheet.escapeSyntax.escapeChar === undefined) {\n        throw Error(`Escape inline style enabled, but no escape char defined for ${stylesheet.name}}`)\n    }\n    const escapeCode = stylesheet.escapeSyntax.escapeChar[0].charCodeAt(0)\n    const ESCAPE_LOOKUP = stylesheet.escapeSyntax.ESCAPE_LINK_DEST_LOOKUP\n    const unescaper = createUnescaper(true, stylesheet.escapeSyntax.escapeChar, ESCAPE_LOOKUP, true)\n\n    /**\n     * Modified version of markdown-it/lib/helpers/parse_link_destination.js\n     *\n     *! Modified with parameterized behavior\n     */\n    function parseLinkDestination (str: string, start: number, max: number) {\n        let code, level,\n            pos = start\n        const result = {\n            ok: false,\n            pos: 0,\n            lines: 0,\n            str: ''\n        }\n\n        if (str.charCodeAt(pos) === 0x3C /* < */) {\n            pos++\n            while (pos < max) {\n                code = str.charCodeAt(pos)\n                if (code === 0x0A /* \\n */) { return result }\n                if (code === 0x3C /* < */) { return result }\n                if (code === 0x3E /* > */) {\n                    result.pos = pos + 1\n                    result.str = unescaper(str.slice(start + 1, pos))\n                    result.ok = true\n                    return result\n                }\n                if (code === escapeCode && pos + 1 < max) {\n                    const ch1 = str.charCodeAt(pos + 1)\n                    if (ch1 < 256 && ESCAPE_LOOKUP[ch1] !== undefined) {\n                        pos += 2\n                        continue\n                    }\n                }\n\n                pos++\n            }\n\n            // no closing '>'\n            return result\n        }\n\n        // this should be ... } else { ... branch\n\n        level = 0\n        while (pos < max) {\n            code = str.charCodeAt(pos)\n\n            if (code === 0x20/* space */) {\n                if (allowSpaces) {\n                    if (pos + 1 < max) {\n                        if (str.charCodeAt(pos + 1) === 0x22) { break }\n                    }\n                } else {\n                    break\n                }\n            }\n\n            // ascii control characters\n            if (code < 0x20 || code === 0x7F) { break }\n\n            if (code === escapeCode && pos + 1 < max) {\n                const ch1 = str.charCodeAt(pos + 1)\n                if (ch1 < 256 && ESCAPE_LOOKUP[ch1] !== undefined) {\n                    pos += 2\n                    continue\n                }\n            }\n\n            if (code === 0x28 /* ( */) {\n                level++\n                if (level > 32) { return result }\n            }\n\n            if (code === 0x29 /* ) */) {\n                if (level === 0) { break }\n                level--\n            }\n\n            pos++\n        }\n\n        if (start === pos) { return result }\n        if (level !== 0) { return result }\n\n        result.str = unescaper(str.slice(start, pos))\n        result.pos = pos\n        result.ok = true\n        return result\n    }\n\n    return parseLinkDestination\n}\n", "import type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\nimport markdownItUtils from 'markdown-it/lib/common/utils.js'\nimport type {RuleTokenizer} from './types.js'\nimport type * as ir from '../../stir/index.js'\nimport {stringifyValue} from '../ptss/index.js'\n\n// todo![now, references] because Inline elements can be referents too, and because\n//  a reference to an inline can occur *before* the latter occurs, we can't\n//  resolve all references immediately as we are doing below. We should\n//  instead just collect a list of references and resolve them *after*\n//  all the parsing is done.\n\ntype StateWithLinkLevel = StateInline & { linkLevel: number }\n\nconst isSpace = markdownItUtils.isSpace\n\nexport function createRule (): RuleTokenizer {\n\n    /**\n     * Modified version of markdown-it/lib/rules_inline/link.js\n     * Mods annotated with \"//!\" comments.\n     */\n    function reference (state: StateWithLinkLevel, silent: boolean) {\n        let referent: string | ir.Block | ir.Inline | undefined\n        let desc\n        const max = state.posMax\n\n        if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n        //  [anchor text](  <href>  \"description\"  )\n        //  ^^^^^^^^^^^^^  parse anchor text\n        const anchorStart = state.pos + 1\n        const anchorEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n        // parser failed to find ']', so it's not a valid link\n        if (anchorEnd < 0) { return false }\n\n        console.debug(`parsing reference`)\n        console.group()\n\n        let pos = anchorEnd + 1\n        if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n            pos++\n            //\n            // Inline link\n            //\n\n            referent = ''\n\n            //  [anchor text](  <href>  \"description\"  )\n            //                ^^ skipping these spaces\n            for (; pos < max; pos++) {\n                const code = state.src.charCodeAt(pos)\n                if (!isSpace(code) && code !== 0x0A) { break }\n            }\n\n            //  [anchor text](  <href>  \"description\"  )\n            //                  ^^^^^^ parsing href\n            let start = pos\n            let res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n            if (res.ok) {\n                referent = state.md.normalizeLink(res.str)\n                if (state.md.validateLink(referent)) {\n                    pos = res.pos\n                } else {\n                    referent = ''\n                }\n\n                //  [anchor text](  <href>  \"description\"  )\n                //                        ^^ skipping these spaces\n                start = pos\n                for (; pos < max; pos++) {\n                    const code = state.src.charCodeAt(pos)\n                    if (!isSpace(code) && code !== 0x0A) { break }\n                }\n\n                //  [anchor text](  <href>  \"description\"  )\n                //                          ^^^^^^^^^^^^^ parsing optional description\n                res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n                if (pos < max && start !== pos && res.ok) {\n                    desc = res.str\n                    pos = res.pos\n\n                    //  [anchor text](  <href>  \"description\"  )\n                    //                                       ^^ skipping these spaces\n                    for (; pos < max; pos++) {\n                        const code = state.src.charCodeAt(pos)\n                        if (!isSpace(code) && code !== 0x0A) { break }\n                    }\n                }\n            }\n\n            if (pos < max && state.src.charCodeAt(pos) === 0x29/* ) */) {\n                pos++\n                console.debug(`inline referent: ${referent}`)\n            } else {\n                pos = anchorEnd + 1\n                // not inline referent, try as named value\n                referent = undefined\n            }\n        }\n\n        if (referent === undefined) {\n            //\n            // named value\n            //\n\n            let ref\n            if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */\n                // hard coding for now that note references can\n                //  participate in this syntax\n                && state.src.charCodeAt(pos+1) !== 0x5E/* ^ */) {\n                const start = pos + 1\n                //  [anchor text][ref]\n                //                ^^^ parsing ref\n                pos = state.md.helpers.parseLinkLabel(state, pos)\n                if (pos >= 0) {\n                    ref = state.src.slice(start, pos++)\n                } else {\n                    pos = anchorEnd + 1\n                }\n            }\n            // [anchor text][ref]  ref is non empty string   CommonMark \"full reference link\"\n            // [anchor text][]     ref is ''                 CommonMark \"collapsed reference link\"\n            // [anchor text]       ref is undefined          CommonMark \"shortcut reference link\"\n\n            // if collapsed or shortcut, use anchor text as ref\n            if (ref === undefined || ref === '') {\n                ref = state.src.slice(anchorStart, anchorEnd)\n            }\n\n            console.debug(`reference name: ${ref}`)\n            const value = state.env.namedValues.valueFor(ref)\n            if (value === undefined) {\n                console.debug(`no named value for ${ref}. aborting.`)\n                console.groupEnd()\n                return false\n            }\n            if (value.type === 'href') {\n                referent = value.url\n                desc = value.desc\n            } else if (value.type === 'element') {\n                referent = value.element\n            } else {\n                // todo![now, references, error] this should behave like any other\n                //  reference error: ERROR or WARN per user option.\n                console.warn(`link references a non-linkable named value, \"${ref}}\"`)\n                console.groupEnd()\n                return false\n            }\n            console.debug(`named referent: ${stringifyValue(value)}`)\n        }\n\n        if (desc !== undefined) {\n            console.debug(`desc: ${desc}`)\n        }\n\n        //\n        // We found the end of the link, and know for a fact it's a valid link;\n        // so all that's left to do is to call tokenizer.\n        //\n        if (!silent) {\n            state.pos = anchorStart\n            state.posMax = anchorEnd\n\n            let token = state.push('link_open', 'a', 1)\n            //! 'as string` is a hack/cheat. It might be a BLock or Inline, but\n            //   again, this is all a temp hack until we have our own inline parser.\n            token.attrs = [['referent', referent as string]]\n            if (desc) {\n                token.attrs.push(['desc', desc])\n            }\n\n            //  [anchor text](  <href>  \"description\"  )\n            //   ^^^^^^^^^^^   tokenize anchor text\n            state.linkLevel++\n            state.md.inline.tokenize(state)\n            state.linkLevel--\n\n            token = state.push('link_close', 'a', -1)\n\n            state.posMax = max\n        }\n\n        state.pos = pos\n        console.groupEnd()\n        return true\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return reference\n}\n", "import type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\nimport type Token from 'markdown-it/lib/token.js'\nimport markdownItUtils from 'markdown-it/lib/common/utils.js'\nimport type {RuleTokenizer} from './types.js'\nimport {stringifyValue} from '../ptss/index.js'\n\n\nconst isSpace = markdownItUtils.isSpace\n\nexport function createRule (): RuleTokenizer {\n\n    /**\n     * Modified version of markdown-it/lib/rules_inline/image.js\n     * Mods annotated with \"//!\" comments.\n     */\n    function image (state: StateInline, silent: boolean) {\n        let src\n        let desc\n        const max = state.posMax\n\n        if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }\n        if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }\n\n        // ![alt](  <src>  \"title\"  )\n        //  ^^^^^  parse alt text\n        const altStart = state.pos + 2\n        const altEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)\n\n        // parser failed to find ']', so it's not a valid image\n        if (altEnd < 0) { return false }\n\n        console.debug(`parsing image`)\n        console.group()\n\n        let pos = altEnd + 1\n        if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n            pos++\n            //\n            // inline src\n            //\n\n            src = ''\n\n            // ![alt](  <src>  \"title\"  )\n            //        ^^ skipping these spaces\n            for (; pos < max; pos++) {\n                const code = state.src.charCodeAt(pos)\n                if (!isSpace(code) && code !== 0x0A) { break }\n            }\n\n            // ![alt](  <src>  \"title\"  )\n            //          ^^^^^ parsing image src\n            let start = pos\n            let res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n            if (res.ok) {\n                src = state.md.normalizeLink(res.str)\n                if (state.md.validateLink(src)) {\n                    pos = res.pos\n                } else {\n                    src = ''\n                }\n\n                // ![alt](  <src>  \"title\"  )\n                //               ^^ skipping these spaces\n                start = pos\n                for (; pos < max; pos++) {\n                    const code = state.src.charCodeAt(pos)\n                    if (!isSpace(code) && code !== 0x0A) { break }\n                }\n\n                // ![alt](  <src>  \"title\"  )\n                //                 ^^^^^^^ parsing image title\n                res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n                if (pos < max && start !== pos && res.ok) {\n                    desc = res.str\n                    pos = res.pos\n\n                    // ![alt](  <src>  \"title\"  )\n                    //                        ^^ skipping these spaces\n                    for (; pos < max; pos++) {\n                        const code = state.src.charCodeAt(pos)\n                        if (!isSpace(code) && code !== 0x0A) { break }\n                    }\n                }\n            }\n\n            if (pos < max && state.src.charCodeAt(pos) === 0x29/* ) */) {\n                pos++\n                console.debug(`inline src: ${src}`)\n            } else {\n                pos = altEnd + 1\n                // not inline src, try as named value\n                src = undefined\n            }\n        }\n\n        if (src === undefined) {\n            //\n            // reference src\n            //\n\n            let ref\n            if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n                const start = pos + 1\n                // ![alt][ref]\n                //        ^^^ parsing ref\n                pos = state.md.helpers.parseLinkLabel(state, pos)\n                if (pos >= 0) {\n                    ref = state.src.slice(start, pos++)\n                } else {\n                    pos = altEnd + 1\n                }\n            }\n            // ![alt][ref]  ref is non empty string   CommonMark \"full reference link\"\n            // ![alt][]     ref is ''                 CommonMark \"collapsed reference link\"\n            // ![alt]       ref is undefined          CommonMark \"shortcut reference link\"\n\n            // if collapsed or shortcut, use alt text as ref\n            if (ref === undefined || ref === '') {\n                ref = state.src.slice(altStart, altEnd)\n            }\n\n            console.debug(`reference name: ${ref}`)\n            const value = state.env.namedValues.valueFor(ref)\n            if (value === undefined) {\n                console.debug(`no named value for ${ref}. aborting.`)\n                console.groupEnd()\n                return false\n            }\n            if (value.type !== 'href') {\n                // todo![now, references, error] this should behave like any other\n                //  reference error: ERROR or WARN per user option.\n                console.warn(`image src references a non-href named value, \"${ref}}\"`)\n                console.groupEnd()\n                return false\n            }\n            console.debug(`named referent: ${stringifyValue(value)}`)\n            src = value.url\n            desc = value.desc\n        }\n\n        //\n        // We found the end of the image, and know for a fact it's a valid image;\n        // so all that's left to do is to call tokenizer.\n        //\n        if (!silent) {\n            const content = state.src.slice(altStart, altEnd)\n\n            const tokens: Token[] = []\n            state.md.inline.parse(\n                content,\n                state.md,\n                state.env,\n                tokens\n            )\n\n            const token = state.push('image', 'img', 0)\n            token.attrs = [['src', src], ['alt', '']]\n            token.children = tokens\n            token.content = content\n\n            if (desc) {\n                token.attrs.push(['desc', desc])\n            }\n        }\n\n        state.pos = pos\n        console.groupEnd()\n        return true\n    }\n\n    return image\n}\n", "/**\n * Modified version of markdown-it/lib/rules_inline/autolink.js\n * Mods annotated with \"//!\" comments.\n */\n\n\n// Process autolinks '<protocol:...>'\n\nimport type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\n\n\n/*eslint max-len:0*/\nconst EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/\n// eslint-disable-next-line no-control-regex\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/\n\n\nexport function tokenize (state: StateInline, silent: boolean) {\n    let fullUrl, token, ch,\n        pos = state.pos\n\n    if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n    const start = state.pos\n    const max = state.posMax\n\n    for (; ;) {\n        if (++pos >= max) return false\n\n        ch = state.src.charCodeAt(pos)\n\n        if (ch === 0x3C /* < */) return false\n        if (ch === 0x3E /* > */) break\n    }\n\n    const url = state.src.slice(start + 1, pos)\n\n    if (AUTOLINK_RE.test(url)) {\n        fullUrl = state.md.normalizeLink(url)\n        if (!state.md.validateLink(fullUrl)) { return false }\n\n        if (!silent) {\n            token = state.push('link_open', 'a', 1)\n            token.attrs = [['referent', fullUrl]]\n            token.markup = 'autolink'\n            token.info = 'auto'\n\n            token = state.push('text', '', 0)\n            token.content = state.md.normalizeLinkText(url)\n\n            token = state.push('link_close', 'a', -1)\n            token.markup = 'autolink'\n            token.info = 'auto'\n        }\n\n        state.pos += url.length + 2\n        return true\n    }\n\n    if (EMAIL_RE.test(url)) {\n        fullUrl = state.md.normalizeLink('mailto:' + url)\n        if (!state.md.validateLink(fullUrl)) { return false }\n\n        if (!silent) {\n            token = state.push('link_open', 'a', 1)\n            token.attrs = [['referent', fullUrl]]\n            token.markup = 'autolink'\n            token.info = 'auto'\n\n            token = state.push('text', '', 0)\n            token.content = state.md.normalizeLinkText(url)\n\n            token = state.push('link_close', 'a', -1)\n            token.markup = 'autolink'\n            token.info = 'auto'\n        }\n\n        state.pos += url.length + 2\n        return true\n    }\n\n    return false\n}\n", "import type StateInline from 'markdown-it/lib/rules_inline/state_inline.js'\nimport type {RuleTokenizer} from './types.js'\nimport {stringifyValue} from '../ptss/index.js'\n\n\nexport function createRule (arg = ''): RuleTokenizer {\n    const flags = arg.split(',')\n    // 'segregated' means *segregated note namespace*.\n    //  The `^` prefix is included in the ref name ensuring a note_ref\n    //  can only reference a note (this assumes that the note style also\n    //  includes the `^` prefix in note names.\n    const refOffset = flags.includes('segregated') ? 1 : 2\n    const noSpace = !flags.includes('spaces')\n\n    function notRef (state: StateInline, silent: boolean) {\n        if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n        if (state.src.charCodeAt(state.pos + 1) !== 0x5E/* ^ */) { return false }\n\n        let pos = state.pos + 2\n        const max = state.posMax\n        let code\n        while ((code = state.src.charCodeAt(pos)) !== 0x5D /* ] */) {\n            if (pos >= max) return false\n            if (noSpace && code === 0x20/* space */) return false\n            pos++\n        }\n\n        const ref = state.src.slice(state.pos + refOffset, pos)\n        console.debug(`parsed note ref \"${ref}\"`)\n        console.group()\n\n        const value = state.env.namedValues.valueFor(ref)\n        if (value === undefined) {\n            console.debug(`no named value for ${ref}. aborting.`)\n            console.groupEnd()\n            return false\n        }\n        if (value.type !== 'element') {\n            // todo![now, references, error] this should behave like any other\n            //  reference error: ERROR or WARN per user option.\n            console.warn(`note referent is not an element`)\n            console.groupEnd()\n            return false\n        }\n        console.debug(`named referent: ${stringifyValue(value)}`)\n\n        if (!silent) {\n            const token = state.push('note_ref', '', 0)\n            token.attrs = [['referent', value.element]]\n        }\n\n        state.pos = pos + 1\n        console.groupEnd()\n        return true\n    }\n\n    return notRef\n}\n", "import * as ptss from './ptss/index.js'\nimport * as ir from '../stir/index.js'\nimport {InlineParser} from './inlineParser.js'\nimport {BlockTreeParser} from './blockTreeParser.js'\nimport {NamedValues} from './namedValues.js'\n\n//todo[api] Use configurable on/off switches like I have for Pipes to support\n// the equivalent of Pandoc's CLI switches to enable/disable style features?\n\n/** Eats your plain text and spits out . */\nexport class Parser {\n    private readonly _styleSheet: ptss.Stylesheet\n    private readonly _options: Record<string, unknown>\n\n    private readonly _inlineParser: InlineParser\n\n    constructor (ptss: ptss.Stylesheet, options: Record<string, unknown> = {}) {\n        this._styleSheet = ptss\n        this._options = options\n        this._inlineParser = new InlineParser(this._styleSheet)\n        this._styleSheet.initAndValidate()\n        console.log(`initialized ptss-parser:`)\n        console.group()\n        console.log(`options: ${JSON.stringify(options)}`)\n        console.log(`stylesheet: ${ptss.toDebugString()}`)\n    }\n\n    /**\n     *  The main parsing function.  Returns an intermediate representation (IR) of the parsed document.\n     */\n    public parse (src: string): ir.Block {\n        const namedValues = new NamedValues()\n\n        //todo[api] parse() may or may not be thread-safe:\n        //  Below we instantiating a BlockTreeParser dedicated to\n        //  each parse, but we are sharing an InlineParser, though\n        //  it is possible it is thread-safe to do so.\n\n        //todo[stir] \"document\"?\n        const blockTreeParser = new BlockTreeParser(src, this._styleSheet,\n            'structured_text_intermediate_representation', namedValues)\n\n        console.debug('parsing root')\n        console.group()\n        const rootElem = blockTreeParser.parse()\n        console.groupEnd()\n\n        console.debug('parsing inlines')\n        console.group()\n        this.parseBlockInlines(rootElem, namedValues)\n        console.groupEnd()\n\n        // todo![now] consider moving the other stir meta properties now hardcoded in\n        //   serialization.ts into the root STIR type proper, even if we are still hardcoding\n        //   the data for now. It helps us evaluate its smell too.\n        console.debug('declaring exports')\n        console.group()\n        this.declareExports(namedValues, rootElem)\n        console.debug(rootElem.exports)\n        console.groupEnd()\n\n        return rootElem\n    }\n\n    /**\n     * Recurse the tree of ir.Blocks, parsing content marked for inline parsing.\n     *\n     * todo[arch] style specified inline parsing and parsing dependency management\n     *            ----------------------------------------------------------------\n     *   UPDATE: Implementation of the plan below is in progress. The TO_INLINE_PARSE\n     *   object mentioned below is implemented as a special type of ir.Inline.\n     *   -----------\n     *   I've had an epiphany that flies two birds on one wing:\n     *   - Bird One: How to know which text fields need inline parsing. How do we\n     *               *let the style design* determine this?\n     *   - Bird Two: How to deal with dependencies across files when implementing\n     *               TextAssembly? i.e. During File A parsing, we encounter link\n     *               target name that can only be resolved after parsing File B.\n     *   THE ONE WING:\n     *   1. Define a TO_INLINE_PARSE object type that means \"determine my final\n     *      value by inline-parsing the string value I hold\".\n     *   2. Change the def of ir.InlineSequence to be:\n     *          `string | Inline | TO_INLINE_PARSE | (Inline | string | TO_INLINE_PARSE)[]`\n     *      This does NOT change the STIR spec. It's just something that TextPlain\n     *      does *temporarily* *internally*.\n     *   3. The Property Expression 'parseInlines' function (see note for `ir.Block.bodyIsInline`)\n     *      when executed will yield a TO_INLINE_PARSE holding the value of the\n     *      function's input. e.g.\n     *              (parseInlines (trim (body)))\n     *      will yield:\n     *               TO_INLINE_PARSE{ value: <string output of (trim (body))> }\n     *   4. Whenever an attempt to inline parse any value is blocked by a dependency\n     *      that is not yet resolved (i.e. another file needs to be parsed\n     *      first), that value will be hot-swapped with:\n     *               TO_INLINE_PARSE{ value: <value>  dependency: <dependency> }\n     *      Alternatively, it will be hot-swapped with\n     *               TO_INLINE_PARSE{ value: <value> }\n     *      and a reference will be added to a registry tracking all TO_INLINE_PARSE\n     *      by dependency:\n     *               registry.add( <dependency> : <ref to TO_INLINE_PARSE>\n     *   5. When a dependency is resolved, the TO_INLINE_PARSE is in turn hot-swapped\n     *      out by the result of inline-parsing its held value.\n     *   .\n     *   This solution can handle arbitrarily long and complex dependency chains, by\n     *   repeatedly cycling through the registry entries until it is empty. It can\n     *   handle any logically sound circular dependencies. If any cycle though the\n     *   registry yields not a single success, it means we have a logical UNSOUND\n     *   circular dependency. THAT SAID: I think Inlines will only ever have\n     *   dependencies on file or block level artifacts, not other Inlines, so this\n     *   will never occur.\n     *\n     * todo![now, named values, references] if an inline defined a named value,\n     *     and that named value was referenced before it was defined, we'll have\n     *     to resolve those within this method:\n     *     - keep track of all unresolved references from the tree traversal\n     *     - iterate over that list after the traversal, looking up matches\n     *       in NamedValues\n     *\n     * todo![now, named values, references] does it make sense to hack a\n     *     markdown-it inline rule to support named inline spans so that we\n     *     can POC the idea and also test the implementation NOW, rather than\n     *     wait for our own inline parser? IF IT IS EASY?\n     */\n    private parseBlockInlines (root: ir.Block, namedValues: NamedValues): void {\n        const inlineParser = this._inlineParser\n        // todo[perf] the former version of this method which did the traversal here\n        //   rather than calling traverseBodyTree with a closure-based callback resulted\n        //   in a 2-3 pts better overall benchmark result. My guess it all has to do with\n        //   the callback or closure overhead or both.\n        //   .\n        //   UPDATE: I have re-implemented traverseBodyTree as iterative;\n        //     non-recursive, so it may be better.\n        //\n        root.traverseBodyTree(function (b: ir.Block) {\n            if (Array.isArray(b.title) && b.title[0] === ptss.INLINE_PARSE_FLAG) {\n                console.debug(`parsing inline title: ${JSON.stringify(b.title[1])}`)\n                if (b.title.length > 2) {\n                    console.debug(`  with: ${b.title.slice(2)}`)\n                }\n                b.title = inlineParser.parse(\n                    b.title[1] as string,\n                    b.title.slice(2) as string[],\n                    namedValues\n                )\n            }\n            if (Array.isArray(b.body) && b.body[0] === ptss.INLINE_PARSE_FLAG) {\n                console.debug(`parsing inline body: ${JSON.stringify(b.body[1])}`)\n                console.group()\n                if (b.body.length > 2) {\n                    console.debug(`  with: ${b.body.slice(2)}`)\n                }\n                b.body = inlineParser.parse(\n                    b.body[1] as string,\n                    b.body.slice(2) as string[],\n                    namedValues\n                )\n                // we've already paid the cost of figured out this branch isn't\n                // a block branch to be traversed, so pass this knowledge back\n                // for efficiency\n                console.groupEnd()\n                return 1\n            }\n            return 0\n        })\n    }\n\n    // todo![now, references] should we declare a TS type for the root block\n    //   that includes `exports` and the other STIR root properties we're\n    //   adding (e.g. in serialization.ts)?\n    private declareExports (namedValues: NamedValues, rootElem: ir.Block): void {\n        const exports: ir.Exports = {}\n        for (const name in namedValues.index) {\n            const val = namedValues.index[name]\n            if (val.type === 'pathed elements') {\n                for (const path in val.map) {\n                    const elem = (val.map)[path].element\n                    if (elem instanceof ir.Block) {\n                        // todo![now, references] if (stir.hasSections() === false, should\n                        //    we not export for `type==='heading'`? IN FACT, that's what\n                        //    we are doing in ExportAllSectionsOrHeadings!\n                        if (elem.type === 'section') {\n                            exports[path] = {title: elem.title as ir.InlineSequence}\n                        } else {\n                            //todo![now, references] update this to-do with what needs to happen\n                            exports[path] = {title: elem.type}\n                        }\n                    } else {\n                        //todo![now, references] update this to-do with what needs to happen\n                        exports[path] = {title: elem.type}\n                    }\n                }\n            }\n        }\n        rootElem.exports = exports\n    }\n\n}\n", "import * as ptss from '../ptss/index.js'\n\n//todo[spec, regex] There are some rules for the style regular expressions, that\n//  probably should be enforced by PTSS code, not the style author.\n//     - y flag -- should be added by the code automatically. The fact that the implementation depends on\n//         stickiness should be hidden inside the black-box.\n//     - ^ and $ have ALREADY been removed from all patterns. But add tests to verify the code is properly enforcing the rule.\n//     - \\n -- some patterns have this at the end. it would be better if the style designer didn't have to do that.\n\n//todo[perf] regex optimization\n//    https://www.regular-expressions.info/catastrophic.html\n//    https://mariusschulz.com/blog/why-using-the-greedy-in-regular-expressions-is-almost-never-what-you-actually-want\n//    https://www.loggly.com/blog/five-invaluable-techniques-to-improve-regex-performance/\n//    https://www.loggly.com/blog/regexes-the-bad-better-best/\n//    .\n//    Should i convert many of the parenthetical expressions to non-capturing? e.g. (?: )\n\n// todo[api] should options be Record<string, string>? i guess the config file could support object values or arrays.\n\nexport function newCommonMarkSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('CommonMark')\n\n    const strict = options?.strict === true\n    let defaultIndentOption: 'no' | 'optional'\n    let leftPadding: 'per first line' | 'sloppy'\n    let indentedCodeCanInterruptPara: boolean\n    if (strict) {\n        // in strict mode, we replace sloppiness with optional indentation\n        stylesheet.sloppyMargin = 0\n        defaultIndentOption = 'optional'\n        leftPadding = 'per first line'\n        // in strict mode, we must allow indented code to interrupt a\n        // paragraph, otherwise the following results in a list:\n        // ```\n        // paragraph text\n        //         1. this should not be a list item\n        // ```\n        // This is the right choice anyway, as it yields more consistency,\n        // both for lists and the meaning of four-space indents. Current\n        // Markdown behavior is bad, as shown in the docs.\n        indentedCodeCanInterruptPara = true\n    } else {\n        stylesheet.sloppyMargin = 3\n        defaultIndentOption = 'no'\n        leftPadding = 'sloppy'\n        indentedCodeCanInterruptPara = false\n    }\n\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    /**\n     * https://spec.commonmark.org/0.29/#backslash-escapes\n     *\n     * ```\n     * Any ASCII punctuation character may be backslash-escaped:\n     *\n     * !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n     * ```\n     *\n     * [JGM's original reasoning](https://archive.is/zDyK2#selection-247.0-259.135):\n     * > There are only a few places where this spec says things that contradict\n     * > the canonical [Gruber's] syntax description:\n     * > - It allows all punctuation symbols to be backslash-escaped, not just\n     * >   the symbols with special meanings in markdown. I found that it was\n     * >   just too hard to remember which symbols could be escaped.\n     */\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    stylesheet.linkDestAllowSpaces = false\n\n    const para = stylesheet.get('Paragraph') as ptss.ChunkStyle\n    para.lazyContinuation = !strict\n    para.irNode.body = new ptss.Expression(\n        [\n            'parseInlines',\n            ['trim', ['body']],\n            'backslashNewlineIsHardBreak', 'twoSpaceNewlineIsHardBreak'\n        ]\n    )\n\n    const atx = new ptss.ChunkStyle('ATX Heading', stylesheet)\n    atx.irNode.type = new ptss.Expression('heading')\n    atx.canInterruptParagraph = true\n    atx.canInterruptLazy = true\n    //todo[stylesheets, spec] Should we go all unicode and recognize other whitespace chars?\n    //  if not for CommonMark.ptss, then maybe for:\n    //  - CommonMarkUnicode.ptss\n    //  - Gracedown.ptss\n    //  - (some CJK style).ptss\n    //  - PlainJane.ptss\n    // See https://stackoverflow.com/a/3469155/8910547 for how to do this.\n    // Likewise, we may want to examine all our regexes for other Unicode\n    // support, not just whitespace.\n    atx.headPattern = /(#{1,6})(?=[ \\t]|$)/ym\n    atx.bodyPattern = /(?:[ \\t]+(.*?))??(?:[ \\t]+#+)?[ \\t]*$/ym\n    atx.maxLines = 1\n    atx.indent = defaultIndentOption\n    atx.irNode.level = new ptss.Expression(['length', ['head', 1]])\n    atx.irNode.body = new ptss.Expression(['parseInlines', ['first', ['body', 1], '']])\n    //todo[perf] is using a tailPattern to first parse out the tail more efficient?\n    //  This is the previous tailPattern version that passed all tests:\n    //  atxStyle.tailPattern = /[ \\t]+#+[ \\t]*$/\n    //  atxStyle.ire.body = new ptss.Expression(['trim', ['body']]) //todo[perf] trim may be redundant with latter handling. clean up.\n\n    const thematicBreak = new ptss.ChunkStyle('Thematic Break', stylesheet)\n    thematicBreak.irNode.type = new ptss.Expression('thematic_break')\n    thematicBreak.headPattern = /(?:(?:\\*[ \\t]*){3,}|(?:_[ \\t]*){3,}|(?:-[ \\t]*){3,})[ \\t]*$/ym\n    thematicBreak.maxLines = 1\n    thematicBreak.canInterruptParagraph = true\n    thematicBreak.canInterruptLazy = true\n    thematicBreak.indent = defaultIndentOption\n\n    const setext = new ptss.ChunkStyle('Setext Heading', stylesheet)\n    setext.irNode.type = new ptss.Expression('heading')\n    setext.tailPattern = /((=+|-+)[ \\t]*$)/ym\n    setext.consumesBackChunk = true\n    setext.maxLines = 5\n    setext.indent = defaultIndentOption\n    setext.canInterruptParagraph = false\n    setext.canInterruptLazy = false\n    // this setting is per spec. to match ref implementation behavior, set true\n    // todo[rollout] use this as an example\n    setext.lazyContinuation = false  // = !strict\n    setext.irNode.level = new ptss.Expression(['map', ['at', ['tail', 2], 0], {'=': 1, '-': 2}])\n    setext.irNode.body = new ptss.Expression(['parseInlines', ['trim', ['body']]]) //todo[perf] trim may be redundant with latter handling. clean up.\n\n    // todo![now, references, perf] wouldn't the way i do this in test-references.ptss be more efficient?\n    //   - if headPattern includes the full `[name]:` part of the style, we could fail the style\n    //     match without the fwdChunk style\n    //   - wrap the capture group with `\\S*` to effectively trim the name within the regex\n    const linkRefDef = new ptss.ChunkStyle('Link Ref Definition', stylesheet)\n    linkRefDef.canInterruptParagraph = false\n    linkRefDef.canInterruptLazy = false\n    // this setting is per spec. to match ref implementation behavior, set true\n    // todo[rollout] use this as an example\n    linkRefDef.lazyContinuation = false  // = !strict\n    //todo[perf] regex for a literal pattern expensive, esp a single char? maybe support literal (string) headPattern?\n    linkRefDef.headPattern = /\\[/y\n    // eslint-disable-next-line no-control-regex\n    linkRefDef.bodyPattern = /((?:[^\\\\[\\]]|\\\\.){0,1000})]:\\s*(?:<((?:[^<>\\n\\\\\\x00]|\\\\.)*)>|([^ <\\n]\\S*))\\s*(\\s(?:\"((?:\\\\\\S|[^\"\\x00])*)\"|'((?:\\\\\\S|[^'\\x00])*)'|\\(((?:\\\\\\S|[^()\\x00])*)\\))\\s*?)?$/ym\n    linkRefDef.indent = defaultIndentOption\n    //todo[spec, references, internal links] Current RefDef.ts code just returns null when passed an empty name. But should\n    //   we us an \"Assert not empty, != ''\" expression that fails it at style parse time?\n    linkRefDef.ptNamedValue = {\n        type: 'href',\n        name: new ptss.Expression(['replace', ['trim', ['body', 1]], /[ \\t\\r\\n]+/, ' ']),\n        value: new ptss.Expression(['first', ['body', 2], ['body', 3], '']),\n        description: new ptss.Expression(['first', ['body', 5], ['body', 6], ['body', 7], ''])\n    }\n\n    const blockQuote = new ptss.ContainerStyle('Block Quote', stylesheet)\n    blockQuote.irNode.type = new ptss.Expression('block_quote')\n    blockQuote.leftBorder = '>'\n    blockQuote.leftPadding = leftPadding\n    blockQuote.canInterruptParagraph = true\n    blockQuote.canInterruptLazy = true\n    blockQuote.indent = defaultIndentOption\n    blockQuote.body = 'BLOCKS'\n\n    //todo[arch] we have to do two separate fenced code styles because the\n    //  backtick version has a different info string requirement (no backticks)\n    //  - IS THERE A BETTER WAY?\n    //  - perhaps not. IT IS NOT WORTH adding any complexity JUST to avoid this rather\n    //    minor trifle of having to do to styles. The rule about backticks is very\n    //    specific to the inline code span logic which might only ever apply to Markdown Mode.\n    const fencedCodeTick = new ptss.ContainerStyle('Backtick Fenced Code Block', stylesheet)\n    fencedCodeTick.irNode.type = new ptss.Expression('code_block')\n    fencedCodeTick.topBorder = '`'\n    fencedCodeTick.topBorderMinLength = 3\n    // todo[spec] Is this really a `righter`? Is a righter simply content at the right end of\n    // the top border. or is it content to the right and outside of the *rectangular frame*\n    // of the bordered container? This is akin to the difference between a CommonMark ordered\n    // list numeric marker, which forces an indent of the container *past* the marker thereby\n    // keeping the number outside the frame, and that of djot, which only requires only an\n    // indent of one space or more, making the number simple prepended to the first line.\n    fencedCodeTick.righter = /([^`]*?)$/ym\n    fencedCodeTick.body = 'RAW_NL'\n    fencedCodeTick.canInterruptParagraph = true\n    fencedCodeTick.canInterruptLazy = true\n    fencedCodeTick.indent = defaultIndentOption\n    fencedCodeTick.irNode.info = new ptss.Expression(['unescape', ['trim', ['righter', 0]]])\n\n    //todo[spec] this is a good case for style inheritance, even within a stylesheet:\n    //\n    //     fencedCodeTilde inherit fencedCodeTick {\n    //        <modifications go here>\n    //     }\n    //\n    // It should work for inheriting and customizing styles from other stylesheets, or\n    // overriding a style when customizing a stylesheet.\n    const fencedCodeTilde = new ptss.ContainerStyle('Tilde Fenced Code Block', stylesheet)\n    fencedCodeTilde.irNode.type = new ptss.Expression('code_block')\n    fencedCodeTilde.topBorder = '~'\n    fencedCodeTilde.topBorderMinLength = 3\n    fencedCodeTilde.righter = /(.*?)$/ym\n    fencedCodeTilde.body = 'RAW_NL'\n    fencedCodeTilde.canInterruptParagraph = true\n    fencedCodeTilde.canInterruptLazy = true\n    fencedCodeTilde.indent = defaultIndentOption\n    fencedCodeTilde.irNode.info = new ptss.Expression(['unescape', ['trim', ['righter', 0]]])\n\n    const indentedCode = new ptss.ContainerStyle('Indented Code Block', stylesheet)\n    indentedCode.irNode.type = new ptss.Expression('code_block')\n    indentedCode.indent = 'markdown(4,4)'\n    indentedCode.body = 'RAW_NL'\n    // spec: \"An indented code block cannot interrupt a paragraph.\n    //        (This allows hanging indents and the like.)\"\n    indentedCode.canInterruptParagraph = indentedCodeCanInterruptPara\n    indentedCode.canInterruptLazy = indentedCodeCanInterruptPara\n    // todo[spec] how come we don't have to do\n    //       indentedCode.irNode.body =\n    //   for some styles and not for others? This is confusing.\n    //   Not having a simple mental model will result in people defining styles\n    //   using trial and error, or referring to the code or other existing style defs.\n    //   NOT GOOD.\n\n    const list = new ptss.ListStyle('List', stylesheet)\n    list.unorderedMarkers = '-*+'\n    list.orderedMarkers = '.)'\n    list.indent = defaultIndentOption\n\n    // todo[spec] should this be generalized?\n    //    NO: this is purely a Markdown Mode affordance. So that is all we will support.\n    //    MAYBE: but we'll wait for a solid argument that it should be.\n    //    YES: no justification comes to mind yet.\n    const htmlCodeBlock = new ptss.HTMLBlockStyle('HTML Block', stylesheet)\n    htmlCodeBlock.indent = defaultIndentOption\n\n\n    // todo[perf] Order based on performance impact:\n    //   - more commonly used styles earlier\n    //   - more expensive to match later\n    //   - CAN easily measure the match fail cost of a style disabling all other styles\n    //     and benchmarking pure paragraph input (either make sure there are blanks between\n    //     each line so the cantInterruptPara shortcut doesn't skew the numbers, OR use\n    //     a good average number of lines per para if the cantInterruptPara shortcut should\n    //     be part of the measurement).\n    //\n    // todo[spec] IDEA: instead of requiring styles be ordered in a list,\n    //   each style simply declares that it must have higher|lower\n    //   precedence than some other specific style, and it doesn't care\n    //   about the rest. Likewise this is also how mods to existing stylesheets\n    //   are supported.\n    //   .\n    //   So at stylesheet initialization: the code dynamically figures out a\n    //   linear ordering that satisfies all the requirements.\n    //\n    // todo[arch]:\n    //   Here we are adding each style to the stylesheet. But above we've already\n    //   associated the stylesheet to each style (it's passed into the style\n    //   constructor. Shouldn't this be an atomic operation? OTOH:\n    //   - Stylesheet.initAndValidate makes sure the link is bidirectional\n    //   - When we switch to the DSL it'll all be different.\n    stylesheet.blockStyles.push(\n        atx,\n        setext, //! above Thematic Break in back matching mode two own '------'\n        blockQuote,\n        thematicBreak, //! above List so can match '- - -'\n        list,\n        linkRefDef,\n        fencedCodeTick,\n        fencedCodeTilde,\n        indentedCode,\n        htmlCodeBlock\n    )\n\n    if (strict) {\n        // for strict mode we aren't using sloppiness but instead\n        // setting`indent='optional'` for all style elements other than\n        // Indented Code Block. So for the latter to \"own\" any four-space\n        // indent, we put give it highest precedence.\n        //\n        // todo[strict] we can use another approach, e.g.:\n        //     indent = 'markdown,0,3'\n        // Not sure if it has any material difference other than allowing\n        // us to re-order precedence to optimize performance.\n        stylesheet.remove('Indented Code Block')\n        stylesheet.blockStyles.unshift(indentedCode)\n    }\n\n    stylesheet.inlineStyles = [\n        'autolink',\n        'backticks(commonmark)',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'reference',\n        'newline',\n        'html'\n    ]\n\n    return stylesheet\n}\n", "import type * as ptss from '../ptss/index.js'\nimport {newCommonMarkSheet} from './commonmark.ptss.js'\n\nexport function newCommonMarkFWDSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = newCommonMarkSheet(options)\n    stylesheet.name = 'CommonMark-FWD'\n\n    /**\n     * Setext has lowest precedence per CommonMark spec.\n     * For example, the spec says:\n     * ```\n     * > Foo\n     * ---\n     * ```\n     * is a block quote followed by a thematic break\n     */\n    const setext = stylesheet.remove('Setext Heading')\n    setext.consumesBackChunk = false\n    stylesheet.blockStyles.push(setext)\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\nimport {newCommonMarkSheet} from './commonmark.ptss.js'\n\n\nexport function newGFMStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = newCommonMarkSheet(options)\n    stylesheet.name = 'GitHub-Flavored Markdown'\n\n    const table = new ptss.TableStyle('GFM Table', stylesheet)\n    table.tableType = 'sv'\n    table.heading = 'delimited, required'\n    table.headingDelim = '-'\n    table.delimIntersection = '|'\n    table.sideBorder = '|'\n    table.sideBorderLeftRule = 'lazy'\n    table.sideBorderRightRule = 'lazy'\n    table.columnsDelim = '|'\n    table.columnsNumber = 'per head delim'\n    table.columnsAlignIndicator = ':'\n    table.bodyRowAtLeastOneMarker = 'no'\n    table.bodyRowTooShort = 'add-empty'\n    table.bodyRowTooLong = 'truncate'\n    table.gfmQuirks = true\n    // place just above Setext precedence\n    stylesheet.insertAbove('Setext Heading', table)\n\n    const footnote = new ptss.ContainerStyle('Footnote', stylesheet)\n    footnote.hangingIndent = 4\n    footnote.marker = /\\[(\\^(\\S+))]:/y\n    footnote.body = 'BLOCKS'\n    footnote.irNode.type = new ptss.Expression('note')\n    footnote.irNode.subType = new ptss.Expression('footnote')\n    footnote.ptNamedValue = {\n        type: 'element',\n        // GFM has a segregated note namespace, where `^` prefixes all note names and references\n        name: new ptss.Expression(['marker', 1]),\n        value: 'self'\n    }\n    // without this precedence, all footnotes would be taken as Link Ref Definition\n    stylesheet.insertAbove('Link Ref Definition', footnote)\n\n    stylesheet.inlineStyles.splice(stylesheet.inlineStyles.indexOf('reference'), 0, 'noteRef(segregated)')\n\n    //! disable both bare_links and corresponding GFM \"Autolinks (extension)\"\n    //  extension because (1) it causes test cases that expect said extension\n    //  to be off to fail and (2) it's a very low priority\n    // stylesheet.inlineStyles.push('bare_links')\n    stylesheet.inlineStyles.push('gfm_strikethrough')\n    stylesheet.inlineStyles.push('checkbox_text')\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\nimport {newCommonMarkSheet} from './commonmark.ptss.js'\n\n// todo[spec] Configurability (like Pandoc, disable any extension)\n//   - This can be implemented most simply by accepting a config object. But however it\n//     is done, it maybe should be done in a standard way for all plain text stylesheets.\n\n\nexport function newPandocMarkdownStrictStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = newCommonMarkSheet(options)\n    stylesheet.name = 'Pandoc Markdown (Strict)'\n\n    /**\n     * Per:\n     * https://github.com/jgm/pandoc/blob/9bcf1ff8d6823c9980ff1b9959e7a48968de0275/MANUAL.txt#L4833-L4839\n     *\n     * and:\n     * https://daringfireball.net/projects/markdown/syntax#backslash\n     *\n     * ```\n     * Markdown provides backslash escapes for the following characters:\n     *\n     * \\   backslash\n     * `   backtick\n     * *   asterisk\n     * _   underscore\n     * {}  curly braces\n     * []  square brackets\n     * ()  parentheses\n     * #   hash mark\n     * +   plus sign\n     * -   minus sign (hyphen)\n     * .   dot\n     * !   exclamation mark\n     * ```\n     *\n     * But Pandoc's own strict parser also allows `\"` and `~` to be  escapable.\n     * Issue files: https://github.com/jgm/pandoc/issues/8777\n     * PTSS implementation will reflect Pandoc implementation\n     * \n     * todo![pandoc, spec] Submitted issue resolved, and two extra chars no \n     *   longer escapable. Verify this with new Pandoc release when available\n     *   by updating to it and using it to update all the test case files.\n     *   https://github.com/jgm/pandoc/commit/f9bbbf6f402edfac34db5482c9c5d9c4f230b875\n     */\n    stylesheet.escapeSyntax.escapeLiterals = '\\\\`*_{}[]()>#+-.!' // pre Pandoc Manual, orig Markdown\n                                + '\"~' // https://github.com/jgm/pandoc/issues/8777\n\n    // override inherited CommonMark, restore PTSS default\n    stylesheet.linkDestAllowSpaces = true\n    //todo![ptss, spec, inline] TEMP HACK: the above and below are interdependent/redundant (if the above is true,\n    //  below must match spaces in the link dest, if false, then not. This should be fixed when we replace\n    //  the regex with our own inline parser for link dests, which will be used both for links and link ref defs.\n    const linkRefDef = stylesheet.get('Link Ref Definition') as ptss.ChunkStyle\n    // eslint-disable-next-line no-control-regex\n    linkRefDef.bodyPattern = /((?:[^\\\\[\\]]|\\\\.){0,1000})]:\\s*(?:<((?:[^<>\\n\\\\\\x00]|\\\\.)*)>|([^ <\\n][^\\n]*))\\s*(\\s(?:\"((?:\\\\\\S|[^\"\\x00])*)\"|'((?:\\\\\\S|[^'\\x00])*)'|\\(((?:\\\\\\S|[^()\\x00])*)\\))\\s*?)?$/ym\n\n    const para = stylesheet.get('Paragraph') as ptss.ChunkStyle\n    para.irNode.body = new ptss.Expression(\n        [\n            'parseInlines',\n            ['trim', ['body']],\n            'twoSpaceNewlineIsHardBreak'\n        ]\n    )\n\n    const setext = stylesheet.remove('Setext Heading') as ptss.ChunkStyle\n    setext.consumesBackChunk = false\n    setext.maxLines = 2\n    setext.canInterruptParagraph = false  //pandoc ext -blank_before_header only applies to ATX\n    setext.canInterruptLazy = false\n    stylesheet.insertAbove('ATX Heading', setext)\n\n    // no space required after #\n    const atx = stylesheet.get('ATX Heading') as ptss.ChunkStyle\n    atx.headPattern = /(#{1,6})(?!#)/ym\n    atx.bodyPattern = /(?:[ \\t]*(.*?))??(?:[ \\t]+#+)?[ \\t]*$/ym\n    atx.canInterruptParagraph = true  //pandoc ext: -blank_before_header\n    atx.canInterruptLazy = true\n\n    // todo[api] the DSL for stylesheets should make modifying inherited\n    //   styles easy, e.g. something like:\n    //   ```\n    //   Pandoc extends CommonMark {\n    //       override 'List' {\n    //           orderedMarkers = '.'\n    //           honorStartNum = false\n    //           canInterruptParagraph = true\n    //           canInterruptParaWithinListOnly = true\n    //           canInterruptLazy = true\n    //       }\n    //   }\n    //   ```\n    const list = stylesheet.get('List') as ptss.ListStyle\n    list.orderedMarkers = '.' //apparently ')' not supported for pandoc ext: -fancy_lists\n    list.honorStartNum = false\n    list.canInterruptParagraph = false //pandoc ext: -lists_without_preceding_blankline\n    list.canInterruptParaWithinList = true\n    list.canInterruptLazy = true\n\n    const th = stylesheet.get('Thematic Break')\n    th.canInterruptParagraph = false\n    th.canInterruptLazy = false\n\n    stylesheet.remove('Backtick Fenced Code Block')\n    stylesheet.remove('Tilde Fenced Code Block')\n\n    const indentedCodeBlock = stylesheet.get('Indented Code Block') as ptss.ContainerStyle\n    // todo[spec] Pandoc-Markdown's different behavior (does not conform to\n    //  \"literal-blocks_trailing-newline.md\"). To observe the difference,\n    //  replace the expression below which strips the body's trailing newline\n    //  with the following pass-through expression to see the resulting\n    //  Pandoc spec test failures:\n    //  ```\n    //  s.irNode.body = new ptss.Expression(['body'])\n    indentedCodeBlock.irNode.body = new ptss.Expression(['replace', ['body'], /\\n$/, ''])\n\n    stylesheet.inlineStyles[stylesheet.inlineStyles.indexOf('backticks(commonmark)')] = 'backticks(trim)'\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\nimport {newPandocMarkdownStrictStylesheet} from './pandoc-markdown-strict.ptss.js'\nimport {newCommonMarkSheet} from './commonmark.ptss.js'\n\n// todo[spec] Configurability (like Pandoc, disable any extension)\n//   - This can be implemented most simply by accepting a config object. But however it\n//     is done, it maybe should be done in a standard way for all plain text stylesheets.\n\n\nexport function newPandocMarkdownStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = newPandocMarkdownStrictStylesheet(options)\n    stylesheet.name = 'Pandoc Markdown'\n\n    // todo[hack] Pandoc-Markdown builds on Pandoc-Markdown-strict, adding\n    //  some styles and properties defined from CommonMark that Pandoc-strict\n    //  does not define/excludes. I don't think \"mixins\" like this makes sense\n    //  for the PTSS spec. We probably should just redefine the styles here\n    //  from scratch.\n    const commonmark = newCommonMarkSheet(options)\n\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t'\n    stylesheet.escapeSyntax.escapeMappings = [[' ', '\\xa0'],['\\t', '\\xa0']] //mapped to non-breaking space\n\n    const para = stylesheet.get('Paragraph') as ptss.ChunkStyle\n    para.irNode.body = new ptss.Expression(\n        [\n            'parseInlines',\n            ['trim', ['body']],\n            'backslashNewlineIsHardBreak', 'backslashEOCIsHardBreak', 'twoSpaceNewlineIsHardBreak'\n        ]\n    )\n\n    const atx = stylesheet.get('ATX Heading') as ptss.ChunkStyle\n    atx.canInterruptParagraph = false  //pandoc ext: +blank_before_header\n    atx.canInterruptLazy = false\n\n    const blockquote = stylesheet.get('Block Quote') as ptss.ChunkStyle\n    blockquote.canInterruptParagraph = false  //pandoc ext: +blank_before_blockquote\n\n    const list = stylesheet.get('List') as ptss.ListStyle\n    list.honorStartNum = true\n    list.orderedMarkers = '.)' //apparently ')' only supported for pandoc ext: +fancy_lists\n\n    const pipeTable = new ptss.TableStyle('Pipe Table', stylesheet)\n    pipeTable.tableType = 'sv'\n    pipeTable.canInterruptParagraph = false\n    pipeTable.heading = 'delimited, required'\n    pipeTable.headingDelim = '-'\n    pipeTable.delimIntersection = '|+'\n    pipeTable.sideBorder = '|'\n    pipeTable.sideBorderLeftRule = 'lazy'\n    pipeTable.sideBorderRightRule = 'lazy'\n    pipeTable.columnsDelim = '|'\n    pipeTable.columnsNumber = 'per head delim'\n    pipeTable.columnsAlignIndicator = ':'\n    pipeTable.bodyRowTooShort = 'add-empty'\n    pipeTable.bodyRowTooLong = 'truncate'\n    // placing at precedence below ATX and Setext but above the container\n    // and code block styles.\n    // todo![api] insertAbove doesn't guarantee the assumptions just stated\n    stylesheet.insertAbove('ATX Heading', pipeTable)\n\n    const footnote = new ptss.ContainerStyle('Footnote', stylesheet)\n    footnote.hangingIndent = 4\n    footnote.marker = /\\[(\\^(\\S+))]:/y\n    footnote.body = 'BLOCKS'\n    footnote.irNode.type = new ptss.Expression('note')\n    footnote.irNode.subType = new ptss.Expression('footnote')\n    footnote.ptNamedValue = {\n        type: 'element',\n        // Pandoc has a segregated note namespace, where `^` prefixes all note names and references\n        name: new ptss.Expression(['marker', 1]),\n        value: 'self'\n    }\n    // without this precedence, all footnotes would be taken as Link Ref Definition\n    stylesheet.insertAbove('Link Ref Definition', footnote)\n\n    // todo[spec] Pandoc-Markdown's different behavior (does not conform to\n    //  \"literal-blocks_trailing-newline.md\"). To observe the difference,\n    //  replace the expression below which strips the body's trailing newline\n    //  with the following pass-through expression to see the resulting\n    //  Pandoc spec test failures:\n    //  ```\n    //  s.irNode.body = new ptss.Expression(['body'])\n    const backTick = commonmark.get('Backtick Fenced Code Block') as ptss.ContainerStyle\n    backTick.styleSheet = stylesheet\n    backTick.irNode.body = new ptss.Expression(['replace', ['body'], /\\n$/, ''])\n    stylesheet.insertAbove('HTML Block', backTick)\n\n    const tilde = commonmark.get('Tilde Fenced Code Block') as ptss.ContainerStyle\n    tilde.styleSheet = stylesheet\n    tilde.irNode.body = new ptss.Expression(['replace', ['body'], /\\n$/, ''])\n    stylesheet.insertAbove('HTML Block', tilde)\n\n    const lineBlock = new ptss.ContainerStyle('Line Block', stylesheet)\n    lineBlock.irNode.type = new ptss.Expression('pre')\n    lineBlock.leftBorder = '|'\n    lineBlock.leftPadding = 'yes'\n    lineBlock.canInterruptParagraph = false\n    lineBlock.indent = 'no'\n    lineBlock.body = 'RAW'\n    // todo[pandoc] This complex processing is to convert Line Block content\n    //  into semantically equivalent STIR `pre` form. See test failures for\n    //  remaining gaps. The issue isn't with generating the `pre` equiv,\n    //  but parsing the Lines of Line Blocks independently, with no formatting\n    //  crossing Line boundaries, and Lines have their own rules on Line\n    //  continuation.\n    lineBlock.irNode.body = new ptss.Expression(\n        ['parseInlines',\n            ['replace',\n                ['replace',\n                    ['replace',\n                        ['replace',\n                            ['body'],\n                            / +$/gm,\n                            ''\n                        ],\n                        /([^\\n ]) +/gm,\n                        '$1[SP]'\n                    ],\n                    / /gm,\n                    '\\u00a0'\n                ],\n                /\\[SP]/gm,\n                ' '\n            ],\n            'preserveNewlines',\n            'preserveWhitespace']\n    )\n    stylesheet.blockStyles.push(lineBlock)\n\n    stylesheet.inlineStyles.splice(stylesheet.inlineStyles.indexOf('reference'), 0, 'noteRef(segregated)')\n\n    stylesheet.inlineStyles.push('strikethrough')\n    stylesheet.inlineStyles.push('subscript')\n    stylesheet.inlineStyles.push('superscript')\n    stylesheet.inlineStyles.push('checkbox_text')\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\nimport {newGFMStylesheet} from './gfm.ptss.js'\n\nexport function newMarkdownHSStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    //todo[markdown_hs]: \uD83C\uDFC8 so we are building off of commonmark-strict:\n    //   why have both?\n    //   - i guess cm-strict is simply to study removing sloppiness and laziness,\n    //   - while markdown HS goes further?\n    //   Can punt as I have a todo to de-prioritize if not totally ditch this style anyway.\n    const stylesheet = newGFMStylesheet({strict: true})\n    stylesheet.name = 'MarkdownHS'\n\n    const setext = stylesheet.remove('Setext Heading') as ptss.ChunkStyle\n    setext.name = 'Setext Section Heading'\n    setext.irNode.type = new ptss.Expression('section')\n    setext.consumesBackChunk = false\n    setext.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['body']]])\n    delete setext.irNode.body\n\n    const atx = stylesheet.remove('ATX Heading') as ptss.ChunkStyle\n    atx.name = 'ATX Section Heading'\n    atx.irNode.type = new ptss.Expression('section')\n    atx.canInterruptParagraph = false\n    atx.irNode.title = new ptss.Expression(['parseInlines', ['first', ['body', 1], '']])\n    delete atx.irNode.body\n\n    const thematicBreak = stylesheet.remove('Thematic Break')\n\n    const linkRefDef = stylesheet.remove('Link Ref Definition')\n\n    const pipeTable = stylesheet.remove('GFM Table') as ptss.TableStyle\n    pipeTable.name = 'Pipe Table SV'\n    pipeTable.indent = 'optional'\n    pipeTable.heading = 'delimited, optional'\n    //todo![spec, tables] to support `-` at intersections, the delim row will\n    // now just be an line of `------------`. without column info.\n    // We'd have to use the heading row instead to determine columns. Ff the\n    // table style supported both heading and delim determined columns, we'd\n    // have to dynamically see what was up at parse time, e.g. check the delim\n    // row for any intersection chars that were not also headingDelim chars,\n    // and if none, use the heading row.\n    pipeTable.delimIntersection = '|+'\n    pipeTable.sideBorderLeftRule = 'optional'\n    pipeTable.sideBorderRightRule = 'match'\n    // todo[spec, tables] does MarkdownHS require aligned table with inferred content\n    //   alignment? Or does it support both (in which case we need to specify\n    //   that the indicator overrides inferred?)\n    //pipeTable.columnsAlignIndicator = ':'\n    pipeTable.gfmQuirks = false\n\n    const list = stylesheet.remove('List')\n\n    const fencedCodeTick = stylesheet.remove('Backtick Fenced Code Block')\n    const fencedCodeTilde = stylesheet.remove('Tilde Fenced Code Block')\n\n    const emailBlockQuote = stylesheet.remove('Block Quote') as ptss.ContainerStyle\n    emailBlockQuote.name = 'Email-Style Block Quote'\n\n    // Markdown HS reserves indents for block quotes\n    stylesheet.remove('Indented Code Block')\n\n    // We are using \"Markdown Mode\" indentation logic to implement this in\n    // MarkdownHS, simply so we can demonstrate its use and the nature of\n    // *magical indentation thresholds*. In this case, indents of 2-3 map\n    // to verse, while those above 4 become block quotes.\n\n    const indentedBlockquote = new ptss.ContainerStyle('Indented Block Quotation', stylesheet)\n    indentedBlockquote.irNode.type = new ptss.Expression('block_quote')\n    indentedBlockquote.indent = 'markdown(4,999)'\n\n    // this style has to come LAST because we are using Markdown Mode indentation\n    // (to implement a *magical indentation thresholds*, see above) at 4 spaces,\n    // and even though this has an indent setting of `markdown,2,3`, the `3`\n    // only limits the indentation assigned to the container. It will still\n    // match and consume lines with more than `3` leading spaces, assigning\n    // all the excess to the content.\n    const verse = new ptss.ContainerStyle('Verse', stylesheet)\n    verse.irNode.type = new ptss.Expression('verse')\n    verse.canInterruptParagraph = false\n    verse.canInterruptLazy = false\n    verse.indent = 'markdown(2,3)'\n    verse.body = 'RAW_NL'\n\n    const htmlCodeBlock = stylesheet.remove('HTML Block')\n\n    const footnote = stylesheet.remove('Footnote')\n\n    if (stylesheet.blockStyles.length > 0) {\n        throw Error(`all inherited styles should have been temporarily removed at this point. but ${stylesheet.blockStyles[0].name} was not.`)\n    }\n    stylesheet.blockStyles.push(\n        setext,\n        atx,\n        pipeTable,\n        list,\n        linkRefDef,\n        fencedCodeTick,\n        fencedCodeTilde,\n        emailBlockQuote,\n        thematicBreak,\n        indentedBlockquote,\n        verse,\n        footnote,\n        htmlCodeBlock\n    )\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\n\nexport function newPlainJaneStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('PlainJane')\n\n    //todo[spec] just copied CommonMark's. Haven't even thought about natural escapes.\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n    const para = stylesheet.get('Paragraph') as ptss.ChunkStyle\n    para.irNode.body = new ptss.Expression(\n        [\n            'parseInlines',\n            ['trim', ['body']],\n            'newlineIsHardBreak'\n        ]\n    )\n\n    const setext = new ptss.ChunkStyle('Setext Section Heading', stylesheet)\n    setext.irNode.type = new ptss.Expression('section')\n    setext.tailPattern = /((=+|-+)[ \\t]*$)/ym\n    setext.maxLines = 5\n    setext.indent = 'optional'\n    setext.canInterruptParagraph = false\n    setext.irNode.level = new ptss.Expression(['map', ['at', ['tail', 2], 0], {'=': 1, '-': 2}])\n    setext.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['body']], 'newlineIsHardBreak'])\n\n    const indentedBlockquote = new ptss.ContainerStyle('Indented Block Quotation', stylesheet)\n    indentedBlockquote.irNode.type = new ptss.Expression('block_quote')\n    indentedBlockquote.indent = 'yes'\n\n    const interjectionHanging = new ptss.ContainerStyle('Interjection Hanging', stylesheet)\n    interjectionHanging.indent = 'optional'\n    interjectionHanging.hangingIndent = 'auto'\n    interjectionHanging.hangingIndentRequired = true\n    //todo: use ES9 *Unicode property escapes in regular expressions*\n    // https://pawelgrzybek.com/whats-new-in-ecmascript-2018/#unicode-property-escapes-in-regular-expressions-by-mathias-bynens\n    interjectionHanging.marker = /\u203C\uFE0F|\u26A0\uFE0F|\uD83D\uDEAB|\u26D4|\u2620\uFE0F|\u2139\uFE0F|\uD83D\uDEA9|\uD83D\uDCCC|\u2753|\uD83D\uDCA1|\u2705|\u274C/y\n    interjectionHanging.canInterruptParagraph = true\n    interjectionHanging.irNode.type = new ptss.Expression('interjection')\n    // todo[spec] see relevant notes under Gracedown 'Interjection Paragraph'\n    interjectionHanging.irNode.subType = new ptss.Expression(\n        ['map', ['marker', 0], {\n            '\u203C\uFE0F': 'important',\n            '\uD83D\uDEA9': 'important',\n            '\u26A0\uFE0F': 'warning', // aka caution\n            '\uD83D\uDEAB': 'danger', // todo[RepoDoc] what makes danger different from warning? just more severe?\n            '\u26D4': 'danger',\n            '\u2620\uFE0F': 'danger',\n            '\u2139\uFE0F': 'info',  // aka note\n            '\uD83D\uDCCC': 'info',\n            '\u2753': 'question',\n            '\uD83D\uDCA1': 'tip',\n            '\u2705': 'positive',\n            '\u274C': 'negative'\n        }])\n    // todo![composition] title should be set from first heading?\n    // interjectionPara.irNode.title =\n    interjectionHanging.irNode.icon = new ptss.Expression(['marker', 0])\n\n    const interjectionPara = new ptss.ChunkStyle('Interjection Paragraph', stylesheet)\n    //todo: use ES9 *Unicode property escapes in regular expressions*\n    // https://pawelgrzybek.com/whats-new-in-ecmascript-2018/#unicode-property-escapes-in-regular-expressions-by-mathias-bynens\n    interjectionPara.headPattern = /\u203C\uFE0F|\u26A0\uFE0F|\uD83D\uDEAB|\u26D4|\u2620\uFE0F|\u2139\uFE0F|\uD83D\uDEA9|\uD83D\uDCCC|\u2753|\uD83D\uDCA1|\u2705|\u274C/y\n    // todo[RepoDoc] hack: this regex doesn't ensure the emphasis/strong markers are properly paired\n    // todo![ptss composition] ideally we use the plan where this style  in terms of the other style\n    //   elements, e.g. ATX heading.\n    interjectionPara.bodyPattern = / *(?:([^\\n]+)(?:\\\\| {2})\\s*\\n|[*_]{1,3}([^\\n]+?)[*_]{1,3} *\\n)?([\\s\\S]*)/y\n    interjectionPara.canInterruptParagraph = false\n    interjectionPara.canInterruptLazy = false\n    interjectionPara.irNode.type = new ptss.Expression('interjection')\n    // todo[stir] settle on first cut of interjection subtypes supported natively by the IR\n    //    OR:\n    // todo![stir] decide whether the IR is neutral and just passes the subtype through? Would that\n    //   work for other output formats if they don't have a notion like classes ???\n    //   **Should there instead be a predefined *base* set of interjection types that all writers\n    //   can rely on without worrying about whether a particular implementation supports it?**\n    // See also https://rdmd.readme.io/docs/callouts\n    // Also my post: on talk.commonmark.org about github admonitions + my post on the github announcement\n    // DocBook: danger, error, hint, important, note, tip, warning\n    interjectionPara.irNode.subType = new ptss.Expression(\n        ['map', ['head', 0], {\n            '\u203C\uFE0F': 'important',\n            '\uD83D\uDEA9': 'important',\n            '\u26A0\uFE0F': 'warning', // aka caution\n            '\uD83D\uDEAB': 'danger', // todo[RepoDoc] what makes danger different from warning? just more severe?\n            '\u26D4': 'danger',\n            '\u2620\uFE0F': 'danger',\n            '\u2139\uFE0F': 'info',  // aka note\n            '\uD83D\uDCCC': 'info',\n            '\u2753': 'question',\n            '\uD83D\uDCA1': 'tip',\n            '\u2705': 'positive',\n            '\u274C': 'negative'\n        }])\n    interjectionPara.irNode.icon = new ptss.Expression(['head', 0])\n    interjectionPara.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['first', ['body', 1], ['body', 2]]]])\n    interjectionPara.irNode.body = new ptss.Expression(['parseInlines', ['trim', ['body', 3]]])\n\n    stylesheet.blockStyles.push(\n        setext,\n        indentedBlockquote,\n        interjectionHanging,\n        interjectionPara\n    )\n\n    stylesheet.inlineStyles = [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'reference',\n        'newline',\n        'html'\n    ]\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\nimport {newGFMStylesheet} from './gfm.ptss.js'\n\n\nexport function newGracedownSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    //todo[RepoDoc] allow user to pass in custom interjection icon-to-type mappings via `options`\n    const stylesheet = newGFMStylesheet(options)\n    stylesheet.name = 'Gracedown'\n\n    // override inherited CommonMark, restore PTSS default\n    stylesheet.linkDestAllowSpaces = true\n\n    const interjectionPara= new ptss.ChunkStyle('Simple Interjection', stylesheet)\n    //todo: use ES9 *Unicode property escapes in regular expressions*\n    // https://pawelgrzybek.com/whats-new-in-ecmascript-2018/#unicode-property-escapes-in-regular-expressions-by-mathias-bynens\n    interjectionPara.headPattern = /\u203C\uFE0F|\u26A0\uFE0F|\uD83D\uDEAB|\u26D4|\u2620\uFE0F|\u2139\uFE0F|\uD83D\uDEA9|\uD83D\uDCCC|\u2753|\uD83D\uDCA1|\u2705|\u274C/y\n    // todo[RepoDoc] hack: this regex doesn't ensure the emphasis/strong markers are properly paired\n    // todo![ptss composition] ideally we use the plan where this style in terms\n    //  of the other ptss defined elements, e.g. ATX heading.\n    interjectionPara.bodyPattern = / *(?:([^\\n]+)(?:\\\\| {2})\\s*\\n|[*_]{1,3}([^\\n]+?)[*_]{1,3} *\\n)?([\\s\\S]*)/y\n    interjectionPara.canInterruptParagraph = false\n    interjectionPara.canInterruptLazy = false\n    interjectionPara.irNode.type = new ptss.Expression('interjection')\n    // todo[stir] settle on first cut of interjection subtypes supported natively by the IR\n    //    OR:\n    // todo![stir] decide whether the IR is neutral and just passes the subtype through? Would that\n    //   work for other output formats if they don't have a notion like classes ???\n    //   **Should there instead be a predefined *base* set of interjection types that all writers\n    //   can rely on without worrying about whether a particular implementation supports it?**\n    // See also https://rdmd.readme.io/docs/callouts\n    // See also https://github.com/jgm/djot/issues/196#issuecomment-1529691779\n    // Also my post: on talk.commonmark.org about github admonitions + my post on the github announcement\n    // DocBook: danger, error, hint, important, note, tip, warning\n    interjectionPara.irNode.subType = new ptss.Expression(\n        ['map', ['head', 0], {\n            '\u203C\uFE0F': 'important',\n            '\uD83D\uDEA9': 'important',\n            '\u26A0\uFE0F': 'warning', // aka caution\n            '\uD83D\uDEAB': 'danger', // todo[RepoDoc] what makes danger different from warning? just more severe?\n            '\u26D4': 'danger',\n            '\u2620\uFE0F': 'danger',\n            '\u2139\uFE0F': 'info',  // aka note\n            '\uD83D\uDCCC': 'info',\n            '\u2753': 'question',\n            '\uD83D\uDCA1': 'tip',\n            '\u2705': 'positive',\n            '\u274C': 'negative'\n        }])\n    interjectionPara.irNode.icon = new ptss.Expression(['head', 0])\n    interjectionPara.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['first', ['body', 1], ['body', 2]]]])\n    interjectionPara.irNode.body = new ptss.Expression(['parseInlines', ['trim', ['body', 3]]])\n    stylesheet.insertAbove('Block Quote', interjectionPara)\n\n    const interjectionHanging = new ptss.ContainerStyle('Hanging Interjection', stylesheet)\n    interjectionHanging.irNode.type = new ptss.Expression('interjection')\n    interjectionHanging.indent = 'no'\n    interjectionHanging.hangingIndent = 'marker'\n    // todo[ptss composition] TEMP HACK until body composition is supported, we\n    //  are forced to include the interjection symbol in the marker, forcing\n    //  the hanging indent to be greater than it needs to be.\n    interjectionHanging.marker = /\\* (\u203C\uFE0F|\u26A0\uFE0F|\uD83D\uDEAB|\u26D4|\u2620\uFE0F|\u2139\uFE0F|\uD83D\uDEA9|\uD83D\uDCCC|\uD83D\uDCA1|\u2705|\u274C)/y\n    interjectionHanging.bottomBorder = null\n    interjectionHanging.canInterruptParagraph = true\n    interjectionHanging.canInterruptLazy = true\n    interjectionHanging.irNode.subType = new ptss.Expression(\n        ['map', ['marker', 1], {\n            '\u203C\uFE0F': 'important',\n            '\uD83D\uDEA9': 'important',\n            '\u26A0\uFE0F': 'warning', // aka caution\n            '\uD83D\uDEAB': 'danger', // todo[RepoDoc] what makes danger different from warning? just more severe?\n            '\u26D4': 'danger',\n            '\u2620\uFE0F': 'danger',\n            '\u2139\uFE0F': 'info',  // aka note\n            '\uD83D\uDCCC': 'info',\n            '\uD83D\uDCA1': 'tip',\n            '\u2705': 'positive',\n            '\u274C': 'negative'\n        }])\n    interjectionHanging.irNode.icon = new ptss.Expression(['marker', 1])\n    // todo![ptss composition] we can't support a title without it.\n    //interjectionHanging.irNode.title = ???\n    stylesheet.insertAbove('List', interjectionHanging)\n\n    const interjectionIndented = new ptss.ContainerStyle('Indented Interjection', stylesheet)\n    interjectionIndented.irNode.type = new ptss.Expression('interjection')\n    interjectionIndented.indent = 'yes'\n    // todo![ptss composition] does composition make more sense than mimicking ATX as I'm doing below?\n    // todo[spec] TEMP HACK until ContainerStyle `header` is implemented.\n    interjectionIndented.topBorder = '#'\n    interjectionIndented.topBorderMinLength = 1\n    interjectionIndented.righter = /\\s*(\u203C\uFE0F|\u26A0\uFE0F|\uD83D\uDEAB|\u26D4|\u2620\uFE0F|\u2139\uFE0F|\uD83D\uDEA9|\uD83D\uDCCC|\uD83D\uDCA1|\u2705|\u274C)\\s*([^\\n]*)(?:\\n|$)/y\n    // END hack\n    interjectionIndented.bottomBorder = null\n    interjectionIndented.canInterruptParagraph = true\n    interjectionIndented.canInterruptLazy = true\n    interjectionIndented.irNode.subType = new ptss.Expression(\n        ['map', ['righter', 1], {\n            '\u203C\uFE0F': 'important',\n            '\uD83D\uDEA9': 'important',\n            '\u26A0\uFE0F': 'warning', // aka caution\n            '\uD83D\uDEAB': 'danger', // todo[RepoDoc] what makes danger different from warning? just more severe?\n            '\u26D4': 'danger',\n            '\u2620\uFE0F': 'danger',\n            '\u2139\uFE0F': 'info',  // aka note\n            '\uD83D\uDCCC': 'info',\n            '\uD83D\uDCA1': 'tip',\n            '\u2705': 'positive',\n            '\u274C': 'negative'\n        }])\n    interjectionIndented.irNode.icon = new ptss.Expression(['righter', 1])\n    interjectionIndented.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['righter', 2]]])\n    stylesheet.insertAbove('Block Quote', interjectionIndented)\n\n    const interjectionBirdTracked = new ptss.ContainerStyle('Bird-Tracked Interjection', stylesheet)\n    interjectionBirdTracked.irNode.type = new ptss.Expression('interjection')\n    interjectionBirdTracked.indent = 'no'\n    // todo![ptss composition] does composition make more sense than mimicking ATX as I'm doing below?\n    // todo[spec] TEMP HACK until ContainerStyle `header` is implemented.\n    interjectionBirdTracked.topBorder = '>'\n    interjectionBirdTracked.topBorderMinLength = 1\n    interjectionBirdTracked.righter = /\\s*#{0,6}\\s*(\u203C\uFE0F|\u26A0\uFE0F|\uD83D\uDEAB|\u26D4|\u2620\uFE0F|\u2139\uFE0F|\uD83D\uDEA9|\uD83D\uDCCC|\uD83D\uDCA1|\u2705|\u274C)\\s*([^\\n]*)(?:\\n|$)/y\n    // END hack\n    interjectionBirdTracked.bottomBorder = null\n    interjectionBirdTracked.leftBorder = '>'\n    interjectionBirdTracked.leftPadding = 'sloppy'\n    interjectionBirdTracked.canInterruptParagraph = true\n    interjectionBirdTracked.canInterruptLazy = true\n    interjectionBirdTracked.irNode.subType = new ptss.Expression(\n        ['map', ['righter', 1], {\n            '\u203C\uFE0F': 'important',\n            '\uD83D\uDEA9': 'important',\n            '\u26A0\uFE0F': 'warning', // aka caution\n            '\uD83D\uDEAB': 'danger', // todo[RepoDoc] what makes danger different from warning? just more severe?\n            '\u26D4': 'danger',\n            '\u2620\uFE0F': 'danger',\n            '\u2139\uFE0F': 'info',  // aka note\n            '\uD83D\uDCCC': 'info',\n            '\uD83D\uDCA1': 'tip',\n            '\u2705': 'positive',\n            '\u274C': 'negative'\n        }])\n    interjectionBirdTracked.irNode.icon = new ptss.Expression(['righter', 1])\n    interjectionBirdTracked.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['righter', 2]]])\n    stylesheet.insertAbove('Block Quote', interjectionBirdTracked)\n\n    const table = stylesheet.get('GFM Table') as ptss.TableStyle\n    // todo![spec] figure out a generic way to support Gracedown's need to manipulate\n    //   the cell body?\n    // todo![composition] this Expression should be applied to irNode, not table.\n    //  - \uD83E\uDEE5forgot why i wrote the preceding sentence, and thus what it means.\n    //    anyway, think about how composition might make this better? thoughts:\n    //    - i think composition by definition will be a feature for containers,\n    //      not leaves. But it also applies to nested containers, for which\n    //      composition is a sub-type mechanism. It doesn't make sense for the\n    //      doc root container, and i think similarly it won't make sense for\n    //      cell, which a sort of doc root itself ??? \uD83E\uDD14  Doesn't composition\n    //      only apply to a nested container within a cell? Is there a use case\n    //      for a table cell whose content is prescribed?\n    table.cell = new ptss.Expression(\n        ['if',\n            ['match', ['body'], /<br *\\/?>/],\n            ['parseBlocks',\n                ['replace', ['body'], /<br *\\/?>/g, '\\n'],\n                stylesheet,\n                'cell'],\n            ['parseInlines', ['body']]\n        ]\n    )\n\n    //! first case of making node type conditional!\n    const tickFence = stylesheet.get('Backtick Fenced Code Block') as ptss.ContainerStyle\n    tickFence.body = 'RAW'\n    tickFence.irNode.type = new ptss.Expression(\n        ['if',\n            ['match', ['righter'], /\\s*pre\\s*/],\n            'pre',\n            'code_block']\n    )\n    tickFence.irNode.info = new ptss.Expression(\n        ['if',\n            ['match', ['righter'], /\\s*pre\\s*/],\n            undefined,\n            ['unescape', ['trim', ['righter', 0]]]]\n    )\n    tickFence.irNode.body = new ptss.Expression(\n        ['if',\n            ['match', ['righter'], /\\s*pre\\s*/],\n            ['parseInlines', ['body'], 'preserveNewlines', 'preserveWhitespace'],\n            ['body']]\n    )\n\n    stylesheet.inlineStyles.push('text_highlight')\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\n\nexport function newRSTSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('reStructuredText')\n\n    //todo[spec] just copied CommonMark's. Haven't even thought about natural escapes.\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n    const thematicBreak = new ptss.ChunkStyle('Thematic Break', stylesheet)\n    thematicBreak.irNode.type = new ptss.Expression('thematic_break')\n    thematicBreak.headPattern = /(?:(?:\\*[ \\t]*){3,}|(?:_[ \\t]*){3,}|(?:-[ \\t]*){3,})[ \\t]*$/ym\n    thematicBreak.maxLines = 1\n    thematicBreak.canInterruptParagraph = true\n\n    const list = new ptss.ListStyle('List', stylesheet)\n    list.unorderedMarkers = '-*+'\n    list.orderedMarkers = '.)'\n\n    // todo[spec]  should we have something fall through to this in tests to test the concept?\n    //   OR should a test for that go in another simpler text ptss?\n    // this represents the built-in default indentation container.\n    const defaultIndentContainer = new ptss.ContainerStyle('Default Indent Block', stylesheet)\n    defaultIndentContainer.irNode.type = new ptss.Expression('block_quote')\n    defaultIndentContainer.indent = 'yes'\n    defaultIndentContainer.body = 'BLOCKS'\n\n    stylesheet.blockStyles.push(\n        thematicBreak,\n        list,\n        defaultIndentContainer\n    )\n\n    stylesheet.inlineStyles = [\n        // 'autolink',\n        'backticks',\n        'emphasis',\n        // 'entity',\n        'escape',\n        // 'html_inline',\n        // 'image',\n        // 'reference',\n        // 'newline',\n        // 'html'\n    ]\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\n\nexport function newKitchenSinkStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('PTSS Kitchen Sink Demonstration')\n\n    //todo[spec] just copied CommonMark's.\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n    const setext = new ptss.ChunkStyle('Setext Section Heading', stylesheet)\n    setext.irNode.type = new ptss.Expression('section')\n    setext.tailPattern = /((=+|-+)[ \\t]*$)/ym\n    setext.maxLines = 5\n    setext.indent = 'optional'\n    setext.canInterruptParagraph = false\n    setext.irNode.level = new ptss.Expression(['map', ['at', ['tail', 2], 0], {'=': 1, '-': 2}])\n    setext.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['body']]])\n\n    const pipeTable = new ptss.TableStyle('Pipe Table SV', stylesheet)\n    pipeTable.tableType = 'sv'\n    pipeTable.indent = 'optional'\n    pipeTable.heading = 'delimited, optional'\n    pipeTable.headingDelim = '-'\n    pipeTable.delimIntersection = '|+'\n    pipeTable.sideBorder = '|'\n    pipeTable.sideBorderLeftRule = 'optional'\n    pipeTable.sideBorderRightRule = 'match'\n    pipeTable.columnsDelim = '|'\n    pipeTable.columnsNumber = 'per head delim'\n    pipeTable.columnsAlignIndicator = ':'\n\n    const list = new ptss.ListStyle('List', stylesheet)\n    list.unorderedMarkers = '-*+'\n    list.orderedMarkers = '.)'\n    list.indent = 'optional'\n\n    const fencedCode = new ptss.ContainerStyle('Backtick Fenced Code Block', stylesheet)\n    fencedCode.irNode.type = new ptss.Expression('code_block')\n    fencedCode.indent = 'optional'\n    fencedCode.topBorder = '`'\n    fencedCode.topBorderMinLength = 3\n    fencedCode.righter = /([^`]*?)$/ym\n    fencedCode.body = 'RAW_NL'\n    fencedCode.canInterruptParagraph = true\n    fencedCode.irNode.info = new ptss.Expression(['unescape', ['trim', ['righter', 0]]])\n\n    const emailBlockQuote = new ptss.ContainerStyle('Email-Style Block Quote', stylesheet)\n    emailBlockQuote.irNode.type = new ptss.Expression('block_quote')\n    emailBlockQuote.leftBorder = '>'\n    emailBlockQuote.leftPadding = 'per first line'\n    emailBlockQuote.indent = 'optional'\n    emailBlockQuote.canInterruptParagraph = true\n\n    // We are using \"Markdown Mode\" indentation logic to implement this in\n    // Kitchen-Sink, simply so we can demonstrate its use and the nature of\n    // *magical indentation thresholds*. In this case, indents of 2-3 map\n    // to verse, while those above 4 become block quotes.\n\n    const indentedBlockquote = new ptss.ContainerStyle('Indented Block Quotation', stylesheet)\n    indentedBlockquote.irNode.type = new ptss.Expression('block_quote')\n    indentedBlockquote.indent = 'markdown(4,999)'\n\n    // this style has to come LAST because we are using Markdown Mode indentation\n    // (to implement a *magical indentation thresholds*, see above) at 4 spaces,\n    // and even though this has an indent setting of `markdown,2,3`, the `3`\n    // only limits the indentation assigned to the container. It will still\n    // match and consume lines with more than `3` leading spaces, assigning\n    // all the excess to the content.\n    const verse = new ptss.ContainerStyle('Verse', stylesheet)\n    verse.irNode.type = new ptss.Expression('verse')\n    verse.canInterruptParagraph = false\n    verse.indent = 'markdown(2,3)'\n    verse.body = 'RAW_NL'\n\n    stylesheet.blockStyles.push(\n        setext,\n        pipeTable,\n        list,\n        fencedCode,\n        emailBlockQuote,\n        indentedBlockquote,\n        verse\n    )\n\n    stylesheet.inlineStyles = [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'reference',\n        'newline',\n        'html'\n    ]\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\n\nexport function newTestCompositionsSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('PTSS Test TWO Stylesheet')\n\n    //todo[spec] just copied CommonMark's. Haven't even thought about natural escapes.\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n    const blockQuote = new ptss.ContainerStyle('Block Quote', stylesheet)\n    blockQuote.irNode.type = new ptss.Expression('block_quote')\n    blockQuote.leftBorder = '>'\n    blockQuote.leftPadding = 'per first line'\n    blockQuote.canInterruptParagraph = true\n    blockQuote.canInterruptLazy = true\n    blockQuote.indent = 'optional'\n    blockQuote.body = 'BLOCKS'\n\n    const list = new ptss.ListStyle('List', stylesheet)\n    list.unorderedMarkers = '-*+'\n    list.orderedMarkers = '.)'\n    list.indent = 'optional'\n\n    stylesheet.blockStyles.push(\n        blockQuote,\n        list\n    )\n\n    stylesheet.inlineStyles = [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'image',\n        'noteRef(spaces)',\n        'reference',\n        'newline'\n    ]\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\n\n/**\n * todo![functional test] I think the premises below\n *   are accurate anymore. Nail the premise for this\n *   test style and then rename it, as I have done for\n * \n * style sheet premises\n * ====================\n *  Indentation and basic structure:\n *   - NO SLOPPINESS\n *   - 0-3 space indent is ignored (Writer Prerogative)\n *     - But both containers and multiline chunks must\n *       still have proper left alignment. Differences\n *       in alignment are interpreted as block boundaries.\n *   - 4 spaces triggers an indented block\n *   - 8 spaces triggers an indented code block\n *   - But headings can be indented as much as you want.\n *     - one consequence of this is that headings can't\n *       be the first element in an indented block. But if\n *       you look at the plain text, such an interpretation\n *       makes perfect sense. Indented blocks ARE NOT\n *       intended to be perfect recursive nesting structures,\n *       meaning \"any valid root content is also valid\n *       nested content if indented\". They are intended for\n *       simple quotations, or other bits of content meant\n *       that the main flow \"is talking about\" or refers to.\n *     - Another still, utilizing borders, is available for\n *       such open-ended generalized nesting.\n *  Headings:\n *   - Indent as much as you want, center even. See above.\n */\nexport function newTestPtssOneSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('PTSS Test ONE Stylesheet')\n\n    // test default defaults\n    // ptss.lazyContinuation = false\n    // ptss.sloppyMargin = 0\n    // ptss.sloppyPadding = false\n\n    //todo[spec] just copied CommonMark's. Haven't even thought about natural escapes.\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n    // this style shows a few things:\n    // - a chunk style with both head and tails that are full lines\n    // - the definition of an overall style for headings is divvied up\n    //   between two lower level styles.\n    //todo[spec] need to assert that the tail chars match the head chars?\n    const setextOneTwo = new ptss.ChunkStyle('Level 1/2 Setext Heading', stylesheet)\n    setextOneTwo.indent = 'optional'\n    setextOneTwo.headPattern = /(=+|-+)[ \\t]*$/ym\n    setextOneTwo.tailPattern = /(=+|-+)[ \\t]*$/ym\n    setextOneTwo.canInterruptParagraph = false\n    setextOneTwo.maxLines = 6\n    setextOneTwo.irNode.type = new ptss.Expression('heading')\n    setextOneTwo.irNode.level = new ptss.Expression(['map', ['at', ['head', 1], 0], {'=': 1, '-': 2}])\n    setextOneTwo.irNode.body = new ptss.Expression(['parseInlines', ['trim', ['body']]]) //todo[perf] trim may be redundant with latter handling. clean up.\n\n    const setextThreeFour = new ptss.ChunkStyle('Level 3/4 Setext Heading', stylesheet)\n    setextThreeFour.indent = 'optional'\n    setextThreeFour.tailPattern = /(=+|-+)[ \\t]*$/ym\n    setextThreeFour.canInterruptParagraph = false\n    setextThreeFour.maxLines = 5\n    setextThreeFour.irNode.type = new ptss.Expression('heading')\n    setextThreeFour.irNode.level = new ptss.Expression(['map', ['at', ['tail', 1], 0], {'=': 3, '-': 4}])\n    setextThreeFour.irNode.body = new ptss.Expression(['parseInlines', ['trim', ['body']]]) //todo[perf] trim may be redundant with latter handling. clean up.\n\n    // note how if it were not for precedence, this style would consume the\n    // lines that otherwise belong to Setext headings and the Asterisk Box Quote\n    const thematicBreak = new ptss.ChunkStyle('Thematic Break', stylesheet)\n    thematicBreak.indent = 'optional'\n    thematicBreak.headPattern = /(?:(?:\\*[ \\t]*){3,}|(?:_[ \\t]*){3,}|(?:-[ \\t]*){3,})[ \\t]*$/ym\n    thematicBreak.maxLines = 1\n    thematicBreak.canInterruptParagraph = true\n    thematicBreak.irNode.type = new ptss.Expression('thematic_break')\n\n    const warningLine = new ptss.ChunkStyle('Warning Line', stylesheet)\n    warningLine.indent = 'yes'\n    warningLine.headPattern = /Warning:\\s+/y\n    warningLine.maxLines = 1\n    warningLine.canInterruptParagraph = false\n    warningLine.irNode.type = new ptss.Expression('interjection')\n    warningLine.irNode.subType = new ptss.Expression('warning')\n    //todo[spec] should this be the default, i.e. if content defaults to body?\n    warningLine.irNode.body = new ptss.Expression(['parseInlines', ['body']])\n\n    // todo[spec] While in this case a multiline head+tail\n    //   chunk makes total sense, There may be a legitimate\n    //   case for allowing maxLines = 1; but the current\n    //   code disallows it. REVIEW.\n    // todo[spec] This is a great example of a use case for\n    //   supporting more than just `content` for blockStyles,\n    //   but things like `title`. See the test case for this\n    //   style. One should be able to prefix the content with\n    //   \"Note:\", \"Special note:\", \"Announcement:\", etc\n    //   without having to hard code new styles for each case.\n    //   The value should just go into a title element.\n    const note = new ptss.ChunkStyle('Note Chunk', stylesheet)\n    note.headPattern = /^>>\\s+/ym\n    note.tailPattern = /\\s+<<\\s*$/gm\n    note.canInterruptParagraph = false\n    note.irNode.type = new ptss.Expression('interjection')\n    note.irNode.subType = new ptss.Expression('info')\n    note.irNode.body = new ptss.Expression(['parseInlines', ['body']])\n\n    // this style intentionally uses `+` to test precedence. `+` is also:\n    //  - a bullet char for unordered lists\n    //  - the topBorder char for Fenced(+/) Block Quote\n    const leftBorderBQ = new ptss.ContainerStyle('Left(+) Border Block Quote', stylesheet)\n    leftBorderBQ.irNode.type = new ptss.Expression('block_quote')\n    //todo[spec] add '>' so I can make tests to compare this stylesheet with CommonMark?\n    //todo[spec] add '>' to test and demonstrate how precedence resolves ambiguity between\n    //  this style and Note Chunk.\n    leftBorderBQ.leftBorder = '+'\n    leftBorderBQ.leftPadding = 'per first line'\n    leftBorderBQ.indent = 'optional'\n\n    const fencedCode = new ptss.ContainerStyle('Fenced($) Code Block', stylesheet)\n    fencedCode.irNode.type = new ptss.Expression('code_block')\n    fencedCode.topBorder = '$'\n    //fencedBQ.topBorderMinLength = 13\n    fencedCode.indent = 'optional'\n    fencedCode.body = 'RAW_NL'\n    fencedCode.canInterruptParagraph = true\n\n    const leftBorderCode = new ptss.ContainerStyle('Left(|) Border Code Block', stylesheet)\n    leftBorderCode.irNode.type = new ptss.Expression('code_block')\n    leftBorderCode.leftBorder = '|'\n    leftBorderCode.leftPadding = 'per first line'\n    leftBorderCode.indent = 'optional'\n    leftBorderCode.body = 'RAW_NL'\n\n    // while this style isn't good stylesheet design, it is here to demonstrate\n    // indentation behavior under many different contexts. See the test case \"container: three different indents\"\n    const indentedCode = new ptss.ContainerStyle('Indent(8) Code Block', stylesheet)\n    indentedCode.irNode.type = new ptss.Expression('code_block')\n    indentedCode.indent = 'markdown(8,8)'\n    indentedCode.body = 'RAW_NL'\n\n    // exists to test proper interpretation of `+`, which is used by three different styles.\n    const fencedBQ = new ptss.ContainerStyle('Fenced(+/) Block Quote', stylesheet)\n    fencedBQ.irNode.type = new ptss.Expression('block_quote')\n    fencedBQ.topBorder = '+/'\n    //fencedBQ.topBorderMinLength = 13\n    fencedBQ.indent = 'optional'\n    fencedBQ.canInterruptParagraph = true\n\n    // this style exists to show how precedence works. In this case a line of `*` which would\n    // otherwise be interpreted as a thematic break instead gets interpreted as a top border\n    // of this style.\n    const boxAsteriskBQ = new ptss.ContainerStyle('Asterisk Box Quote', stylesheet)\n    boxAsteriskBQ.irNode.type = new ptss.Expression('block_quote')\n    boxAsteriskBQ.topBorder = '*'\n    //boxBQ.topBorderMinLength = 13\n    boxAsteriskBQ.leftBorder = '*'\n    boxAsteriskBQ.leftPadding = 'per first line'\n    boxAsteriskBQ.indent = 'optional'\n    boxAsteriskBQ.canInterruptParagraph = true\n\n    const boxAsciiLineBQ = new ptss.ContainerStyle('Box(\u2013|) Block Quote', stylesheet)\n    boxAsciiLineBQ.irNode.type = new ptss.Expression('block_quote')\n    boxAsciiLineBQ.topBorder = '\u2013'\n    //boxBQ.topBorderMinLength = 13\n    boxAsciiLineBQ.leftBorder = '|'\n    boxAsciiLineBQ.leftPadding = 'per first line'\n    boxAsciiLineBQ.indent = 'optional'\n    boxAsciiLineBQ.canInterruptParagraph = true\n\n    const list = new ptss.ListStyle('List', stylesheet)\n    list.unorderedMarkers = '-*+'\n    list.orderedMarkers = '.)'\n\n    // todo[spec]  should we have something fall through to this in tests to test the concept?\n    //   OR should a test for that go in another simpler text ptss?\n    // this represents the built-in default indentation container.\n    const defaultIndentContainer = new ptss.ContainerStyle('Default Indent Block', stylesheet)\n    defaultIndentContainer.irNode.type = new ptss.Expression('block_quote')\n    defaultIndentContainer.indent = 'yes'\n\n    stylesheet.blockStyles.push(\n        setextOneTwo, // must be above setextThreeFour which would otherwise match with same bottom border\n        setextThreeFour,\n        boxAsteriskBQ, // requires precedence over thematicBreak\n        thematicBreak,\n        warningLine,\n        note,\n        boxAsciiLineBQ,\n        fencedBQ,\n        leftBorderBQ,\n        fencedCode,\n        leftBorderCode,\n        indentedCode,\n        list,\n        defaultIndentContainer)\n\n    stylesheet.inlineStyles = [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'reference',\n        'newline',\n        'html'\n    ]\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\n\nexport function newTestReferencesSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('PTSS Test TWO Stylesheet')\n\n    //todo[spec] just copied CommonMark's. Haven't even thought about natural escapes.\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n    const atx = new ptss.ChunkStyle('ATX Heading', stylesheet)\n    atx.irNode.type = new ptss.Expression('heading')\n    atx.canInterruptParagraph = true\n    atx.canInterruptLazy = true\n    atx.headPattern = /(#{1,6})(?=[ \\t]|$)/ym\n    atx.bodyPattern = /(?:[ \\t]+(.*?))??(?:[ \\t]+#+)?[ \\t]*$/ym\n    atx.maxLines = 1\n    atx.indent = 'optional'\n    atx.irNode.level = new ptss.Expression(['length', ['head', 1]])\n    atx.irNode.body = new ptss.Expression(['parseInlines', ['first', ['body', 1], '']])\n    atx.ptNamedValue = {\n        type: 'element',\n        name: new ptss.Expression(['replace', ['trim', ['first', ['body', 1], '']], /[ \\t\\r\\n]+/, ' ']),\n        value: 'self'\n    }\n\n    const footnote = new ptss.ContainerStyle('Footnote', stylesheet)\n    footnote.hangingIndent = 'auto'\n    // todo![footnotes, gracedown] test-references allows spaces in names.\n    //   - do we break GFM compatibility if we add them to GFM or RubyRhod?\n    //! we don't include the `^` in the name, because for test-references.ptss, we want a single\n    //  namespace, where the `^` is only used to determine the type of element, and in the\n    //  reference, the type of reference (regular link vs note-style link in superscript)\n    footnote.marker = /\\[(\\^([^\\]]+))]:/y\n    footnote.body = 'BLOCKS'\n    footnote.irNode.type = new ptss.Expression('note')\n    footnote.irNode.subType = new ptss.Expression('footnote')\n    footnote.ptNamedValue = {\n        type: 'element',\n        name: new ptss.Expression(['marker', 2]),  //! test-references non-segregated namespace, so `^` is NOT included\n        value: 'self'\n    }\n\n    const linkDef = new ptss.ChunkStyle('Link Ref Definition', stylesheet)\n    linkDef.headPattern = /\\[\\s*([[\\w ]+)\\s*]:/y\n    linkDef.bodyPattern = /\\s*(?:<((?:[^<>\\n\\\\]|\\\\.)*)>|([^ <\\n]\\S*))\\s*(\\s(?:\"((?:\\\\\\S|[^\"])*)\"|'((?:\\\\\\S|[^'])*)'|\\(((?:\\\\\\S|[^()])*)\\))\\s*?)?$/ym\n    linkDef.ptNamedValue = {\n        type: 'href',\n        name: new ptss.Expression(['head', 1]),\n        value: new ptss.Expression(['first', ['body', 1], ['body', 2], '']),\n        description: new ptss.Expression(['first', ['body', 4], ['body', 5], ['body', 6], ''])\n    }\n\n    const substitutionDef = new ptss.ChunkStyle('Substitution Ref Definition', stylesheet)\n    substitutionDef.headPattern = /\\[\\s*([[\\w ]+)\\s*]:/y\n    substitutionDef.bodyPattern = /\\s*(.+)?\\s*$/ym\n    substitutionDef.ptNamedValue = {\n        type: 'substitution',\n        name: new ptss.Expression(['head', 1]),\n        value: new ptss.Expression(['parseInlines', ['body', 1]])\n    }\n\n    const blockQuote = new ptss.ContainerStyle('Block Quote', stylesheet)\n    blockQuote.irNode.type = new ptss.Expression('block_quote')\n    blockQuote.leftBorder = '>'\n    blockQuote.leftPadding = 'per first line'\n    blockQuote.canInterruptParagraph = true\n    blockQuote.canInterruptLazy = true\n    blockQuote.indent = 'optional'\n    blockQuote.body = 'BLOCKS'\n\n    const list = new ptss.ListStyle('List', stylesheet)\n    list.unorderedMarkers = '-*+'\n    list.orderedMarkers = '.)'\n    list.indent = 'optional'\n\n    const indentedCode = new ptss.ContainerStyle('Indented Code Block', stylesheet)\n    indentedCode.irNode.type = new ptss.Expression('code_block')\n    indentedCode.indent = 'markdown(4,4)'\n    indentedCode.body = 'RAW_NL'\n    indentedCode.canInterruptParagraph = false\n    indentedCode.canInterruptLazy = false\n\n    stylesheet.blockStyles.push(\n        // has to come first styles with 'optional'\n        // indentation for it to every be recognized.\n        indentedCode,\n        atx,\n        footnote,\n        // linkDef must come before synonymDef as the latter's RHS is a superset of the former's\n        linkDef,\n        substitutionDef,\n        blockQuote,\n        list\n    )\n\n    stylesheet.inlineStyles = [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'image',\n        'noteRef(spaces)',\n        'reference',\n        'newline'\n    ]\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\n\nexport function newTestWritersPrerogativeSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('PTSS Test TWO Stylesheet')\n\n    //todo[spec] just copied CommonMark's. Haven't even thought about natural escapes.\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n    stylesheet.escapeSyntax.escapeLiterals = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n    // todo![now] re-order all declarations putting the irNode set at the end:\n    //   - separates inputs (plain text lexical declarations) from outputs (STIR mappings)\n    const markerWidthHanging = new ptss.ContainerStyle('Marker Width Hanging Indent as Interjection', stylesheet)\n    markerWidthHanging.indent = 'optional'\n    markerWidthHanging.hangingIndent = 'marker'\n    markerWidthHanging.marker = /\u2194\uFE0F/y\n    markerWidthHanging.canInterruptParagraph = true\n    markerWidthHanging.irNode.type = new ptss.Expression('interjection')\n    markerWidthHanging.irNode.subType = new ptss.Expression('width')\n    //! less efficient that the following, but we want to test marker extraction\n    //      markerWidthHanging.irNode.icon = new ptss.Expression('\u2194\uFE0F')\n    markerWidthHanging.irNode.icon = new ptss.Expression(['marker', 0])\n\n    const markedAutoWidthHanging = new ptss.ContainerStyle('Marked Auto Width Hanging Indent as Interjection', stylesheet)\n    markedAutoWidthHanging.indent = 'optional'\n    markedAutoWidthHanging.hangingIndent = 'auto'\n    markedAutoWidthHanging.marker = /\uD83D\uDE97/y\n    markedAutoWidthHanging.canInterruptParagraph = true\n    markedAutoWidthHanging.irNode.type = new ptss.Expression('interjection')\n    markedAutoWidthHanging.irNode.subType = new ptss.Expression('auto')\n    markedAutoWidthHanging.irNode.icon = new ptss.Expression(['marker', 0])\n\n    const markedFixedHanging = new ptss.ContainerStyle('Marked Fixed Hanging Indent as Interjection', stylesheet)\n    markedFixedHanging.indent = 'optional'\n    markedFixedHanging.hangingIndent = 3\n    markedFixedHanging.marker = /\uD83D\uDCCC/y\n    markedFixedHanging.canInterruptParagraph = true\n    markedFixedHanging.irNode.type = new ptss.Expression('interjection')\n    markedFixedHanging.irNode.subType = new ptss.Expression('pin')\n    markedFixedHanging.irNode.icon = new ptss.Expression(['marker', 0])\n\n    // the only way we can have two types of unmarked hanging indent containers,\n    // to test both 'auto' and fixed width types, is to give the fixed width\n    // version higher precedence, allowing those not matching that width to\n    // fall through to the 'auto'. It also needs to be wide enough so that the\n    // auto width tests don't accidentally match the fixed width.\n    const unmarkedFixedIndentFixedHanging = new ptss.ContainerStyle('Unmarked Fixed Ident Fixed Hanging Indent as Interjection', stylesheet)\n    unmarkedFixedIndentFixedHanging.indent = 'optional'\n    unmarkedFixedIndentFixedHanging.hangingIndent = 6\n    unmarkedFixedIndentFixedHanging.canInterruptParagraph = false\n    unmarkedFixedIndentFixedHanging.irNode.type = new ptss.Expression('interjection')\n    unmarkedFixedIndentFixedHanging.irNode.subType = new ptss.Expression('unmarked fixed')\n\n    const unmarkedAutoHanging = new ptss.ContainerStyle('Unmarked Fixed Hanging Indent as Interjection', stylesheet)\n    unmarkedAutoHanging.indent = 'optional'\n    unmarkedAutoHanging.hangingIndent = 'auto'\n    unmarkedAutoHanging.canInterruptParagraph = false\n    unmarkedAutoHanging.irNode.type = new ptss.Expression('interjection')\n    unmarkedAutoHanging.irNode.subType = new ptss.Expression('unmarked auto')\n\n    const atx = new ptss.ChunkStyle('ATX Heading', stylesheet)\n    atx.irNode.type = new ptss.Expression('heading')\n    atx.canInterruptParagraph = true\n    atx.canInterruptLazy = true\n    atx.headPattern = /(#{1,6})(?=[ \\t]|$)/ym\n    atx.bodyPattern = /(?:[ \\t]+(.*?))??(?:[ \\t]+#+)?[ \\t]*$/ym\n    atx.maxLines = 1\n    atx.indent = 'optional'\n    atx.irNode.level = new ptss.Expression(['length', ['head', 1]])\n    atx.irNode.body = new ptss.Expression(['parseInlines', ['first', ['body', 1], '']])\n\n    const setext = new ptss.ChunkStyle('Setext Heading', stylesheet)\n    setext.irNode.type = new ptss.Expression('heading')\n    setext.tailPattern = /((=+|-+)[ \\t]*$)/ym\n    setext.maxLines = 3\n    setext.indent = 'optional'\n    setext.irNode.level = new ptss.Expression(['map', ['at', ['tail', 2], 0], {'=': 1, '-': 2}])\n    setext.irNode.body = new ptss.Expression(['parseInlines', ['trim', ['body']]]) //todo[perf] trim may be redundant with latter handling. clean up.\n\n    const blockquote = new ptss.ContainerStyle('Block Quote', stylesheet)\n    blockquote.irNode.type = new ptss.Expression('block_quote')\n    blockquote.indent = 'yes'\n\n    stylesheet.blockStyles.push(\n        // because this is an unmarked hanging indent, it must come before\n        // any other block style so that said style can occur as the first\n        // block within the hanging indent.\n        markerWidthHanging,\n        markedAutoWidthHanging,\n        markedFixedHanging,\n        unmarkedFixedIndentFixedHanging,\n        unmarkedAutoHanging,\n        setext,\n        atx,\n        blockquote\n    )\n\n    stylesheet.inlineStyles = [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'reference',\n        'newline',\n        'html'\n    ]\n\n    return stylesheet\n}\n", "// the case/example block format.\n// exported as it is used by the conversion and gen scripts\nimport * as ptss from '../ptss/index.js'\n\nexport function caseBlockStyle (stylesheet: ptss.Stylesheet): ptss.ContainerStyle {\n    const style = new ptss.ContainerStyle('Case Block', stylesheet)\n    style.irNode.type = new ptss.Expression('case_block')\n    //todo![fallback inheritance] TEMP HACK: this type extension info should be\n    // written ONCE in the stir type metadata section, not in each instance of\n    // the type. See [Fallback Inheritance.md].\n    style.irNode.typeExtends = new ptss.Expression('code_block')\n    style.topBorder = '`'\n    style.topBorderMinLength = 25\n    style.righter = / (case|example)(.*)/ym\n    style.body = /^([\\s\\S]*\\n)\\.\\n([\\s\\S]*)/ym\n    style.canInterruptParagraph = true\n    style.canInterruptLazy = true\n    style.irNode.class = new ptss.Expression(['righter', 1])\n    style.irNode.parameters = new ptss.Expression(['righter', 2])\n    style.irNode.input = new ptss.Expression(['first', ['body', 1], ''])\n    style.irNode.expected = new ptss.Expression(['first', ['body', 2], ''])\n    return style\n}\n\nexport function catchAllAsLiteral (stylesheet: ptss.Stylesheet): ptss.ChunkStyle {\n    const style = new ptss.ChunkStyle('Catch All As Literal', stylesheet)\n    style.irNode.type = new ptss.Expression('block')\n    style.irNode.class = new ptss.Expression(['pass-thru'])\n    style.irNode.body = new ptss.Expression(['body'])\n\n    return style\n}\n", "import type * as ptss from '../ptss/index.js'\nimport {caseBlockStyle} from './utilStyles.js'\nimport {newGracedownSheet} from './gracedown.ptss.js'\n\nexport function newCaseFileStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = newGracedownSheet(options)\n    stylesheet.name = 'Case File (Pandoc Markdown + case spec extension)'\n\n    // place at higher precedence than inherited styles to preempt them\n    stylesheet.blockStyles.unshift(caseBlockStyle(stylesheet))\n    return stylesheet\n}\n", "/*  Used by case file tools  */\n\nimport * as ptss from '../ptss/index.js'\nimport {newCommonMarkSheet} from './commonmark.ptss.js'\nimport {caseBlockStyle, catchAllAsLiteral} from './utilStyles.js'\n\nexport function newCaseFileManipulationSheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = new ptss.Stylesheet('gen-case-expectations')\n    stylesheet.sloppyMargin = 0\n\n    stylesheet.escapeSyntax.escapeChar = '\\\\'\n\n    const caseBlocks = caseBlockStyle(stylesheet)\n    stylesheet.blockStyles.push(caseBlocks)\n\n    // preserved all whitespace in indented regions\n    const indented = new ptss.ContainerStyle('Indented Text To Preserve', stylesheet)\n    indented.irNode.type = new ptss.Expression('code_block')\n    indented.indent = 'markdown(1,4)'\n    indented.body = 'RAW_NL'\n    indented.canInterruptParagraph = false\n    indented.canInterruptLazy = false\n    stylesheet.blockStyles.push(indented)\n\n    // preserved all whitespace in regular CommonMark code blocks,\n    const cm = newCommonMarkSheet(options)\n\n    const backtick = cm.get('Backtick Fenced Code Block') as ptss.ContainerStyle\n    backtick.styleSheet = stylesheet\n    stylesheet.blockStyles.push(backtick)\n\n    const tilde = cm.get('Tilde Fenced Code Block')\n    tilde.styleSheet = stylesheet\n    stylesheet.blockStyles.push(tilde)\n\n    // match the rest as lit chunks so we can pass them thru to the output as-is\n    //   (otherwise they'd be converted to paragraphs)\n    //  Does not preserve extra whitespace between chunks hence the code_block\n    //  styles.\n    stylesheet.defaultBlockStyle = catchAllAsLiteral(stylesheet)\n\n    return stylesheet\n}\n", "import * as ptss from '../ptss/index.js'\nimport {caseBlockStyle} from './utilStyles.js'\nimport {newGracedownSheet} from './gracedown.ptss.js'\n\nexport function newRubyRhodStylesheet (options?: Record<string, unknown>): ptss.Stylesheet {\n    const stylesheet = newGracedownSheet(options)\n    stylesheet.name = 'Ruby Rhod evolving talking documentation style sheet'\n\n    // todo![RepoDoc] Sections must be native to RepoDoc so that entire\n    //   sections can be annotated. But it looks like I never actually\n    //   implemented this\n\n    const atx = stylesheet.get('ATX Heading') as ptss.ChunkStyle\n    // todo[doc] Need to document both the mechanics/how-to of sections AND the power\n    //  of it being so simple a change. **Only two changes were needed to convert\n    //  flat headings to sections**:\n    //    - (1) setting the irNode.type to 'section'\n    //    - (2) writing the heading text to irNode.title instead of irNode.body\n    //\n    //   Explain how the body of a section IR node will *automatically* become an\n    //   IR container, and them populated according to \"the algorithm\".\n    //\n    //   The mechanics and how-to go in the users manual.\n    //   The sales pitch goes in, well, the sales pitch.\n    //\n    // todo[spec] Is this how we want to express that a chunk represents\n    //   implicit sectioning? Here are the options to consider for the\n    //   end solution:\n    //     - A) simply setting the ir node type (as below) declares sectioning\n    //        semantics.\n    //     - B) add an explicit ChunkStyle.startsNewSection field.\n    //   The pieces need for sectioning:\n    //     - boolean: does the chunk starts a new section?\n    //     - string: section title (is there a use case for title-free sections?)\n    //     - number: level of section. determines whether the new section is\n    //         a child, sibling, \"aunt\", \"great-aunt\" etc to the cur section.\n    //\n    // \uD83C\uDF36NOTE:\n    //  - *In the plain text*\"\n    //    - it's a text chunk, not a container \u2705\n    //    - the heading is just the *implicit* **boundary** of a container. It\n    //       has no container syntax (borders, indentation, etc).\n    //    - It triggers the logic (whether human eye or parser) that perceives\n    //      section containers.\n    //    - It is named \"section heading\"\n    //  - *In the STIR*:\n    //    - sections ARE containers. \u2705\n    //    - The heading from the plain text is the *title* of the section/container.\n    //  - \uD83C\uDF36This is an example of PTSS and IR being independent.\n    //  - differing names makes sense. \u2705\n    //\n    // todo[spec] this is the first case where the ptss.Block is a leaf but the ir.Block is\n    //   a container. Do we need to do something special here? Or is this some magic\n    //   property of irNode.type = 'section'?  BlockTreeParser already has special logic for\n    //   irNode.type = 'list'. Is this all kosher?\n    //    - if we keep it such, it also implies something new. Previously we said that a custom\n    //      STIR type inherits a default rendering from its baseType. But we may now also be saying\n    //      that it also has parse-time implications. i.e. setting a custom type to have\n    //      'section' as its baseType will mean that it will be parsed according to 'section'\n    //      logic. Is this how custom subtyping should work?\n    //    - if this is a bad idea, then we need to make an explicit PTSS construct or property\n    //      to deal with this. DO NOT create a new PTSS type: *this IS a chunk. But it is a chunk\n    //      that behaves like a container top border, with special container termination rules.\n    //      - IS THIS ITS OWN THING? or do we need to generalize, with other forms of chunks\n    //        imparting structure. (I THINK IT'S ITS OWN THING)\n    //      - THE ALTERNATIVE is to call this a container, and then define new container parse\n    //        logic. I DON'T LIKE THIS AT ALL. In the plain text it is JUST A CHUNK! Keep PTSS\n    //        and STIR models independent and focused on describing their own realms.\n    atx.irNode.type = new ptss.Expression('section')\n    atx.bodyPattern = /(?:[ \\t]+(\uD83D\uDFE8|\uD83D\uDFE7|\uD83D\uDFE5|\uD83C\uDFC8|\u274C)?[ \\t]*(.*?))??(?:[ \\t]+#+)?[ \\t]*$/ym\n    atx.irNode.title = new ptss.Expression(['parseInlines', ['first', ['body', 2], '']])\n    delete atx.irNode.body\n    atx.irNode.class = new ptss.Expression(\n        ['map', ['body', 1], {\n            '\uD83D\uDFE8': 'tentative',\n            '\uD83D\uDFE7': 'unsettled blocker',\n            '\uD83D\uDFE5': 'unsettled critical',\n            '\uD83C\uDFC8': 'unsettled punt', //todo[RubyDoc] \"punt\" is too American maybe? \"non-blocker\" instead?\n            '\u274C': 'rejected'\n        }])\n    atx.ptNamedValue = {\n        type: 'element',\n        name: new ptss.Expression(['replace', ['trim', ['first', ['body', 2], '']], /[ \\t\\r\\n]+/, ' ']),\n        value: 'self'\n    }\n\n    const setext = stylesheet.get('Setext Heading') as ptss.ChunkStyle\n    setext.irNode.type = new ptss.Expression('section')\n    setext.bodyPattern = /[ \\t]*(\uD83D\uDFE8|\uD83D\uDFE7|\uD83D\uDFE5|\uD83C\uDFC8|\u274C)?[ \\t]*(.*?)[ \\t]*$/ym\n    setext.irNode.title = new ptss.Expression(['parseInlines', ['trim', ['body', 2]]])\n    delete setext.irNode.body\n    setext.irNode.class = new ptss.Expression(\n        ['map', ['body', 1], {\n            '\uD83D\uDFE8': 'tentative',\n            '\uD83D\uDFE7': 'unsettled blocker',\n            '\uD83D\uDFE5': 'unsettled critical',\n            '\uD83C\uDFC8': 'unsettled punt', //todo[RubyDoc] \"punt\" is to American maybe? \"non-blocker\" instead?\n            '\u274C': 'rejected'\n        }])\n    setext.ptNamedValue = {\n        type: 'element',\n        name: new ptss.Expression(['replace', ['trim', ['first', ['body', 2], '']], /[ \\t\\r\\n]+/, ' ']),\n        value: 'self'\n    }\n\n    const devTodo = new ptss.ContainerStyle('Dev Todo', stylesheet)\n    devTodo.canInterruptParagraph = true\n    devTodo.canInterruptLazy = true\n    devTodo.hangingIndent = 'auto' //don't force the full length of the hang, but also allow it\n    devTodo.marker = /\\[\\/\\/]:\\s+#\\s+[\"'(]todo!?\\[([^\"]+?)]/y\n    devTodo.indent = 'no'\n    devTodo.body = 'BLOCKS'\n    devTodo.irNode.type = new ptss.Expression('interjection')\n    devTodo.irNode.subType = new ptss.Expression('todo')\n    devTodo.irNode.icon = new ptss.Expression('\uD83E\uDEA3')\n    devTodo.irNode.title = new ptss.Expression(['parseInlines', ['marker', 1]])\n\n    // place at higher precedence than inherited styles to preempt them\n    stylesheet.blockStyles.unshift(devTodo)\n    stylesheet.blockStyles.unshift(caseBlockStyle(stylesheet))\n    return stylesheet\n}\n", "import type * as ptss from '../ptss/index.js'\nimport {newCommonMarkSheet} from './commonmark.ptss.js'\nimport {newCommonMarkFWDSheet} from './commonmark-fwd.ptss.js'\nimport {newGFMStylesheet} from './gfm.ptss.js'\nimport {newPandocMarkdownStylesheet} from './pandoc-markdown.ptss.js'\nimport {newPandocMarkdownStrictStylesheet} from './pandoc-markdown-strict.ptss.js'\nimport {newMarkdownHSStylesheet} from './markdown_hs.ptss.js'\nimport {newPlainJaneStylesheet} from './plainjane.ptss.js'\nimport {newGracedownSheet} from './gracedown.ptss.js'\nimport {newRSTSheet} from './reStructuredText.ptss.js'\nimport {newKitchenSinkStylesheet} from './kitchen-sink.ptss.js'\nimport {newTestCompositionsSheet} from './test-composition.ptss.js'\nimport {newTestPtssOneSheet} from './test-ptss-one.js'\nimport {newTestReferencesSheet} from './test-references.ptss.js'\nimport {newTestWritersPrerogativeSheet} from './test-writers-prerogative.js'\nimport {newCaseFileStylesheet} from './case-file.ptss.js'\nimport {newCaseFileManipulationSheet} from './case-file-manipulation.ptss.js'\nimport {newRubyRhodStylesheet} from './rubyrhod.ptss.js'\n\n//todo[arch] we can use https://www.npmjs.com/package/serialize-javascript as an interim solution\n//   for runtime loading of arbitrary stylesheets.\nexport function loadSheet (name: string, options?: Record<string, unknown>): ptss.Stylesheet {\n    let lower = name.toLowerCase()\n    if (!lower.endsWith('.ptss')) {\n        lower += '.ptss'\n    }\n    switch (lower) {\n        case 'commonmark.ptss':\n            return newCommonMarkSheet(options)\n        case 'commonmark-fwd.ptss':\n            return newCommonMarkFWDSheet(options)\n        case 'gfm.ptss':\n            return newGFMStylesheet(options)\n        case 'pandoc-markdown.ptss':\n            return newPandocMarkdownStylesheet(options)\n        case 'pandoc-markdown-strict.ptss':\n            return newPandocMarkdownStrictStylesheet(options)\n        case 'markdown_hs.ptss':\n            return newMarkdownHSStylesheet(options)\n        case 'plainjane.ptss':\n            return newPlainJaneStylesheet(options)\n        case 'gracedown.ptss':\n            return newGracedownSheet(options)\n        case 'restructuredtext.ptss':\n            return newRSTSheet(options)\n        case 'kitchen-sink.ptss':\n            return newKitchenSinkStylesheet(options)\n        case 'rubyrhod.ptss':\n            return newRubyRhodStylesheet(options)\n        case 'test-composition.ptss':\n            return newTestCompositionsSheet(options)\n        case 'test-ptss-one.ptss':\n            return newTestPtssOneSheet(options)\n       case 'test-references.ptss':\n            return newTestReferencesSheet(options)\n       case 'test-writers-prerogative.ptss':\n            return newTestWritersPrerogativeSheet(options)\n        case 'case-file.ptss':\n            return newCaseFileStylesheet(options)\n        case 'case-file-manipulation.ptss':\n            return newCaseFileManipulationSheet(options)\n    }\n    throw new Error(`no style sheet named \"${name}\"`)\n}\n", "import * as ir from '../../../stir/index.js'\n\nexport type AbstractOut = {\n    buf: string\n}\n\ntype BlockWriter<T extends AbstractOut> = (b: ir.Block, out: T, flags?: Record<string, unknown>) => void\ntype InlineWriter<T extends AbstractOut> = (i: ir.Inline, out: T) => void\n\nexport abstract class AbstractWriter<T extends AbstractOut> {\n\n    bWriters: { [p: string]: BlockWriter<T> } = {}\n    iWriters: { [p: string]: InlineWriter<T> } = {}\n\n    useInheritance: boolean\n\n    protected constructor (useInheritance = true) {\n        this.useInheritance = useInheritance\n    }\n\n    protected initWriters (blockWriters: { [p: string]: BlockWriter<T> },\n                           inlineWriters: { [p: string]: InlineWriter<T> }) {\n        this.bWriters = blockWriters\n        this.iWriters = inlineWriters\n    }\n\n    abstract writeText (t: string, out: T): void\n\n    writeSequence (s: ir.BlockSequence | ir.InlineSequence, out: T): void {\n        if (s === undefined) {\n            //todo[stir] Should we be silently ignoring `undefined`?\n            //   See note under writeInlineSequence\n        } else if (typeof s === 'string') {\n            this.writeText(s, out)\n        } else {\n            if (ir.isBlockSequence(s)) {\n                this.writeBlockSequence(s as ir.BlockSequence, out)\n            } else {\n                this.writeInlineSequence(s as ir.InlineSequence, out)\n            }\n        }\n    }\n\n    //! writeBlock must remain a shared implementation as it\n    //  implements STIR rules for inheritance\n    writeBlock (b: ir.Block, out: T): void {\n        const w = this.bWriters[b.type]\n        if (w) {\n            w(b, out)\n        } else {\n            this.perWriteBlockPerExtendedType(b, out)\n        }\n    }\n\n    private perWriteBlockPerExtendedType (b: ir.Block, out: T) {\n        const extended = b.typeExtends as string\n        if (extended) {\n            //todo![fallback inheritance] TEMP HACK: hardcoding the single case\n            // of type extension we have at the moment. Punting until we have more\n            // examples to validate our plan. See [Fallback Inheritance.md].\n            // -\n            // \uD83C\uDF36\uD83C\uDF36\uD83C\uDF36 See this in action by disabling the 'CaseBlock2HtmlPlugin'\n            // plugin, regenerate the site, and visit one of the stylesheet/\n            // case pages. \uD83C\uDF36\uD83C\uDF36\uD83C\uDF36\n\n            //! this would be the `extends` option, and the following construction\n            //  of ``body` would be per the style meta info:\n            /*\n            const w = this.bWriters[extended]\n            if (w) {\n                b.body = b.input + '.\\n.' + b.expected\n                b.info = `${b.class}${b.parameters ? b.parameters : ''}`\n                w(b, this)\n            } else {\n                throw new Error(`STIR block type ${b.type} extends an unknown type: ${extended}`)\n            }\n            */\n\n            //! this would be the `composition` option where instead of\n            //  extending a single type, we compose a fallback rendering\n            //  in terms of any number of types, also as described in the\n            //  style meta info:\n            const input = new ir.Block(`code_block`)\n            input.body = b.input as string\n            const expected = new ir.Block(`code_block`)\n            expected.body = b.expected as string\n\n            const table = new ir.Block('table')\n            const col1 = new ir.Block('cell') as ir.Cell\n            col1.colSpan = 1\n            col1.rowSpan = 1\n            col1.body = 'input'\n            const col2 = new ir.Block('cell') as ir.Cell\n            col2.colSpan = 1\n            col2.rowSpan = 1\n            col2.body = 'expected'\n            const body1 = new ir.Block('cell') as ir.Cell\n            body1.colSpan = 1\n            body1.rowSpan = 1\n            body1.body =  [input]\n            const body2 = new ir.Block('cell') as ir.Cell\n            body2.colSpan = 1\n            body2.rowSpan = 1\n            body2.body = [expected]\n\n            table.head = [[col1, col2]]\n            table.body = [[body1, body2]]\n\n            this.writeBlock(table, out)\n        } else {\n            throw new Error(`STIR block type ${b.type} is not recognized nor extends a known type.`)\n        }\n    }\n\n    //! writeInline must remain a shared implementation as it\n    //  implements STIR rules for inheritance\n    writeInline (i: ir.Inline, out: T): void {\n        const w = this.iWriters[i.type]\n        if (w) {\n            w(i, out)\n        } else {\n            if (this.useInheritance) {\n                //todo[stir] implement STIR node inheritance\n                throw new Error('unrecognized STIR inline type: ' + i.type)\n            }\n            // else ignore\n        }\n    }\n\n    writeBlockSequence (bSeq: ir.BlockSequence, out: T): void {\n        if (bSeq === undefined) return\n            //todo[stir] Should we be silently ignoring `undefined`?\n            //   See note under writeInlineSequence\n        for (const b of bSeq) {\n            this.writeBlock(b, out)\n        }\n    }\n\n    writeInlineSequence (iSeq: ir.InlineSequence, out: T): void {\n        if (iSeq === undefined) {\n            // if writeInlineSequence is being for a property of a node, it\n            // means that a value was expected for that property. This is an\n            // ERROR condition.\n            //\n            // todo[stir] how should this error condition be handled?\n            //   - with the hack below? Seems wrong for error message to\n            //     silently be inserted into rendered output.\n            //   - fail hard and throw an Error?\n            //   - write an empty string and issue a WARNING?\n            //   - change our mind and treat a missing property as something\n            //     each renderer should resolve silently with some default\n            //     value?\n            //   .\n            //   ALSO, should this happen earlier, in a common location, rather\n            //   than repeated in each Renderer? Perhaps an IR validation check?\n            //\n            //todo[perf] ONCE the above questions are addressed, can we nix this\n            //  check? can we assume well-formed STIR?\n            this.writeText('\u274C ERROR: expected IR node InlineSequence property is undefined \u274C', out)\n        } else if (typeof iSeq === 'string') {\n            this.writeText(iSeq, out)\n        } else {\n            for (const j of iSeq) {\n                if (typeof j === 'string') {\n                    this.writeText(j, out)\n                } else {\n                    this.writeInline(j, out)\n                }\n            }\n        }\n    }\n\n\n}\n", "import type {Vfs, EntryInfo, DirEntry} from './vfs.js'\nimport type {VfsPath} from './vfsPath.js'\nimport posix from 'path-browserify'\n\ninterface File {\n    name: string\n    parent: Dir\n    content: string\n    modTime: Date\n}\n\ninterface Dir {\n    name: `${string}/`\n    parent: Dir | undefined\n    entries: Record<string, File | Dir>\n    modTime: Date\n}\n\nfunction isDir (n: File | Dir): n is Dir {\n    return 'entries' in n\n}\n\nfunction pathFor (node: File | Dir): string {\n    if (node.parent === undefined) {\n        return node.name\n    }\n    return pathFor(node.parent) + node.name\n}\n\nexport class MemFS implements Vfs {\n    private readonly _root: Dir = {\n        name: '/',\n        parent: undefined,\n        entries: {},\n        modTime: new Date()\n    }\n    private _readOnly = false\n\n    constructor () {\n        //\n    }\n\n    makeReadOnly () {\n        this._readOnly = true\n    }\n\n    isReadOnly (): boolean {\n        return this._readOnly\n    }\n\n    private _resolvePath (path: string, throwOnInvalidPath = true): { node: File | Dir, remainder: string[] } {\n        path = path.trim()\n        if (!path.startsWith('/')) throw new Error(`path must be absolute: \"${path}\"`)\n        if (path === '/') return {node: this._root, remainder: []}\n\n        let node: File | Dir = this._root\n        const isExplicitlyDirPath = path.endsWith('/')\n        const segments = isExplicitlyDirPath ?\n            path.slice(1, -1).split('/') :\n            path.slice(1).split('/')\n\n        // todo![links] this does not implement `.` and `..`. See ta.Node.resolve...\n        let i = 0\n        for (i = 0; i < segments.length; i++) {\n            const seg = segments[i]\n            if (seg === '') {\n                if (throwOnInvalidPath) {\n                    throw new Error(`invalid path: \"${path}\"`)\n                }\n            }\n            if (seg === '.') {\n                continue\n            }\n            if (seg === '..') {\n                if (node.parent !== undefined) {\n                    node = node.parent\n                    continue\n                }\n                if (throwOnInvalidPath) {\n                    throw new Error(`invalid path: \"${path}\", \"${pathFor(node)}\" has no parent directory`)\n                }\n            }\n            // todo! add test case for this  (also check coverage when done)\n            if (!isDir(node)) {\n                if (throwOnInvalidPath) {\n                    throw new Error(`invalid path: \"${path}\", \"${pathFor(node)}\" is not a directory`)\n                }\n                break\n            }\n            const next: File | Dir | undefined = node.entries[seg]\n            if (next === undefined) break\n            node = next\n        }\n        if (isExplicitlyDirPath && i === segments.length && !isDir(node)) {\n            if (throwOnInvalidPath) {\n                throw new Error(`invalid path: \"${path}\", \"${pathFor(node)}\" is not a directory`)\n            }\n            return {node: node.parent, remainder: segments.slice(i - 1)}\n        }\n\n        return {node: node, remainder: segments.slice(i)}\n    }\n\n    readFileSync (path: string): string {\n        const {node, remainder} = this._resolvePath(path)\n        if (node === undefined || remainder.length > 0) throw new Error(`invalid path: \"${path}\"`)\n        if (isDir(node)) throw new Error(`${path} is not a file`)\n        return node.content\n    }\n\n    readInfoSync (path: string): EntryInfo {\n        throw new Error(`not implemented`)\n    }\n\n    readDirSync (path: string, withInfo: false): DirEntry[]\n    readDirSync (path: string, withInfo: true): (DirEntry & EntryInfo)[]\n    readDirSync (path: string, withInfo: false | true): DirEntry[] {\n        const {node, remainder} = this._resolvePath(path)\n        if (node === undefined || remainder.length > 0) throw new Error(`invalid path: \"${path}\"`)\n        if (!isDir(node)) throw new Error(`${path} is not a directory`)\n\n        const entries = Object.entries(node.entries)\n        return entries.map(e => {\n            const eNode = e[1]\n            if (isDir(eNode)) {\n                if (withInfo) {\n                    return {\n                        name: e[0], isFile: false, isDir: true,\n                        size: -1,\n                        modTime: eNode.modTime\n                    }\n                } else {\n                    return {name: e[0], isFile: false, isDir: true}\n                }\n            } else {\n                if (withInfo) {\n                    return {\n                        name: e[0], isFile: true, isDir: false,\n                        size: eNode.content.length,\n                        modTime: eNode.modTime\n                    }\n                } else {\n                    return {name: e[0], isFile: true, isDir: false}\n                }\n            }\n        })\n    }\n\n    //todo![renderAssembly]  add overwrite:boolean arg\n    //  or do we want: mode: 'create'|'update'|'create or update' ?\n    writeFileSync (path: string, data: string): void {\n        const overwrite = false\n        const {node, remainder} = this._resolvePath(path)\n        if (node === undefined) throw new Error(`invalid path: \"${path}\"`)\n        switch (remainder.length) {\n            case 0:\n                if (isDir(node)) throw new Error(`\"${path}\" is a directory`)\n                if (!overwrite) throw new Error(`\"${path}\" already exists`)\n                node.content = data\n                break\n            case 1:\n                if (!isDir(node)) throw new Error(`Cannot create file in \"${pathFor(node)}\". It is not a directory.`)\n                if (remainder[0] === '') throw new Error(`invalid filename: \"${remainder[0]}\"`)\n                node.entries[remainder[0]] = {name: remainder[0], parent: node, content: data, modTime: new Date()}\n                break\n            default:\n                throw new Error(`Cannot create file in \"${posix.join(pathFor(node), ...remainder.slice(0, -1))}\". It does not exist.`)\n        }\n    }\n\n    copySync (fromPath: string | VfsPath, toPath: string, overwrite?: boolean): void {\n        throw new Error(`not implemented`)\n    }\n\n    mkdirSync (path: string, recursive = false): void {\n        const {node, remainder} = this._resolvePath(path)\n        if (node === undefined) throw new Error(`invalid path: \"${path}\"`)\n        switch (remainder.length) {\n            case 0:\n                throw new Error(`\"${path}\" already exists`)\n            case 1:\n                if (!isDir(node)) throw new Error(`Cannot create subdirectory in \"${pathFor(node)}\". It is not a directory.`)\n                if (remainder[0] === '') throw new Error(`invalid file name: \"${remainder[0]}\"`)\n                node.entries[remainder[0]] = {name: remainder[0] + '/', parent: node, entries: {}} as Dir\n                break\n            default:\n                if (recursive) {\n                    if (!isDir(node)) throw new Error(`Cannot create subdirectory in \"${pathFor(node)}\". It is not a directory.`)\n                    let dir = node\n                    for (const name of remainder) {\n                        if (name === '') throw new Error(`invalid path: \"${path}\"`)\n                        const newDir = {name: name + '/', parent: dir, entries: {}} as Dir\n                        console.log(`adding ${name} tp ${pathFor(dir)}`)\n                        dir.entries[name] = newDir\n                        dir = newDir\n                    }\n                } else {\n                    throw new Error(`Cannot create ${remainder.at(-1)} in \"${posix.join(pathFor(node), ...remainder.slice(0, -1))}\". It does not exist.`)\n                }\n        }\n    }\n\n    existsSync (path: string): boolean {\n        const {node, remainder} = this._resolvePath(path, false)\n        return node !== undefined && remainder.length === 0\n    }\n\n    toString () {\n        return `MemFS[${Object.keys(this._root.entries).length} root entries]`\n    }\n}\n", "import type {Vfs, VfsPath, DirEntry, EntryInfo} from './index.js'\nimport posix from 'path-browserify'\n\nexport type Mode = 'empty' | 'readonly' | 'overwrite'\n\nexport class SandboxFS implements Vfs {\n    private readonly _srcFs: Vfs\n    private readonly _srcRoot: string\n    private readonly _readOnly: boolean\n    readonly readonlyReason: string\n\n    /**\n     * Initializes a SandboxFS\n     *\n     * @param {Vfs} srcFs\n     * @param {string} srcRoot\n     * @param {\"empty\" | \"readonly\" | \"overwrite\"} mode\n     *\n     * modes\n     * -----\n     *   - `empty` requires that the srcRoot is empty at init time. is writable\n     *   - `readonly` is what it says\n     *   - `overwrite` has no protection for the existing contents\n     */\n    constructor (src: VfsPath, mode: Mode = 'readonly') {\n        const srcFs = src.vfs\n        if (!src.path) {\n            throw new Error('SandboxFS requires an explicit Vfs path')\n        }\n        const srcRoot = src.path.endsWith('/') ?\n            posix.normalize(src.path) :\n            posix.normalize(src.path + '/')\n        this._srcFs = srcFs\n        this._srcRoot = srcRoot\n        switch (mode) {\n            case 'empty':\n                if (!srcFs.existsSync(srcRoot)) {\n                    srcFs.mkdirSync(srcRoot, true)\n                    this._readOnly = false\n                    this.readonlyReason = ''\n                } else if (srcFs.readDirSync(srcRoot, false).length > 0) {\n                    this._readOnly = true\n                    this.readonlyReason = `cannot write to ${this}: it is not empty`\n                } else {\n                    this._readOnly = false\n                    this.readonlyReason = ''\n                }\n                break\n            case 'overwrite':\n                this._readOnly = false\n                this.readonlyReason = ''\n                throw new Error(`mode not implemented`)\n            case 'readonly':\n                if (!srcFs.existsSync(srcRoot)) {\n                    throw new Error(`cannot open readonly SandboxFS at ${srcFs} ${srcRoot}: it doesn't exist`)\n                }\n                this._readOnly = true\n                this.readonlyReason = `${this} is readonly`\n                break\n        }\n    }\n\n    /** throws Error if path is not absolute or violates sandbox boundary */\n    private _srcFsPathFor (path: string): string {\n        if (!path.startsWith('/')) {\n            throw new Error(`[internal logic error] invalid path, must be absolute path starting with \"/\": ${path}`)\n        }\n        const srcPath = posix.join(this._srcRoot, path)\n        // passing in a path such as \"..\" will trigger this error\n        if (!srcPath.startsWith(this._srcRoot)) {\n            throw new Error(`[internal logic error] path violates sandbox boundary: ${path}`)\n        }\n        return srcPath\n    }\n\n    isReadOnly (): boolean {\n        return this._readOnly\n    }\n\n    readFileSync (path: string): string {\n        return this._srcFs.readFileSync(this._srcFsPathFor(path))\n    }\n\n    readInfoSync (path: string): EntryInfo {\n        return this._srcFs.readInfoSync(this._srcFsPathFor(path))\n    }\n\n    readDirSync (path: string, withInfo: false): DirEntry[]\n    readDirSync (path: string, withInfo: true): (DirEntry & EntryInfo)[]\n    readDirSync (path: string, withInfo: false | true): DirEntry[] {\n        if (withInfo === true) {\n            return this._srcFs.readDirSync(this._srcFsPathFor(path), true)\n        } else {\n            return this._srcFs.readDirSync(this._srcFsPathFor(path), false)\n        }\n    }\n\n    writeFileSync (path: string, data: string): void {\n        if (this._readOnly) throw new Error(this.readonlyReason)\n        this._srcFs.writeFileSync(this._srcFsPathFor(path), data)\n    }\n\n    copySync (fromPath: string | VfsPath, toPath: string, overwrite?: boolean): void {\n        if (this._readOnly) throw new Error(this.readonlyReason)\n\n        toPath = this._srcFsPathFor(toPath)\n\n        if (typeof fromPath === 'string') {\n            fromPath = this._srcFsPathFor(fromPath)\n            this._srcFs.copySync(fromPath, toPath)\n            return\n        }\n\n        const fromFS = fromPath.vfs\n        //todo[api, test] does not handle the case where _srcFs is itself\n        //  a wrapper around an underlying  Technically we should\n        //  determine the \"root\" underlying toFS (e.g. using recursion).\n        //  Practically speaking, not needed yet, so let the exception be thrown\n        if (fromFS instanceof SandboxFS && fromFS._srcFs === this._srcFs) {\n            this._srcFs.copySync(fromFS._srcFsPathFor(fromPath.path), toPath, overwrite)\n            return\n        }\n\n        throw Error(`copy across different underlying file systems not yet implemented for SandboxFS.copySync`)\n    }\n\n    mkdirSync (path: string, recursive = false): void {\n        if (this._readOnly) throw new Error(this.readonlyReason)\n        this._srcFs.mkdirSync(this._srcFsPathFor(path), recursive)\n    }\n\n    existsSync (path: string): boolean {\n        return this._srcFs.existsSync(this._srcFsPathFor(path))\n    }\n\n    toString () {\n        return `SandboxFS[${this._srcFs}:${this._srcRoot}]`\n    }\n}\n", "import posix from 'path-browserify'\n\n/**\n * All Vfs paths are POSIX-style, web URL-style, even on Windows.\n * The root path is ALWAYS '/'.\n * \n * - The Vfs API, regardless of underlying file system, is supposed\n *   to have uniform same path syntax and semantics.\n * - We've settled on POSIX.\n * - It's only the concrete backends that need to do translations\n *   to/from POSIX when making underlying fs calls (when underlying fs isn't\n *   POSIX):\n *   - SystemFS (which handles Windows, etc)\n *   - WebFS or whatever we call it will also need some translation, probably.\n *     Because WebFS has paths with protocols and host names at the head. Also,\n *     some characters in the path may need to be escaped/swapped/URL-safe.\n */\nexport const Vpath = {\n    parse (path: string): { dir: string, base: string, name: string, ext: string } {\n        return posix.parse(path)\n    },\n\n    parseDir (path: string): string {\n        return posix.dirname(path)\n    },\n\n    parseBase (path: string): string {\n        return posix.basename(path)\n    },\n\n    parseName (path: string): string {\n        return posix.parse(path).name\n    },\n\n    parseExt (path: string): string {\n        return posix.extname(path)\n    },\n\n    normalize (path: string): string {\n        return posix.normalize(path)\n    },\n\n    join (...paths: string[]): string {\n        return posix.join(...paths)\n    },\n\n    // todo[api] not sure we need these two. If we do, they DO NOT need to have\n    // same signature as Nodejs.fs API. For example i think the Node resolve\n    // method is odd, in that it doesn't necessarily use all the args,\n    // and relative I believe only works if the two paths given are absolute\n    // (need to confirm this); if so can/should it work for non absolute paths?\n    // if one or two relative paths are passed, what are the results?\n\n    resolve (...pathSegments: string[]): never {\n        throw new Error(`path.resolve not implemented -- see note in vfs.ts`)\n    },\n\n    relative (fromPath: string, toPath: string): never {\n        throw new Error(`path.relative not implemented -- see note in vfs.ts`)\n    }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type {Assembly} from './textAssembly/index.js'\nimport {VfsPath, Vpath} from '../vfs/index.js'\nimport JSON5 from 'json5'\n\n\n/** if the path is relative, interpret as relative to Config location/context */\nexport type ResolveConfigResourcePath = (path: string) => VfsPath\n\n//todo![api, release] consider extracting a generic superclass from this and releasing\n//  as an independent package.\n\n/**\n * A container of hierarchical config properties with the following features:\n *\n * - can resolve properties with relative paths values, relative to the Config's\n *   own physical or virtual source file location. See *Notes on path\n *   resolution* below.\n *\n * - any branch of the property hierarchy can be extracted via\n *   {@link subConfig} or {@link subConfigs}.\n *\n * - access to the owning TextAssembly if it represents one.\n *\n * - the option to trigger an Error if the requested property or subConfig\n *   does not exist.\n *\n * Notes on path resolution\n * ------------------------\n * The source file system is not necessarily the local file system. It may be\n * a real or virtualized cloud file system. It may be a virtualized container\n * within the local file system. It may be within a virtualized file system\n * with unique special path syntax (e.g. TextAssembly cross-assembly paths).\n * Thus it is necessary that all path values held by an instance of this Config\n * be resolved using methods of this class, e.g. {@link requiredResolvedPathValue} and\n * {@link requiredReadFileSyncAt}.\n *\n * todo[test] unit test\n */\nexport class Config {\n    private readonly _name: string\n    private readonly _resolvePath: ResolveConfigResourcePath\n    private readonly _isSubconfig: boolean\n\n    private readonly _data: Record<string, any> = {}\n\n    private readonly _assembly: Assembly | undefined\n\n    /**\n     *\n     * @param name         the name of this config. Will be the filename\n     *                     when it represents the whole config file,\n     *                     appended with the subsection path if it represents\n     *                     and extracted subsection.\n     * @param data         the config data\n     * @param resolvePath  used to resolve path\n     *                     values held by this Config per rules specified\n     *                     {@link Config above}.\n     * @param isSubconfig  whether the config values in this instance\n     *                     are a branch extracted from the full Config.\n     * @param textAssembly reference to the owning TextAssembly if\n     *                     this Config represents one.\n     */\n    constructor (name: string,\n                 data: Record<string, any>,\n                 resolvePath: ResolveConfigResourcePath,\n                 isSubconfig = false,\n                 textAssembly?: Assembly) {\n        this._name = name\n        Object.assign(this._data, data)\n        this._resolvePath = resolvePath\n        this._isSubconfig = isSubconfig\n        this._assembly = textAssembly\n    }\n\n    name (): string {\n        return this._name\n    }\n\n    data (): Readonly<Record<string, any>> {\n        return this._data\n    }\n\n    //! this is not identical to `value(key) !== undefined` because\n    //  undefined is a possible value for key.\n    hasValue (key: string): boolean {\n        const keys = key.split('.')\n        let d = this._data\n        for (const k of keys) {\n            if (!(k in d)) {\n                return false\n            }\n            d = d[k]\n        }\n        return true\n    }\n\n    value (key: string): any | undefined {\n        const keys = key.split('.')\n        let d = this._data\n        for (const k of keys) {\n            if (!(k in d)) {\n                return undefined\n            }\n            d = d[k]\n        }\n        return d\n    }\n\n    requiredValue (key: string): any {\n        const keys = key.split('.')\n        let d = this._data\n        for (const k of keys) {\n            if (k.length === 0) {\n                throw new Error(`invalid key: \"${key}\"`)\n            }\n            if (!(k in d)) {\n                throw new Error(`expected value for ${key} in ${this._name}`)\n            }\n            d = d[k]\n        }\n        return d\n    }\n\n    subConfig (key: string): Config | undefined {\n        const d = this.value(key)\n        if (d === undefined) return undefined\n        const name = this._isSubconfig\n            ? `${this._name}.${key}`\n            : `${this._name}#${key}`\n        return new Config(name, d, this._resolvePath, true, this._assembly)\n    }\n\n    requiredSubConfig (key: string): Config {\n        const d = this.requiredValue(key)\n        const name = this._isSubconfig\n            ? `${this._name}.${key}`\n            : `${this._name}#${key}`\n        return new Config(name, d, this._resolvePath, true, this._assembly)\n    }\n\n    subConfigs (key: string): Config[] | undefined {\n        const d = this.value(key)\n        if (d === undefined || !Array.isArray(d)) return undefined\n        return this._createSubConfigs(d, key)\n    }\n\n    requiredSubConfigs (key: string): Config[] {\n        const d = this.requiredValue(key)\n        if (!Array.isArray(d)) {\n            throw new Error(`expected array of values for ${key} in ${this._name}`)\n        }\n        return this._createSubConfigs(d, key)\n    }\n\n    private _createSubConfigs (d: any, key: string): Config[] {\n        const configs: Config[] = []\n        for (let i = 0; i < d.length; i++) {\n            const name = this._isSubconfig\n                ? `${this._name}.${key}[$i]`\n                : `${this._name}#${key}[$i]`\n            configs.push(\n                new Config(name, d[i], this._resolvePath, true, this._assembly)\n            )\n        }\n        return configs\n    }\n\n    resolvedPathValue (key: string): VfsPath | undefined {\n        const value = this.value(key)\n        if (value === undefined || typeof value !== 'string') {\n            return undefined\n        }\n        return this._resolvePath(value)\n    }\n\n    requiredResolvedPathValue (key: string): VfsPath {\n        const value = this.requiredValue(key)\n        if (typeof value !== 'string') {\n            throw new Error(`invalid path value for ${key} in ${this._name}`)\n        }\n        return this._resolvePath(value)\n    }\n\n    readFileSyncAt (key: string): string | undefined {\n        const path = this.resolvedPathValue(key)\n        if (path === undefined) return undefined\n        return path.vfs.readFileSync(path.path)\n    }\n\n    requiredReadFileSyncAt (key: string): string {\n        const path = this.requiredResolvedPathValue(key)\n        return path.vfs.readFileSync(path.path)\n    }\n\n    textAssembly (): Assembly | undefined {\n        return this._assembly\n    }\n}\n\nexport function newConfigForVfsPath (configPath: VfsPath, assembly?: Assembly): Config {\n    const vfs = configPath.vfs\n    const configPathParts = Vpath.parse(configPath.path)\n    const data = JSON5.parse(vfs.readFileSync(configPath.path))\n    const resolvePath = (path: string): VfsPath => {\n        if (path.startsWith('/')) {\n            return {vfs: vfs, path: path}\n        }\n        path = Vpath.join(configPathParts.dir, path)\n        return {vfs: vfs, path: path}\n    }\n    return new Config(configPathParts.base, data, resolvePath, false, assembly)\n}\n\n// todo![api] `newSimpleConfigWithCWDPathResolution` in bin/textplain.js\n//  should be consolidated with this, probably when we implement the\n//  BaseFS/SystemFS/WebFS plan described in the notes in WebFS.ts.\nexport function newConfigFromSimpleOptions (options?: Record<string, unknown>, assembly?: Assembly): Config {\n    const resolvePath = () => {\n        // todo![api] this could support resolvePath in a couple of ways:\n        //  1. add a `basePath` param above, which will be used for resolvePath\n        //  2. default `basePath` to `proc.cwd()` in Node and `/` in browser.\n        //     See https://github.com/vfile/vfile#filecwd.\n        //  Deciding factor: what are the use cases for programmatic construction\n        //  of Config? Does it make sense or is it safe to assume proc.cwd()?\n        throw new Error('internal application logic error: cannot resolve paths from simple config')\n    }\n    return new Config('options', options || {}, resolvePath, false, assembly)\n}\n", "import type {PipeProvider} from './pipe.js'\nimport type {RenderSTIRProvider} from './renderSTIR.js'\nimport type {AssemblyRendererProvider} from './render/assembly/AssemblyRenderer.js'\nimport type {PluginProvider} from './render/stir/html/pluginProvider.js'\n\nconst pipeRegistry: Record<string, PipeProvider> = {}\nconst renderSTIRRegistry: Record<string, RenderSTIRProvider> = {}\nconst assemblyRendererRegistry: Record<string, AssemblyRendererProvider> = {}\nconst pluginRegistry: Record<string, PluginProvider> = {}\n\n// todo[api] How do we support non-built-in, custom parse/pipe/render providers\n//  and plugins? Maybe:\n//  - Add a way to declare custom Providers (name and impl path) so that they\n//    can be registered. This could happen in the config of the user installation\n//    of Textplain (e.g. in ~/.textplain), in a special section of the pipeline\n//    config, or support both. In either case we'd use JS dynamic imports.\n//  - Support URLs as well as paths, so that user can use community developed\n//    Providers. like Deno does for Typescript modules, or node does for GitHub\n//    hosted modules.\n\nconsole.debug('initializing pipeline component registry...')\n\n//todo[api] we should support Stylesheets registration too?\n//  or is the domain of ptss-parser? I have plans somewhere\n//  about how a ptss-parser install has its own config,\n//  stylesheets referenced by URL (like how Deno does it for\n//  packages), etc.\n\nexport function registerPipe (name: string, provider: PipeProvider) {\n    if (pipeRegistry[name]) {\n        throw Error(`duplicate pipe registration for \"${name}\"`)\n    }\n    pipeRegistry[name] = provider\n    //todo[api] the name tells us the registered name, but no indication\n    //  of the actual source implementation (e.g. path to the source file,\n    //  it's name in package.json, etc. Things we might do:\n    //  - if we use dynamic imports, as we must for user plugins,\n    //    we can log both name and source file. OTOH that won't work if\n    //    the user needs to pass in an implementation, not point at a file\n    //    to import. We can either not allow that, or not worry about that\n    //    case as it's the user's own code, not them loading a third-party\n    //    plugin, for which we can require a filename or a plugin folder\n    //    with a package.json or something.\n    //  - add a description() and/or vendor() methods/props to the API\n    console.debug(`registered pipe: ${name}`)\n}\n\nexport function lookupPipe (name: string): PipeProvider {\n    return pipeRegistry[name]\n}\n\n\nexport function registerSTIRRenderer (name: string, provider: RenderSTIRProvider) {\n    if (renderSTIRRegistry[name]) {\n        throw Error(`duplicate STIR renderer registration for \"${name}\"`)\n    }\n    renderSTIRRegistry[name] = provider\n    console.debug(`registered STIR renderer: ${name}`)\n}\n\nexport function lookupSTIRRenderer (name: string): RenderSTIRProvider {\n    return renderSTIRRegistry[name]\n}\n\nexport function registerAssemblyRenderer (name: string, provider: AssemblyRendererProvider) {\n    if (renderSTIRRegistry[name]) {\n        throw Error(`duplicate STIR renderer registration for \"${name}\"`)\n    }\n    assemblyRendererRegistry[name] = provider\n    console.debug(`registered STIR renderer: ${name}`)\n}\n\nexport function lookupAssemblyRenderer (name: string): AssemblyRendererProvider {\n    return assemblyRendererRegistry[name]\n}\n\n\nexport function registerPlugin (name: string, plugin: PluginProvider) {\n    if (pluginRegistry[name]) {\n        throw Error(`duplicate plugin registration for \"${name}\"`)\n    }\n    pluginRegistry[name] = plugin\n    console.debug(`registered plugin: ${name}`)\n}\n\nexport function lookupPlugin (name: string): PluginProvider {\n    return pluginRegistry[name]\n}\n", "import {AbstractOut, AbstractWriter} from '../abstractWriter.js'\nimport type {RenderSTIR, RenderSTIRProvider} from '../../../renderSTIR.js'\nimport {Config, newConfigFromSimpleOptions} from '../../../config.js'\nimport * as ir from '../../../../stir/index.js'\nimport type {STIR} from '../../../stir.js'\nimport {registerSTIRRenderer, lookupPlugin} from '../../../registry.js'\nimport {escapeText, escapeAttrib} from '../../../../orphans/parseUtil.js'\nimport encode from 'mdurl/encode.js'\n\n\n/*\ntodo[perf, html] would a rendering traversal of the stir benefit benefit\n   from a non-recursive implementation like `traverseBodyTree`? And with\n   both pre- and post-order traversal callbacks like textAssembly/travers.ts?\n */\n\n/*\ntodo[html, accessibility] Review accessibility standards for conformance.\n Current implementation documented in:\n - footnotes: [{stylesheets}/test-references/compare/footnotes.md]\n - (todo: other elements)\n */\n\n/*\ntodo[html] ALTERNATE RENDERINGS, and standard conformance\n  To support standards conformance, e.g. html5Out,\n  we can supply ALTERNATE RENDERINGS simply by registering\n  a modified or entirely different set of default Block and Inline Writers.\n  .\n  WE DO NOT NEED MULTIPLE stir2html classes.\n  .\n  One way to factor is:\n   --Html4Out\n   --Html5Out *HtmlLivingStandardOut)\n     --HtmlAccessibleOut    outputs arias, and all other attributes needed to comply with accessibility standards\n   --XHtmlOut\n   --Bootstrap5Out\n  .\n  Another way is to have one HtmlOut, but simply register different combinations\n  of individual writers (this makes sense if most are the same).\n  .\n  Another way is to do it as \"quirks\", as we do for Pandoc and GFM.\n  .\n  I don't know if there is an easy way to do Mixins, e.g. \"HTML5 + accessible + boostrap\".\n */\n\n\n// todo![now] DECIDED: toc is produced by stir2html.\n//  1. how ID's are generated for HTML is an internal renderer matter.\n//  2. so unless we want to establish cross-pipeline rules for the HTML\n//     rendering, it doesn't make sense for anything other than ONE\n//     component to generate the IDs.\n//  3. We *could* generate a generic TOC and hand that off to stir2html\n//     to insert the proper IDs, but why add ALL THAT COMPLEXITY just so\n//     that VERY SIMPLE code is re-usable?\n//  4. If we want to establish a standard form for the TOC structure, it's\n//     as simple as making that part of the Template API spec, and even\n//     supply Typescript typings.\n\n\nexport type HTMLOut = AbstractOut & {\n    renderPlainText: (s: string) => string\n    // todo![site scheme, footnotes, template api] margin note vs footnote:\n    //  - CANNOT be handled by CSS-only, requires specific HTML structure.\n    //  - Raw ideas for ways to give user this option:\n    //    - CSS control: NOT POSSIBLE (need to double verify)\n    //    - A Stir2Html switch. This is easiest, but does not give either\n    //      the site scheme or the stylesheet control.\n    //    - Site Scheme control: all notes look the same in the source plaintext\n    //      and the choice of Site Scheme (or a switch within a configurable Site\n    //      Scheme) determines whether notes are margin or foot.\n    //    - Author, PTSS & STIR control: Ideal world:\n    //      - a style sheet can offer syntax for both foot and margin notes.\n    //      - the author chooses for *each* note, via syntax choice.\n    //      - notes of STIR MARGIN NOTE type get rendered in the margin, or at least\n    //        adjacent to the reference in some way (e.g. tooltip, or\n    //        `[bracketed note]` for print renderings). (maybe we use a more\n    //        generic term, e.g. STICKY NOTE, for all notes that get rendered\n    //        adjacent, and leave the form of adjacency to the Site Scheme)\n    //      - notes of STIR FOOTNOTE type get rendered as footnotes. (maybe\n    //        we use a more generic term, e.g. NON-STICKY for lack of better\n    //        tern, for all notes that get rendered in a separate section, and\n    //        leave the location (foot vs end) to the Site Scheme)\n    //      - notes of generic type get rendered either as footnotes, margin\n    //        notes, or endnotes, as deemed fit by the Site Scheme OR\n    //        renderer config setting, i.e. one of the other options above.\n    //  search repo for \"tuft\" for more notes on this.\n    // todo![now, references] move the above comment to the right place, and\n    //   put a link to it here instead, if such a link makes sense.\n    phase: 'main' | 'footnote'\n    readonly takenHtmlIDs: { [key: string]: boolean }\n    /**\n     * This is necessary because we don't have an idempotent function that\n     * maps STIR IDs to HTML IDs uniquely, that is to say a one-to-one mapping,\n     * because many chars are stripped or replaced with the same char. The function\n     * guarantees uniqueness by appending a number, and calling that number\n     * successively *for the exact same STIR ID* will yield different values.\n     * Thus we need to track the HTML ID generated the first time we convert each\n     * STIR ID.\n     */\n    readonly stirID2htmlID: { [stirID: string]: string }\n    // for numbering, and also to determine unreferenced notes (for warning)\n    readonly notesInReferencedOrder: ir.Block[]\n    // map each note to note_refs (note.stirID to note_ref.htmlID)\n    readonly noteBackRefs: { [stirID: string]: string[] }\n}\n\nexport type BlockWriter = (b: ir.Block, out: HTMLOut, flags?: Record<string, unknown>) => void\nexport type InlineWriter = (i: ir.Inline, out: HTMLOut) => void\n\ntype AttrList = [string, string][]\n\ntype ElemID4Node = (node: ir.Block | ir.Inline, out: HTMLOut) => string | undefined\n\n/**\n * TextPlain's default HTML render. It outputs the IR\n * nodes in a straight-forward way, expecting the user\n * to supply the CSS for it to render correctly.\n *\n * todo[html] the Stir2Template could have a default\n * template that embeds a stylesheet with nice but generic styling\n * that covers all the elements and styles produced by Stir2Html.\n */\nexport class Stir2Html extends AbstractWriter<HTMLOut> {\n\n    readonly safe: boolean\n\n    readonly createAttrList: (ire: ir.Block) => AttrList\n\n    readonly elemID4Node: ElemID4Node\n    readonly idStyle: 'gfm' | 'pandoc' | 'default'\n\n    // todo[html] CommonMark quirks, things we do just for CM test\n    //  conformance, should also be made explicit and optional in the same way.\n    //  If the quirks are extensive, see ALTERNATE RENDERINGS above.\n    //  -\n    //  That Pandoc doesn't output empty ALT attribs for images\n    //  seems correct, not a quirk; thus the logic for rending image links\n    //  looks backwards.\n    readonly quirks: 'none' | 'gfm' | 'pandoc' = 'none'\n    readonly notEscaped: string\n    readonly checkboxUnchecked: string = '<input type=\"checkbox\" />'\n    readonly checkboxChecked: string = '<input type=\"checkbox\" checked />'\n\n    // todo[arch] We support generic Record for options for simple use cases\n    //    such as Textplain Live. But should we? Does it make sense to always\n    //    require the caller create a Config, which could take the caller's\n    //    context for any necessary path resolution?\n    constructor (config?: Config | Record<string, unknown>) {\n        super()\n        this.initWriters(this.initBlockWriters(), this.initInlineWriters())\n\n        if (config === undefined || !(config instanceof Config)) {\n            config = newConfigFromSimpleOptions(config)\n        }\n        const options = config.data()\n\n        // todo![plugin api] are we going to mandate that all RenderProviders implement a Plugin interface?\n        //  - or should this be internal to their Provider.configure method, where we pass in their\n        //    piece of the config and let them determine both config structure and what they support?\n        //  - or is there advantage to enforcing consistency (a plugin can have a noop for this).\n\n        // expected config schema:\n        //     plugins: [\n        //         {\n        //             provider: string\n        //             config?: Record<string, unknown>\n        //         }\n        //     ]\n        const plugins = config?.subConfigs('plugins')\n        if (plugins !== undefined) {\n            for (const pluginConfig of plugins) {\n                const providerName = pluginConfig.requiredValue('provider')\n                console.group(`configure Plugin: ${providerName}`)\n                const plugin = lookupPlugin(providerName)\n                if (plugin === undefined || plugin.install === undefined) {\n                    throw new Error(`invalid plugin: ${providerName}`)\n                }\n                plugin.install(this, pluginConfig.subConfig('config')?.data())\n                console.groupEnd()\n            }\n        }\n\n        this.safe = options.safe === true   //todo: should we default to true instead?\n        this.createAttrList = options.sourcepos === true ? createAttrListWithSourceInfo : createEmptyAttrList\n\n        switch (options.idStyle || 'default') {\n            case 'gfm':\n                this.idStyle = 'gfm'\n                this.elemID4Node = elemID4Node_GFM\n                break\n            case 'pandoc':\n                this.idStyle = 'pandoc'\n                this.elemID4Node = elemID4Node_Pandoc\n                break\n            case 'default':\n                this.idStyle = 'default'\n                this.elemID4Node = elemID4Node_Default\n                break\n            default:\n                throw new Error(`invalid idStyle: ${options.idStyle}}`)\n        }\n\n        switch (options.quirks) {\n            case 'gfm':\n                this.quirks = 'gfm'\n                this.notEscaped = encode.defaultChars.replace('$', '') + '%'\n                this.checkboxUnchecked = '<input type=\"checkbox\" disabled />'\n                this.checkboxChecked = '<input type=\"checkbox\" checked disabled />'\n                break\n            case 'pandoc':\n                this.quirks = 'pandoc'\n                this.notEscaped = encode.defaultChars + '%\\\\'\n                this.checkboxUnchecked = '<input type=\"checkbox\" />'\n                this.checkboxChecked = '<input type=\"checkbox\" checked=\"\" />'\n                break\n            case undefined:\n            case null:\n            case '':\n                this.quirks = 'none'\n                this.notEscaped = encode.defaultChars //todo![spec] is this right? what about `%`?\n                break\n            default:\n                throw new Error('unrecognized quirks option')\n        }\n    }\n\n    // todo[api] Overwrites the default writer; no possibility of `super.write()`\n    //   - i might register a BlockWriter that only handles the case for\n    //     a subset of blocks of a given type, e.g. those with a `caption` value.\n    //   - i should be able to defer back to the original BlockWriter, either\n    //     to say \"this one isn't mine\" or to prepend/append/wrap the default output\n    //     with some custom stuff.\n    // todo![api, stir customization, stir templates] given the complexity of some of the\n    //   block writer implementations, i'm not sure this is the way to support\n    //   adding custom rendering. See my notes *STIR Element-level Templates*.\n    registerBlockWriter (type: string, bw: BlockWriter): void {\n        this.bWriters[type] = bw.bind(this)\n    }\n\n    registerInlineWriter (type: string, iw: InlineWriter): void {\n        this.iWriters[type] = iw.bind(this)\n    }\n\n    render (stir: STIR): string {\n        const out: HTMLOut = {\n            buf: '',\n            renderPlainText: escapeText,\n            phase: 'main',\n            takenHtmlIDs: {},\n            stirID2htmlID: {},\n            notesInReferencedOrder: [],\n            noteBackRefs: {}\n        }\n        //todo[arch] the rest of this is identical for all renderers. DRY!\n        if (ir.isBlock(stir)) {\n            this.writeBlock(stir, out)\n        } else {\n            this.writeInlineSequence(stir, out)\n        }\n        if (out.notesInReferencedOrder.length > 0) {\n            out.phase = 'footnote'\n            if (this.quirks === 'gfm') {\n                out.buf += '<section class=\"footnotes\" data-footnotes=\"\">\\n<ol>'\n            } else if (this.quirks === 'pandoc') {\n                out.buf += '<aside class=\"footnotes footnotes-end-of-document\" id=\"footnotes\" role=\"doc-endnotes\">\\n<hr>\\n<ol>'\n            } else {\n                out.buf += '<aside class=\"footnotes\" role=\"doc-endnotes\" epub:type=\"endnotes\"><ol>'\n            }\n            for (const note of out.notesInReferencedOrder) {\n                console.debug(`footnote ${note.id}`)\n                this.writeBlock(note, out)\n            }\n            if (this.quirks === 'gfm') {\n                out.buf += '</ol></section>'\n            } else {\n                out.buf += '</ol></aside>'\n            }\n        }\n        return out.buf\n    }\n\n    writeText (t: string, out: HTMLOut): void {\n        out.buf += out.renderPlainText(t)\n    }\n\n    // Helper function to produce an HTML tag.\n    tag (name: string, attrs: AttrList = [], selfClosing: boolean, out: HTMLOut): void {\n        out.buf += '<'\n        out.buf += name\n        if (attrs && attrs.length > 0) {\n            let i = 0\n            let attrib\n            while ((attrib = attrs[i]) !== undefined) {\n                out.buf += ' '\n                out.buf += attrib[0]\n                out.buf += '=\"'\n                out.buf += escapeAttrib(attrib[1])\n                out.buf += '\"'\n                i++\n            }\n        }\n        if (selfClosing) {\n            out.buf += ' />'\n        } else {\n            out.buf += '>'\n        }\n    }\n\n    encodeHrefAttributeValue (href: string): string {\n        try {\n            return encode(href, this.notEscaped)\n        } catch (err) {\n            return href\n        }\n    }\n\n    /**\n     * todo[api, perf, arch] I need to revisit how i'm attaching BlockWriters and\n     * InlineWriters to instances of Stir2Html and other AbstractWriter classes.\n     *\n     * - the register methods use bind to bind `this` to *this* instance of\n     *   Stir2Html. But bind doesn't work for arrow functions. It happens to\n     *   work the few cases I've used register so far because:\n     *   - the functions don't reference `this`\n     *   - the arrow function binds to the Stir2Bootstrap instance, which is\n     *     fine because it's `super` is *this* instance of Stir2Html.\n     *   - in `genCaseExpectedVals.ts` I use a regular function, for which\n     *     bind does work (but it didn't work until I added `bind` to the\n     *     register method of Stir2Markdown)... a bug I had to figure out.\n     *\n     *   In other words, I don't like the fragility of it all.\n     *\n     * - Also, is there a performance or code complexity costs to how I define\n     *   those writers (type of function, closure scope, etc, use of bind)?\n     *\n     *   What is the maximally lightweight way for the desired function code to\n     *   be executed? Am I overthinking this? Though according to\n     *   https://delicious-insights.com/en/posts/call-and-apply-in-javascript/:\n     *\n     *   > arrow functions at call time do not define extra entries in the Function\n     *   > Environment Record mentioned earlier.\n     *\n     *   and later it says that the lexically bound references in arrow functions\n     *   are fixed, so if it weren't for the need to bind `this`, would arrow\n     *   functions be best? What about not using `this` at all and making\n     *   the AbstractWriter an explicit parameter?\n     *\n     * - I THINK THE RIGHT THING TO DO IS USE THE SAME METHOD to setup the\n     *   built-ins and the custom writers currently added via the register\n     *   methods.\n     *\n     * - I'm currently using arrow functions for the built-ins (i.e. see below).\n     *   This means distinct instances of the functions for each instantiation\n     *   of Stir2Html, but (1) we don't make many instances and (2) i have a\n     *   feeling the JS engine detects this and shares the Function object.\n     *   There are getting lexically tied to the `this` of the init___ methods,\n     *   which of course is *this* Stir2Html.\n     *\n     * @returns {{[p: string]: BlockWriter}}\n     */\n    initBlockWriters (): { [index: string]: BlockWriter } {\n        const writers: { [index: string]: BlockWriter } = {}\n\n        writers['structured_text_intermediate_representation'] = (b: ir.Block, out: HTMLOut) => {\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n        }\n\n        writers['paragraph'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            this.tag('p', attrs, false, out)\n            this.writeInlineSequence(b.body as ir.InlineSequence, out)\n            out.buf += '</p>\\n'\n        }\n\n        writers['section'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            const elemID = this.elemID4Node(b, out)\n            if (elemID) {\n                attrs.push(['id', elemID])\n            }\n            //todo![stir] can't a class be attached to any stir node?\n            // What about `subtype` which is currently used by interjection?\n            // We are adding these things to the content model as we need\n            // them for the style sheets I'm writing, but the whole point is\n            // that users can write new stylesheets without writing any code,\n            // certainly not have to update this class! EVEN if we switch to\n            // a template-based stir2html, most stylesheets shouldn't have to\n            // modify the default templates for the predefined stir types, and\n            // this writer or the template-based writer should still be able\n            // to provide a reasonable rendering for new subtypes for which\n            // custom templates aren't supplied.\n            //   1. We probably need to support `class` on all stir nodes, which\n            //      any stylesheet can use however it wants.\n            //   2. `subtype` on interjection should just be replaced with `class`,\n            //      unless we decide there is a semantic difference. Then we must\n            //      decide if `subtype` is an interjection-specific content model\n            //      element, of if we should support it for others, perhaps all.\n            if (b.class) {\n                attrs.push(['class', b.class as string])\n            }\n            this.tag('section', attrs, false, out)\n            out.buf += '\\n<h'\n            out.buf += b.level\n            out.buf += '>'\n            this.writeInlineSequence(b.title as ir.InlineSequence, out)\n            out.buf += '</h'\n            out.buf += b.level\n            out.buf += '>\\n'\n            this.writeBlockSequence(b.body as ir.BlockSequence, out)\n            out.buf += '</section>\\n'\n        }\n\n        writers['heading'] = (b: ir.Block, out: HTMLOut) => {\n            const tag = 'h' + b.level\n            const attrs = this.createAttrList(b)\n            const elemID = this.elemID4Node(b, out)\n            if (elemID) {\n                attrs.push(['id', elemID])\n            }\n            this.tag(tag, attrs, false, out)\n            this.writeInlineSequence(b.body as ir.InlineSequence, out)\n            this.tag('/' + tag, [], false, out)\n            out.buf += '\\n'\n        }\n\n        // todo[ptss] This is the default rendering of the base type, Block.\n        //   - all conforming implementations must render every one of the\n        //     the built-in types, even Block. Why? because someone might\n        //     base a custom type off of it (because none of the other more\n        //     specific styles make sense. in which case, this default Block\n        //     rendering will be activated.\n        //   - ONCE WE DEFINE THE RULES, we'll implement them here and for all\n        //     blocks. specifically: (1) all properties should be rendered, e.g.\n        //     name-value pairs written as HTML attributes.\n        writers['block'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            if (b.class) {\n                attrs.push(['class', b.class as string])\n            }\n            this.tag('div', attrs, false, out)\n            out.buf += '\\n'\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.buf += '\\n</div>\\n'\n        }\n\n        /**\n         * We CANNOT name this type 'literal_block' because that would imply simple\n         * text content, not formatted inlines.\n         *\n         * The choices are:\n         *  - 'pre': well established HTML name and semantics\n         *  - 'literallayout': DocBook's name\n         *     https://tdg.docbook.org/tdg/4.5/literallayout-x.html\n         *  - see STIR Spec doc for other ideas.\n         */\n        writers['pre'] = (b: ir.Block, out: HTMLOut) => {\n            if (this.quirks === 'pandoc') {\n                const attrs = this.createAttrList(b)\n                attrs.push(['class', 'line-block'])\n                this.tag('div', attrs, false, out)\n                if (b.body) {\n                    const save = out.renderPlainText\n                    out.renderPlainText = pandocRenderPlainText\n                    this.writeInlineSequence(b.body as ir.InlineSequence, out)\n                    out.renderPlainText = save\n                }\n                out.buf += '</div>\\n'\n                return\n            }\n            const attrs = this.createAttrList(b)\n            this.tag('pre', attrs, false, out)\n            if (b.body) {\n                this.writeInlineSequence(b.body as ir.InlineSequence, out)\n            }\n            out.buf += '</pre>\\n'\n        }\n\n        writers['code_block'] = (b: ir.Block, out: HTMLOut) => {\n            const infoWords = b.info ? b.info.split(/\\s+/) : []\n            const attrs = this.createAttrList(b)\n            // todo[gfm] GitHub's spec tests are now out of sync with what it\n            //  actually does (per GitHub Markdown REST API, which genCaseExpectedVals.ts\n            //  now can get). For now adhering to spec. If we want to adhere to actual\n            //  GitHub behavior, do one or both of the following:\n            //   1. let genCaseExpectedVals.ts update the gfm case files, but commit\n            //      the changes into a distinct commit above the base stylesheet/\n            //      commit, as I've done with the DISABLED cases. Basically put what\n            //      I wrote above in the commit message.\n            //   2. Submit a bug with GitHub against their spec repo: asking them\n            //      to clarify whether the spec is still their spec, or whether it\n            //      is no longer maintained.\n            /*\n            if (this.quirks === 'gfm') {\n                if (infoWords.length > 0 && infoWords[0].length > 0) {\n                    attrs.push(['lang', escapeAttrib(infoWords[0])])\n                }\n                this.tag('pre', attrs, false)\n                out.buffer += '<code>'\n            } else\n            */\n            if (this.quirks === 'pandoc') {\n                if (infoWords.length > 0 && infoWords[0].length > 0) {\n                    attrs.push(['class', infoWords[0]])\n                }\n                this.tag('pre', attrs, false, out)\n                out.buf += '<code>'\n            } else {\n                // default render of language info per\n                // https://talk.commonmark.org/t/fenced-code-blocks-should-add-class-to-code-rather-than-pre-matching-the-html-best-practice/136\n                if (infoWords.length > 0) {\n                    if (infoWords[0].length > 0) {\n                        attrs.push(['class', 'language-' + infoWords[0]])\n                    }\n                    //! most implementations ignore everything other than the first word\n                    if (infoWords.length > 1) {\n                        //\n                    }\n                }\n                out.buf += '<pre>'\n                this.tag('code', attrs, false, out)\n            }\n            if (b.body) {\n                out.buf += escapeText(b.body as string)\n            }\n            out.buf += '</code></pre>\\n'\n        }\n\n        // todo[stir] TBD whether `verse` should be a built-in STIR type.\n        //  See notes in STIR docs.\n        //  -\n        //  Currently it renders exactly like `pre`, and if that doesn't change,\n        //  there is no point in having it.\n        //  -\n        //  I'm don't think `verse` is *semantically* a sub-type of `pre`, even\n        //  if *presentationally* it may be. Which may be an argument for making\n        //  it a built-in (or at least coming up with a more generic thing that\n        //  `verse` is a subclass of).\n        writers['verse'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            this.tag('pre', attrs, false, out)\n            if (b.body) {\n                this.writeInlineSequence(b.body as ir.InlineSequence, out)\n            }\n            out.buf += '</pre>\\n'\n        }\n\n        writers['thematic_break'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            this.tag('hr', attrs, true, out)\n            out.buf += '\\n'\n        }\n\n        writers['block_quote'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            this.tag('blockquote', attrs, false, out)\n            out.buf += '\\n'\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.buf += '</blockquote>\\n'\n        }\n\n        writers['interjection'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            attrs.push(['class', 'interjection ' + b.subType as string])\n            // todo[html] TEMP HACK? I haven't thought through whether `icon`\n            //  is a standard part of the STIR interjection type, or just a\n            //  Gracedown/RepoDoc/RubyRhod customization. If it is the latter,\n            //  then it does not belong in HTMLOut, since this class should be\n            //  the *reference* and generic implementation of STIR to HTML. If\n            //  that is the case, there are two proper ways to go for rendering\n            //  Gracedown/RepoDoc/RubyRhod customizations:\n            //   1. Extend this class and plug it into stir2html\n            //   2. Do it ALL in CSS. (i.e. not write the custom `icon` field).\n            if (b.icon && typeof b.icon === 'string') {\n                attrs.push(['icon', b.icon])\n            }\n            this.tag('div', attrs, false, out)\n            out.buf += '\\n'\n            if (b.title) {\n                // todo[HTML] My current understanding is that you don't put the\n                //   title in an attribute of the div, e.g. According to MDN:\n                //   > Text to be displayed in a tooltip when hovering over the element.\n                //   and also i read somewhere the content belongs in the content,\n                //   and that the heading tag is *the* way to represent headings.\n                // todo[rollout] include this as an open question, and an invitation\n                //   to an HTML expert to join the team.\n                const titleAttrs = createEmptyAttrList()\n                // todo[html] h3 is not thought through. quick hack\n                this.tag('h3', titleAttrs, false, out)\n                this.writeInlineSequence(b.title as ir.InlineSequence, out)\n                this.tag('/h3', [], false, out)\n            }\n            if (b.body) {\n                this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            }\n            out.buf += '\\n</div>\\n'\n        }\n\n        writers['list'] = (b: ir.Block, out: HTMLOut) => {\n            const tag = b.listOrdered ? 'ol' : 'ul'\n            const attrs = this.createAttrList(b)\n            const start = b.listStartNum\n            if (start != undefined && start !== 1) {\n                attrs.push(['start', start.toString()])\n            }\n            if (this.quirks === 'pandoc'\n                // todo[quirks] TEMP HACK: I don't think we should rely on \"source\"\n                //   for this in production code. BUT NOT SURE: \u2705=pro, \u274C=con\n                //   - \u274C per spec, source is optional\n                //   - \u274C we might run a mode where source is not written.\n                //   - \u2705 this has nothing to do with the spec, only Textplain's\n                //     mimicry of Pandoc rendering to the T. So this is not necessarily\n                //     a hack, though the above to issues still must be considered.\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                && b.source?.style?.styleSheet?.name === 'Pandoc Markdown') {\n                if (b.listStyle === 'decimal') {\n                    attrs.push(['type', '1'])\n                }\n                let allAllCheckboxes = true\n                for (const listItem of b.body as ir.BlockSequence) {\n                    const liBody = listItem.body as ir.BlockSequence\n                    if (liBody.length > 0) {\n                        const firstChild = liBody[0]\n                        if (firstChild.type === 'paragraph') {\n                            if (((firstChild.body as ir.InlineSequence)[0] as ir.Inline).type === 'checkbox') {\n                                if (typeof (firstChild.body as ir.InlineSequence)[1] === 'string') {\n                                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                                    // @ts-ignore\n                                    (firstChild.body as ir.InlineSequence)[1] = (firstChild.body as ir.InlineSequence)[1].trimStart()\n                                }\n                            } else {\n                                allAllCheckboxes = false\n                            }\n                        } else {\n                            allAllCheckboxes = false\n                            break\n                        }\n                    }\n                }\n                if (!b.listOrdered && allAllCheckboxes) {\n                    attrs.push(['class', 'task-list'])\n                }\n            }\n            this.tag(tag, attrs, false, out)\n            out.buf += '\\n'\n\n            const itemWriter = this.bWriters.list_item\n            const flags = {compact: b.hints['commonmark.list.tight'] === true}\n            for (const item of (b.body as ir.BlockSequence)) {\n                itemWriter(item, out, flags)\n            }\n\n            this.tag('/' + tag, [], false, out)\n            out.buf += '\\n'\n        }\n\n        writers['list_item'] = (b: ir.Block, out: HTMLOut, flags?) => {\n            const attrs = this.createAttrList(b)\n            this.tag('li', attrs, false, out)\n            if (b.body === undefined) {\n                // empty item\n                out.buf += '</li>\\n'\n            } else if (ir.isBlockSequence(b.body)) {\n                const bodySequence = b.body as ir.BlockSequence\n                if (flags?.compact) {\n                    if (bodySequence[0].type !== 'paragraph') {\n                        out.buf += '\\n'\n                    }\n                    for (let i = 0; i < bodySequence.length; i++) {\n                        const bodyItem = bodySequence[i]\n                        if (bodyItem.type === 'paragraph') {\n                            this.writeInlineSequence(bodyItem.body as ir.InlineSequence, out)\n                            if (i < bodySequence.length - 1) {\n                                out.buf += '\\n'\n                            }\n                        } else {\n                            this.writeBlock(bodyItem, out)\n                        }\n                    }\n                    out.buf += '</li>\\n'\n                } else {\n                    out.buf += '\\n'\n                    this.writeBlockSequence(bodySequence, out)\n                    out.buf += '</li>\\n'\n                }\n            } else {\n                throw new Error(`invalid list item body: ${b.body}`)\n            }\n        }\n\n        writers['table'] = (b: ir.Block, out: HTMLOut) => {\n            const attrs = this.createAttrList(b)\n            this.tag('table', attrs, false, out)\n            out.buf += '\\n'\n\n            const headRows = b.head as ir.BlockTable\n            const bodyRows = b.body as ir.BlockTable\n            const headMeta = b.tableMeta?.head as ir.ColumnMeta[]\n            const bodyMeta = b.tableMeta?.body as ir.ColumnMeta[]\n\n            if (headRows) {\n                const attrByCol = genPerColumnCellAttribs(headMeta, this.quirks === 'gfm')\n                out.buf += '<thead>\\n'\n                for (const headRow of headRows) {\n                    out.buf += '<tr>'\n                    for (let i = 0; i < headRow.length; i++) {\n                        const cell = headRow[i]\n                        if (attrByCol[i]) {\n                            this.tag('th', attrByCol[i], false, out)\n                        } else {\n                            out.buf += '<th>'\n                        }\n                        this.writeBlock(cell, out)\n                        out.buf += '</th>'\n                    }\n                    out.buf += '</tr>\\n'\n                }\n                out.buf += '</thead>\\n'\n            }\n\n            if (bodyRows !== undefined) {\n                const attrByCol = genPerColumnCellAttribs(bodyMeta, this.quirks === 'gfm')\n                if (bodyRows.length > 0 || this.quirks === 'pandoc') {\n                    out.buf += '<tbody>\\n'\n                }\n                for (const headRow of bodyRows) {\n                    out.buf += '<tr>'\n                    for (let i = 0; i < headRow.length; i++) {\n                        const cell = headRow[i]\n                        if (attrByCol[i]) {\n                            this.tag('td', attrByCol[i], false, out)\n                        } else {\n                            out.buf += '<td>'\n                        }\n                        this.writeBlock(cell, out)\n                        out.buf += '</td>'\n                    }\n                    out.buf += '</tr>\\n'\n                }\n                if (bodyRows.length > 0 || this.quirks === 'pandoc') {\n                    out.buf += '</tbody>\\n'\n                }\n            }\n\n            out.buf += '</table>\\n'\n        }\n\n        writers['cell'] = (b: ir.Block, out: HTMLOut) => {\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n        }\n\n        //todo![footnotes] these might be stir2html options:\n        //  - whether footnotes have backlinks\n        //    - whether backlink points back at the footnote reference\n        //      or the containing element (e.g. the paragraph containing\n        //      the footnote reference).\n        writers['note'] = (b: ir.Block, out: HTMLOut) => {\n            if (out.phase === 'main') {\n                // do nothing\n                // todo![now, references] we should track notes created\n                //   but never references, and log error/warning.\n                //   SHOULD ALSO do this for named values if we are not already.\n            } else {\n                const noteNum = out.notesInReferencedOrder.indexOf(b) + 1\n                const attrs = this.createAttrList(b)\n                attrs.push(['id', out.stirID2htmlID[b.id as string]])\n                this.tag('li', attrs, false, out)\n                out.buf += '\\n'\n                this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n                const backrefs = out.noteBackRefs[b.id as string]\n                if (backrefs?.length > 0) {\n                    // todo![now, references]  LET THIS HACK STAND?\n                    //   - what's worse is that it depends on there being a newline as well.\n                    const endsWithPara = out.buf.endsWith('</p>\\n')\n                    if (endsWithPara) {\n                        out.buf = out.buf.slice(0, -5)\n                    }\n                    for (let i = 0; i < backrefs.length; i++){\n                        const backref = backrefs[i]\n                        if (this.quirks === 'pandoc') {\n                            out.buf += `<a href=\"#${backref}\" class=\"footnote-back\" role=\"doc-backlink\">\u21A9\uFE0E</a>`\n                        } else if (this.quirks === 'gfm') {\n                            out.buf += ` <a href=\"#${backref}\" class=\"footnote-backref\" data-footnote-backref=\"\"`\n                            if (i===0) {\n                                out.buf += ` aria-label=\"Back to reference ${noteNum}\">\u21A9</a>`\n                            } else {\n                                out.buf += ` aria-label=\"Back to reference ${noteNum}-${i+1}\">\u21A9<sup class=\"footnote-ref\">${i+1}</sup></a>`\n                            }\n                        } else {\n                            out.buf += ` <a href=\"#${backref}\" class=\"footnote-backref\" role=\"doc-backlink\">\u21A9\uFE0E</a>`\n                        }\n                    }\n                    if (endsWithPara) {\n                        out.buf += '</p>\\n'\n                    }\n                }\n                out.buf += '\\n</li>\\n'\n            }\n        }\n\n        writers['html_block'] = (b: ir.Block, out: HTMLOut) => {\n            if (this.safe) {\n                out.buf += '<!-- raw HTML omitted -->'\n            } else {\n                out.buf += b.body as string\n            }\n            out.buf += '\\n'\n        }\n\n        return writers\n    }\n\n\n    initInlineWriters (): { [index: string]: InlineWriter } {\n        const writers: { [index: string]: InlineWriter } = {}\n\n        // todo[stir]  not sure why we have this as an element\n        writers['linebreak'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<br>\\n'\n        }\n\n        writers['xref'] = (i: ir.Inline, out: HTMLOut) => {\n            const attrs: AttrList = []\n            // todo![now, references] this will fail if the reference occurs before the referent\n            const href = typeof i.referent === 'object'\n                ? '#' + this.elemID4Node(i.referent, out)\n                : i.referent as string\n            if (!(this.safe && potentiallyUnsafe(href))) {\n                attrs.push(['href', this.encodeHrefAttributeValue(href)])\n            }\n            if (i.desc) {\n                attrs.push(['title', i.desc])\n            }\n            this.tag('a', attrs, false, out)\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '</a>'\n        }\n\n        writers['note_ref'] = (i: ir.Inline, out: HTMLOut) => {\n            if (this.quirks === 'gfm') {\n                out.buf += '<sup class=\"footnote-ref\">'\n            } else if (this.quirks === 'none') {\n                if (out.buf.endsWith('</sup>')) out.buf += ' '\n                out.buf += '<sup class=\"footnote-ref\">'\n            }\n            const attrs: AttrList = []\n            const referent = i.referent as ir.Block\n            const noteID = this.elemID4Node(referent, out) as string\n            const noteHREF = '#' + noteID\n            const noteNum = out.notesInReferencedOrder.indexOf(referent) + 1\n\n            let refID = noteID?.replace(/fn/, 'fnref')\n            if (refID in out.takenHtmlIDs) {\n                let newID\n                // we start dupes with `-2` because having `some_heading` and `some_heading-1` is confusing\n                for (let i = 2; i < Number.MAX_VALUE; i++) {\n                    newID = `${refID}-${i}`\n                    if (!(newID in out.takenHtmlIDs)) {\n                        refID = newID\n                        break\n                    }\n                }\n            }\n            out.takenHtmlIDs[refID] = true\n            if (out.noteBackRefs[referent.id as string] === undefined) {\n                out.noteBackRefs[referent.id as string] = [refID]\n            } else {\n                out.noteBackRefs[referent.id as string].push(refID)\n            }\n\n            attrs.push(['id', refID])\n            // todo![now, references] do we need this potentiallyUnsafe check for note_ref?\n            //   maybe we do as PTSS could allow a URL for referent instead of a local element\n            if (!(this.safe && potentiallyUnsafe(noteHREF))) {\n                attrs.push(['href', this.encodeHrefAttributeValue(noteHREF)])\n            }\n            if (this.quirks === 'pandoc') {\n                attrs.push(['class', 'footnote-ref'])\n                attrs.push(['role', 'doc-noteref'])\n            } else if (this.quirks === 'gfm') {\n                attrs.push(['data-footnote-ref', ''])\n            } else {\n                attrs.push(['epub:type', 'noteref'])\n                attrs.push(['role', 'doc-noteref'])\n            }\n            this.tag('a', attrs, false, out)\n            if (this.quirks === 'pandoc') {\n                out.buf += `<sup>${noteNum}</sup>`\n            } else {\n                out.buf += noteNum\n            }\n            // todo![now, references] the space can't be right!!!! Either NO space, or after the sup?\n            out.buf += '</a>'\n            if (this.quirks !== 'pandoc') {\n                out.buf += '</sup>'\n            }\n        }\n\n        writers['image'] = (i: ir.Inline, out: HTMLOut) => {\n            // todo![now, references] this will fail if the reference occurs before the referent\n            const href = typeof i.referent === 'object'\n                ? '#' + this.elemID4Node(i.referent, out)\n                : i.referent as string\n            if (this.safe && potentiallyUnsafe(href)) {\n                out.buf += '<img src=\"'\n            } else {\n                out.buf += '<img src=\"'\n                out.buf += this.encodeHrefAttributeValue(href)\n            }\n            if (i.body || !(this.quirks === 'pandoc')) {\n                out.buf += '\" alt=\"'\n                this.writeInlineSequence(ir.inlineBodyText(i.body as ir.InlineSequence), out)\n            }\n            if (i.desc) {\n                out.buf += '\" title=\"'\n                out.buf += i.desc\n            }\n            out.buf += '\" />'\n        }\n\n        writers['emph'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<em>'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '</em>'\n        }\n\n        writers['strong'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<strong>'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '</strong>'\n        }\n\n        writers['strike'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<del>'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '</del>'\n        }\n\n        writers['subscript'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<sub>'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '</sub>'\n        }\n\n        writers['superscript'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<sup>'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '</sup>'\n        }\n\n        writers['highlight'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<mark>'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '</mark>'\n        }\n\n        writers['code'] = (i: ir.Inline, out: HTMLOut) => {\n            out.buf += '<code>'\n            out.buf += escapeText(i.body as string)\n            out.buf += '</code>'\n        }\n\n        writers['checkbox'] = (i: ir.Inline, out: HTMLOut) => {\n            if (i.checked === true) {\n                out.buf += this.checkboxChecked\n            } else {\n                out.buf += this.checkboxUnchecked\n            }\n        }\n\n        writers['html_inline'] = (i: ir.Inline, out: HTMLOut) => {\n            if (this.safe) {\n                out.buf += '<!-- raw HTML omitted -->'\n            } else {\n                out.buf += i.body as string\n            }\n        }\n\n        return writers\n    }\n\n}\n\n\nfunction createEmptyAttrList (/* ire: ir.Block */): AttrList {\n    return []\n}\n\nfunction createAttrListWithSourceInfo (ire: ir.Block): AttrList {\n    if (!ire.source) {\n        return []\n    }\n\n    const att: AttrList = []\n    const lineStart = ire.source.lineStart\n    const lineEnd = ire.source.lineEnd\n    if (lineStart != undefined) {\n        att.push(['data-src-line', String(lineStart) + '-' + String(lineEnd)])\n    }\n    return att\n}\n\nfunction genPerColumnCellAttribs (columns: ir.ColumnMeta[] | undefined, gfmQuirk: boolean): (AttrList | undefined)[] {\n    const perColAttribs: (AttrList | undefined)[] = []\n    if (columns) {\n        if (gfmQuirk) {\n            // The `th` `align` attribute has been\n            // [deprecated by current HTML spec](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#deprecated_attributes)\n            // in favor of using the globally supported `style` attribute. GitHub has chosen\n            // not to change its main spec and instead support HTML5 conforming output with\n            // a parser switch: `cmark-gfm  -e table --table-prefer-style-attributes`.\n            for (const c of columns) {\n                switch (c.align) {\n                    case 'L':\n                        perColAttribs.push([['align', 'left']])\n                        break\n                    case 'R':\n                        perColAttribs.push([['align', 'right']])\n                        break\n                    case 'C':\n                        perColAttribs.push([['align', 'center']])\n                        break\n                    default:\n                        perColAttribs.push(undefined)\n                }\n            }\n        } else {\n            for (const c of columns) {\n                switch (c.align) {\n                    case 'L':\n                        perColAttribs.push([['style', 'text-align:left']])\n                        break\n                    case 'R':\n                        perColAttribs.push([['style', 'text-align:right']])\n                        break\n                    case 'C':\n                        perColAttribs.push([['style', 'text-align:center']])\n                        break\n                    default:\n                        perColAttribs.push(undefined)\n                }\n            }\n        }\n    }\n    return perColAttribs\n}\n\nconst reTextSpecial = /[\\n&<>]/g\nexport const pandocRenderPlainText = function (s: string): string {\n    if (reTextSpecial.test(s)) {\n        return s.replace(reTextSpecial, function (s: string): string {\n            switch (s) {\n                case '\\n':\n                    return '<br>'\n                case '&':\n                    return '&amp;'\n                case '<':\n                    return '&lt;'\n                case '>':\n                    return '&gt;'\n                default:\n                    return s\n            }\n        })\n    } else {\n        return s\n    }\n}\n\n\nconst reUnsafeProtocol = /^javascript:|vbscript:|file:|data:/i\nconst reSafeDataProtocol = /^data:image\\/(?:png|gif|jpeg|webp)/i\n\nconst potentiallyUnsafe = function (url: string): boolean {\n    return reUnsafeProtocol.test(url) &&\n           !reSafeDataProtocol.test(url)\n}\n\n\n// todo![now] this duplicates a lot of code from elemID4Node_Default\nfunction elemID4Node_Pandoc (node: ir.Block | ir.Inline,\n                             out: HTMLOut): string | undefined {\n    if (ir.isInline(node)) {\n        throw Error('not implemented')\n    }\n    const stirID = node.id as string\n    if (stirID === undefined) {\n        return undefined\n    }\n    if (out.stirID2htmlID[stirID]) {\n        return out.stirID2htmlID[stirID]\n    }\n    let htmlID\n    if (node.type === 'note') {\n        if (node.subType !== 'footnote') {\n            throw Error('not implemented')\n        }\n        let n = out.notesInReferencedOrder.indexOf(node)\n        if (n === -1) {\n            out.notesInReferencedOrder.push(node)\n            htmlID = 'fn' + out.notesInReferencedOrder.length\n        } else {\n            n++\n            htmlID = 'fn' + n\n        }\n    } else {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id\n        htmlID = stirID.toLowerCase()\n            .replace(/[^\\p{L}\\p{N}\\s_./-]+/gu, '')\n            .trim()\n            .replace(/\\s+/g, '-')\n            .replace(/^[^\\p{L}]+/gu, '')\n            .replace(/^$/, 'section')\n        if (htmlID in out.takenHtmlIDs) {\n            let newID\n            // Pandoc starts with `-1` for dupes\n            for (let i = 1; i < Number.MAX_VALUE; i++) {\n                newID = `${htmlID}-${i}`\n                if (!(newID in out.takenHtmlIDs)) {\n                    htmlID = newID\n                    break\n                }\n            }\n        }\n    }\n\n    out.stirID2htmlID[stirID] = htmlID\n    out.takenHtmlIDs[htmlID] = true\n    return htmlID\n}\n\nfunction elemID4Node_GFM (node: ir.Block | ir.Inline,\n                          out: HTMLOut): string | undefined {\n    if (ir.isInline(node)) {\n        throw Error('not implemented')\n    }\n    const stirID = node.id as string\n    if (stirID === undefined) {\n        return undefined\n    }\n    if (out.stirID2htmlID[stirID]) {\n        return out.stirID2htmlID[stirID]\n    }\n    let htmlID\n    if (node.type === 'note') {\n        if (node.subType !== 'footnote') {\n            throw Error('not implemented')\n        }\n        htmlID = 'fn-' + stirID.slice(1)\n        if (out.notesInReferencedOrder.indexOf(node) === -1) {\n            out.notesInReferencedOrder.push(node)\n        }\n    } else {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id\n        htmlID = stirID.toLowerCase()\n            .replace(/[^\\p{L}\\p{N}\\s_./-]+/gu, '')\n            .trim()\n            .replace(/\\s+/g, '-')\n            .replace(/^$/, 'section')\n        if (htmlID in out.takenHtmlIDs) {\n            let newID\n            // we start dupes with `-2` because having `some_heading` and `some_heading-1` is confusing\n            for (let i = 2; i < Number.MAX_VALUE; i++) {\n                newID = `${htmlID}-${i}`\n                if (!(newID in out.takenHtmlIDs)) {\n                    htmlID = newID\n                    break\n                }\n            }\n        }\n    }\n\n    out.stirID2htmlID[stirID] = htmlID\n    out.takenHtmlIDs[htmlID] = true\n    return htmlID\n}\n\nfunction elemID4Node_Default (node: ir.Block | ir.Inline,\n                              out: HTMLOut): string | undefined {\n    if (ir.isInline(node)) {\n        throw Error('not implemented')\n    }\n    const stirID = node.id as string\n    if (stirID === undefined) {\n        return undefined\n    }\n    if (out.stirID2htmlID[stirID]) {\n        return out.stirID2htmlID[stirID]\n    }\n    let htmlID\n    if (node.type === 'note') {\n        if (node.subType !== 'footnote') {\n            throw Error('not implemented')\n        }\n        let n = out.notesInReferencedOrder.indexOf(node)\n        if (n === -1) {\n            out.notesInReferencedOrder.push(node)\n            htmlID = 'fn:' + out.notesInReferencedOrder.length\n        } else {\n            n++\n            htmlID = 'fn:' + n\n        }\n    } else {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id\n        htmlID = stirID.toLowerCase()\n            .replace(/[^\\p{L}\\p{N}\\s_./-]+/gu, '')\n            .trim()\n            .replace(/\\s+/g, '-')\n            .replace(/^$/, 'section')\n        if (htmlID in out.takenHtmlIDs) {\n            let newID\n            // we start dupes with `-2` because having `some_heading` and `some_heading-1` is confusing\n            for (let i = 2; i < Number.MAX_VALUE; i++) {\n                newID = `${htmlID}-${i}`\n                if (!(newID in out.takenHtmlIDs)) {\n                    htmlID = newID\n                    break\n                }\n            }\n        }\n    }\n\n    out.stirID2htmlID[stirID] = htmlID\n    out.takenHtmlIDs[htmlID] = true\n    return htmlID\n}\n\n\nexport const provider: RenderSTIRProvider = {\n    async configure (config?: Config): Promise<RenderSTIR> {\n        const stir2Html = new Stir2Html(config)\n        return function (stir: STIR) {\n            return stir2Html.render(stir)\n        }\n    }\n}\n\nregisterSTIRRenderer('Stir2Html', provider)\n\nexport default provider\n\n", "import type {RenderSTIR, RenderSTIRProvider} from '../../../renderSTIR.js'\nimport type {Config} from '../../../config.js'\nimport {Stir2Html, HTMLOut} from './stir2html.js'\nimport type * as ir from '../../../../stir/index.js'\nimport type {STIR} from '../../../stir.js'\nimport {registerSTIRRenderer} from '../../../registry.js'\n\nimport Handlebars from 'handlebars'\nimport './handlebars.js'\n\n//  todo[arch, textplain] Should this be recast as a plugin to Stir2Html rather\n//   than as subclass?\n//   - It's not even a very generic solution for interjections, as it relies on\n//     Bootstrap.\n\n// See also https://gohugo.io/getting-started/configuration-markup/#markdown-render-hooks\n\n// Bootstrap 3.4\n//   <div class=\"alert alert-success\" role=\"alert\">...</div>\n//   <div class=\"alert alert-info\" role=\"alert\">...</div>\n//   <div class=\"alert alert-warning\" role=\"alert\">...</div>\n//   <div class=\"alert alert-danger\" role=\"alert\">...</div>\nconst intOpenTmpl = Handlebars.compile('<div class=\"alert alert-{{subType}}\" role=\"alert\">')\nconst intCloseTmpl = Handlebars.compile('</div>')\n\n\nexport class Stir2BootstrapHtml extends Stir2Html {\n\n    constructor (options?: Config) {\n        super(options)\n\n        this.registerBlockWriter('interjection', (b: ir.Block, out: HTMLOut) => {\n            out.buf += intOpenTmpl(b)\n            // todo[template api] this is a total hack. we aren't letting the template handle this.\n            //    See my notes on \"Per my notes on \"open/close templates vs partials\" under the topic\n            //    *STIR Element-level Templates*.\n            if (b.title) {\n                this.tag('h3', [], false, out)\n                this.writeInlineSequence(b.title as ir.InlineSequence, out)\n                this.tag('/h3', [], false, out)\n                this.tag('hr/', [], false, out)\n                out.buf += '\\n'\n            }\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.buf += intCloseTmpl(b)\n            out.buf += '\\n'\n        })\n    }\n}\n\n\n/*   todo![plugin api]   UGLY AND FRAGILE CODE\n\nregistration\n------------\nnot sure about how providers are registered. right now in Textplain/index.js\n- is this fool proof of rend users? Are there legit cases where you would\n constructing a Textplain pipeline without importing index.js?\n - maybe as a failsafe we import the same list somewhere else?\n - do we create a `register-builtins.js` that imports that list?\n   - if we did, for DRY, we'd have index.js import register-built-ins.js\n   - we'd import register-builtins.js in other places as well, to play it\n     safe\n\nPlugin framework / config files\n-------------------------------\nlook at stir2html and Stir2BootstrapHtml\n- duplication\n- fragile: i had to debug so many mistakes. Too much trial and error\n- redundant: we have multiple code paths for installing renderer plugins\n\nPlugin installation\n-------------------\nWe have three ways:\n\norig programmatic:\n1. construct renderer\n2. construct plugin\n3. call plugin.install(render)\n\nconfig file:\n1. pass config file in ctor\n   ctor installs all declared plugins\n\ncurrent config file\n1. load pipeline config via provider.ts\n   - this has a completely different\n */\n\n\nexport const provider: RenderSTIRProvider = {\n    async configure (config?: Config): Promise<RenderSTIR> {\n        const stir2bootstrapHtml = new Stir2BootstrapHtml(config)\n        return function (stir: STIR) {\n            return stir2bootstrapHtml.render(stir)\n        }\n    }\n}\n\nregisterSTIRRenderer('Stir2BootstrapHtml', provider)\n\nexport default provider\n\n\n", "import Handlebars from 'handlebars'\nimport {stirType, toJSON} from '../../../../stir/index.js'\n\nHandlebars.registerHelper('concat', function (a, b) {\n    return a + b\n})\n\nHandlebars.registerHelper('json', function (context, indent) {\n    const st = stirType(context)\n    if (st === 'unknown' || st === undefined ) {\n        return JSON.stringify(context, undefined, indent)\n    }\n    return toJSON(context, indent, true)\n})\n\n//todo[api] consider including some library of handlebar functions\n// e.g.:\n//  - https://www.npmjs.com/package/handlebars-helpers\nHandlebars.registerHelper({\n    eq: (a, b) => a === b,\n    ne: (a, b) => a !== b,\n    lt: (a, b) => a < b,\n    gt: (a, b) => a > b,\n    lte: (a, b) => a <= b,\n    gte: (a, b) => a >= b,\n    and: (a, b) => a && b,\n    or: (a, b) => a || b\n})\n\nHandlebars.registerHelper('match', function (text, pattern) {\n    return new RegExp(pattern).test(text)\n})\n\nHandlebars.registerHelper('match_i', function (text, pattern) {\n    return new RegExp(pattern, 'i').test(text)\n})\n", "import {AbstractOut, AbstractWriter} from './abstractWriter.js'\nimport * as ir from '../../../stir/index.js'\nimport type {STIR} from '../../stir.js'\n\n// todo: https://github.com/commonmark/commonmark.js/issues/83 might be useful for ideas\n\nexport type MarkdownOut = AbstractOut & {\n    prefix: string\n    isFirstInContainer: boolean\n    blockFirstLinePrefix: string | undefined\n}\n\ntype BlockWriter = (b: ir.Block, out: MarkdownOut, flags?: Record<string, unknown>) => void\ntype InlineWriter = (i: ir.Inline, out: MarkdownOut) => void\n\n/**\n * todo: this is a quick non-production-ready implementation:\n *   - lacks tests. there would be failures if any existed as\n *   - doesn't handle many rules, such as for fenced blocks\n *     nested inside fenced blocks, doing escapes when necessary,\n *     etc.\n *   - This is an example of a renderer where the rendering of\n *     each node depends on more context. For example, Setext\n *     headings can't interrupt paragraphs, needing a leading\n *     blank line in such cases. But here we ALWAYS insert a\n *     blank line. In the case of Setext, that might be a good\n *     idea anyway. BUT there might be others where it isn't.\n */\nexport class Stir2Markdown extends AbstractWriter<MarkdownOut> {\n\n    useATX = false\n\n    constructor (options: Record<string, unknown> = {}) {\n        super()\n        this.useATX = options.useATX === true\n        this.initWriters(this.initBlockWriters(), this.initInlineWriters())\n    }\n\n    registerBlockWriter (type: string, bw: BlockWriter): void {\n        this.bWriters[type] = bw.bind(this)\n    }\n\n    registerInlineWriter (type: string, iw: InlineWriter): void {\n        this.iWriters[type] = iw.bind(this)\n    }\n\n    render (stir: STIR): string {\n        const out: MarkdownOut = {\n            buf: '',\n            prefix: '',\n            isFirstInContainer: false,\n            blockFirstLinePrefix: undefined\n        }\n        if (ir.isBlock(stir)) {\n            this.writeBlock(stir, out)\n        } else {\n            this.writeInlineSequence(stir, out)\n        }\n        return out.buf\n    }\n\n    writeText (t: string, out: MarkdownOut): void {\n        out.buf += t\n    }\n\n    writeBlankLine (out: MarkdownOut): void {\n        out.buf += out.prefix.trimEnd()\n        out.buf += '\\n'\n    }\n\n    writeLeadingBlankIfNecessary (out: MarkdownOut): void {\n        if (out.isFirstInContainer) {\n            out.isFirstInContainer = false\n        } else {\n            this.writeBlankLine(out)\n        }\n    }\n\n    writeBlockFirstLinePrefix (out: MarkdownOut): void {\n        this.writeLeadingBlankIfNecessary(out)\n        if (out.blockFirstLinePrefix) {\n            out.buf += out.blockFirstLinePrefix\n            out.blockFirstLinePrefix = undefined\n        } else {\n            out.buf += out.prefix\n        }\n    }\n\n    writePrefixedTextBlock (textBlock: string, out: MarkdownOut): void {\n        if (!textBlock) return\n\n        for (const t of textBlock.split('\\n')) {\n            out.buf += out.prefix\n            out.buf += t\n            out.buf += '\\n'\n        }\n    }\n\n    // hack to remove blank line inside the end of a container\n    //   that results from the current code's putting a blank\n    //   line after every block in a block sequence. Obviously\n    //   we can do better but I got higher priorities at the\n    //   moment!\n    hackRemoveTrailingPrefixedBlankLine (out: MarkdownOut): void {\n        const toRemove = out.prefix + '\\n'\n        if (out.buf.endsWith(toRemove)) {\n            out.buf = out.buf.slice(0, -toRemove.length)\n        }\n    }\n\n\n    initBlockWriters (): { [index: string]: BlockWriter } {\n        const writers: { [index: string]: BlockWriter } = {}\n\n        writers['structured_text_intermediate_representation'] = (b: ir.Block, out: MarkdownOut) => {\n            out.isFirstInContainer = true\n            this.writeBlockSequence(b.body as ir.BlockSequence, out)\n        }\n\n        writers['paragraph'] = (b: ir.Block, out: MarkdownOut) => {\n            this.writeBlockFirstLinePrefix(out)\n            this.writeInlineSequence(b.body as ir.InlineSequence, out)\n            out.buf += '\\n'\n        }\n\n        writers['section'] = (b: ir.Block, out: MarkdownOut) => {\n            out.buf += `\u274C\u274C\u274C\u274C NOT IMPLEMENTED: ${b.type} \u274C\u274C\u274C\u274C\\n`\n        }\n\n        writers['heading'] = (b: ir.Block, out: MarkdownOut) => {\n            this.writeBlockFirstLinePrefix(out)\n            if (!this.useATX && (b.level as number) < 3) {\n                const before = out.buf.length\n                this.writeInlineSequence(b.body as ir.InlineSequence, out)\n                const len = out.buf.length - before\n                out.buf += '\\n'\n                out.buf += out.prefix\n                const ch = b.level === 1 ? '=' : '-'\n                out.buf += ch.repeat(len)\n                out.buf += '\\n'\n            } else {\n                out.buf += '#'.repeat(b.level as number)\n                out.buf += ' '\n                this.writeInlineSequence(b.body as ir.InlineSequence, out)\n                out.buf += '\\n'\n            }\n        }\n\n        writers['block'] = (b: ir.Block, out: MarkdownOut) => {\n            out.buf += `\u274C\u274C\u274C\u274C NOT IMPLEMENTED: ${b.type} \u274C\u274C\u274C\u274C\\n`\n            // this.writeIndentedLine(`BLOCK (class=${b.class}):`)\n            // out.depth++\n            // this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence)\n            // out.depth--\n        }\n\n        writers['code_block'] = (b: ir.Block, out: MarkdownOut) => {\n            this.writeBlockFirstLinePrefix(out)\n            out.buf += '```'\n            if (b.info) {\n                out.buf += b.info\n            }\n            out.buf += '\\n'\n            this.writePrefixedTextBlock(b.body as string, out)\n            out.buf += out.prefix\n            out.buf += '```\\n'\n        }\n\n        writers['verse'] = (b: ir.Block, out: MarkdownOut) => {\n            out.buf += `\u274C\u274C\u274C\u274C NOT IMPLEMENTED: ${b.type} \u274C\u274C\u274C\u274C\\n`\n        }\n\n        writers['thematic_break'] = (b: ir.Block, out: MarkdownOut) => {\n            this.writeBlockFirstLinePrefix(out)\n            out.buf += '---\\n'\n        }\n\n        writers['block_quote'] = (b: ir.Block, out: MarkdownOut) => {\n            this.writeLeadingBlankIfNecessary(out)\n            const basePrefix = out.prefix\n            out.prefix += '> '\n            out.isFirstInContainer = true\n            this.writeBlockSequence(b.body as ir.BlockSequence, out)\n            this.hackRemoveTrailingPrefixedBlankLine(out)\n            out.prefix = basePrefix\n        }\n\n\n        //todo[stir] once we implement the IR's type hierarchy and support for\n        //  default rendering of custom nodes, then implement the default\n        //  stir2markdown rendering of such nodes. Could be one of these (TBD):\n        //    - an \"unsupported by Markdown\" message embedded in the Markdown\n        //    - throw an Error / render() returns an error object\n        //    - render as embedded HTML\n        //    - if two or of the above are legitimate solutions, then a\n        //      switch on the renderer to let the user decide.\n        writers['interjection'] = (b: ir.Block, out: MarkdownOut) => {\n            out.buf += `\u274C\u274C\u274C\u274C NOT IMPLEMENTED: ${b.type} \u274C\u274C\u274C\u274C\\n`\n            // this.writeIndentedLine(`INTERJECTION (subtype=${b.subType}):`)\n            // out.depth++\n            // this.writeInlineSequence(b.title as ir.InlineSequence)\n            // this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence)\n            // out.depth--\n        }\n\n        writers['list'] = (b: ir.Block, out: MarkdownOut) => {\n            this.writeLeadingBlankIfNecessary(out)\n            const compact = b.hints['commonmark.list.tight'] === true\n            const flags = {\n                ordered: b.listOrdered,\n                num: b.listStartNum ? b.listStartNum : 1,\n                compact: compact\n            }\n            const itemWriter = this.bWriters.list_item\n            for (let i = 0; i < (b.body as ir.BlockSequence).length; i++) {\n                const item = (b.body as ir.BlockSequence)[i]\n                if (i !== 0 && !compact) {\n                    this.writeBlankLine(out)\n                }\n                itemWriter(item, out, flags)\n                flags.num++ // ignored for unordered list, but keeping impl simple for now\n            }\n        }\n\n        writers['list_item'] = (b: ir.Block, out: MarkdownOut, flags?) => {\n            const marker = flags?.ordered ? flags.num + '. ' : '- '\n            const basePrefix = out.prefix\n            out.blockFirstLinePrefix = basePrefix + marker\n            out.prefix = basePrefix + ' '.repeat(marker.length)\n\n            if (b.body === undefined) {\n                // empty item\n                out.buf += '\\n'\n            } else if (ir.isBlockSequence(b.body)) {\n                const bodySequence = b.body as ir.BlockSequence\n                if (flags?.compact) {\n                    for (let i = 0; i < bodySequence.length; i++) {\n                        out.isFirstInContainer = true //todo[hack]\n                        const bodyItem = bodySequence[i]\n                        if (bodyItem.type === 'paragraph') {\n                            this.writeBlockFirstLinePrefix(out)\n                            this.writeInlineSequence(bodyItem.body as ir.InlineSequence, out)\n                            out.buf += '\\n'\n                        } else {\n                            this.writeBlock(bodyItem, out)\n                        }\n                    }\n                } else {\n                    out.isFirstInContainer = true\n                    this.writeBlockSequence(bodySequence, out)\n                }\n            } else {\n                throw new Error(`invalid list item body: ${b.body}`)\n            }\n\n            out.prefix = basePrefix\n        }\n\n        // todo[RepoDoc] Create stir2Gracedown: \"stir2Gracedown will\n        //   output standard CommonMark when it can. When it can't, such as when\n        //   the input contains a table, it will output Gracedown's gracefully\n        //   degrading form, which is 100% legit CommonMark, will render quite\n        //   legibly on legacy tools, but can still be rendered in rich ways by\n        //   modern tools.\"\n        //   .\n        //   E.g. for table it will render a graceful table (probably indented)\n        writers['table'] = (b: ir.Block, out: MarkdownOut) => {\n            out.buf += `\u274C\u274C\u274C\u274C NOT IMPLEMENTED: ${b.type} \u274C\u274C\u274C\u274C\\n`\n            // this.writeIndentedLine('TABLE:')\n            // out.depth++\n            // const table = b.body as ir.Table\n            // this.writeIndentedLine(JSON.stringify(table.headRows))\n            // this.writeIndentedLine(JSON.stringify(table.rows))\n            // out.depth--\n        }\n\n        writers['cell'] = (b: ir.Block, out: MarkdownOut) => {\n            out.buf += `\u274C\u274C\u274C\u274C NOT IMPLEMENTED: ${b.type} \u274C\u274C\u274C\u274C\\n`\n        }\n\n        writers['html_block'] = (b: ir.Block, out: MarkdownOut) => {\n            out.buf += `\u274C\u274C\u274C\u274C NOT IMPLEMENTED: ${b.type} \u274C\u274C\u274C\u274C\\n`\n            // this.writeIndentedLine('HTML_BLOCK:')\n            // out.depth++\n            // this.writeIndentedTextBlock(b.body as string)\n            // out.depth--\n        }\n\n        return writers\n    }\n\n\n    initInlineWriters (): { [index: string]: InlineWriter } {\n        const writers: { [index: string]: InlineWriter } = {}\n\n        writers['linebreak'] = (i: ir.Inline, out: MarkdownOut) => {\n            out.buf += ' \\\\\\n'\n            out.buf += out.prefix\n        }\n\n        // todo: should detect multiple occurrences of the same link\n        //  and generate link ref defs for those.\n        writers['xref'] = (i: ir.Inline, out: MarkdownOut) => {\n            out.buf += '['\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += `](${i.referent})`\n        }\n\n        writers['image'] = (i: ir.Inline, out: MarkdownOut) => {\n            out.buf += '!['\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += `](${i.referent})`\n        }\n\n        writers['emph'] = (i: ir.Inline, out: MarkdownOut) => {\n            out.buf += '*'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '*'\n        }\n\n        writers['strong'] = (i: ir.Inline, out: MarkdownOut) => {\n            out.buf += '**'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '**'\n        }\n\n        writers['code'] = (i: ir.Inline, out: MarkdownOut) => {\n            out.buf += '`'\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.buf += '`'\n        }\n\n        writers['html_inline'] = (i: ir.Inline, out: MarkdownOut) => {\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n        }\n\n        return writers\n    }\n\n}\n", "import {AbstractOut, AbstractWriter} from './abstractWriter.js'\nimport * as ir from '../../../stir/index.js'\nimport type {STIR} from '../../stir.js'\n\ntype StringOut = AbstractOut & { depth: number }\n\ntype BlockWriter = (b: ir.Block, out: StringOut, flags?: Record<string, unknown>) => void\ntype InlineWriter = (i: ir.Inline, out: StringOut) => void\n\n/**\n * A {Renderer} that outputs the *Structured Text Intermediate Representation*\n * as-is in a simple, hierarchically indented format.\n */\nexport class Stir2String extends AbstractWriter<StringOut> {\n\n    constructor () {\n        super()\n        this.initWriters(this.initBlockWriters(), this.initInlineWriters())\n    }\n\n    render (stir: STIR): string {\n        const out: StringOut = {buf: '', depth: 0}\n        if (ir.isBlock(stir)) {\n            this.writeBlock(stir, out)\n        } else {\n            this.writeInlineSequence(stir, out)\n        }\n        return out.buf\n    }\n\n    writeIndent (out: StringOut) {\n        out.buf += '    '.repeat(out.depth)\n    }\n\n    writeText (t: string, out: StringOut): void {\n        this.writeIndent(out)\n        out.buf += '\"'\n        out.buf += t\n        out.buf += '\"\\n'\n    }\n\n    writeIndentedLine (line: string | null, out: StringOut) { //todo[stir] must accept null?\n        this.writeIndent(out)\n        out.buf += line\n        out.buf += '\\n'\n    }\n\n    writeIndentedTextBlock (textBlock: string, out: StringOut) {\n        if (!textBlock) return\n\n        for (const t of textBlock.split('\\n')) {\n            this.writeIndentedLine('|' + t, out)\n        }\n    }\n\n\n    initBlockWriters (): { [index: string]: BlockWriter } {\n        const writers: { [index: string]: BlockWriter } = {}\n\n        writers['structured_text_intermediate_representation'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine('STIR:', out)\n            out.depth++\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['paragraph'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine('PARA:', out)\n            out.depth++\n            this.writeInlineSequence(b.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['section'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`SECTION \"${ir.inlineBodyText(b.title as ir.InlineSequence)}\" (level ${b.level})${b.class ? ' (class=' + b.class + ')' : ''}:`, out)\n            out.depth++\n            this.writeBlockSequence(b.body as ir.BlockSequence, out)\n            out.depth--\n        }\n\n        writers['heading'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`HEADING ${b.level}:`, out)\n            out.depth++\n            this.writeInlineSequence(b.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['block'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`BLOCK (class=${b.class}):`, out)\n            out.depth++\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['pre'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`PRE:`, out)\n            out.depth++\n            this.writeSequence(b.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['code_block'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`CODE_BLOCK (info=${b.info}):`, out)\n            out.depth++\n            this.writeIndentedTextBlock(b.body as string, out)\n            out.depth--\n        }\n\n        writers['verse'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`VERSE:`, out)\n            out.depth++\n            this.writeIndentedTextBlock(b.body as string, out)\n            out.depth--\n        }\n\n        writers['thematic_break'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine('THEMATIC_BREAK', out)\n        }\n\n        writers['block_quote'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine('BLOCK_QUOTE:', out)\n            out.depth++\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.depth--\n        }\n\n        //! not in CommonMark, introduced by PTSS IR\n        writers['interjection'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`INTERJECTION (subtype=${b.subType}):`, out)\n            out.depth++\n            this.writeInlineSequence(b.title as ir.InlineSequence, out)\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['list'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine(`LIST (${b.listOrdered ? 'ordered' : 'unordered'}` +\n                                   (b.listOrdered ? ` start=${b.listStartNum}, buf, indent):` : '):'), out)\n            out.depth++\n            const itemWriter = this.bWriters.list_item\n            const flags = {compact: b.hints['commonmark.list.tight'] === true}\n            for (const item of (b.body as ir.BlockSequence)) {\n                itemWriter(item, out, flags)\n            }\n            out.depth--\n        }\n\n        writers['list_item'] = (b: ir.Block, out: StringOut, flags?) => {\n            this.writeIndentedLine('LIST_ITEM:', out)\n            if (b.body === undefined) {\n                // empty item\n                return\n            } else if (ir.isBlockSequence(b.body)) {\n                out.depth++\n                const bodySequence = b.body as ir.BlockSequence\n                if (flags?.compact) {\n                    for (let i = 0; i < bodySequence.length; i++) {\n                        const bodyItem = bodySequence[i]\n                        if (bodyItem.type === 'paragraph') {\n                            this.writeInlineSequence(bodyItem.body as ir.InlineSequence, out)\n                        } else {\n                            this.writeBlock(bodyItem, out)\n                        }\n                    }\n                } else {\n                    this.writeBlockSequence(bodySequence, out)\n                }\n                out.depth--\n            } else {\n                throw new Error(`invalid list item body: ${b.body}`)\n            }\n        }\n\n        writers['table'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine('TABLE:', out)\n            out.depth++\n            const headRows = b.head as ir.BlockTable\n            if (headRows) {\n                for (const headRow of headRows) {\n                    this.writeIndentedLine('HEADER:', out)\n                    out.depth++\n                    for (let i = 0; i < headRow.length; i++) {\n                        this.writeBlock(headRow[i], out)\n                    }\n                    out.depth--\n                }\n            }\n            const bodyRows = b.body as ir.BlockTable\n            if (bodyRows !== undefined) {\n                for (const headRow of bodyRows) {\n                    this.writeIndentedLine('ROW:', out)\n                    out.depth++\n                    for (let i = 0; i < headRow.length; i++) {\n                        const cell = headRow[i]\n                        this.writeBlock(cell, out)\n                    }\n                    out.depth--\n                }\n            }\n            out.depth--\n        }\n\n        writers['cell'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine('CELL:', out)\n            out.depth++\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['note'] = (b: ir.Block, out: StringOut) => {\n            //todo![now referents] since we aren't attaching the plain text referent name\n            //  to the node, we can't print it here. If we change our mind as per a\n            //  design note, then update below so it writes it out.\n            this.writeIndentedLine(`NOTE (subtype=${b.subType}, orig ref name=${b.ptRefNameDELETE_ME}):`, out)\n            out.depth++\n            this.writeSequence(b.body as ir.BlockSequence | ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['html_block'] = (b: ir.Block, out: StringOut) => {\n            this.writeIndentedLine('HTML_BLOCK:', out)\n            out.depth++\n            this.writeIndentedTextBlock(b.body as string, out)\n            out.depth--\n        }\n\n        return writers\n    }\n\n    initInlineWriters (): { [index: string]: InlineWriter } {\n        const writers: { [index: string]: InlineWriter } = {}\n\n        writers['linebreak'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += '<LINEBREAK>'\n            out.buf += '\\n'\n        }\n\n        writers['xref'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += `XREF ${i.referent} \"${i.desc}\":`\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['note_ref'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += `NOTE_REF ${i.referent} \"${i.desc}\":`\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['image'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += `IMAGE ${i.referent} \"${i.desc}\":`\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['emph'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'EM:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['strong'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'STRONG:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['strike'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'STRIKEOUT:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['subscript'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'SUBSCRIPT:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['superscript'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'SUPERSCRIPT:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['highlight'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'HIGHLIGHT:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['code'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'CODE:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        writers['checkbox'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            if (i.checked === true) {\n                out.buf += '<CHECKBOX (checked)>'\n            } else {\n                out.buf += '<CHECKBOX>'\n            }\n            out.buf += '\\n'\n        }\n\n        writers['html_inline'] = (i: ir.Inline, out: StringOut) => {\n            this.writeIndent(out)\n            out.buf += 'HTML_INLINE:'\n            out.buf += '\\n'\n            out.depth++\n            this.writeInlineSequence(i.body as ir.InlineSequence, out)\n            out.depth--\n        }\n\n        return writers\n    }\n\n}\n", "import type {Provider} from './provider.js'\nimport type {STIR} from './stir.js'\nimport type {Config} from './config.js'\nimport {lookupPipe} from './registry.js'\n\n// todo[arch] note how unlike render, we don't use classes, but a closure.\n//    This functional approach definitely is well suited for transforms, but\n//    perhaps we should do the same for render, either because it is better,\n//    or for consistency (less confusing for users), or both.\n\n/**\n * Interface for a Pipe operator in a STIR processing pipeline.\n *\n * IMPORTANT\n * =========\n * Modifies the input for efficiency reasons; rarely is the original\n * input needed once a transform is applied.\n *\n * If the original input is needed unmodified, it is the responsibility of the\n * caller to first make a *deep* copy.\n */\nexport type Pipe = (stir: STIR) => void\n\nexport type PipeProvider = Provider<Pipe>\n\nexport async function configPipeProvider (config: Config): Promise<Pipe | undefined> {\n    const providerName = config.requiredValue('provider')\n\n    // command-line on/off switches\n    const onSwitch = config.value('onSwitch')\n    if (onSwitch !== undefined) {\n        if (process.argv.includes(onSwitch)) {\n            console.info(`enabled pipe: ${providerName}`)\n        } else {\n            return undefined\n        }\n    }\n    const offSwitch = config.value('offSwitch')\n    if (offSwitch !== undefined && process.argv.includes(offSwitch)) {\n        console.info(`disabled pipe: ${providerName}`)\n        return undefined\n    }\n\n    console.group(`configure pipe: ${providerName}`)\n    const provider = lookupPipe(providerName)\n    if (provider === undefined || provider.configure === undefined) {\n        throw new Error(`invalid pipe: ${providerName}`)\n    }\n    const providerConfig = config.subConfig('config')\n    const pipe = await provider.configure(providerConfig)\n    console.groupEnd()\n    //todo[perf] does this indirection being added to this provider as well as\n    // all the others, *just* so that we can wrap the calls to each with console\n    // logging get stripped out in the dist build? If not what is the perf\n    // impact? If significant, how do we remove it for dist builds?\n    return (stir: STIR) => {\n        console.debug(`\u2652\uFE0F PIPE ${providerName} ${providerConfig ? JSON.stringify(providerConfig.data()) : ''}`)\n        console.group()\n        pipe(stir)\n        console.groupEnd()\n    }\n}\n", "import type {Pipe, PipeProvider} from '../pipe.js'\nimport {registerPipe} from '../registry.js'\nimport type {STIR} from '../stir.js'\nimport * as ir from '../../stir/index.js'\n\n/**\n * NOTE: HTML5 has abandoned this. See notes on \"section hierarchy\".\n *\n * Converts headings to sections by interpreting them as implicit sections using\n * the [HTML5 And The Document Outlining Algorithm](https://www.smashingmagazine.com/2011/08/html5-and-the-document-outlining-algorithm/)\n *\n * The algorithm should match the well respected: [HTML5 Outliner](https://gsnedders.html5.org/outliner/) tool.\n *\n * into more modern and accessible. See also\n *  - [Semantic HTML Tutorial](https://www.internetingishard.com/html-and-css/semantic-html/)\n *  - [Structural Semantics: The Importance Of HTML5 Sectioning Elements](https://www.smashingmagazine.com/2013/01/the-importance-of-sections/)\n *\n * ONLY THE DIRECT CHILDREN OF THE ROOT NODE PASSED IN WILL BE RESTRUCTURED\n * ------------------------------------------------------------------------\n * This is the correct behavior iff all of the following are true:\n *    - section hierarchies have a scope and do not cross scope boundaries.\n *      For example, the content within a block quote represents a separate\n *      \"embedded\" structured text context, with its own independent outline.\n *    - The node passed into this function represents the root of such as\n *      sectioning context or \"sectioning root\". e.g. the root `document`\n *      node, or a `blockquote` node.\n *    - There are in fact no nesting contexts (e.g. block quote, list item)\n *      currently which are not sectioning roots *other than* `section` itself.\n *    - The sectioning root passed has no sections, and is being passed in to\n *      generate them from \"flat\" headings.\n *\n * Given the above rules being met, this function simply needs to iterate\n * over the the direct `body` children of the passed in sectioning root,\n * and transform the flat structure into a hierarchical one based on\n * headings at the root and their relative heading level values.\n */\nconst transform: Pipe = (root: STIR) => {\n    if (!ir.isBlock(root)) {\n        return\n    }\n    if (root.hasSections()) {\n        return\n    }\n\n    // todo![now, references] if we define a TS type for the root STIR node,\n    //   we can avoid having to do type coercion all over the code.\n    const exports: ir.Exports = root.exports as ir.Exports || {}\n\n    // detach current body from root and it give a blank one\n    const origBody = root.body\n    if (origBody === undefined || !ir.isBlockSequence(origBody)) {\n        return\n    }\n    root.body = undefined\n\n    console.debug(`converting headings to sections...`)\n\n    // we will treat the root itself as a section regardless of its type\n    let curSection: ir.Block = root\n    const sectionStack: ir.Block[] = []\n\n    // we don't need recursion because all headings are a the root\n    // todo[spec] is this *always* true? Will there never be a container that\n    //   isn't a sectioning root that contains headings? Will there ever be\n    //   a container besides `section` that isn't a sectioning root?\n    for (const b of origBody) {\n        if (b.type === 'heading') {\n            // create section from heading\n            const newSection = new ir.Block('section')\n            // todo[spec]: Is copying over all props like this safe?\n            //  - WE KNOW what fields *make* a `heading` (they're part of the\n            //    built-in definition), so we know exactly what to exclude\n            //  - all other fields at worst are extraneous. But if a user\n            //    defined custom data for a heading, it most likely still\n            //    applies to the `section`. Why wouldn't it?\n            //    - The only possibility is that they defined a custom subtype\n            //      of `heading`, with props that don't belong in `section`.\n            //      - At worst it's extraneous.\n            //      - MOST IMPORTANT: if they are doing a subclass of `heading`\n            //        why would they use this pipe?!?! They should change their\n            //        def to `section` from the get-go.\n            //  - Positive Unintended Consequences: the Section has the Source\n            //    for the heading, with line numbers as well as name of style of\n            //    the source element (as opposed to a style element, since\n            //    there was none. This is useful and accurate, since the source\n            //    *was* an *ATX Heading* or *Setext Heading* on line 27.\n            for (const k in b) {\n                if (k !== 'type' && k !== 'body') {\n                    newSection[k] = b[k]\n                }\n            }\n            newSection.title = b.body as ir.InlineSequence\n            newSection.level = b.level\n\n            // todo![now, references] if `exports` were a dynamically generated\n            //  property rather than a static one, always reflecting the current\n            //  state of the STIR, we wouldn't need to remember to do the\n            //  following when converting headings to sections. This also\n            //  violates Codd's notion of \"normal form\"; even though this isn't\n            //  an RDBMS the principle is arguably a good one.\n            if (exports[b.id as string]) {\n                exports[b.id as string] = {title: newSection.title}\n            }\n\n            if (curSection === root || (curSection.level as number) < (newSection.level as number)) {\n                // is child of curSection\n                curSection.appendToBody(newSection)\n                sectionStack.push(curSection)\n                curSection = newSection\n            } else if ((curSection.level as number) === (newSection.level as number)) {\n                // is sibling of curSection\n                curSection = sectionStack.pop() as ir.Block\n                curSection.appendToBody(newSection)\n                sectionStack.push(curSection)\n                curSection = newSection\n            } else {\n                // is sibling of ancestor of curSection\n                do {\n                    curSection = sectionStack.pop() as ir.Block\n                } while (curSection !== root && (curSection.level as number) >= (newSection.level as number))\n                curSection.appendToBody(newSection)\n                sectionStack.push(curSection)\n                curSection = newSection\n            }\n        } else {\n            curSection.appendToBody(b)\n        }\n\n    }\n\n    return\n}\n\nasync function configure (): Promise<Pipe> {\n    return transform\n}\n\nconst provider: PipeProvider = {\n    async configure (/*config?: Config*/): Promise<Pipe> {\n        return configure()\n    }\n}\n\nregisterPipe('ConvertHeadingsToSections', provider)\n\nexport default provider\n\n", "import type {PipeProvider, Pipe} from '../pipe.js'\nimport type {Config} from '../config.js'\nimport {registerPipe} from '../registry.js'\nimport type {STIR} from '../stir.js'\nimport * as ir from '../../stir/index.js'\nimport {normalizeName} from '../../ptss-parser/ptss/index.js'\n\n\n// todo![now, references] test this by verifying that:\n//   - for an input with only H1 headings, the exports for\n//     a CommonMark.ptss + ExportAllSectionsOrHeadings === RubyRhod.ptss\n//   - for one with subheadings:\n//     CommonMark.ptss + ConvertHeadingsToSections + ExportAllSectionsOrHeadings === RubyRhod\n\nasync function configure (config?: Config): Promise<Pipe> {\n    const transform: Pipe = (stir: STIR) => {\n        if (!ir.isBlock(stir)) {\n            return\n        }\n        const sections = stir.hasSections()\n        const targetType = sections ? 'section' : 'heading'\n        const field = sections ? 'title' : 'body'\n\n        console.debug(`exporting all ${targetType}s...`)\n        console.group()\n\n        const exports = stir.exported as ir.Exports || {}\n        if (stir.exported === undefined) {\n            stir.exports = exports\n        }\n\n        stir.traverseBodyTree(function (node) {\n            if (node.isSectioningRoot()) {\n                return 1\n            }\n            if (node.type === targetType) {\n                const title = node[field] as ir.InlineSequence\n                // todo![now, references, spec] had to remember to call\n                //   `normalizeName`. Not DRY.\n                const name = normalizeName(ir.inlineBodyText(title))\n\n                const {path, sectioningRoot} = ir.idPath(node.parent)\n                if (sectioningRoot !== undefined) {\n                    // we don't export things inside a sectioning root.\n                    // though this condition should never happen since we don't\n                    // walk into sectioning roots in the first place (first line\n                    // of this visitor callback above).\n                    return 1\n                }\n                const id = path ? path + '/' + name : name\n                // todo: what about collision with unexported iD?\n                if (id in exports) {\n                    // todo![now, references, error] \uD83C\uDFC8 user can select first wins + warn or ERROR.\n                    console.warn(`STIR id path collision for \"${id}\".`)\n                    return 1\n                }\n\n                node.id = id\n                exports[id] = {title: title}\n                console.debug(`${field} exported as \"${node.id}\"`)\n            }\n            return 0\n        })\n        console.groupEnd()\n    }\n\n    return transform\n}\n\nconst provider: PipeProvider = {\n    async configure (config?: Config): Promise<Pipe> {\n        return configure(config)\n    }\n}\n\nregisterPipe('ExportAllSectionsOrHeadings', provider)\n\nexport default provider\n", "import type {Assembly} from './assembly.js'\nimport type {Subfolder} from './subfolder.js'\nimport type {File} from './file.js'\nimport type {Config} from '../config.js'\nimport type {AssemblyPipeline} from '../pipeline.js'\n\n\n//todo[perf] some method implementations of of the various Node types\n// use recursion. Can easily replace with non-recursive versions, no?\n\n\nexport type Node = Assembly | Subfolder | File\nexport type Folder = Assembly | Subfolder\n\nexport interface NodeInterface {\n    /**\n     * File/folder name.\n     * The last element in the path to this node within the assembly.\n     */\n    name: string\n    parent: Folder | undefined\n\n    // todo[stir] TITLE and other metadata needs to come out of the STIR:\n    // - It's needed for standalone file/input rendering, not just text assembly\n    // - Title should be determined by the content, per the stylesheet's design\n    // - When a format doesn't support such metadata, we will follow TextAssembly\n    //   defined conventions/heuristics for determining a title (see TA spec)\n    //   - This might be implemented as a pipe. See Textplain/textassembly\n    //     Pipeline architecture doc for design discussion.\n    //\n    // todo[textassembly] there should be two kinds of titles:\n    // - contextual title (aka short title): the title that makes sense\n    //   in context, usually the simple name of the file, e.g.\n    //   \"System Architecture\" or \"Chapter Two\".\n    // - acontextual title (aka long or full title): e.g.\n    //    \"TextPlain System Architecture\" or \"The Good Lord Bird, Chapter Two\".\n    //    - this could be supplied by the content metadata\n    //    - if not, it *might* be included in the conventions/heuristics defined\n    //      by Text Assembly spec to construct a default one.\n    //    - or we could leave it to the templates to construct one, as the\n    //      template (1) has visibility to the context, (2) represents the page-\n    //      specific design choices that would govern what a long title should\n    //      look like or include and (3) has everything needed to construct such\n    //      a title and insert it the HTML header or what-not.\n    //    - In the case that OTHER pages need make reference to a page's long\n    //      title, then we might want to include it in the TextAssembly spec,\n    //      OR leave it to the user to insert a pipe that constructs a\n    //      long title earlier in the pipeline so that it is accessible to other\n    //      pages.\n    //    - Remember, whatever solution is chosen, it should work reasonably\n    //      for the ZERO CONFIG case.\n    // For Folder, should come from opening content\n    //    - should interface define this as a method call, so that for\n    //      folder it retrieves it from opening content?\n    title: string | undefined\n\n    // whether a resource should appear in TOC or other indexes.\n    // For example:\n    //   - structured text file that renders to its own page in the\n    //     output assembly\n    //   - NOT a structured text file that is meant to be embedded\n    //     in other files, not render as a standalone page\n    //   - NOT an image that is embedded in in a page\n    //   - an image in a folder that is is meant to render as an image\n    //     gallery or slideshow, without need of any containing text\n    //     container/document. Such an image behaves like a structured\n    //     text file. There may even be images that support outbound links\n    //     that need to be resolved by just like for text pages.\n    // How a TextAssembly specifies this is TBD per the TextAssembly spec.\n    //\n    // todo[textassembly doc] For example, it could be that as follows:\n    //  - structured text file: default TRUE\n    //  - structured text file whose name is prefixed with an underscore: FALSE\n    //  - image files: default FALSE\n    //  - image files prefixed with +: TRUE\n    isIndexable: boolean\n\n    /**\n     * This field exists purely for use by renderer implementations as they\n     * see fit to map this Node to one or more corresponding output nodes, each\n     * of which may or may not be its own output file node as this Node is.\n     *\n     * Or as put in the Pipeline Architecture docs:\n     * > \uD83D\uDEA9 **There is not necessarily a one-to-one mapping of input to output.**\n     * > For example, 20 files on the input side might aggregate to a single\n     * > file in the output. Or vice-versa, a single input file might multiplex\n     * > to two or more output files. And both can occur: 20 files map to a\n     * > single logical output, which is then multiplexed to multiple physical\n     * > outputs.\n     *\n     * Current Implementation Plan\n     * ===========================\n     * **If the value is a string**, it means that this text assembly node has\n     * a simple 1:1 mapping to an output node, and its value will be the name on\n     * the output side. It likewise implies the same is true for all its parent\n     * nodes up the line, such that the path structure of the output parallels\n     * the path structure of the input.\n     *\n     * > Since such a 1:1 corresponding between Text Assembly input files and\n     * > AssemblyRendering output files will be the most common scenario, this\n     * > field is thus optimized for this case (by being a simple string needing\n     * > no interpretation when used for output). It is optimized both in terms of\n     * > simplicity and efficiency, in terms of machine memory and CPU, as well as\n     * > the meat CPU (my head).\n     *\n     * **If the value is an `OutNode` data structure**, it means the Node does\n     * not have a simple 1:1 mapping to the output. The data structure will\n     * describe it.\n     *\n     * 'OutNode` data structure\n     * ------------------------\n     * if the value of `outNode` is not a `string` but an `OutNode` data structure,\n     * it will mean that this node's output either does not follow the same path\n     * structure as its input, and may not even have its own filesystem node, but\n     * be aggregated into its parent's output node. The `OutNode` object will\n     * contain all the necessary data for whatever the details are.\n     *\n     * - we will develop this data structure as we implement rendering scenarios.\n     */\n    //todo[pipeline] This field is not meant for use outside the renderer. i.e.\n    // earlier stages in the pipeline CANNOT have any dependencies on this.\n    // Is there a way to signify this? Perhaps move this field to a special\n    // 'RenderNode' subtype that only the renderer sees?\n    //todo[template api] should the Template API expose this?\n    outNode: string /*| OutNode */ | undefined\n\n    isFile (): this is File\n    isFolder (): this is Folder\n    isAssemblyRoot (): this is Assembly\n\n    assemblyRoot (crossAssemblyBoundary?: boolean): Assembly\n\n    /**\n     * //! we don't need to construct assembly paths, but RESOLVE them\n     *     when referenced in the source.\n     *     WE ONLY NEED THIS FOR DEBUG, yeah?\n     *\n     * this node's path within local assembly\n     */\n    innerAssemblyPath (): string\n\n    /**\n     * //! we don't need to construct assembly paths, but RESOLVE them\n     *    when referenced in the source.\n     *    WE ONLY NEED THIS FOR DEBUG, yeah?\n     *\n     * This node's path from the outermost assembly root.\n     */\n    outerAssemblyPath (): string\n\n    /**\n     * //! we don't need to construct assembly paths, but RESOLVE them\n     *    when referenced in the source.\n     *    WE ONLY NEED THIS FOR DEBUG, yeah?\n     *\n     * This node's cross-assembly path, externally linkable.\n     */\n    crossAssemblyPath (): string\n\n    /**\n     * resolves the path to a Node in the assembly. Resolves both\n     * absolute and relative paths within the (inner) assembly,\n     * as well as cross-assembly paths.\n     * @param {string} path\n     */\n    resolvePath (path: string): Node | undefined\n\n    /**\n     * searches up the tree for the first File with the given name.\n     * Specifically, it searches the immediate content of each folder up the tree.\n     * If `this` is a Folder, the search starts with its content.\n     */\n    searchUpForFile (name: string, crossAssemblyBoundary?: boolean): File | undefined\n\n    /**\n     * searches up the tree for the first node with a value for the named property\n     */\n    searchUpForProperty (property: string, crossAssemblyBoundary?: boolean): { node: Node, value: unknown } | undefined\n}\n\nexport interface FolderInterface extends NodeInterface {\n    //! initially undefined until opening content is determined\n    // todo[api] update docs: \"opening content' is better than \"opening page\"\n    openingContent: File | undefined\n\n    //! initially includes the opening content File until it is determined\n    //  to be such and moved to openingContent property\n    readonly content: Node[]\n    hasIncludedContent: boolean\n\n    sortSpec: string[] | undefined\n\n    // a config can be defined at any folder node. Any specified settings\n    // override those settings otherwise inherited from up tree.\n    textplainConfig: Config | undefined\n\n    // a parse/render configuration that applies to this folder\n    //  on down, unless overridden further down.\n    //\n    // todo[arch] having this here is maybe a temp hack\n    //   because of this we have assembly render specific\n    //   data in what should be a pure representation of\n    //   a source TextAssembly.\n    //   The alternative is to move this into a separate\n    //   index, like a Trie, so that we can match pipeline\n    //   rigs by comparing their path to the path of the\n    //   file being rendered, and choosing the pipeline\n    //   rig at the longest matching path.\n    //   BUT, THE ARGUMENT TO KEEP IT HERE is practical.\n    //   I think this solution uses the least memory and\n    //   CPU. Also this is internal, not part of an API.\n    //   Finally loading a TextAssembly structure has but\n    //   one purpose: rendering the assembly. So if this\n    //   is internal, why is my nose so fussy?\n    pipeline: AssemblyPipeline | undefined\n}\n\n/**\n * Resolves any assembly path.\n *\n * todo[perf] not using an index on each node, trading CPU for memory. I think\n * cross-refs are relatively rare, so a good tradeoff. An index on each Node\n * will be expensive and memory wasteful. AN ALTERNATIVE is to build a TRIE\n * index for each subassembly, or even a global TRIE index that somehow supports\n * subassembly and cross-assembly paths.\n *\n * todo[test] unit tests\n *\n * @internal\n */\n// todo![links] how does this compare to my resolve method in MemFS?\nexport function resolvePath (path: string, context: Node): Node | undefined {\n    path = path.trim()\n    if (path === '') return undefined\n\n    let from: Node | undefined\n    if (path.startsWith('/')) {\n        // if path is an absolute path\n        if (path === '/') return context.assemblyRoot()\n        from = context.assemblyRoot()\n        path = path.slice(1)\n    } else {\n        // todo![perf] switch to precompiled regex\n        const match = path.match(/^{(\\w*)}\\/(.*)/)\n        if (match !== null) {\n            // if path is a cross-assembly path\n            from = context.assemblyRoot(true).assemblyForID(match[1])\n            if (from === undefined) {\n                return undefined\n            }\n            path = match[2]\n            if (path === '') return from\n        } else {\n            // else a relative path, relative to context\n            from = context\n        }\n    }\n\n    let node = from.isFolder() ? from : from.parent\n    const isExplicitlyFolderPath = path.endsWith('/')\n    const segments = isExplicitlyFolderPath ?\n        path.slice(0, -1).split('/') :\n        path.slice(0).split('/')\n\n    const last = segments.length - 1\n    nextSegment:\n        for (let i = 0; i <= last; i++) {\n            const s = segments[i]\n            if (s === '') {\n                return undefined\n            }\n            if (s === '.') {\n                continue\n            }\n            if (s === '..') {\n                if (node.parent === undefined || node.isAssemblyRoot()) {\n                    //let caller decide whether to report an error\n                    return undefined\n                }\n                node = node.parent\n                continue\n            }\n            // todo![links] WIP test cases for non-folders in the middle of the path]\n            if (s === node.openingContent?.name) {\n                return !isExplicitlyFolderPath && i === last ? node.openingContent : undefined\n            }\n            //todo![links] I REALLY DISLIKE THE LOGIC OF THIS METHOD. We're splitting\n            //  on '/', but ta.Folder.name always ends in '/'. Two options:\n            //  - redo the logic of this method\n            //  - nix the notion of the trailing '/'\n            //todo![test] this method really needs unit tests.\n            for (const child of node.content) {\n                if (s === (child.name.endsWith('/') ? child.name.slice(0, -1) : child.name)) {\n                    if (child.isFile()) {\n                        return !isExplicitlyFolderPath && i === last ? child : undefined\n                    }\n                    node = child\n                    continue nextSegment\n                }\n            }\n            return undefined\n        }\n\n    return node\n}\n", "import {Node, NodeInterface, Folder, resolvePath} from './node.js'\nimport type {Assembly} from './assembly.js'\nimport type {STIR} from '../stir.js'\nimport {Vpath} from '../../vfs/vpath.js'\n\n/**\n * todo[arch] Antora used [Vinyl](https://www.npmjs.com/package/vinyl)\n * \"Vinyl is a very simple metadata object that describes a file. When you think\n * of a file, two attributes come to mind: path and contents. These are the main\n * attributes on a Vinyl object. A file does not necessarily represent something\n * on your computer\u2019s file system. You have files on S3, FTP, Dropbox, Box,\n * CloudThingy.io and other services. Vinyl can be used to describe files from\n * all of these sources.\"\n *\n * Some notes on Vinyl\n * - see https://gulpjs.com/docs/en/api/src/\n * - uses `cwd` like I use `relativePathBase`.\n * - does not have a concept of absolute path root, or encapsulation boundary.\n *   - an absolute path will resolve to an absolute path on the host FS.\n * - it doesn't intake a tree, but rather files matching a glob pattern.\n *   - though i guess if yo give it the glob: `**` it will read the tree.\n *   - not sure whether it treats the tree as a first class part of the content,\n *     or if that's only the typical usage.\n *\n *  CONCLUSION: vinyl doesn't make sense for Textplain. Its soo much designed\n *  around Gulp's needs.\n *\n *  vFile may make more sense: https://github.com/vfile/vfile\n *\n */\n\n\nexport class File implements NodeInterface {\n    readonly name: string\n    readonly parent: Folder\n\n    stir: STIR | undefined\n    title: string | undefined\n\n    isIndexable = false\n\n    // todo[arch] haven't decided if this is how we'll use an index like this.\n    // exported deep link targets, resolved to #anchor string \n    deepLinkTargets: { [name: string]: string } = {}\n\n    // the render status\n    // values with the same prefix shown in order of valid state transition:\n    status: undefined | 'excluded'\n        | 'resource: waiting' | 'resource: in pipeline' | 'resource: copied'\n        | 'sText: waiting' | 'sText: in pipeline' | 'sText: awaiting dependency' | 'sText: rendered'\n\n    outNode: string | undefined\n\n    constructor (name = '[[GENERATED]]', parent: Folder) {\n        this.name = name\n        this.parent = parent\n    }\n\n    nameSansExt (): string {\n        return Vpath.parseName(this.name)\n    }\n\n    extension (): string {\n        return Vpath.parseExt(this.name)\n    }\n\n    isFile (): this is File {\n        return true\n    }\n\n    isFolder (): this is Folder {\n        return false\n    }\n\n    isAssemblyRoot (): this is Assembly {\n        return false\n    }\n\n    assemblyRoot (crossAssemblyBoundary?: boolean): Assembly {\n        return this.parent.assemblyRoot(crossAssemblyBoundary)\n    }\n\n    isOpeningContent (): boolean {\n        return this === this.parent.openingContent\n    }\n\n    // todo[arch] this avoids two things: \n    //  - a name that is 'undefined'\n    //  - an additional boolean field\n    isGenerated (): boolean {\n        return this.name === '[[GENERATED]]'\n    }\n\n    innerAssemblyPath (): string {\n        return this.parent.innerAssemblyPath() + this.name\n    }\n\n    outerAssemblyPath (): string {\n        return this.parent.outerAssemblyPath() + this.name\n    }\n\n    crossAssemblyPath (): string {\n        return this.parent.crossAssemblyPath() + this.name\n    }\n\n    resolvePath (path: string): Node | undefined {\n        return resolvePath(path, this)\n    }\n\n    searchUpForFile (name: string, crossAssemblyBoundary = false): File | undefined {\n        if (this.name === name) {\n            return this\n        }\n        if (this.parent === undefined) {\n            return undefined\n        }\n        return this.parent.searchUpForFile(name, crossAssemblyBoundary)\n    }\n\n    searchUpForProperty (property: string, crossAssemblyBoundary = false): { node: Node, value: unknown } | undefined {\n        if (property in this) {\n            const value = (this as unknown as Record<string, unknown>)[property]\n            if (value !== undefined) {\n                return {node: this, value}\n            }\n        }\n        return this.parent.searchUpForProperty(property, crossAssemblyBoundary)\n    }\n\n    readFileSync (): string {\n        return this.parent.assemblyRoot()\n            .srcFS()\n            .readFileSync(this.innerAssemblyPath())\n    }\n}\n", "import {Node, Folder, FolderInterface, resolvePath} from './node.js'\nimport type {Assembly} from './assembly.js'\nimport type {File} from './file.js'\nimport type {Config} from '../config.js'\nimport type {AssemblyPipeline} from '../pipeline.js'\n\n\nexport class Subfolder implements FolderInterface {\n    // Must have trailing slash. See https://www.w3.org/TR/ldp-bp/#include-a-trailing-slash-in-container-uris\n    readonly name: `${string}/`\n\n    /**\n     * subfolder *always* has parent.\n     * Root folders are type {@link Assembly}\n     */\n    readonly parent: Folder\n\n    get title (): string | undefined {\n        return this.openingContent?.title\n    }\n\n    get isIndexable (): boolean {\n        return this.openingContent !== undefined\n    }\n\n    openingContent: File | undefined\n    readonly content: Node[] = []\n    hasIncludedContent = false\n\n    sortSpec: string[] | undefined\n    textplainConfig: Config | undefined\n    pipeline: AssemblyPipeline | undefined\n\n    outNode: string | undefined\n\n    constructor (name: `${string}/`, parent: Folder) {\n        this.name = name\n        this.parent = parent\n    }\n\n    isFile (): this is File {\n        return false\n    }\n\n    isFolder (): this is Folder {\n        return true\n    }\n\n    isAssemblyRoot (): this is Assembly {\n        return false\n    }\n\n    assemblyRoot (crossAssemblyBoundary = false): Assembly {\n        return this.parent.assemblyRoot(crossAssemblyBoundary)\n    }\n\n    innerAssemblyPath (): string {\n        return this.parent.innerAssemblyPath() + this.name\n    }\n\n    outerAssemblyPath (): string {\n        return this.parent.outerAssemblyPath() + this.name\n    }\n\n    crossAssemblyPath (): string {\n        return this.parent.crossAssemblyPath() + this.name\n    }\n\n    resolvePath (path: string): Node | undefined {\n        return resolvePath(path, this)\n    }\n\n    searchUpForFile (name: string, crossAssemblyBoundary = false): File | undefined {\n        for (const c of this.content) {\n            if (c.isFile() && c.name === name) {\n                return c\n            }\n        }\n        if (this.parent === undefined) {\n            return undefined\n        }\n        return this.parent.searchUpForFile(name, crossAssemblyBoundary)\n    }\n\n    searchUpForProperty (property: string, crossAssemblyBoundary = false): { node: Node, value: unknown } | undefined {\n        if (property in this) {\n            const value = (this as unknown as Record<string, unknown>)[property]\n            if (value !== undefined) {\n                return {node: this, value}\n            }\n        }\n        return this.parent.searchUpForProperty(property, crossAssemblyBoundary)\n    }\n}\n", "import type {Node} from './node.js'\n\nexport type PreorderVisitReturn = 'continue' | 'abort branch' | 'abort traversal'\nexport type PostorderVisitReturn = 'continue' | 'abort traversal'\n\n/**\n * traverse assembly efficiently (non recursive)\n * @param fromNode\n * @param preorderVisit\n * @param postorderVisit\n *\n * todo[arch] do we really need a non-recursive traverse?\n *   - assemblies, unlike STIRs, are unlikely to be deep. \u2705\n *   - a non-recursive solution may make is much easier to implement the\n *     async version below, and possibly make it easy to merge the two\n *     versions, perhaps by the type of the preorderVisit/postorderVisit\n *     args (e/g. whether or not they return a Promise) determining whether\n *     internal calls are sync or async\n */\nexport function traverse (fromNode: Node,\n                          preorderVisit: ((n: Node) => PreorderVisitReturn) | undefined,\n                          postorderVisit: ((n: Node) => PostorderVisitReturn) | undefined)\n    : void {\n    // stack to schedule preorderVisit or postorderVisit calls on nodes,\n    // false for preorder, true for postorder\n    const stack: [Node, boolean][] = []\n\n    if (preorderVisit) {\n        // if we have both pre- and postorder visits, we only need to\n        // schedule the preorder, as any postorder will be scheduled\n        // at the time of the preorder visit.\n        stack.push([fromNode, false])\n    } else if (postorderVisit) {\n        stack.push([fromNode, true])\n    } else {\n        return\n    }\n\n    let n: Node\n    let isPost: boolean\n\n    while (stack.length > 0) {\n        [n, isPost] = stack.pop() as [Node, boolean]\n\n        if (isPost) {\n            if (postorderVisit?.(n) === 'abort traversal') {\n                return\n            }\n        } else {\n            if (n.isFile()) {\n                switch (preorderVisit?.(n)) {\n                    case 'continue':\n                        if (postorderVisit?.(n) === 'abort traversal') {\n                            return\n                        }\n                        break\n                    case 'abort branch':\n                        //todo[api] should abort branch on a File abort the parent Folder, i.e. all siblings?\n                        break\n                    case 'abort traversal':\n                        return\n                }\n\n            } else {\n                switch (preorderVisit?.(n)) {\n                    case 'continue':\n                        if (postorderVisit) {\n                            stack.push([n, true])\n                        }\n                        // push children on stack in reverse order so they are popped in correct order\n                        for (let i = n.content.length - 1; i >= 0; i--) {\n                            stack.push([n.content[i], false])\n                        }\n                        // push opening content last so it's traversed first\n                        // (if the tree is traversed before the opening content\n                        //  has been chosen from content, it will have been\n                        //  pushed above)\n                        if (n.openingContent) {\n                            stack.push([n.openingContent, false])\n                        }\n                        break\n                    case 'abort branch':\n                        break\n                    case 'abort traversal':\n                        return\n                }\n            }\n        }\n    }\n}\n\n/**\n * traverse assembly efficiently (non recursion) with asynchronous visitors\n * @param fromNode\n * @param preorderVisit\n * @param postorderVisit\n *\n * todo[arch] Is this the right way to do an async tree walk?\n * - if we do, shouldn't we do it properly, where the nodes are are truly\n *   visited asynchronously? Below we are not; we force synchronicity on each\n *   node visit with `await`.\n *   - The main reason we have to do this is to support the\n *     'abort branch' | 'abort traversal' return values, which by definition\n *     must be returned synchronously to make any sense.\n *   - The more logical alternative (I'm pretty sure \uD83E\uDD14) is that the async\n *     version of tree traversal NOT support aborting the traversal. That seems\n *     to follow from the nature of \"async\".\n *   - UNLESS what we really mean by \"async\" is NOT that the tree is traversed\n *     asynchronously, but that we accept async visitors, which the traversal\n *     code will execute synchronously to be able to support aborting traversals.\n *   - Thinking about this, both are legit options, and just need to be named\n *     correctly, or defined with the proper signature (assuming we actually NEED\n *     both for TextPlain:\n *\n *     - SYNCHRONIZED tree traversal (that supports asynchronous visitors)\n *       ```\n *       traverseAssembly(node,\n *                        (node) => PreorderVisitReturn | (node) => Promise<PreorderVisitReturn>\n *                        )\n *       ```\n *       Will visit each node synchronously, using `wait` if given a async\n *       visitor as in the impl below, resulting in synchronized pre/postorder\n *       visits that can abort the branch or the entire traversal synchronously.\n *\n *     - ASYNCHRONOUS tree traversal (does NOT support branch or traversal\n *       abortions).\n *       ```\n *       traverseAsync(node,\n *                             (node) => Promise<void>\n *                             returnAllCompletePromise: boolean)\n *       ```\n *       Will fire off visits to each node asynchronously and independently,\n *       i.e. no visit is predicated on the result of any other visit. They all\n *       happen concurrently. Thus no option to abort a branch ot the tree.\n *       If returnAllCompletePromise is true, will return a Promise that will\n *       resolve only after all node visits resolve (internally using\n *       `Promise.all`) and resolving immediately if false (leaving it for the\n *       callers' visitor implementation to do whatever needs to be done when\n *       done).\n *\n * todo[api] \uD83C\uDFC8 this runs counter to the JS norm: the synchronous version should\n *  be named `traverseSync` and this async version should just be `traverse`.\n * Punt this change until this module is fully formed, as i don't even know if\n * if we'll need both of these methods down the road.\n */\nexport async function traverseAsync (fromNode: Node,\n                                     preorderVisit: ((n: Node) => Promise<PreorderVisitReturn>) | undefined,\n                                     postorderVisit: ((n: Node) => Promise<PostorderVisitReturn>) | undefined) {\n    // stack to schedule preorderVisit or postorderVisit calls on nodes,\n    // false for preorder, true for postorder\n    const stack: [Node, boolean][] = []\n\n    if (preorderVisit) {\n        // if we have both pre- and postorder visits, we only need to\n        // schedule the preorder, as any postorder will be scheduled\n        // at the time of the preorder visit.\n        stack.push([fromNode, false])\n    } else if (postorderVisit) {\n        stack.push([fromNode, true])\n    } else {\n        return\n    }\n\n    let n: Node\n    let isPost: boolean\n\n    while (stack.length > 0) {\n        [n, isPost] = stack.pop() as [Node, boolean]\n\n        if (isPost) {\n            if (await postorderVisit?.(n) === 'abort traversal') {\n                return\n            }\n        } else {\n            if (n.isFile()) {\n                switch (await preorderVisit?.(n)) {\n                    case 'continue':\n                        if (await postorderVisit?.(n) === 'abort traversal') {\n                            return\n                        }\n                        break\n                    case 'abort branch':\n                        //todo[api] should abort branch on a File abort the parent Folder, i.e. all siblings?\n                        break\n                    case 'abort traversal':\n                        return\n                }\n\n            } else {\n                switch (await preorderVisit?.(n)) {\n                    case 'continue':\n                        if (postorderVisit) {\n                            stack.push([n, true])\n                        }\n                        // push children on stack in reverse order so they are popped in correct order\n                        for (let i = n.content.length - 1; i >= 0; i--) {\n                            stack.push([n.content[i], false])\n                        }\n                        // push opening content last so it's traversed first\n                        // (if the tree is traversed before the opening content\n                        //  has been chosen from content, it will have been\n                        //  pushed above)\n                        if (n.openingContent) {\n                            stack.push([n.openingContent, false])\n                        }\n                        break\n                    case 'abort branch':\n                        break\n                    case 'abort traversal':\n                        return\n                }\n            }\n        }\n    }\n}\n", "import {Node, Folder, FolderInterface, resolvePath} from './node.js'\nimport type {File} from './file.js'\nimport {traverse} from './traverse.js'\nimport type {SandboxFS} from '../../vfs/index.js'\nimport type {Config} from '../config.js'\nimport type {AssemblyPipeline} from '../pipeline.js'\n\n/**\n * This will represent the abstracted text assembly:\n *  - each source file will be represented as a node\n *    in the source tree.\n *  - the source tree itself is abstracted:\n *    - in normal cases it will be identical to the\n *      concrete source tree in structure\n *    - but it can be transformed arbitrarily (see\n *      [Text Assembly Pipeline](...). For example,\n *      virtual nodes or branch splices declared in\n *      the source TextAssembly will ultimately be\n *      fully resolved in this representation.\n */\nexport class Assembly implements FolderInterface {\n    /** text assembly source folder via SandboxFS */\n    private readonly _src: SandboxFS\n\n    /**\n     * will only have a value for subassemblies. must be unique across all\n     * assemblies participating in the composite assembly.\n     */\n    readonly assemblyID: string\n    // only defined on the root (outer) assembly\n    readonly assemblyIndex: Record<string, Assembly> | undefined\n\n    // Must have trailing slash. See https://www.w3.org/TR/ldp-bp/#include-a-trailing-slash-in-container-uris\n    readonly name: `${string}/`\n\n    /**\n     * Undefined if standalone assembly,\n     * {@link Folder} if subassembly\n     */\n    readonly parent: Folder | undefined\n\n    get title (): string | undefined {\n        return this.openingContent?.title\n    }\n\n    get isIndexable (): boolean {\n        return true\n    }\n\n    openingContent: File | undefined\n    readonly content: Node[] = []\n    hasIncludedContent = false\n\n    sortSpec: string[] | undefined\n    textplainConfig: Config | undefined\n    pipeline: AssemblyPipeline | undefined\n\n    outNode: string | undefined\n\n    /**\n     * Regular (standalone) Assembly constructor.\n     * @param {SandboxFS} src assembly folder as SandboxFS volume.\n     */\n    constructor (src: SandboxFS)\n\n    /**\n     * Subassembly constructor.\n     * @param {SandboxFS} src assembly folder as SandboxFS volume.\n     * @param parent the parent folder within the parent assembly that this\n     *               subassembly will be grafted as a virtual subfolder.\n     * @param {`${string}/`} virtualFolderName the name that this subassembly\n     *                               will have as a virtual folder within the\n     *                               parent Folder. It will be used for path\n     *                               resolution for links coming from outside\n     *                               pointing in.\n     * @param {string} assemblyID the ID used for direct cross-assembly links\n     *                            within the composite assembly. It must be\n     *                            unique among all assembly names within the\n     *                            composite assembly.\n     */\n    constructor (src: SandboxFS, parent: Folder, virtualFolderName: `${string}/`, assemblyID: string)\n\n    /** @internal */\n    constructor (src: SandboxFS, parent?: Folder, virtualFolderName: `${string}/` = '/', assemblyID = '') {\n        this.name = virtualFolderName\n        this.parent = parent\n        this._src = src\n        this.assemblyID = assemblyID\n\n        if (!src.isReadOnly()) {\n            throw new Error(`assembly volume must be initialized as readonly`)\n        }\n\n        if (parent === undefined) {\n            this.assemblyIndex = {\n                [assemblyID]: this\n            }\n        } else {\n            if (assemblyID.length < 1) {\n                throw new Error('missing subassembly ID')\n            }\n            const idx = this.assemblyRoot(true).assemblyIndex\n            if (idx === undefined) {\n                throw new Error('invalid assembly state: root assembly missing subassembly index')\n            }\n            if (idx[assemblyID] !== undefined) {\n                throw new Error(`duplicate assembly ID: ${assemblyID}`)\n            }\n            idx[assemblyID] = this\n        }\n\n        console.debug('new Assembly')\n        console.group()\n        console.debug(`assemblyID: ${this.assemblyID}`)\n        console.debug(`srcFS:      ${this._src}`)\n        console.debug(`innerAssemblyPath: ${this.innerAssemblyPath()}`)\n        console.debug(`outerAssemblyPath: ${this.outerAssemblyPath()}`)\n        console.debug(`crossAssemblyPath: ${this.crossAssemblyPath()}`)\n        console.groupEnd()\n    }\n\n    isFile (): this is File {\n        return false\n    }\n\n    isFolder (): this is Folder {\n        return true\n    }\n\n    isAssemblyRoot (): this is Assembly {\n        return true\n    }\n\n    assemblyRoot (crossAssemblyBoundary = false): Assembly {\n        if (crossAssemblyBoundary && this.parent !== undefined) {\n            return this.parent.assemblyRoot(true)\n        }\n        return this\n    }\n\n    assemblyForID (id: string): Assembly | undefined {\n        return this.assemblyIndex === undefined\n            ? this.assemblyRoot(true).assemblyForID(id)\n            : this.assemblyIndex[id]\n    }\n\n    srcFS (): SandboxFS {\n        return this._src\n    }\n\n    innerAssemblyPath (): string {\n        return '/'\n    }\n\n    outerAssemblyPath (): string {\n        return this.parent === undefined ?\n            '/' : this.parent.outerAssemblyPath() + this.name\n    }\n\n    crossAssemblyPath (): string {\n        return this.assemblyID === undefined ? '{}/' : `{${this.assemblyID}}/`\n    }\n\n    resolvePath (path: string): Node | undefined {\n        return resolvePath(path, this)\n    }\n\n    searchUpForFile (name: string, crossAssemblyBoundary = false): File | undefined {\n        for (const c of this.content) {\n            if (c.isFile() && c.name === name) {\n                return c\n            }\n        }\n        if (this.parent === undefined || !crossAssemblyBoundary) {\n            return undefined\n        }\n        return this.parent.searchUpForFile(name, crossAssemblyBoundary)\n    }\n\n    searchUpForProperty (property: string, crossAssemblyBoundary = false): { node: Node, value: unknown } | undefined {\n        if (property in this) {\n            const value = (this as unknown as Record<string, unknown>)[property]\n            if (value !== undefined) {\n                return {node: this, value}\n            }\n        }\n        if (this.parent === undefined || !crossAssemblyBoundary) {\n            return undefined\n        }\n        return this.parent.searchUpForProperty(property, crossAssemblyBoundary)\n    }\n\n    toString (): string {\n        let s = ''\n        let level = 0\n        traverse(this,\n            (n: Node) => {\n                s += '    '.repeat(level)\n                s += n.name\n                if (n.isFolder()) {\n                    if (n.openingContent) s += ` (${n.openingContent.name})`\n                    if (n.isAssemblyRoot()) s += ` \uD83D\uDCE6{${n.assemblyID}} ${n._src}`\n                    if (n.textplainConfig) s += ` \u2699\uFE0F ${n.textplainConfig.name()}`\n                    level++\n                }\n                s += '\\n'\n                return 'continue'\n            },\n            (n: Node) => {\n                if (n.isFolder()) {\n                    level--\n                }\n                return 'continue'\n            })\n        return s\n    }\n}\n", "import {Node, Folder, resolvePath} from './node.js'\nimport {Assembly} from './assembly.js'\nimport {Subfolder} from './subfolder.js'\nimport {File} from './file.js'\nimport {traverse} from './traverse.js'\nimport {SandboxFS, VfsPath, Vpath} from '../../vfs/index.js'\nimport {Config} from '../config.js'\n\nimport JSON5 from 'json5'\n\n// todo[api] need a name that won't potentially clash with an actual\n//   user file or folder name. e.g. `.sort` (e.g. like `.gitignore`)\n//   Maybe offer a variant that isn't hidden by default, e.g.\n//   `__sort` or something.\nconst TEXTASSEMBLY_SORT_SPEC_FILENAME = 'sort'\n\n// todo[api] at present, these files aren't \"Textplain Configs\" because they don't\n//  configure the Textplain instance, but instead a rendering pipeline. A single\n//  Textplain session may load multiple differently configured pipelines, for\n//  example as required for custom processing unique to a specific branch in a\n//  text assembly tree.\n//  ---\n//  See notes/docs on the naming of the various config files, or the roadmap for it.\nconst TEXTPLAIN_PIPELINE_CONFIG_FILENAME = 'pipeline.json5'\n\n\n// todo[arch] could move the read code inside Assembly/Subfolder such that\n//   they are loaded with data when they are constructed at which point become\n//   truly readonly.\n\n/**\n * Recursively populates a {@link Assembly} from the content of sourcePath.\n *\n * All assembly content traversal is through its sandbox fs, with\n * the exception of grafted subassemblies, which by definition exist outside\n * that sandbox but usually on the same source FS, and often referenced with a\n * path relative to the graft point. Thus sourcePath must be of the local FS,\n * otherwise subassembly graft reference resolution will fail.\n *\n * Principles\n * ----------\n * 1. known files that are \"meta\", e.g. config files embedded in the\n *    assembly tree, are read and used for what they are, but are left\n *    out of the resulting assembly tree, which is intended to represent\n *    assembly content.\n *\n * @param sourcePath the path of the assembly root in the source FS\n */\nexport function readAssembly (sourcePath: VfsPath): Assembly {\n    // since an assembly source MUST be a directory, we can simplify\n    // internal logic by normalizing it with trailing slash.\n    //  - consistency between root and non-root path\n    //  - can use + instead of join internally\n    if (!sourcePath.path.endsWith('/')) {\n        sourcePath = {vfs: sourcePath.vfs, path: sourcePath.path + '/'}\n    }\n\n    console.info(`\uD83D\uDCE6 readAssembly ${sourcePath.path}`)\n    console.group()\n    const sandboxFs = new SandboxFS(sourcePath, 'readonly')\n    const assembly = new Assembly(sandboxFs)\n\n    //todo[arch] this could be async, nixing the sync calls to fs.\n    //  in fact, i think hugo split off async threads for each subdir.\n    console.group('reading assembly tree...')\n    readFolderContent(assembly, sourcePath)\n    console.groupEnd()\n\n    console.group('determining opening content...')\n    determineOpeningContent(assembly)\n    console.groupEnd()\n\n    console.group('sorting content...')\n    sortContent(assembly)\n    console.groupEnd()\n\n    console.debug('\\nsource assembly as read:')\n    console.group()\n    console.debug(assembly.toString())\n    console.groupEnd()\n\n    console.groupEnd()\n    return assembly\n}\n\nfunction readSubAssembly (sourcePath: VfsPath, parent: Folder, virtualFolderName: `${string}/`, assemblyID: string): Assembly {\n    console.info(`\uD83D\uDCE6 readSubAssembly ${sourcePath.path}`)\n    console.group()\n    const volume = new SandboxFS(sourcePath, 'readonly')\n    const assembly = new Assembly(volume, parent, virtualFolderName, assemblyID)\n\n    console.group('reading subassembly tree...')\n    readFolderContent(assembly, sourcePath)\n    console.groupEnd()\n\n    console.groupEnd()\n    return assembly\n}\n\nfunction readFolderContent (f: Folder, folderSrc: VfsPath) {\n    const sandboxFs = f.assemblyRoot().srcFS()\n    const sandboxPath = f.innerAssemblyPath()\n\n    const dirents = sandboxFs.readDirSync(sandboxPath, true)\n        .filter(n => !n.name.startsWith('.'))\n\n    dirents.forEach(dirent => {\n        console.debug(`dirent: ${dirent.name}`)\n        //todo[api] we should support a way to specify exclusions.\n        //Thoughts:\n        // - if it doesn't make sense to specify exclusions for a\n        //   TextAssembly (because why would you? It would be like specifying\n        //   exclusions for particular headings in a Markdown file), then\n        //   it would be a Textplain power user setting, with no mention\n        //   in the TextAssembly spec.\n        //! If you want to see how well Textplain renders many third-party\n        //   README's, disable this exclusion and browse the many README's\n        //   that get rendered for any node_modules directories included\n        if (dirent.name === 'node_modules') {\n            return\n        }\n\n        if (dirent.isDir) {\n            // todo[perf] do this non-recursively, e.g. like traverseAssembly ?\n            //   arg against: assemblies are unlikely to be deep, unlike a stir\n            const subdir = new Subfolder(dirent.name + '/' as `${string}/`, f)\n            console.log(`subfolder ${subdir.innerAssemblyPath()}`)\n            console.group()\n            readFolderContent(subdir, {vfs: folderSrc.vfs, path: folderSrc.path + dirent.name + '/'})\n            console.groupEnd()\n            f.content.push(subdir)\n        } else {\n            //todo![renderAssembly] shouldn't we use filetype.ts#fileTypeByFilename here?\n            // - it can identify sort spec (and we can ditch the constant above,\n            //   as well as allow users to define a different filename for it).\n            // - we could make it identify config files ?\n            // - we could filter by filetype at the beginning (i.e. here) rather\n            //   than all the downstream, avoiding adding skipped files to the\n            //   tree (or do we want to add everything for debug purposes?)\n            //   - we could set File.status to 'sText: waiting' |\n            //     'resource: waiting' | skipped right here.\n\n            const filePath = sandboxPath + dirent.name\n\n            if (dirent.name === TEXTPLAIN_PIPELINE_CONFIG_FILENAME) {\n                const file = new File(dirent.name, f)\n                const data = JSON5.parse(file.readFileSync())\n                // todo[arch] should this resolve impl be put in some shared place?\n                //\n                // NOTE: we have two sorts of resolve:\n                //   a) ass.Node.resolvePath => ass.Node\n                //   b) path (+folder context) => path\n                //\n                //   (a) the ass.Node tree acts as its own Vfs (e.g. its a\n                //       virtual tree with branches potentially grafted from\n                //       multiple sources), and resolves paths by actual tree\n                //       traversal, including subassemblies, and also supporting\n                //       cross-assembly paths. It will throw an error if the\n                //       path leads to a non-existent node.\n                //   (b) operates on underlying FS paths, even if virtual.\n                //\n                //  We can't merge those because they serve different purposes,\n                //  e.g. the code below uses (b) and using (a) does not make sense.\n                const configPathResolver = (path: string): VfsPath => {\n                    // if path is a cross-assembly reference\n                    const match = path.match(/^{(\\w*)}\\/(.*)/)\n                    if (match !== null) {\n                        const assembly = f.assemblyRoot(true).assemblyForID(match[1])\n                        if (assembly === undefined) {\n                            // todo[errors] review all the error handling around path lookups and readFiles.\n                            throw new Error(`no such subassembly: {${match[1]}}`)\n                        } else {\n                            const node = resolvePath(match[2], assembly)\n                            if (node === undefined) throw new Error(`no file at path: ${path}`)\n                            return {vfs: node.assemblyRoot().srcFS(), path: node.innerAssemblyPath()}\n                        }\n                    }\n                    // if path is absolute\n                    if (path.startsWith('/')) {\n                        return {vfs: sandboxFs, path: path}\n                    }\n                    // else relative\n                    path = Vpath.join(f.innerAssemblyPath(), path)\n                    return {vfs: sandboxFs, path: path}\n                }\n                f.textplainConfig = new Config(dirent.name, data, configPathResolver, false, f.assemblyRoot())\n                return\n            }\n\n            // Check for subassembly graftpoint.\n            // todo[api] is this the rule we want for subassembly graftpoint links?\n            //   - any file of less then 256B?\n            //   - i don't like looking for a file extension, because i want\n            //     the graftpoint filename to occupy the *exact* same space as\n            //     the virtual folder that results from the graft for many reasons:\n            //     - safety: prevents collisions between graftpoint and a folder with the same name\n            //     - simplicity: name of the graftpoint file is the virtual folder name, rather than another property in the file\n            //     - elegance: a directory listing shows the names of the child nodes exactly as they will be\n            //   - whether or not we gate by file.size, we certainly can read a file's first N bytes rather than\n            //     its entirety.\n            //     - that said, that's got to be slower than filtering by file size first!\n            //   Note the code below assumes this.\n            if (dirent.size < 256) { //probably too short. max path len + max id len ?\n                const content = sandboxFs.readFileSync(filePath)\n                if (content.startsWith('graftpoint:')) {\n                    const lines = content.split('\\n')\n                    if (lines.length > 1 && lines[1].startsWith('subassembly:')) {\n                        const id = lines[0].slice('graftpoint:'.length).trim()\n                        const path = lines[1].slice('subassembly:'.length).trim()\n                        let fullPath = path.startsWith('/') ? path : folderSrc.path + path\n                        if (!fullPath.endsWith('/')) fullPath += '/'\n                        if (!folderSrc.vfs.existsSync(fullPath)) {\n                            throw new Error(`invalid subassembly path \"${path}\" specified in graftpoint ${folderSrc.path + dirent.name}`)\n                        }\n                        const vfsPath = {vfs: folderSrc.vfs, path: fullPath}\n                        if (id.length > 0 && path.length > 0) {\n                            console.log(`subassembly graftpoint: \"${f.innerAssemblyPath()}${dirent.name}/\"  id=\"${id}\"  source path=\"${vfsPath}\"`)\n                            const sass = readSubAssembly(vfsPath, f, `${dirent.name}/`, id)\n                            f.content.push(sass)\n                            return\n                        }\n                    }\n                }\n            }\n\n            // We do this *after* testing it as a subassembly graftpoints to allow\n            // for graftpoints to sort just like a regular subfolder.\n            // todo[api] Maybe we need a more rigorous approach to meta files within\n            //  a TextAssembly. Meta files should co-exist with content files WITHOUT\n            //  taking up the namespace (i.e. why can't I have a folder or content file\n            //  named 'sort'? Ideas:\n            //  - meta files should have something akin to a MAGIC BYTE. Without it, it\n            //    is considered a content file / non-meta\n            //  - All TextAssembly config files have a specific file extension, regardless\n            //    of which type of config (pipeline, sort, etc). Parsing the file will\n            //    determine the role.\n            //  - The same as the preceding idea, except that the config format is the\n            //    same, but options are placed in the file under a heading or a JSON key,\n            //    etc. In other words, sort spec is in a config file under `sort: {}`, and\n            //    pipeline is in config under `pipeline: {}`. The user can put each of\n            //    those in separate files (`sort.tac` and `pipeline.tac`) or in a single\n            //    file (`all.tac`).\n            if (dirent.name === TEXTASSEMBLY_SORT_SPEC_FILENAME) {\n                f.sortSpec = sandboxFs.readFileSync(filePath).trim().split(/\\s*\\n\\s*/)\n                return\n            }\n\n            //console.log(`TextAssembly file: ${dirent.name}`)\n            f.content.push(new File(dirent.name, f))\n        }\n    })\n}\n\nfunction determineOpeningContent (assembly: Assembly) {\n    traverse(assembly, (n: Node) => {\n        if (n.isFolder()) {\n            for (let i = 0; i < n.content.length; i++) {\n                const c = n.content[i]\n                //todo[textassembly API] need to support (sync with spec):\n                //  - other names (e.g. README, HOME, index)\n                //  - other extensions (e.g. .md, .pj, .html)\n                //  - case insensitive\n                //  - respect precedence\n                if (c.name === 'README.md' && c.isFile()) {\n                    //console.log(`setting homepage of ${n.assemblyPath()} to ${c.name}`)\n                    n.openingContent = c\n                    n.content.splice(i, 1)\n                    break\n                }\n            }\n        }\n        return 'continue'\n    }, undefined)\n}\n\nfunction sortContent (assembly: Assembly) {\n    // todo[perf] This is slightly inefficient:\n    //   - we are traversing down and then, at each Folder node, traversing back\n    //     up to find the sort spec.\n    //   - Worst case is the only sort spec is at the root (or there is none\n    //     at all, and we do this inane up search to find the same item every\n    //     time.\n    // This won't matter for small assemblies, but might make a difference for\n    // assemblies containing thousand of deep folders? Probably not?\n    // Note that readAssembly blocks all assembly processing until it is done,\n    // so perhaps the inefficiency is significant.\n    // Note we are only parsing the sort spec once, so no redundancy there.\n    //\n    // The fix is to have a stack, and keep track of sort specs as we traverse\n    // down, obviating the need to search back up. The following code is just simpler.\n    traverse(assembly, (n: Node) => {\n        if (n.isFolder()) {\n            const sorter = getNodeSorter(n.searchUpForProperty('sortSpec', true)?.value as string[])\n            n.content.sort(sorter)\n            console.groupEnd()\n        }\n        return 'continue'\n    }, undefined)\n}\n\nfunction relativeNodeSortOrder (sortSpec: string[], n: Node): number {\n    return sortSpec.findIndex(\n        function (r) {\n            const regExp = new RegExp('^' + r + '$', 'i')\n            if (n.isFolder()) {\n                return regExp.test(n.name) || regExp.test(n.name.slice(0, -1))\n            } else {\n                return regExp.test(n.name)\n            }\n        }\n    )\n}\n\nexport function getNodeSorter (sortSpec: string[] | undefined): (a: Node, b: Node) => number {\n    if (sortSpec === undefined) {\n        return placeholderDefaultTextAssemblySort\n    }\n    return (a: Node, b: Node) => {\n        const len = sortSpec.length\n\n        const iDefault = (() => {\n            const i = sortSpec.indexOf('...')\n            return i === -1 ? len : i\n        })()\n\n        const iFolderDefault = (() => {\n            const i = sortSpec.indexOf('.../')\n            return i === -1 ? iDefault : i\n        })()\n\n        let iA = relativeNodeSortOrder(sortSpec, a)\n        if (iA === -1) iA = a.isFolder() ? iFolderDefault : iDefault\n\n        let iB = relativeNodeSortOrder(sortSpec, b)\n        if (iB === -1) iB = b.isFolder() ? iFolderDefault : iDefault\n\n        // console.log(`${a.name}:${iA}  ${b.name}:${iB}`)\n        if (iA === iB) {\n            return placeholderDefaultTextAssemblySort(a, b)\n        }\n\n        return (-1 * len + iA) - (-1 * len + iB)\n    }\n}\n\n// todo[spec] pending Text Assembly spec. See notes in `textassembly-sort.test.js`\nfunction placeholderDefaultTextAssemblySort (a: Node, b: Node): number {\n    const aName = a.name.toLocaleLowerCase()\n    const bName = b.name.toLocaleLowerCase()\n    const aSansExt = a.isFolder() ? aName : a.nameSansExt().toLocaleLowerCase()\n    const bSansExt = b.isFolder() ? bName : b.nameSansExt().toLocaleLowerCase()\n    return aSansExt === bSansExt\n        ? (aName < bName ? -1 : 1)\n        : (aSansExt < bSansExt ? -1 : 1)\n}\n", "import type {File} from './file.js'\n\nimport posix from 'path-browserify'\n\n// see to-do on Node.title for proper determination\nexport function defaultFileTitle (file: File): string {\n    if (file.isOpeningContent()) {\n        if (file.parent.name === '/') {\n            return '\uD83C\uDFE0' //language independent default\n        } else {\n            return niceNameFromFilename(file.parent.name?.slice(0, -1))\n        }\n    }\n    return niceNameFromFilename(posix.parse(file.name).name)\n}\n\nfunction niceNameFromFilename (n: string) {\n    // todo: any conversions we want to do (e.g. replace `_` with space)\n    // should go here\n    return n\n}\n", "'use strict'\n\nimport {Parser, Handler} from 'htmlparser2/lib/Parser.js'\nimport {escapeForHTML, normalizeStyle} from './util.js'\n\nconst INDENT = '  '\n\n// todo![now] implement at least 'explicit' mode. update bbtest framework.\n\nexport type OPTIONS = {\n    /** how white space is normalized */\n    white_space: 'standard' | 'conservative'\n\n    /** how closing tags are normalized */\n    closing_tags: 'as-is' | 'explicit' | 'html5 implicit' | 'strict'\n\n    /** for any tag, the set of attributes that should be excluded */\n    attributeExcludes: Record<string, string[]>\n}\n\nconst DEFAULTS: OPTIONS = {\n    white_space: 'standard',\n    closing_tags: 'as-is',\n    attributeExcludes: {}\n}\n\nconst eofWS = /[\\t\\n\\f\\r ]$/\n\n/**\n * `htmlnorm` normalizes HTML for reliable tests, semantic diffs, and\n * readability. See README.\n *\n *  @param src HTML to normalize.\n *  @param options\n *  @return normalized HTML. If `src` is malformed, returns `src` unchanged.\n */\nexport default function htmlnorm (src: string, options?: Partial<OPTIONS>): string {\n    const opts: OPTIONS = {...DEFAULTS, ...options}\n    // console.log(`htmlnorm invoked:\\n    options:`, opts, `\\n    src: ${src ? JSON.stringify(src.slice(0,66)).slice(0,-1) + '...' : JSON.stringify(src)}`)\n\n    if (!src || typeof src !== 'string') {\n        return src\n    }\n\n    const {handler, readResult} = initHandler(opts)\n    // todo: recognizeSelfClosing true or false?\n    const parser = new Parser(handler, {xmlMode: false, recognizeSelfClosing: false})\n\n    try {\n        parser.parseComplete(eofWS.test(src) ? src : src + '\\n')\n    } catch (e: unknown) {\n        // console.log(`htmlnorm exception.`, e)\n\n        // it's a src HTML error, return src as-is per htmlnorm spec\n        if (e instanceof Error && e.message.startsWith('[htmlnorm] malformed html:')) {\n            return src\n        }\n\n        //it's an unexpected internal parser error, rethrow\n        throw e\n    }\n\n    return readResult()\n}\n\nfunction initHandler (options: OPTIONS): { handler: Partial<Handler>; readResult: () => string } {\n    const conservativeWS = options.white_space === 'conservative'\n    const explicitClose = options.closing_tags === 'explicit'\n    const attributeExcludes = Object.entries(options.attributeExcludes).reduce(\n        (m,\n         e: [string, string[]]) => {\n            m.set(e[0], new Set(e[1]))\n            return m\n        }, new Map<string, Set<string>>()\n    )\n\n    let out = ''\n\n    /**\n     * We defer writing out an inline run until we know whether we will format\n     * it as leaf node content or as the content of an\n     * [anonymous block](https://www.w3.org/TR/CSS21/visuren.html#anonymous-block-level).\n     * When an inline run is broken up by hard line breaks, each line is an\n     * entry in this array.\n     */\n    const inlineBuf: string[] = []\n\n    /**\n     * The parser delivers some runs of text in multiple calls to\n     * `ontext`. So far I've noticed it's done so when the source text contains\n     * Unicode character references or escaped characters.\n     *\n     * Using an array to hold such consecutive runs.\n     */\n    const textBuf: string[] = []\n\n    /**\n     * Starts at zero for the root container (the document)\n     */\n    let blockDepth = 0\n\n    /**\n     * Set to true when a `<br>` is encountered. The next element\n     * written out must be written on a new line.\n     */\n    let hardLineBreak = false\n\n    /**\n     * Indicates that the inline represented by {@link inlineBuf}\n     * lead with whitespace, whether or not it was trimmed.\n     * This is used in CONSERVATIVE mode to not introduce\n     * whitespace to the output where there was none in the\n     * input.\n     */\n    let inlineBufLeadingWS = false\n\n    /**\n     * Indicates that just prior to the current position there\n     * was whitespace, whether or now it was written to output.\n     * This is used in CONSERVATIVE mode to not introduce\n     * whitespace in the output where there was none in the input.\n     */\n    let trailingWS = false\n\n    /**\n     * When true, the leading whitespace of new text\n     * encountered will be removed before written\n     * to the output. Does not apply within `<pre>`\n     * block.\n     */\n    let trimLeadingWS = true\n\n    /**\n     * Whether the current context is a `<pre>` block.\n     * We use a counter to represent nested `<pre>` blocks\n     * so that the PRE state does not end until the outer\n     * most `<pre>` block closes.\n     */\n    let inPre = 0\n\n    /**\n     * How block content nesting is formatted.\n     * The default value will always be `container`, and only switched\n     * to either of the leaf nodes temporarily for the duration of the\n     * leaf node, reverting to `container` by or at the close of the element.\n     */\n    let nestingFormat: 'container' | 'leaf' | 'container-as-leaf' = 'container'\n\n    /**\n     * A stack representing the current element hierarchy.\n     * Used to make sure elements are closed properly.\n     */\n    // todo: DELETE me if we totally abandon tracking openElems\n    // const openElems: string[] = []\n\n\n    function popPreText (): void {\n        out += textBuf.join('')\n        textBuf.length = 0\n        return\n    }\n\n    function popText (trimTrailingWS: boolean, dontPopTrailingWS = false): void {\n        if (textBuf.length === 0) {\n            trailingWS = false\n            return\n        }\n\n        let s = textBuf.join('')\n        textBuf.length = 0\n        if (s === '') {\n            trailingWS = false\n            return\n        }\n\n        s = s.replace(/[\\t\\n\\f\\r ]+/g, ' ')\n\n        if (dontPopTrailingWS && s.endsWith(' ')) {\n            textBuf.push(' ')\n            s = s.slice(0, -1)\n            if (s === '') {\n                trailingWS = false\n                return\n            }\n        }\n\n        if (s === ' ') {\n            if (inlineBuf.length === 0) {\n                inlineBufLeadingWS = true\n            }\n            trailingWS = true\n            if (trimLeadingWS || trimTrailingWS) {\n                // nothing left\n                return\n            }\n            pushInline(' ')\n        } else {\n            if (s.startsWith(' ')) {\n                if (inlineBuf.length === 0) {\n                    inlineBufLeadingWS = true\n                }\n                if (trimLeadingWS) {\n                    s = s.slice(1)\n                }\n            }\n\n            trailingWS = s.endsWith(' ')\n            if (trailingWS && trimTrailingWS) {\n                s = s.slice(0, -1)\n            }\n\n            s = escapeForHTML(s)\n            pushInline(s)\n        }\n    }\n\n    function pushInline (s: string): void {\n        if (inlineBuf.length === 0) {\n            inlineBuf.push(s)\n        } else {\n            inlineBuf[inlineBuf.length - 1] += s\n        }\n    }\n\n    function popInline (asAnonymousBlock: boolean,\n                        trimTrailingWS: boolean,\n                        dontPopTrailingWS = false): void {\n        popText(trimTrailingWS, dontPopTrailingWS)\n\n        if (!inlineBuf[0]) {\n            inlineBufLeadingWS = false\n            return\n        }\n\n        const numLines = inlineBuf.length\n\n        if (asAnonymousBlock && (!conservativeWS || inlineBufLeadingWS)) {\n            breakAndIndentLine()\n        }\n        out += inlineBuf[0]\n\n        hardLineBreak = false\n        for (let i = 1; i < numLines; i++) {\n            if (inlineBuf[i] === '') {\n                hardLineBreak = true\n                break\n            }\n\n            breakAndIndentLine()\n            if (!asAnonymousBlock) {\n                out += '    '\n            }\n            out += inlineBuf[i]\n        }\n\n        inlineBuf.length = 0\n        inlineBufLeadingWS = false\n    }\n\n    function breakAndIndentLine (): void {\n        if (out.length === 0) {\n            return\n        }\n        out += '\\n'\n        if (blockDepth > 0) {\n            out += INDENT.repeat(blockDepth)\n        }\n    }\n\n    function breakAndIndentLineIfCan (): void {\n        if (!conservativeWS || trailingWS || hardLineBreak) {\n            breakAndIndentLine()\n        }\n    }\n\n    const handler: Partial<Handler> & { p: Parser } = {\n        p: new Parser(), //temp initial value\n\n        onparserinit (p: Parser): void {\n            // console.log(`PARSER INIT:`, p)\n            this.p = p\n        },\n\n        onopentag (name: string, attribs: { [p: string]: string }, isImplied): void {\n            // console.log(`${'    '.repeat(blockDepth)}OPEN TAG:`, name, isImplied ? 'implied' : '')\n\n            // treat this as malformed, rejecting htmlparser2's \"autofix\".\n            if (isImplied) {\n                throw new Error(`[htmlnorm] malformed html: closing ${name} tag did not have matching open tag`)\n            }\n\n            const a = Object.entries(attribs).filter((attr) => {\n                return !attributeExcludes.get(name)?.has(attr[0])\n            }).sort(([a], [b]) => {\n                /* The arguments are lowercase */\n                if (a < b) return -1\n                if (a > b) return 1\n                return 0\n            }).map(([name, value]) => {\n                if (htmlSpecBoolAttribs.has(name) && (value === '' || value === name)) {\n                    return `${name}`\n                }\n                if (name === 'class') {\n                    value = value.trim().split(/[\\t\\n\\f\\r ]+/g).sort().join(' ')\n                } else if (name === 'style') {\n                    value = normalizeStyle(value)\n                }\n                if (value.indexOf('\"') >= 0) {\n                    if (value.indexOf('\\'') === -1) {\n                        return `${name}='${value}'`\n                    } else {\n                        return `${name}=\"${value.replace(/\"/g, '&quot;')}\"`\n                    }\n                }\n                return `${name}=\"${value}\"`\n            }).join(' ')\n\n            const s = `<${name}${a ? ' ' : ''}${a}>`\n\n            if (inPre !== 0) {\n                popPreText()\n                out += s\n                if (name === 'pre') {\n                    inPre++\n                }\n            } else if (name === 'pre') {\n                popInline(true, true)\n                if ((!conservativeWS || trailingWS || hardLineBreak) && out.length !== 0) {\n                    out += '\\n'\n                }\n                out += s\n                inPre++\n            } else if (leafBlockTags.has(name)) {\n                popInline(true, true)\n                breakAndIndentLineIfCan()\n                out += s\n                if (voidTags.has(name)) {\n                    trimLeadingWS = true\n                } else {\n                    trimLeadingWS = !conservativeWS\n                    blockDepth++\n                    nestingFormat = 'leaf'\n                }\n            } else if (containerBlockTags.has(name)) {\n                popInline(true, true)\n                breakAndIndentLineIfCan()\n                out += s\n                trimLeadingWS = true\n                blockDepth++\n                nestingFormat = formatAsLeafIfNoNestedBlocks.has(name) ? 'container-as-leaf' : 'container'\n            } else { // by default all other tags are treated as inline\n                popText(name === 'br')\n                pushInline(s)\n                if (name === 'br') {\n                    // start new inline line\n                    inlineBuf.push('')\n                    // container elements revert to normal format when inline\n                    // spans more than one line. leaf elements not affected.\n                    if (nestingFormat === 'container-as-leaf') {\n                        nestingFormat = 'container'\n                    }\n                    // we're starting a newline, which is whitespace,\n                    // so any subsequent whitespace can/should be removed.\n                    trimLeadingWS = true\n                } else {\n                    trimLeadingWS = false\n                }\n            }\n\n            // todo: DELETE me if we totally abandon tracking openElems\n            // if (!voidTags.has(name)) {\n            //     openElems.push(name)\n            // }\n        },\n\n        // onopentagname (name: string): void {\n        //     console.log(`${'    '.repeat(blockDepth)}OPEN TAG NAME:`, name)\n        // },\n\n        // onattribute (name: string, value: string, quote?: string | undefined | null): void {\n        //     console.log(`${'    '.repeat(blockDepth)}ATTRIBUTE:`, name, value, quote)\n        // },\n\n        onclosetag (name: string, isImplied: boolean): void {\n            // console.log(`${'    '.repeat(blockDepth)}CLOSE TAG:`, name, isImplied ? 'implied' : '')\n\n            if (voidTags.has(name)) {\n                return\n            }\n\n            // todo: \uD83D\uDEA9 code for possible STRICT MODE?\n            // if (isImplied) {\n            //     throw new Error(`[htmlnorm] malformed html: missing closing ${name} tag`)\n            // }\n            //\n            // todo: this check never triggers because of implied open tags.\n            // const last = openElems.pop()\n            // if (name != last) {\n            //     throw new Error(`[htmlnorm] malformed html: close ${name} does not match last open tag, ${last}\\n outer tags: ${JSON.stringify(openElems)}`)\n            // }\n\n            const s = `</${name}>`\n            if (inPre !== 0) {\n                popPreText()\n                if (explicitClose || !isImplied) {\n                    out += s\n                }\n                if (name === 'pre') {\n                    inPre--\n                    if (inPre === 0) {\n                        trimLeadingWS = true\n                    }\n                }\n            } else if (leafBlockTags.has(name)) {\n                if (nestingFormat === 'leaf') {\n                    blockDepth--\n                    popInline(false, !conservativeWS, isImplied)\n                    if (hardLineBreak && (explicitClose || !isImplied)) {\n                        breakAndIndentLine()\n                        out += '    '\n                    }\n                    nestingFormat = 'container'\n                } else {\n                    popInline(true, !conservativeWS, isImplied)\n                    blockDepth--\n                    if (explicitClose || !isImplied) {\n                        breakAndIndentLineIfCan()\n                    }\n                }\n                if (explicitClose || !isImplied) {\n                    out += s\n                }\n                trimLeadingWS = true\n            } else if (containerBlockTags.has(name)) {\n                if (nestingFormat === 'container-as-leaf') {\n                    blockDepth--\n                    popInline(false, true, isImplied)\n                    nestingFormat = 'container'\n                } else {\n                    popInline(true, true, false)\n                    blockDepth--\n                    if (explicitClose || !isImplied) {\n                        breakAndIndentLineIfCan()\n                    }\n                }\n                if (explicitClose || !isImplied) {\n                    out += s\n                }\n                trimLeadingWS = true\n            } else { // by default all other tags are treated as inline\n                if (explicitClose || !isImplied) {\n                    popText(false, isImplied)\n                    pushInline(s)\n                    trimLeadingWS = false\n                }\n            }\n        },\n\n        ontext (text: string): void {\n            // console.log(`${'    '.repeat(blockDepth)}TEXT:`, JSON.stringify(text))\n            textBuf.push(text)\n        },\n\n        // oncomment (data: string): void {\n        //     console.log(`${'    '.repeat(blockDepth)}COMMENT:`, JSON.stringify(data))\n        // },\n\n        // oncommentend (): void {\n        //     console.log(`${'    '.repeat(blockDepth)}COMMENT END`)\n        // },\n\n        // oncdatastart (): void {\n        //     console.log(`${'    '.repeat(blockDepth)}DATA START`)\n        // },\n\n        // oncdataend (): void {\n        //     console.log(`${'    '.repeat(blockDepth)}DATA END`)\n        // },\n\n        onprocessinginstruction (_name: string, data: string): void {\n            // console.log(`PROCESSING INSTRUCTION:`, _name, data)\n            out += `<${data}>`\n            trimLeadingWS = true\n        },\n\n        /**\n         * Note: this is triggered by incorrect USAGE of htmlparser2, not\n         * anything to do with the HTML being parsed. So irrelevant for\n         * htmlnorm's needs. ignore and let htmlparser2 throw an Error.\n         */\n        // onerror (error: Error): void {\n        //     console.log(`ERROR \"${error}\" ${this.p.startIndex}:${this.p.endIndex}`)\n        // },\n\n        onend (): void {\n            // console.log(`END`)\n            popInline(true, true)\n        }\n\n        // onreset (): void {\n        //     console.log(`RESET`)\n        // }\n    }\n\n    function readResult (): string {\n        return out\n    }\n\n    return {handler, readResult}\n}\n\n\nconst inlineTags = new Set([\n    'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',\n    'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',\n    'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',\n    'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', 'select', 'small',\n    'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',\n    'video', 'wbr', 'text',\n    // obsolete inline tags\n    'acronym', 'big', 'strike', 'tt'\n])\n\nconst leafBlockTags = new Set(\n    ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'title', 'meta', 'link'])\n\nconst containerBlockTags = new Set([\n    'html',\n    'head',\n    'body', 'article', 'section', 'nav', 'aside',\n    'main',\n    'div',\n    'header', 'footer',\n    'hgroup',\n    'figure', 'figcaption',\n    'blockquote',\n    'ul', 'ol', 'li',\n    'table', 'thead', 'tbody', 'tr', 'th', 'td', 'caption',\n    'pre',\n    'address',\n    'dl', 'dt', 'dd'\n])\n\n\nconst formatAsLeafIfNoNestedBlocks = new Set(\n    ['li', 'th', 'td', 'dt', 'dd', 'caption', 'figcaption'])\n\n\n// https://html.spec.whatwg.org/#void-elements\nconst voidTags = new Set(\n    ['area', 'base', 'br', 'col', 'embed', 'hr', 'img',\n        'input', 'link', 'meta', 'param', 'source', 'track', 'wbr'])\n\nif ([...inlineTags, ...leafBlockTags, ...containerBlockTags].length\n    !== inlineTags.size + leafBlockTags.size + containerBlockTags.size) {\n    throw new Error('internal logic bug: HTML element categories overlap')\n}\n\n// https://html.spec.whatwg.org/#attributes-3 (\"This section is non-normative.\")\nconst htmlSpecBoolAttribs = new Set([\n    'allowfullscreen',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected']\n)\n", "'use strict'\n\nimport styleToObject from 'style-to-object'\n\nconst reTextSpecial = new RegExp('[&<>]', 'g')\n\nconst escapeTextChar = function (s: string): string {\n    switch (s) {\n        case '&':\n            return '&amp;'\n        case '<':\n            return '&lt;'\n        case '>':\n            return '&gt;'\n        default:\n            return s\n    }\n}\n\nexport const escapeForHTML = function (s: string): string {\n    if (reTextSpecial.test(s)) {\n        return s.replace(reTextSpecial, escapeTextChar)\n    } else {\n        return s\n    }\n}\n\nexport const normalizeStyle = function(style: string): string {\n    const parsed = styleToObject(style)\n    if (!parsed) return style\n\n    const props: string[] = []\n    Object.keys(parsed).forEach(prop => props.push(prop + ': ' + parsed[prop]))\n    return props.sort().join('; ')\n}\n", "import type {Pipe, PipeProvider} from '../pipe.js'\nimport {registerPipe} from '../registry.js'\nimport type {Config} from '../config.js'\nimport {simplePipelineFromConfigFile} from '../pipeline.js'\nimport * as ta from '../textAssembly/index.js'\nimport * as ir from '../../stir/index.js'\nimport type {STIR, TunnelingSTIR} from '../stir.js'\nimport htmlnorm from 'htmlnorm'\n\nimport JSON5 from 'json5'\n\n\ntype CaseBlockRenderingBranch = ta.Folder & {\n    renderCaseBlocks: (caseFileRoot: ir.Block) => number\n}\n\n// todo[api] THIS TRANSFORM DOESN'T BELONG AS A BUILT-IN\n// - it is specific to case-file.ptss, tightly coupled to it\n//\n// IDEALLY:\n// - it should be colocated with case-file.ptss\n\n/**\n * Renderers and inserts output for all cases that at the root of the document\n * or any of its sections and subsections. Cases nested in other elements are\n * skipped.\n */\nconst provider: PipeProvider = {\n\n    async configure (config?: Config): Promise<Pipe> {\n        if (config === undefined) {\n            throw new Error('missing RenderCaseBlockTransform configuration')\n        }\n        const textAssembly = config.textAssembly()\n        if (textAssembly === undefined) {\n            //todo: CBRB (this Pipe class) COULD work in a non TextAssembly context.\n            // \uD83C\uDF08 See how stir2template.ts does it. \uD83C\uDF08\n            // The CBRB config would determine which form it takes. For example:\n            //  1. support either of the following settings:\n            //            pipelineConfigName\n            //            pipelineConfigPath\n            //  2. The former implies a TextAssembly context, within\n            //     which it will search for files of the specified *name* and\n            //     instantiate Textplain render pipelines using the config in\n            //     the found files for the assembly branch at which it was found.\n            //  3. The latter implies a non TextAssembly context. It will\n            //     instantiate Textplain render pipelines using the config at\n            //     the given *path*.\n            throw new Error('This pipe only works in a TextAssembly context')\n        }\n\n        const normalize = config.value('normalize') === true\n        const htmlnormConfigForSpecFiles = (() => {\n            if (normalize) {\n                return JSON5.parse(config.requiredReadFileSyncAt('htmlnormConfigPath')) as Record<string, unknown>\n            } else {\n                return {}\n            }\n        })()\n\n        console.group('configure Branch Specified Caseblock Render Rigs...')\n        const pipelineConfigName = config.requiredValue('pipelineConfigName')\n        if (typeof pipelineConfigName !== 'string') {\n            throw `Invalid pipelineConfigName: ${pipelineConfigName}`\n        }\n\n        async function configurationVisitor (n: ta.Node): Promise<ta.PreorderVisitReturn> {\n            if (n.isFile()) {\n                if (n.name === pipelineConfigName) {\n                    console.group(`${n.parent.crossAssemblyPath()}`)\n\n                    const pipeline = await simplePipelineFromConfigFile({vfs: n.assemblyRoot().srcFS(), path: n.innerAssemblyPath()})\n                    const transformSection = (sectionRoot: ir.Block): number => {\n                        let fails = 0\n                        const body = sectionRoot.body\n                        if (!ir.isBlockSequence(body)) {\n                            return 0\n                        }\n                        for (const b of body) {\n                            if (b.type === 'section') {\n                                fails += transformSection(b)\n                            } else if (b.type === 'case_block') {\n                                b.actual = pipeline.pump((b.input as string)\n                                    // CommonMark case blocks treat the input as files\n                                    // so must strip any UTF-8 Bom.\n                                    // see https://github.com/commonmark/cmark/blob/7195c6735f29be947ddc41f86c9ddfc8621d33b9/test/regression.txt#L3-L12\n                                    // todo[test] TEMP HACK: i don't like the idea of assuming that case blocks are whole files.\n                                    // todo[hack] i haven't implemented this in textplain/bin, only in the test drivers\n                                    //   just to pass the test. Because I haven't decided how Textplain should handle it.\n                                    //   In any case, it is a corner case so punt for now.\n                                    .replace(/^\\uFEFF/, '')\n                                    // case blocks represent tabs with placeholder symbols\n                                    //   INPUT: transform the symbols into tabs\n                                    .replace(/\u2192/g, '\\t'))\n                                    //   OUTPUT: transform the tabs into symbols\n                                    .replace(/\\t/g, '\u2192')\n                                if (normalize) {\n                                    b.actual = htmlnorm(b.actual as string)\n                                    b.expected = htmlnorm(b.expected as string, htmlnormConfigForSpecFiles)\n                                }\n                                if (b.actual !== b.expected) {\n                                    b.failed = true\n                                    fails++\n                                }\n                            }\n                        }\n                        sectionRoot.fails = fails\n                        return fails\n                    }\n\n                    (n.parent as CaseBlockRenderingBranch).renderCaseBlocks\n                        = (caseFileRoot: ir.Block) => transformSection(caseFileRoot)\n\n                    console.groupEnd()\n                }\n            }\n            return 'continue'\n        }\n\n        await ta.traverseAsync(textAssembly, configurationVisitor, undefined)\n        console.groupEnd()\n\n        function transform (stir: STIR) {\n            try {\n                const tStir = stir as TunnelingSTIR\n                const r = tStir._tunnel.srcFile.searchUpForProperty('renderCaseBlocks', true)\n                if (r !== undefined) {\n                    (r.value as (caseFileRoot: STIR) => number)(stir)\n                }\n            } catch (e) {\n                console.error('--------------------- ERROR ---------------------')\n                console.dir(stir, {depth: null})\n                console.error()\n                console.error(e)\n                // todo[errors] should i call exit here, or throw a new error\n                //  with this error as the cause, as i do in pipeline.ts ?\n                process.exit(-1)\n            }\n        }\n\n        return transform\n    }\n\n}\n\nregisterPipe('RenderCaseActuals', provider)\n\nexport default provider\n\n", "import type {Pipe, PipeProvider} from '../pipe.js'\nimport {registerPipe} from '../registry.js'\nimport type {TOCEmptyHeading, TOCHeading, TOC} from '../toc.js'\nimport * as ir from '../../stir/index.js'\nimport type {STIR} from '../stir.js'\nimport type {Config} from '../config.js'\n\n// todo![now, references] delete all the other TOC generation code once this has taken over\n\n\n/**\n *\n *\n *\n * fillLevelGapsWithEmptyTOCHeadings\n * =================================\n * This option lets the user choose how to handle gaps in heading levels.\n *\n * background\n * ----------\n * Problem: what to do when there are gaps in heading levels?\n * In the following hierarchy, the level jumps from 2 to 4\n * between headings \"Markdown\" and \"Option X \". This example\n * is based on the Pandoc documentation, where it is clear that\n * the gap was intentional; The author wanted all Options to\n * appear as level 4 and SubOptions at level 5, even if there\n * was an Option belonging to no specific Feature:\n *    # Pandoc\n *    ##\n *    ## Markdown\n *    #### Option X\n *    ##### Option Xa\n *    ### Feature A\n *    #### Option A1\n *    ##### SubOption A1a\n *    #### Option A2\n *    ### Feature B\n *    #### Option B1\n *\n * What should the TOC for the above look like. If it was not\n * intentional, or if gaps in the rendered TOC are not allowed\n * for any reason, then Option X would have to appear in the\n * TOC as a direct child of Markdown. But if it were intentional\n * as above, then the TOC, which is a hierarchical data structure,\n * not a flat list as above, would need to fill the gap with a\n * nameless subheading level.\n *\n *\n * What the HTML Living Standard has to say\n * ----------------------------------------\n * https://html.spec.whatwg.org/#outline\n *\n * > The following example is conforming, but not encouraged as it has no [heading](https://html.spec.whatwg.org/#concept-heading) whose [heading level](https://html.spec.whatwg.org/#heading-level) is 1:\n * >\n * > ```\n * > <!DOCTYPE HTML>\n * > <html lang=en>\n * > <title>Alphabetic Fruit</title>\n * > <section>\n * > <h2>Apples</h2>\n * > <p>Pomaceous.</p>\n * > </section>\n * > <section>\n * > <h2>Bananas</h2>\n * > <p>Edible.</p>\n * > </section>\n * > <section>\n * > <h2>Carambola</h2>\n * > <p>Star.</p>\n * > </section>\n * > ```\n * >\n * > The document's [outline](https://html.spec.whatwg.org/#outline) could be presented as follows:\n * >\n * > 1. 1. Apples\n * >    2. Bananas\n * >    3. Carambola\n *\n * and\n *\n * > The following example is conforming, but not encouraged as the first [heading](https://html.spec.whatwg.org/#concept-heading)'s [heading level](https://html.spec.whatwg.org/#heading-level) is not 1:\n * >\n * > ```\n * > <!DOCTYPE HTML>\n * > <html lang=en>\n * > <title>Feathers on The Site of Encyclopedic Knowledge</title>\n * > <h2>A plea from our caretakers</h2>\n * > <p>Please, we beg of you, send help! We're stuck in the server room!</p>\n * > <h1>Feathers</h1>\n * > <p>Epidermal growths.</p>\n * > ```\n * >\n * > The document's [outline](https://html.spec.whatwg.org/#outline) could be presented as follows:\n * >\n * > 1. 1. A plea from our caretakers\n * > 2. Feathers\n *\n *\n * @param root\n * @param fillLevelGapsWithEmptyTOCHeadings - See above\n */\nexport function extractTOC (root: ir.Block,\n                            fillLevelGapsWithEmptyTOCHeadings = false): TOC {\n    const sections = root.hasSections()\n    const targetType = sections ? 'section' : 'heading'\n    const field = sections ? 'title' : 'body'\n\n    const tocRoot: TOCEmptyHeading = {heading: undefined, subheadings: []}\n    let curTOCHeading: TOCHeading | TOCEmptyHeading = tocRoot\n    let curTOCHeadingLevel = 0\n    const stack: [(TOCHeading | TOCEmptyHeading), number][] = []\n\n    const seenIDs: Record<string, boolean> = {}\n\n    root.traverseBodyTree(function (node) {\n        // todo![pipeline, spec] since we are not traversing into\n        //  sectioning roots, nor into inlines, we are not truly\n        //  guaranteeing uniqueness. An alternative to having to\n        //  reconstruct the seenID index *every* time we need to\n        //  do something like this, or being forced to traverse\n        //  all the way into inlines, is to maintain a seenID\n        //  list that is passed down the pipeline and everyone\n        //  keeps up-to-date. That combined with Block.assignUniqueID\n        //  (we'd generalize it for Inlines too) will provide for\n        //  consistent, DRY, efficient ID management.\n        if (node.id !== undefined) {\n            seenIDs[node.id] = true\n        }\n\n        // stop current branch at new sectionRoot boundary\n        if (node.isSectioningRoot()) {\n            return 1\n        }\n\n        if (node.type === targetType) {\n            const nodeLevel = node.level as number\n            if (fillLevelGapsWithEmptyTOCHeadings) {\n                while (nodeLevel > curTOCHeadingLevel + 1) {\n                    const newTOCHeading: TOCEmptyHeading = {\n                        heading: undefined,\n                        subheadings: []\n                    }\n                    if (curTOCHeading.subheadings === undefined) {\n                        curTOCHeading.subheadings = []\n                    }\n                    curTOCHeading.subheadings.push(newTOCHeading)\n                    stack.push([curTOCHeading, curTOCHeadingLevel])\n                    curTOCHeading = newTOCHeading\n                    curTOCHeadingLevel++\n                }\n            }\n            while (nodeLevel <= curTOCHeadingLevel) {\n                [curTOCHeading, curTOCHeadingLevel] = stack.pop() as [TOCHeading, number]\n            }\n            if (curTOCHeading.subheadings === undefined) {\n                curTOCHeading.subheadings = []\n            }\n\n            if (node.id === undefined) {\n                ir.assignUniqueID(node, seenIDs)\n            }\n\n            const newTOCHeading: TOCHeading = {\n                heading: node[field] as ir.InlineSequence,\n                referentID: node.id as string,\n                referent: node\n            }\n            // todo[spec] should we be copying *all* the properties of\n            // the STIR section element to the toc entry?\n            // I think the following would make more sense:\n            //  - copy ONLY those STIR spec-defined properties that make\n            //    sense. It may just be `title` which we've already done\n            //    above. Maybe not. But we can hard-code this since we know\n            //    all the STIR props defined by the spec in advance.\n            //  - copy ALL use-define properties, which we should identify\n            //    with a common prefix/namespace, e.g. `$` or something.\n            //\n            // Though I think we need this for the error count attribs.\n            // Unless we find another solution for that. See [Dashboard.md].\n            // Maybe the TOC data structure can link to the STIR heading\n            // nodes so no copying is necessary.\n            //\n            // Look at other STIR design notes. For example, I think we're\n            // going to prefix\n            //  - maybe we should only copy over user-defined metadata,\n            //    i.e. not the STIR defined stuff?\n            //  - maybe if the STIR spec segregates STIR\n            for (const k in node) {\n                if (k === field || k === 'level' || k === 'type' || k === 'id') {\n                    continue\n                }\n                const v = node[k]\n                if (typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean') {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    newTOCHeading[k] = v\n                }\n            }\n\n            curTOCHeading.subheadings.push(newTOCHeading)\n            stack.push([curTOCHeading, curTOCHeadingLevel])\n            curTOCHeading = newTOCHeading\n            curTOCHeadingLevel = nodeLevel\n        }\n        return 0\n    })\n\n    return tocRoot.subheadings as TOC\n}\n\n\nconst provider: PipeProvider = {\n    async configure (config?: Config): Promise<Pipe> {\n        const fillLevelGapsWithEmptyTOCHeadings = config?.value('fillLevelGapsWithEmptyTOCHeadings') as boolean\n        return (root: STIR) => {\n            if (ir.isBlock(root)) {\n                if (root._tunnel === undefined) {\n                    root._tunnel = {}\n                }\n                (root._tunnel as {toc: TOC}).toc\n                    = extractTOC(root, fillLevelGapsWithEmptyTOCHeadings)\n            }\n        }\n    }\n}\n\nregisterPipe('AddTOC', provider)\n\nexport default provider\n\n", "import type {Pipe, PipeProvider} from '../pipe.js'\nimport {registerPipe} from '../registry.js'\nimport type {STIR, TunnelingSTIR} from '../stir.js'\nimport * as ir from '../../stir/index.js'\n\n/**\n * Calls the validate function in the STIR module on each stir\n * that passes through the pipeline.\n *\n * validates that:\n *  - all IDs are unique\n *  - all references are valid\n *  - content model defined for each type is fulfilled\n *  - ...\n *\n * See also [STIR validator.md]\n */\nconst validate: Pipe = (root: STIR) => {\n    if (ir.isBlock(root)) {\n        // todo![pipeline rethink] would be good to have src metadata even if\n        //  not text assembly context, even if stdin.\n        const srcInfo = (root as TunnelingSTIR)._tunnel?.srcFile?.crossAssemblyPath() ?\n            `\\n  src: ${(root as TunnelingSTIR)._tunnel.srcFile.crossAssemblyPath()}` : ''\n\n        const seenIDs: Record<string, unknown> = {}\n        root.traverseBodyTree(function(b: ir.Block){\n            if (b.id !== undefined) {\n                if (b.id in seenIDs) {\n                    throw new TypeError(`stir node has duplicate id: ${b.toDebugString()}${srcInfo}`)\n                }\n                seenIDs[b.id] = true\n            }\n\n            if (b !== root) {\n                if (!ir.isBlock(b.parent)) {\n                    throw new TypeError(`stir node missing parent: ${b.toDebugString()}${srcInfo}`)\n                }\n            }\n            return 0\n        })\n    }\n    /*\n    !todo[test] add lineEnd validation\n\n    - walk block tree, for each node\n      - assert lineStart >= parent.lineStart\n      - assert lineEND <= parent.lineEND\n\n      in addition, if maintain a stack we can keep track of last sibling on each level:\n      - assert lineStart > prior sibling lineEND\n\n    THE ABOVE WILL NOT VALIDATE accurate spec conformance, e.g. whether endLine\n    includes a blank line when it shouldn't, because we really need unit tests\n    for that). BUT IT WILL validate CONSISTENCY.\n    */\n    return\n}\n\nasync function configure (): Promise<Pipe> {\n    return validate\n}\n\nconst provider: PipeProvider = {\n    async configure (/*config?: Config*/): Promise<Pipe> {\n        return configure()\n    }\n}\n\nregisterPipe('ValidateSTIR', provider)\n\nexport default provider\n\n", "import {registerPlugin} from '../../../registry.js'\nimport type {Stir2Html} from './stir2html.js'\nimport type {PluginProvider} from './pluginProvider.js'\n\n//todo[PDF, LaTeX] For non-live renderings, e.g. output to LaTeX or PDF,\n// we'd implement a Transformer, statically replacing all Mermaid IR nodes\n// SVG image nodes.\n\n\n// todo![plugin api] we need another provider method or install option for inserting items\n//   into the HTML template.\n//   Right now mermaid is hard-coded into it.\n\n/**\n * todo[api] this method or whatever it evolves to becomes\n *  part of the renderer's plugin API\n */\nfunction install (stir2html: Stir2Html, options: Record<string, unknown>) {\n    //console.log('installing mermaid plugin')\n    //mermaid.initialize(options?.mermaid as mermaidAPI.Config || {})\n\n    // todo[api] we need a public API for customizing default block writers\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const defaultBlockWriter = stir2html.bWriters['code_block']\n    stir2html.registerBlockWriter('code_block', (b, out) => {\n        if (b.info?.startsWith('mermaid')) {\n            out.buf += `<div class=\"mermaid\">\\n${b.body}\\n</div>`\n        } else {\n            defaultBlockWriter(b, out)\n        }\n    })\n\n}\n\nconst provider: PluginProvider = {\n    install: (renderer: Stir2Html, options: Record<string, unknown> = {}) => {\n        install(renderer, options)\n    }\n}\n\nregisterPlugin('Mermaid2HtmlPlugin', provider)\n\nexport default provider\n\n\n", "import {registerPlugin} from '../../../registry.js'\nimport type {Stir2Html} from './stir2html.js'\nimport type {PluginProvider} from './pluginProvider.js'\n\nimport Handlebars from 'handlebars'\n\n// todo![doc, site, perf, rollout] Fixing performance and maybe sizing issues\n//  of case block rendering. Possibilities:\n//  - ditch iframes, which have high overhead:\n//\n//    > Warning: Because each browsing context is a complete document environment,\n//    > every `<iframe>` in a page requires increased memory and other computing\n//    > resources. While theoretically you can use as many `<iframe>`s as you like,\n//    > check for performance problems.\n//    > ~ https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\n//\n//    - https://html.duckduckgo.com/html?q=alternative%20to%20iframe\n//\n//    maybe use <embed> or <object> instead:\n//    - https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\n//    - https://stackoverflow.com/questions/16660559/difference-between-iframe-embed-and-object-elements\n//    - https://stackoverflow.com/a/64135042/8910547\n//    - but it looks like <embed> is deprecated, or discouraged, or not supported by\n//      all browsers, and designed for plugins and things like video not embedded HTML.\n//      Recommended by at least one page to use <object> instead.\n//      - https://stackoverflow.com/a/1244854/8910547\n//\n//  - resizing behavior may be better without iframes.\n//  - not sure if using shadow DOM does anything for this use case because\n//    we don't update the page, just show and hide parts.\n\nconst CASE_TEMPLATE = `<div class=\"case\">\n  <div class=\"input\">\n<pre><code class=\"language-markdown\">{{input}}</code></pre>\n  </div>\n  <div class=\"output\">\n    <div class=\"expected rendered\">\n      <iframe height=\"100%\" srcdoc=\"<head><link href='/_resources/body.css' rel='stylesheet' type='text/css'></head><body>{{realTabs expected}}</body>\"></iframe>\n    </div>\n    <div class=\"expected html hidden\">\n<pre><code class=\"language-html\">{{expected}}</code></pre>\n    </div>\n  </div>\n</div>\n`\n\nconst ERROR_CASE_TEMPLATE = `<div class=\"case\">\n  <div class=\"input\">\n<pre><code class=\"language-markdown\">{{input}}</code></pre>\n  </div>\n  <div class=\"output error\">\n    <div class=\"expected rendered\">\n      <iframe height=\"100%\" srcdoc=\"<head><link href='/_resources/body.css' rel='stylesheet' type='text/css'></head><body>{{realTabs expected}}</body>\"></iframe>\n    </div>\n    <div class=\"expected html hidden\">\n<pre><code class=\"language-html\">{{expected}}</code></pre>\n    </div>\n    <div class=\"actual rendered hidden\">\n      <iframe height=\"100%\" srcdoc=\"<head><link href='/_resources/body.css' rel='stylesheet' type='text/css'></head><body>{{realTabs actual}}</body>\"></iframe>\n    </div>\n    <div class=\"actual html hidden\">\n<pre><code class=\"language-html\">{{actual}}</code></pre>\n    </div>\n  </div>\n</div>\n`\n\nconst caseTemplate = Handlebars.compile(CASE_TEMPLATE)\nconst caseErrorTemplate = Handlebars.compile(ERROR_CASE_TEMPLATE)\n\nHandlebars.registerHelper('realTabs', function (text) {\n    return text.replace(/\u2192/g, '\\t')\n})\n\n// todo[api] THIS PLUGIN DOESN'T BELONG AS A BUILT-IN\n// - it is specific to case-file.ptss, tightly coupled to it\n//\n// IDEALLY:\n// - it should be colocated with case-file.ptss\n\n// todo[api] consistent file naming for plugins and transforms\n//  (registered name is independent)\n\n/**\n * todo[api] this method or whatever it evolves to becomes\n *  part of the renderer's plugin API\n */\nfunction install (renderer: Stir2Html, options: Record<string, unknown>) {\n    // todo![fallback inheritance] We have both situations being tested now:\n    //    1. a renderer that knows about the new block type\n    //    2. a renderer that does not (stir2string, which is called during by\n    //       debug logging for every file when web rendering.\n    //  If we implement fallback inheritance, then\n    //   a renderer without this plugin should still be able to render a\n    //   `case_block` like a `code_block`, based on its `typeExtends` property\n    //   and info in the `type metadata` section of the stir.\n    renderer.registerBlockWriter('case_block', function (b, out) {\n        if (b.failed) {\n            out.buf += caseErrorTemplate(b)\n        } else {\n            out.buf += caseTemplate(b)\n        }\n    })\n}\n\n\nconst provider: PluginProvider = {\n    install: (renderer: Stir2Html, options: Record<string, unknown> = {}) => {\n        install(renderer, options)\n    }\n}\n\nregisterPlugin('CaseBlock2HtmlPlugin', provider)\n\nexport default provider\n\n", "import type * as absTOC from '../../../toc.js'\nimport type * as htmlTOC from '../../../renderSTIR.js'\nimport type {RenderSTIR} from '../../../renderSTIR.js'\n\n// todo![template API] currently just a set of functions, but maybe this\n//  should be set up differently, e.g. pass in a page context and all the\n//  template API methods are added to it?\n\n\nexport function toc (aTOC: absTOC.TOC, render: RenderSTIR): htmlTOC.TOC {\n    const hTOC: htmlTOC.TOC = []\n    for (const aEntry of aTOC) {\n        if (aEntry.heading === undefined) {\n            hTOC.push({\n                heading: undefined,\n                subheadings: toc(aEntry.subheadings, render)\n            })\n        } else {\n            const items: htmlTOC.TOCHeading = {\n                heading: render(aEntry.heading),\n                // todo![spec, html, rollout] figure out the right rules for this.\n                //   I think the replacement below is too strict. From what I've\n                //   read, IDs can have anything except whitespace, and the real\n                //   reason you want to exclude certain chars has to do with not\n                //   forcing the need for escaping when using the ID in a CSS\n                //   selector. See https://www.w3.org/TR/CSS21/syndata.html#value-def-identifier.\n                //   But since these IDs will also be used as fragment identifiers,\n                //   we want to play nice with URL syntax and URL parsers as well.\n                //   https://stackoverflow.com/questions/26088849/url-fragment-allowed-characters\n                id: aEntry.referentID\n                    .toLowerCase()\n                    // Unlike CommonMark, i'm allowing `/`, which is\n                    // the STIR ID path delim. If that turns out to be a bad idea,\n                    // should replace with some other character, not strip it as\n                    // the following line does with every other special char.\n                    .replace(/[^\\p{L}\\p{N}\\s_./-]+/gu, '')\n                    .trim()\n                    .replace(/\\s+/g, '-')\n                    .replace(/^$/, 'section')\n            }\n            for (const k in aEntry) {\n                if (k !== 'heading' && k !== 'referentID' && k !== 'referent') {\n                    items[k] = aEntry[k]\n                }\n            }\n            if (aEntry.subheadings !== undefined) {\n                items.subheadings = toc(aEntry.subheadings, render)\n            }\n            hTOC.push(items)\n        }\n    }\n    return hTOC\n}\n", "import type {RenderSTIR, RenderSTIRProvider} from '../../../renderSTIR.js'\nimport * as templateAPI from './templateAPI.js'\nimport type {Config} from '../../../config.js'\nimport {registerSTIRRenderer, lookupSTIRRenderer} from '../../../registry.js'\nimport {isBlock} from '../../../../stir/index.js'\nimport type {STIR, TunnelingSTIR} from '../../../stir.js'\nimport type {TOC} from '../../../toc.js'\nimport {extractTOC} from '../../../pipe/addTOC.js'\n\n\nimport Handlebars from 'handlebars'\n\n// todo[arch] We have handlebars helpers definer all over the codebase.\n//  Make sure they are located with the Textplain components that they\n//  exist for.\n//  - For example, all the Handlebars helpers registered in assembly2website.ts\n//    belong here as built-in helpers\n\n//todo[html] Does this renderer work for HTML only?\n// - if so, renamed to Stir2HtmlTemplate ?\n\ntype MatchRule = {\n    path?: string\n    type?: string\n    template: string\n}\n\nconst stirRenderer = function (config: Config, renderStir: (stir: STIR) => string): RenderSTIR {\n    const defaultHBS = config.requiredReadFileSyncAt('templates.default')\n    const defaultTemplate = Handlebars.compile(defaultHBS)\n\n    const render: RenderSTIR = (stir: STIR) => {\n        const page: Record<string, unknown> = {}\n        page.body = renderStir(stir)\n        if (isBlock(stir)) {\n            page.toc = () => {\n                return templateAPI.toc(extractTOC(stir), renderStir)\n            }\n        }\n        page.stir = stir\n        page.title = 'not implemented'\n        return defaultTemplate(page, {\n            allowProtoMethodsByDefault: true,\n            allowProtoPropertiesByDefault: true\n        })\n    }\n\n    console.groupEnd()\n    return render\n}\n\nconst assemblyRenderer = function (config: Config, renderStir: (stir: STIR) => string): RenderSTIR {\n    const indexHBS = config.requiredReadFileSyncAt('templates.section')\n    const standardHBS = config.requiredReadFileSyncAt('templates.page')\n    // todo[perf] See docs on Handlebars.compile for perf options.\n    //   https://handlebarsjs.com/api-reference/compilation.html#handlebars-compile-template-options\n    const indexTemplate = Handlebars.compile(indexHBS)\n    const casePageTemplate = Handlebars.compile(standardHBS)\n\n    const render: RenderSTIR = (stir: STIR) => {\n        const tunnel = (stir as TunnelingSTIR)._tunnel\n        const file = tunnel.srcFile\n\n        // todo![template api, security] See Template API docs.\n        // todo![template api]: fully define this type (no \"unknown\"). if must\n        //   support custom data, it should go in a sub-property anyway to prevent clashes\n        //   with API additions (i.e. the entire namespace directly under `page` is reserved,\n        //   and custom data must be added under `page.custom`, or require that custom\n        //   fields be prefixed with `_` or something (we can make this typesafe e.g.\n        //   `[object type with all API specified] & Record<_${string}`, unknown>`))\n        const page = file as unknown as Record<string, unknown> & {debug: Record<string, unknown>}\n        page.body = renderStir(stir)\n        if (isBlock(stir) && tunnel.toc !== undefined) {\n            // a function for lazy conversion\n            // todo![template API] lazy is nice, but it impacts the template API;\n            //    user has to remember to use parens (see template). Is there a\n            //    better way?\n            page.toc = () => templateAPI.toc(tunnel.toc as TOC, renderStir)\n        }\n        page.site = tunnel.srcAssembly\n        page.stir = stir\n\n        //todo![template api] if we redo the API where the context is more \"global\" and\n        //  `page` is a property (e.g. `{{ page.title }}` instead of `{{ title }}`), then\n        //  `debug` should be top level, along with `site` and various other things that\n        //  should not be a property of the page.\n        page.debug = {}\n\n        //todo![template api] we have a lot of control over template execution on a per\n        //  call basis: helpers, partials and arbitrary data/objects specific to a call.\n        //  See https://handlebarsjs.com/api-reference/runtime-options.html\n        //\n        //todo![template api] if we move to helper functions, maybe we can disable the security\n        // issues below? Or are these not a security concern for Textplain?\n        if (file.isOpeningContent()) {\n            //todo![template api] maybe this should instead be one of:\n            // - debug.template.path  (allows having other template props than path)\n            // - template.path   (should template be a debug property?)\n            page.debug.templatePath = config.requiredValue('templates.section')\n            return indexTemplate(page, {\n                //todo![template api] unsafe to allow proto methods.\n                // See Template API docs.\n                allowProtoMethodsByDefault: true,\n                allowProtoPropertiesByDefault: true\n            })\n        } else {\n            page.debug = {templatePath: config.requiredValue('templates.page')}\n            return casePageTemplate(page, {\n                allowProtoMethodsByDefault: true,\n                allowProtoPropertiesByDefault: true\n            })\n        }\n    }\n\n    console.groupEnd()\n    return render\n}\n\n/**\n * used not just for rendering the full stir, but any portions\n * extracted, e.g. page title or TOC entries.\n *\n * @type {{configure(config?: Config): Promise<RenderSTIR>}}\n *\n * Expected config structure:\n * ``` JSON\n * {\n *     renderer: {\n *         provider: string,\n *         config: {\n *             plugins: [\n *                 {\n *                     provider: string\n *                     config?: Record<string, unknown>\n *                 }\n *             ]\n *         }\n *     },\n *     helpers: {\n *          * path to file(s) defining custom Handlebars helpers\n *     },\n *     templates: {\n *         opening: '/index-template.hbs',\n *         standard: '/case-doc-template.hbs',\n *     },\n *     matchRules: MatchRule[]\n * }\n * ```\n */\nconst provider: RenderSTIRProvider = {\n    async configure (config?: Config): Promise<RenderSTIR> {\n        if (config === undefined) {\n            throw new Error('missing RenderSTIRProvider configuration')\n        }\n        const internalRendererConfig = config.requiredSubConfig('renderer')\n        const providerName = internalRendererConfig.requiredValue('provider')\n        console.group(`configure internal renderer: ${providerName}`)\n        const provider = lookupSTIRRenderer(providerName)\n        if (provider === undefined || provider.configure === undefined) {\n            throw new Error(`invalid renderer: ${providerName}`)\n        }\n        const providerConfig = internalRendererConfig.subConfig('config')\n        const renderStir = await provider.configure(providerConfig)\n\n        if (config.textAssembly() === undefined) {\n            return stirRenderer(config, renderStir)\n        } else {\n            return assemblyRenderer(config, renderStir)\n        }\n    }\n}\n\nregisterSTIRRenderer('Stir2Template', provider)\n\nexport default provider\n\n", "import type {Provider} from './provider.js'\nimport type {Outlet} from './outlet.js'\nimport type {Config} from './config.js'\nimport type {STIR} from './stir.js'\nimport {lookupSTIRRenderer} from './registry.js'\n\n// Maybe rename to (Never)STIRender \uD83D\uDE02\n\nexport type TOC = (TOCHeading | TOCEmptyHeading)[]\nexport type TOCHeading = {\n    heading: string,\n    //todo![internal links, references] Targetable elements must have a referencable\n    // unique string identifier (unique at least within a STIR). PTSS should\n    // populate its corresponding STIR element with it, and STIR elements\n    // that link to it will use the same reference. Such an identifier should\n    // be included in the TOC entry, so that the rendered TOC entry can be\n    // linked to its corresponding rendered content element.\n    //synonym/targetingRef: ???,\n    subheadings?: TOC,\n    [key: string]: unknown\n}\nexport type TOCEmptyHeading = {\n    heading: undefined\n    subheadings: TOC\n}\n\n/**\n * A subtype of {@link Outlet}, RenderSTIR returns a string rendering of the\n * input.\n */\nexport type RenderSTIR = Outlet<string> //todo[api] Buffer? {toString():sting?}\n\nexport type RenderSTIRProvider = Provider<RenderSTIR>\n\nexport async function configRenderSTIRProvider (config: Config): Promise<RenderSTIR> {\n    const providerName = config.requiredValue('provider')\n    console.group(`configure outlet: ${providerName}`)\n    const provider = lookupSTIRRenderer(providerName as string)\n    if (provider === undefined || provider.configure === undefined) {\n        throw new Error(`invalid outlet: ${providerName as string}`)\n    }\n    const providerConfig = config.subConfig('config')\n    const outlet = await provider.configure(providerConfig)\n    console.groupEnd()\n    return (stir: STIR) => {\n        console.debug(`\u2652\uFE0F OUTLET ${providerName} ${providerConfig ? JSON.stringify(providerConfig.data()) : ''}`)\n        console.group()\n        const out = outlet(stir)\n        console.groupEnd()\n        return out\n    }\n}\n", "/*\nSee also:\n\nby magic bytes:\n - https://www.npmjs.com/package/mmmagic\n - https://www.npmjs.com/package/magic-bytes.js\n - https://www.npmjs.com/package/buffer-signature\n\nby file ext:\n 0 https://www.npmjs.com/package/mimer\n - https://www.npmjs.com/package/mrmime\n\nmimetype info and parsing\n - https://www.npmjs.com/package/whatwg-mimetype\n - https://www.npmjs.com/package/@contentful/mimetype\n\n */\n\n\nexport type Type\n    = 'text'\n    | 'media'\n    | 'resource'\n    | 'unknown'\n\nexport type Role\n    = 'content'\n    | 'resource'\n    | 'assembly meta'\n    | 'unknown'\n\nexport type FileType = {\n    name: string\n    type: Type\n    role: Role\n    mimetype: string | undefined\n    userDefined: boolean\n}\n\nconst extMap: Record<string, FileType> = {}\n\nfunction registerFileType (name: string, type: Type, role: Role, mimetype: string | undefined, userDefined: boolean, ...extensions: string[]) {\n    extensions.forEach(ext => {\n        ext = ext.toLowerCase()\n        if (extMap[ext] !== undefined) {\n            throw new Error(`duplicate filetype registration for extension: ${ext}`)\n        }\n        extMap[ext] = {name, type, role, userDefined, mimetype}\n    })\n}\n\nfunction registerBuiltinFileType (name: string, type: Type, role: Role, mimetype: string | undefined, ...extensions: string[]) {\n    registerFileType(name, type, role, mimetype, false, ...extensions)\n}\n\nexport function registerUserFileType (name: string, type: Type, role: Role, mimetype: string | undefined, ...extensions: string[]) {\n    registerFileType(name, type, role, mimetype, true, ...extensions)\n}\n\n\nconst UNKNOWN: FileType = {name: 'unknown', type: 'unknown', role: 'unknown', userDefined: false, mimetype: undefined}\n\nfunction ext (f: string): string {\n    // https://stackoverflow.com/a/12900504/8910547\n    return f.slice((f.lastIndexOf('.') - 1 >>> 0) + 2)\n}\n\nexport function fileTypeByFilename (name: string): FileType {\n    const e = ext(name)\n    return extMap[e] || extMap['$' + name] || UNKNOWN\n}\n\n\n// text\nregisterBuiltinFileType('HTML', 'text', 'content', 'text/html', 'html', 'htm')\nregisterBuiltinFileType('MARKDOWN', 'text', 'content', 'text/markdown', 'md', 'markdown')\nregisterBuiltinFileType('STIR (JSON)', 'text', 'content', 'text/json+stir', 'stir')\nregisterBuiltinFileType('TEXT', 'text', 'content', 'text/plain', 'txt')\n// todo![renderAssembly] should we register the extension '$[[GENERATED]]' for registerBuiltinFileType('STIR', 'text', 'content', undefined, '$[[GENERATED]]')\n\n// media\nregisterBuiltinFileType('JPEG', 'media', 'content', 'image/jpeg', 'jpeg', 'jpg')\nregisterBuiltinFileType('PNG', 'media', 'content', 'image/png', 'png')\nregisterBuiltinFileType('GIF', 'media', 'content', 'image/gif', 'gif')\nregisterBuiltinFileType('SVG', 'media', 'content', 'image/svg+xml', 'svg')\n\n// resources\nregisterBuiltinFileType('CSS', 'resource', 'resource', 'text/css', 'css')\nregisterBuiltinFileType('ICO', 'resource', 'resource', undefined, 'ico')\nregisterBuiltinFileType('JS', 'resource', 'resource', 'text/javascript', 'js')\n\n// text assembly meta\nregisterBuiltinFileType('TextAssembly sort spec', 'resource', 'assembly meta', undefined, '$sort')\n", "import {registerAssemblyRenderer} from '../../registry.js'\nimport type {AssemblyRenderer, AssemblyRendererProvider, RenderStats} from './AssemblyRenderer.js'\nimport type {Config} from '../../config.js'\nimport * as ta from '../../textAssembly/index.js'\nimport {RenderSTIR, configRenderSTIRProvider} from '../../renderSTIR.js'\nimport * as ir from '../../../stir/index.js'\nimport type {STIR, TunnelingSTIR} from '../../stir.js'\nimport {SandboxFS} from '../../../vfs/index.js'\nimport {fileTypeByFilename} from '../../filetypes.js'\n\nimport Handlebars from 'handlebars'\nimport posix from 'path-browserify'\nimport encode from 'mdurl/encode.js'\nimport MiniSearch from 'minisearch'\n\n\ntype Loc = { 'start': { 'line': number, 'column': number }, 'end': { 'line': number, 'column': number } }\n\nfunction reportTemplateError (error: string, options: Handlebars.HelperOptions): void {\n    //todo![errors]\n\n    // user configurable, e.g.\n    // 1. console.warn\n    // 2. fail-fast\n    // 3. Author Mode / Debug Mode behavior\n    // 4. ?\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const loc: Loc = options.loc as Loc\n    console.warn(`template error \"${error}\" at ${loc.start.line}, ${loc.start.column}`)\n}\n\n/**\n * Template API {{ href }} returns an href link to the current page, or to the\n * TextAssembly node specified as the first arg. The href returned reflects the\n * href_style setting.\n *\n * See Template API documentation.\n *\n * TODO![renderAssembly] needs to reflect `href_style` setting and all call-specific\n *  overrides. Currently 'local' style and 'abs' override are supported.\n *  - add tests to cover all legit combos.\n */\nHandlebars.registerHelper('href', function (...args) {\n    const options: Handlebars.HelperOptions = args.pop()\n    const from = options.data['root'] as ta.Node\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore  todo![template api] specifying the API will take care of this hack\n    // todo![test] should we add test coverage for this? Reasons:\n    //  1. confirm that this info is being set on the context\n    //  2. we can use this to confirm that the correct template is being selected. The alternative\n    //     is to make each template have some unique content so that we can identify the template\n    //     used directly from the rendering.\n    // Question: Do we have to test by examining stderr? Or can we test the context object somehow?\n    console.debug(`{{ href }} called from ${from.debug.templatePath} for ${from.outerAssemblyPath()}`)\n\n    // console.debug(`  options: ${Object.keys(options)}`)\n    // console.debug(`  data:    ${Object.keys(options.data)}`)\n    // console.debug(`  hash:    ${JSON.stringify(options.hash)}`)\n    // console.debug(`  abs:     ${options.hash['style'] === 'abs'}`)\n\n    if (args.length > 1) {\n        reportTemplateError('too many args', options)\n    }\n    if (options.hash['style'] !== undefined && options.hash['style'] !== 'abs') {\n        throw new Error(`\"${options.hash['style']}\" href style not implemented`)\n    }\n\n    const to: ta.Node | string = args.length === 0 ? from : args[0]\n    const abs = options.hash['style'] === 'abs'\n\n    if (typeof to === 'string') {\n        return 'NOT IMPLEMENTED'\n    } else {\n        return convertFilePathToUriPath(abs ? outPathForNode(to) : relativeOutPath(from, to))\n    }\n})\n\n//todo[template api] maybe shouldn't return HTML but instead just the list\n//  of links and the template can use CSS to style? e.g. like\n//  https://krasimirtsonev.com/blog/article/CSS-before-and-after-pseudo-elements-in-practice#breadcrumbs-navigation\nHandlebars.registerHelper('breadcrumbs', function (f: ta.File) {\n    let cur: ta.Node\n    if (f.isOpeningContent()) {\n        cur = f.parent\n    } else {\n        cur = f\n    }\n    let breadcrumbs = cur.title as string\n    while (cur.parent !== undefined) {\n        cur = cur.parent\n        breadcrumbs = `<a href=\"${relativeOutPath(f, cur)}\">${cur.title}</a> / ` + breadcrumbs\n    }\n    return breadcrumbs\n})\n\n// todo![test] add tests for posix\ntype HREF_STYLE = 'rel' | 'abs' | 'url' | 'local'\n\nexport class Assembly2Website implements AssemblyRenderer {\n    private readonly renderSTIR: RenderSTIR\n    private readonly dest: SandboxFS\n\n    // resources that aren't part of the TextAssembly, but needed for the rendered website\n    private readonly webResourceSrcRoot: SandboxFS | undefined\n\n    private renderCnt = 0\n    private copyCnt = 0\n\n    readonly searchIndex: MiniSearch\n\n    /**\n     * Determines the href style used to point to a node in the rendered website.\n     *\n     * todo[api] the option design below is a first idea. Maybe replace with\n     *    low-level switches. See *API Design Resources* below.\n     *\n     * The current design of this setting offers high level, semantic choices\n     * such as `'local'`, rather than low-level switches such as `'include\n     * index.html' on directories .\n     *\n     * `posix`: like the posix standard: files don't have trailing slashes,\n     *          slashes denote directories.\n     * `local`: use this if you want the links to work if the rendered files\n     *          are opened on the local locally rather than served by a\n     *          webserver.\n     *\n     * API Design Resources\n     * --------------------\n     * See:\n     *  - https://www.zachleat.com/web/trailing-slash/ (written by the creator of Eleventy and employee of Netlify)\n     *  - https://github.com/slorber/trailing-slash-guide\n     *  - https://stackoverflow.com/questions/5948659/when-should-i-use-a-trailing-slash-in-my-url\n     *  - https://searchfacts.com/url-trailing-slash/\n     *  -\n     */\n    private readonly hrefStyle: HREF_STYLE = 'rel'\n\n    constructor (dest: SandboxFS,\n                 renderSTIR: RenderSTIR,\n                 webResourceSrcRoot?: SandboxFS,\n                 hrefStyle?: HREF_STYLE) {\n        this.renderSTIR = renderSTIR\n        this.dest = dest\n        this.webResourceSrcRoot = webResourceSrcRoot\n        this.hrefStyle = hrefStyle || 'rel'\n        this.searchIndex = new MiniSearch(\n            {\n                fields: ['path', 'title', 'body'],\n                idField: 'path',\n                storeFields: ['path', 'title']\n            })\n        console.log(`instantiated new Assembly2Website (dest=${dest})`)\n    }\n\n    prepare (assembly: ta.Assembly): void {\n        this.renderCnt = 0\n        this.copyCnt = 0\n        this.searchIndex.removeAll()\n        this.prepareFolder(assembly)\n\n        //todo![renderAssembly] why is this in prepare and not in render?\n        //- presumably because we need insert these properties on every node\n        //  in the tree in advance, because templates need them as properties,\n        //  not prototype methods, which are a problem. See Template API docs.\n        //  \uD83C\uDFC8 until we tackle the Template API as a whole.\n        console.info('hacking Handlebars...')\n        ta.traverse(assembly, (node: ta.Node): ta.PreorderVisitReturn => {\n            /* eslint-disable */\n            const page = node as ta.Node & Record<string, unknown>\n            if (node.isFile()) {\n                page.isGeneratedHACK = node.isGenerated()\n                page.isOpeningContentHACK = node.isOpeningContent()\n            } else {\n                //\n            }\n            page.isFileHACK = node.isFile()\n            page.isFolderHACK = node.isFolder()\n            page.innerAssemblyPathHACK = node.innerAssemblyPath()\n            page.outerAssemblyPathHACK = node.outerAssemblyPath()\n            /* eslint-enable */\n            return 'continue'\n        }, undefined)\n\n        if (this.webResourceSrcRoot !== undefined) {\n            console.info('copying web assembly resources...')\n            this.dest.copySync({vfs: this.webResourceSrcRoot, path: '/'}, '/', true)\n        }\n    }\n\n    private prepareFolder (folder: ta.Folder) {\n        // todo[correctness] should use convertNameToWebName for folder names too?\n        folder.outNode = folder.name\n        if (folder.parent !== undefined) {\n            console.debug(`mkdir ${outPathForNode(folder)}`)\n            this.dest.mkdirSync(outPathForNode(folder), false)\n        }\n\n        for (const n of folder.content) {\n            if (n.isFolder()) {\n                if (n.hasIncludedContent) {\n                    this.prepareFolder(n)\n                }\n            } else {\n                if (n.status === 'sText: waiting' || n.status === 'resource: waiting') {\n                    n.outNode = destForFile(n)\n                    if (n.outNode === undefined) {\n                        throw new Error(`unexpected state for ${n.outerAssemblyPath()}`)\n                    }\n                }\n            }\n        }\n\n        if (folder.openingContent !== undefined) {\n            folder.openingContent.outNode = destForFile(folder.openingContent)\n        } else {\n            throw new Error(`unexpected indexable folder w/o opening content`)\n        }\n    }\n\n    render (stir: STIR): void {\n        //todo![renderAssembly] the pipeline logging has the inner renderer showing up as '\u2652\uFE0F OUTLET', not the assembly renderer.\n\n        const tStir = stir as TunnelingSTIR\n        const file = tStir._tunnel.srcFile\n        const text = resolveCrossReferencesAndExtractText(stir, file, this.hrefStyle)\n        this.searchIndex.add({id: this.renderCnt, path: outPathForNode(file), title: file.title, body: text})\n        const html = this.renderSTIR(stir)\n        this.dest.writeFileSync(outPathForNode(file), html)\n        console.debug(`rendered to: ${outPathForNode(file)}`)\n        file.status = 'sText: rendered'\n        this.renderCnt++\n    }\n\n    copy (file: ta.File): void {\n        if (file.status !== 'resource: in pipeline') {\n            throw new Error(`unexpected status for ${file.outerAssemblyPath()}: ${file.status}`)\n        }\n\n        console.debug(`copying resource: ${file.crossAssemblyPath()}`)\n        this.dest.copySync({vfs: file.assemblyRoot().srcFS(), path: file.innerAssemblyPath()}, outPathForNode(file))\n        file.status = 'resource: copied'\n        this.copyCnt++\n    }\n\n    finish () {\n        console.info(`finishing website render...`)\n        console.group()\n\n        // test search //todo![now, test] replace this with a cli.test.js query\n        const results = this.searchIndex.search('asynchronous')\n        console.info(`search \"asynchronous\":`)\n        results.forEach(result => console.info(`  ${result.title}`))\n\n        this.publishSearchIndex()\n\n        console.groupEnd()\n    }\n\n    private publishSearchIndex (): void {\n        const jsonIndex = this.searchIndex.toJSON()\n        const serializedIndex = JSON.stringify(jsonIndex)\n        const indexFilePath = '/_resources/MiniSearch_Index.json'\n        if (!this.dest.existsSync('/_resources/')) {\n            this.dest.mkdirSync('/_resources/', false)\n        }\n        this.dest.writeFileSync(indexFilePath, serializedIndex)\n        console.info(`static index: ${(serializedIndex.length / (1024 * 1024)).toFixed(2)} Mb written to ${indexFilePath} (serializationVersion: ${jsonIndex.serializationVersion})`)\n    }\n\n    stats (): { [p: string]: RenderStats } {\n        return {\n            'pages rendered': this.renderCnt,\n            'files copied': this.copyCnt,\n            'index generated': {\n                'pages': this.searchIndex.documentCount,\n                'terms': this.searchIndex.termCount\n            }\n        }\n    }\n}\n\nfunction resolveCrossReferencesAndExtractText (stir: STIR, file: ta.File, hrefStyle: HREF_STYLE): string {\n    let text = ''\n\n    if (hrefStyle !== 'rel' && hrefStyle !== 'local') {\n        throw new Error(`\"${hrefStyle}\" href style not implemented`)\n    }\n    console.debug('resolving cross references')\n    console.group()\n    // 1. need to traverse the STIR for links\n    // 2. resolve the link (i.e. using a resolveCrossReferences function)\n    //\n    // Option A: use Block.traverseBodyTree and Inline.traverseInlineBodyTree.\n    // But won't find links outside the body tree without knowing the structure\n    // of each node type encountered, e.g. the way parser.ts#parseBlockInlines\n    // is hardcoded to look in block.title as well as block.body.\n    //\n    // Option B: do link resolution at final render time, in htmlOut, since that\n    // code will by definition know all of the structures, even for custom\n    // types. We could pass htmlOut a resolveCrossReferences function.\n    //\n    // Option C: Factor a structure-aware traversal out of htmlOut, making it\n    // useful for purposes other than the final rendering. Custom block defs\n    // are required to tell htmlOut (somehow) about their structure.\n    //\n    // Option D: Require custom types to register their structure in some\n    // generic way (but hey, we own the PTSS spec! Of course we have access!)\n    //\n    // OBVIOUSLY the solution involves whatever mechanism we settle on for\n    // custom block types to register themselves and their structure.\n\n    // BUT FOR NOW:\n    const inlineBodyVisitor = function (inline: ir.Inline | string): void {\n        // console.debug(`inline: ${inline}`)\n        if (typeof inline === 'string') {\n            text += ' ' + inline\n        }\n        if (typeof inline === 'object' && (inline.type === 'xref' || inline.type === 'image')) {\n            const referent = inline.referent\n            // todo[hack] implement proper detection of URL\n            if (typeof referent === 'string' && !referent.startsWith('http:')) {\n                console.debug(`resolving link from ${file.outerAssemblyPath()} to ${referent}`)\n                const targetNode = file.resolvePath(referent)\n                console.debug(`  resolved target: ${targetNode?.outerAssemblyPath()}`)\n                if (targetNode !== undefined) {\n                    inline.referent = relativeOutPath(file, targetNode)\n                    //todo[WIP, hack]\n                    if (targetNode.isFolder() && hrefStyle === 'local') {\n                        inline.referent += '/index.html'\n                    }\n                    console.debug(`  rendered path:   ${inline.referent}`)\n                } else {\n                    console.debug(`  \u274C BROKEN LINK`)\n                }\n            }\n        }\n    }\n    if (ir.isBlock(stir)) {\n        // todo![now] we have a common need to traverse the ENTIRE STIR:\n        //   - both Block and Inline\n        //   - all paths, not just 'body' and 'title', including custom\n        //     content models.\n        //   <br>\n        //   ADD a `traverseSTIR` or `traversTree` or just `traverse`\n        //   function to the STIR package that knows how to do this.\n        //   When doing so, decide whether it should implement both\n        //   pre- and post-order callbacks as I do for `textAssembly/traverse`.\n        //   <br>\n        //   MERGE this note with the note that includes\n        //    \"I've had an epiphany that flies two birds on one wing:\",\n        //    and possible move to the Whiteboard.\n        stir.traverseBodyTree(function (b: ir.Block) {\n            // console.debug(`block: ${b.type}`)\n            if (b.title) {\n                ir.traverseInlineBodyTree(b.title, inlineBodyVisitor)\n            }\n            if (ir.isInlineSequence(b.body)) {\n                ir.traverseInlineBodyTree(b.body, inlineBodyVisitor)\n            }\n            return 0\n        })\n    } else {\n        ir.traverseInlineBodyTree(stir, inlineBodyVisitor)\n    }\n\n    console.groupEnd()\n    return text\n}\n\nfunction outPathForNode (n: ta.Node): string {\n    let op = n.outNode\n    if (op === undefined) {\n        throw new Error(`outPath not available for ${n.outerAssemblyPath()}`)\n    }\n    let p: ta.Folder | undefined = n.parent\n    while (p !== undefined) {\n        op = p.outNode + op\n        p = p.parent\n    }\n    return op\n}\n\nfunction relativeOutPath (from: ta.Node, to: ta.Node): string {\n    if (from.isFile()) {\n        from = from.parent\n    }\n    const rel = posix.relative(outPathForNode(from), outPathForNode(to))\n    return rel.length === 0 ? '.' : rel\n}\n\n// todo[api] support aggregation (folding of branch into single node)\n//  and multiplexing (e.g. html and pdf)\nfunction destForFile (file: ta.File): string | undefined {\n    if (file.isOpeningContent()) {\n        return 'index.html'\n    }\n\n    const type = fileTypeByFilename(file.name)\n    //todo[hack] hack for commonmark case files having txt extension\n    if (type.name === 'TEXT' && file.parent.name === 'spec/') {\n        return convertNameToWebName(file.nameSansExt()) + '.html'\n    }\n    if (type.name === 'MARKDOWN') {\n        return convertNameToWebName(file.nameSansExt()) + '.html'\n    } else if (type.name === 'HTML') {\n        return file.name\n    } else if (type.type === 'media' || type.type === 'resource') {\n        return file.name\n    }\n    return undefined\n}\n\n\n//todo[hack] what are the actual rules we should implement?\n// I know it is more than just replace spaces.\n//\n// todo![sitescheme] Ok, I found at least one live fail in the site render.\n//   look at the files not working under the `meta/site design` folder,\n//   e.g. `\uD83C\uDF36 Checkout Handlebars \"Creating interactive examples\"` but also\n//   the file with the png screen snapshot that doesn't load.\n//\n// - Are there standard/popular URL-ize functions I should use.\n//   - no JS built-in? Use the URL class?\n//   - https://www.npmjs.com/package/uri-path\n// - Can I use the same URL-ize string for filenames?\n// - Investigate what other tools do.\n//   - see https://docs.antora.org//latest/how-antora-works/\n//     - \"t also computes the output path (disk) and publish path (URL) information for each publishable file.\"\n//   - See https://github.com/gohugoio/hugo/blob/master/helpers/path.go\n//     and https://github.com/gohugoio/hugo/blob/master/helpers/path_test.go\n//     also https://github.com/gohugoio/hugo/blob/master/helpers/pathspec_test.go\n// - \u2753I'm doing some stuff with Handlebars, e.g.  {{{ vs {{, so\n//   SHOULD this be made the template's responsibility?\n//   - or should Textplain do that to ensure consistency and make templates easier to write?\nfunction convertNameToWebName (n: string) {\n    return n.replace(/\\s/g, '-')\n}\n\n//todo[web] not sure this is correct, but it works for most links now\nconst convertFilePathToUriPath = function (path: string): string {\n    try {\n        return encode(path, ';/:@&=+$,-_.!~*\\'()')\n    } catch (err) {\n        return path\n    }\n}\n\n\nexport const provider: AssemblyRendererProvider = {\n    async configure (dest: SandboxFS, config?: Config): Promise<AssemblyRenderer> {\n        if (config === undefined) {\n            // todo![renderAssembly, zero config] should we support zero config by implementing a\n            // default config here? Or should that happen upstream?\n            throw new Error(`missing AssemblyRendererProvider config`)\n        }\n        const outletConfig = config.requiredSubConfig('formats.html')\n        const renderSTIR = await configRenderSTIRProvider(outletConfig)\n        const webResourcesPath = config.resolvedPathValue('webResourcesPath')\n        const webResourcesFS = webResourcesPath ? new SandboxFS(webResourcesPath, 'readonly') : undefined\n        const hrefStyle = config.value('href_style')\n        return new Assembly2Website(dest, renderSTIR, webResourcesFS, hrefStyle)\n    }\n}\n\nregisterAssemblyRenderer('Assembly2Website', provider)\n\nexport default provider\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n", "import { RadixTree, Entry, LeafType } from './types'\n\n/** @ignore */\nconst ENTRIES = 'ENTRIES'\n\n/** @ignore */\nconst KEYS = 'KEYS'\n\n/** @ignore */\nconst VALUES = 'VALUES'\n\n/** @ignore */\nconst LEAF = '' as LeafType\n\ninterface Iterators<T> {\n  ENTRIES: Entry<T>\n  KEYS: string\n  VALUES: T\n}\n\ntype Kind<T> = keyof Iterators<T>\ntype Result<T, K extends keyof Iterators<T>> = Iterators<T>[K]\n\ntype IteratorPath<T> = {\n  node: RadixTree<T>,\n  keys: string[]\n}[]\n\nexport type IterableSet<T> = {\n  _tree: RadixTree<T>,\n  _prefix: string\n}\n\n/**\n * @private\n */\nclass TreeIterator<T, K extends Kind<T>> implements Iterator<Result<T, K>> {\n  set: IterableSet<T>\n  _type: K\n  _path: IteratorPath<T>\n\n  constructor (set: IterableSet<T>, type: K) {\n    const node = set._tree\n    const keys = Array.from(node.keys())\n    this.set = set\n    this._type = type\n    this._path = keys.length > 0 ? [{ node, keys }] : []\n  }\n\n  next (): IteratorResult<Result<T, K>> {\n    const value = this.dive()\n    this.backtrack()\n    return value\n  }\n\n  dive (): IteratorResult<Result<T, K>> {\n    if (this._path.length === 0) { return { done: true, value: undefined } }\n    const { node, keys } = last(this._path)!\n    if (last(keys) === LEAF) { return { done: false, value: this.result() } }\n\n    const child = node.get(last(keys)!)!\n    this._path.push({ node: child, keys: Array.from(child.keys()) })\n    return this.dive()\n  }\n\n  backtrack (): void {\n    if (this._path.length === 0) { return }\n    const keys = last(this._path)!.keys\n    keys.pop()\n    if (keys.length > 0) { return }\n    this._path.pop()\n    this.backtrack()\n  }\n\n  key (): string {\n    return this.set._prefix + this._path\n      .map(({ keys }) => last(keys))\n      .filter(key => key !== LEAF)\n      .join('')\n  }\n\n  value (): T {\n    return last(this._path)!.node.get(LEAF)!\n  }\n\n  result (): Result<T, K> {\n    switch (this._type) {\n      case VALUES: return this.value() as Result<T, K>\n      case KEYS: return this.key() as Result<T, K>\n      default: return [this.key(), this.value()] as Result<T, K>\n    }\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n}\n\nconst last = <T>(array: T[]): T | undefined => {\n  return array[array.length - 1]\n}\n\nexport { TreeIterator, ENTRIES, KEYS, VALUES, LEAF }\n", "/* eslint-disable no-labels */\nimport { LEAF } from './TreeIterator'\nimport { RadixTree } from './types'\n\nexport type FuzzyResult<T> = [T, number]\n\nexport type FuzzyResults<T> = Map<string, FuzzyResult<T>>\n\n/**\n * @ignore\n */\nexport const fuzzySearch = <T = any>(node: RadixTree<T>, query: string, maxDistance: number): FuzzyResults<T> => {\n  const results: FuzzyResults<T> = new Map()\n  if (query === undefined) return results\n\n  // Number of columns in the Levenshtein matrix.\n  const n = query.length + 1\n\n  // Matching terms can never be longer than N + maxDistance.\n  const m = n + maxDistance\n\n  // Fill first matrix row and column with numbers: 0 1 2 3 ...\n  const matrix = new Uint8Array(m * n).fill(maxDistance + 1)\n  for (let j = 0; j < n; ++j) matrix[j] = j\n  for (let i = 1; i < m; ++i) matrix[i * n] = i\n\n  recurse(\n    node,\n    query,\n    maxDistance,\n    results,\n    matrix,\n    1,\n    n,\n    ''\n  )\n\n  return results\n}\n\n// Modified version of http://stevehanov.ca/blog/?id=114\n\n// This builds a Levenshtein matrix for a given query and continuously updates\n// it for nodes in the radix tree that fall within the given maximum edit\n// distance. Keeping the same matrix around is beneficial especially for larger\n// edit distances.\n//\n//           k   a   t   e   <-- query\n//       0   1   2   3   4\n//   c   1   1   2   3   4\n//   a   2   2   1   2   3\n//   t   3   3   2   1  [2]  <-- edit distance\n//   ^\n//   ^ term in radix tree, rows are added and removed as needed\n\nconst recurse = <T = any>(\n  node: RadixTree<T>,\n  query: string,\n  maxDistance: number,\n  results: FuzzyResults<T>,\n  matrix: Uint8Array,\n  m: number,\n  n: number,\n  prefix: string\n): void => {\n  const offset = m * n\n\n  key: for (const key of node.keys()) {\n    if (key === LEAF) {\n      // We've reached a leaf node. Check if the edit distance acceptable and\n      // store the result if it is.\n      const distance = matrix[offset - 1]\n      if (distance <= maxDistance) {\n        results.set(prefix, [node.get(key)!, distance])\n      }\n    } else {\n      // Iterate over all characters in the key. Update the Levenshtein matrix\n      // and check if the minimum distance in the last row is still within the\n      // maximum edit distance. If it is, we can recurse over all child nodes.\n      let i = m\n      for (let pos = 0; pos < key.length; ++pos, ++i) {\n        const char = key[pos]\n        const thisRowOffset = n * i\n        const prevRowOffset = thisRowOffset - n\n\n        // Set the first column based on the previous row, and initialize the\n        // minimum distance in the current row.\n        let minDistance = matrix[thisRowOffset]\n\n        const jmin = Math.max(0, i - maxDistance - 1)\n        const jmax = Math.min(n - 1, i + maxDistance)\n\n        // Iterate over remaining columns (characters in the query).\n        for (let j = jmin; j < jmax; ++j) {\n          const different = char !== query[j]\n\n          // It might make sense to only read the matrix positions used for\n          // deletion/insertion if the characters are different. But we want to\n          // avoid conditional reads for performance reasons.\n          const rpl = matrix[prevRowOffset + j] + +different\n          const del = matrix[prevRowOffset + j + 1] + 1\n          const ins = matrix[thisRowOffset + j] + 1\n\n          const dist = matrix[thisRowOffset + j + 1] = Math.min(rpl, del, ins)\n\n          if (dist < minDistance) minDistance = dist\n        }\n\n        // Because distance will never decrease, we can stop. There will be no\n        // matching child nodes.\n        if (minDistance > maxDistance) {\n          continue key\n        }\n      }\n\n      recurse(\n        node.get(key)!,\n        query,\n        maxDistance,\n        results,\n        matrix,\n        i,\n        n,\n        prefix + key\n      )\n    }\n  }\n}\n\nexport default fuzzySearch\n", "/* eslint-disable no-labels */\nimport { TreeIterator, ENTRIES, KEYS, VALUES, LEAF } from './TreeIterator'\nimport fuzzySearch, { FuzzyResults } from './fuzzySearch'\nimport { RadixTree, Entry, Path } from './types'\n\n/**\n * A class implementing the same interface as a standard JavaScript\n * [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n * with string keys, but adding support for efficiently searching entries with\n * prefix or fuzzy search. This class is used internally by [[MiniSearch]] as\n * the inverted index data structure. The implementation is a radix tree\n * (compressed prefix tree).\n *\n * Since this class can be of general utility beyond _MiniSearch_, it is\n * exported by the `minisearch` package and can be imported (or required) as\n * `minisearch/SearchableMap`.\n *\n * @typeParam T  The type of the values stored in the map.\n */\nexport default class SearchableMap<T = any> {\n  /**\n   * @internal\n   */\n  _tree: RadixTree<T>\n\n  /**\n   * @internal\n   */\n  _prefix: string\n\n  private _size: number | undefined = undefined\n\n  /**\n   * The constructor is normally called without arguments, creating an empty\n   * map. In order to create a [[SearchableMap]] from an iterable or from an\n   * object, check [[SearchableMap.from]] and [[SearchableMap.fromObject]].\n   *\n   * The constructor arguments are for internal use, when creating derived\n   * mutable views of a map at a prefix.\n   */\n  constructor (tree: RadixTree<T> = new Map(), prefix = '') {\n    this._tree = tree\n    this._prefix = prefix\n  }\n\n  /**\n   * Creates and returns a mutable view of this [[SearchableMap]], containing only\n   * entries that share the given prefix.\n   *\n   * ### Usage:\n   *\n   * ```javascript\n   * let map = new SearchableMap()\n   * map.set(\"unicorn\", 1)\n   * map.set(\"universe\", 2)\n   * map.set(\"university\", 3)\n   * map.set(\"unique\", 4)\n   * map.set(\"hello\", 5)\n   *\n   * let uni = map.atPrefix(\"uni\")\n   * uni.get(\"unique\") // => 4\n   * uni.get(\"unicorn\") // => 1\n   * uni.get(\"hello\") // => undefined\n   *\n   * let univer = map.atPrefix(\"univer\")\n   * univer.get(\"unique\") // => undefined\n   * univer.get(\"universe\") // => 2\n   * univer.get(\"university\") // => 3\n   * ```\n   *\n   * @param prefix  The prefix\n   * @return A [[SearchableMap]] representing a mutable view of the original Map at the given prefix\n   */\n  atPrefix (prefix: string): SearchableMap<T> {\n    if (!prefix.startsWith(this._prefix)) { throw new Error('Mismatched prefix') }\n\n    const [node, path] = trackDown(this._tree, prefix.slice(this._prefix.length))\n\n    if (node === undefined) {\n      const [parentNode, key] = last(path)\n\n      for (const k of parentNode!.keys()) {\n        if (k !== LEAF && k.startsWith(key)) {\n          const node = new Map()\n          node.set(k.slice(key.length), parentNode!.get(k)!)\n          return new SearchableMap(node, prefix)\n        }\n      }\n    }\n\n    return new SearchableMap<T>(node, prefix)\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\n   */\n  clear (): void {\n    this._size = undefined\n    this._tree.clear()\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\n   * @param key  Key to delete\n   */\n  delete (key: string): void {\n    this._size = undefined\n    return remove(this._tree, key)\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\n   * @return An iterator iterating through `[key, value]` entries.\n   */\n  entries () {\n    return new TreeIterator(this, ENTRIES)\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\n   * @param fn  Iteration function\n   */\n  forEach (fn: (key: string, value: T, map: SearchableMap) => void): void {\n    for (const [key, value] of this) {\n      fn(key, value, this)\n    }\n  }\n\n  /**\n   * Returns a Map of all the entries that have a key within the given edit\n   * distance from the search key. The keys of the returned Map are the matching\n   * keys, while the values are two-element arrays where the first element is\n   * the value associated to the key, and the second is the edit distance of the\n   * key to the search key.\n   *\n   * ### Usage:\n   *\n   * ```javascript\n   * let map = new SearchableMap()\n   * map.set('hello', 'world')\n   * map.set('hell', 'yeah')\n   * map.set('ciao', 'mondo')\n   *\n   * // Get all entries that match the key 'hallo' with a maximum edit distance of 2\n   * map.fuzzyGet('hallo', 2)\n   * // => Map(2) { 'hello' => ['world', 1], 'hell' => ['yeah', 2] }\n   *\n   * // In the example, the \"hello\" key has value \"world\" and edit distance of 1\n   * // (change \"e\" to \"a\"), the key \"hell\" has value \"yeah\" and edit distance of 2\n   * // (change \"e\" to \"a\", delete \"o\")\n   * ```\n   *\n   * @param key  The search key\n   * @param maxEditDistance  The maximum edit distance (Levenshtein)\n   * @return A Map of the matching keys to their value and edit distance\n   */\n  fuzzyGet (key: string, maxEditDistance: number): FuzzyResults<T> {\n    return fuzzySearch<T>(this._tree, key, maxEditDistance)\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\n   * @param key  Key to get\n   * @return Value associated to the key, or `undefined` if the key is not\n   * found.\n   */\n  get (key: string): T | undefined {\n    const node = lookup<T>(this._tree, key)\n    return node !== undefined ? node.get(LEAF) : undefined\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\n   * @param key  Key\n   * @return True if the key is in the map, false otherwise\n   */\n  has (key: string): boolean {\n    const node = lookup(this._tree, key)\n    return node !== undefined && node.has(LEAF)\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\n   * @return An `Iterable` iterating through keys\n   */\n  keys () {\n    return new TreeIterator(this, KEYS)\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\n   * @param key  Key to set\n   * @param value  Value to associate to the key\n   * @return The [[SearchableMap]] itself, to allow chaining\n   */\n  set (key: string, value: T): SearchableMap<T> {\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\n    this._size = undefined\n    const node = createPath(this._tree, key)\n    node.set(LEAF, value)\n    return this\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\n   */\n  get size (): number {\n    if (this._size) { return this._size }\n    /** @ignore */\n    this._size = 0\n\n    const iter = this.entries()\n    while (!iter.next().done) this._size! += 1\n\n    return this._size\n  }\n\n  /**\n   * Updates the value at the given key using the provided function. The function\n   * is called with the current value at the key, and its return value is used as\n   * the new value to be set.\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * // Increment the current value by one\n   * searchableMap.update('somekey', (currentValue) => currentValue == null ? 0 : currentValue + 1)\n   * ```\n   *\n   * If the value at the given key is or will be an object, it might not require\n   * re-assignment. In that case it is better to use `fetch()`, because it is\n   * faster.\n   *\n   * @param key  The key to update\n   * @param fn  The function used to compute the new value from the current one\n   * @return The [[SearchableMap]] itself, to allow chaining\n   */\n  update (key: string, fn: (value: T | undefined) => T): SearchableMap<T> {\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\n    this._size = undefined\n    const node = createPath(this._tree, key)\n    node.set(LEAF, fn(node.get(LEAF)))\n    return this\n  }\n\n  /**\n   * Fetches the value of the given key. If the value does not exist, calls the\n   * given function to create a new value, which is inserted at the given key\n   * and subsequently returned.\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * const map = searchableMap.fetch('somekey', () => new Map())\n   * map.set('foo', 'bar')\n   * ```\n   *\n   * @param key  The key to update\n   * @param defaultValue  A function that creates a new value if the key does not exist\n   * @return The existing or new value at the given key\n   */\n  fetch (key: string, initial: () => T): T {\n    if (typeof key !== 'string') { throw new Error('key must be a string') }\n    this._size = undefined\n    const node = createPath(this._tree, key)\n\n    let value = node.get(LEAF)\n    if (value === undefined) {\n      node.set(LEAF, value = initial())\n    }\n\n    return value\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\n   * @return An `Iterable` iterating through values.\n   */\n  values () {\n    return new TreeIterator(this, VALUES)\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Creates a [[SearchableMap]] from an `Iterable` of entries\n   *\n   * @param entries  Entries to be inserted in the [[SearchableMap]]\n   * @return A new [[SearchableMap]] with the given entries\n   */\n  static from<T = any> (entries: Iterable<Entry<T>> | Entry<T>[]) {\n    const tree = new SearchableMap()\n    for (const [key, value] of entries) {\n      tree.set(key, value)\n    }\n    return tree\n  }\n\n  /**\n   * Creates a [[SearchableMap]] from the iterable properties of a JavaScript object\n   *\n   * @param object  Object of entries for the [[SearchableMap]]\n   * @return A new [[SearchableMap]] with the given entries\n   */\n  static fromObject<T = any> (object: { [key: string]: T }) {\n    return SearchableMap.from<T>(Object.entries(object))\n  }\n}\n\nconst trackDown = <T = any>(tree: RadixTree<T> | undefined, key: string, path: Path<T> = []): [RadixTree<T> | undefined, Path<T>] => {\n  if (key.length === 0 || tree == null) { return [tree, path] }\n\n  for (const k of tree.keys()) {\n    if (k !== LEAF && key.startsWith(k)) {\n      path.push([tree, k]) // performance: update in place\n      return trackDown(tree.get(k)!, key.slice(k.length), path)\n    }\n  }\n\n  path.push([tree, key]) // performance: update in place\n  return trackDown(undefined, '', path)\n}\n\nconst lookup = <T = any>(tree: RadixTree<T>, key: string): RadixTree<T> | undefined => {\n  if (key.length === 0 || tree == null) { return tree }\n\n  for (const k of tree.keys()) {\n    if (k !== LEAF && key.startsWith(k)) {\n      return lookup(tree.get(k)!, key.slice(k.length))\n    }\n  }\n}\n\n// Create a path in the radix tree for the given key, and returns the deepest\n// node. This function is in the hot path for indexing. It avoids unnecessary\n// string operations and recursion for performance.\nconst createPath = <T = any>(node: RadixTree<T>, key: string): RadixTree<T> => {\n  const keyLength = key.length\n\n  outer: for (let pos = 0; node && pos < keyLength;) {\n    for (const k of node.keys()) {\n      // Check whether this key is a candidate: the first characters must match.\n      if (k !== LEAF && key[pos] === k[0]) {\n        const len = Math.min(keyLength - pos, k.length)\n\n        // Advance offset to the point where key and k no longer match.\n        let offset = 1\n        while (offset < len && key[pos + offset] === k[offset]) ++offset\n\n        const child = node.get(k)!\n        if (offset === k.length) {\n          // The existing key is shorter than the key we need to create.\n          node = child\n        } else {\n          // Partial match: we need to insert an intermediate node to contain\n          // both the existing subtree and the new node.\n          const intermediate = new Map()\n          intermediate.set(k.slice(offset), child)\n          node.set(key.slice(pos, pos + offset), intermediate)\n          node.delete(k)\n          node = intermediate\n        }\n\n        pos += offset\n        continue outer\n      }\n    }\n\n    // Create a final child node to contain the final suffix of the key.\n    const child = new Map()\n    node.set(key.slice(pos), child)\n    return child\n  }\n\n  return node\n}\n\nconst remove = <T = any>(tree: RadixTree<T>, key: string): void => {\n  const [node, path] = trackDown(tree, key)\n  if (node === undefined) { return }\n  node.delete(LEAF)\n\n  if (node.size === 0) {\n    cleanup(path)\n  } else if (node.size === 1) {\n    const [key, value] = node.entries().next().value\n    merge(path, key, value)\n  }\n}\n\nconst cleanup = <T = any>(path: Path<T>): void => {\n  if (path.length === 0) { return }\n\n  const [node, key] = last(path)\n  node!.delete(key)\n\n  if (node!.size === 0) {\n    cleanup(path.slice(0, -1))\n  } else if (node!.size === 1) {\n    const [key, value] = node!.entries().next().value\n    if (key !== LEAF) {\n      merge(path.slice(0, -1), key, value)\n    }\n  }\n}\n\nconst merge = <T = any>(path: Path<T>, key: string, value: RadixTree<T>): void => {\n  if (path.length === 0) { return }\n\n  const [node, nodeKey] = last(path)\n  node!.set(nodeKey + key, value)\n  node!.delete(nodeKey)\n}\n\nconst last = <T = any>(array: T[]): T => {\n  return array[array.length - 1]\n}\n", "import SearchableMap from './SearchableMap/SearchableMap'\n\nconst OR = 'or'\nconst AND = 'and'\nconst AND_NOT = 'and_not'\n\n/**\n * Search options to customize the search behavior.\n */\nexport type SearchOptions = {\n  /**\n   * Names of the fields to search in. If omitted, all fields are searched.\n   */\n  fields?: string[],\n\n  /**\n   * Function used to filter search results, for example on the basis of stored\n   * fields. It takes as argument each search result and should return a boolean\n   * to indicate if the result should be kept or not.\n   */\n  filter?: (result: SearchResult) => boolean,\n\n  /**\n   * Key-value object of field names to boosting values. By default, fields are\n   * assigned a boosting factor of 1. If one assigns to a field a boosting value\n   * of 2, a result that matches the query in that field is assigned a score\n   * twice as high as a result matching the query in another field, all else\n   * being equal.\n   */\n  boost?: { [fieldName: string]: number },\n\n  /**\n   * Relative weights to assign to prefix search results and fuzzy search\n   * results. Exact matches are assigned a weight of 1.\n   */\n  weights?: { fuzzy: number, prefix: number },\n\n  /**\n   * Function to calculate a boost factor for documents. It takes as arguments\n   * the document ID, and a term that matches the search in that document, and\n   * the value of the stored fields for the document (if any).  It should return\n   * a boosting factor: a number higher than 1 increases the computed score, a\n   * number lower than 1 decreases the score, and a falsy value skips the search\n   * result completely.\n   */\n  boostDocument?: (documentId: any, term: string, storedFields?: Record<string, unknown>) => number,\n\n  /**\n   * Controls whether to perform prefix search. It can be a simple boolean, or a\n   * function.\n   *\n   * If a boolean is passed, prefix search is performed if true.\n   *\n   * If a function is passed, it is called upon search with a search term, the\n   * positional index of that search term in the tokenized search query, and the\n   * tokenized search query. The function should return a boolean to indicate\n   * whether to perform prefix search for that search term.\n   */\n  prefix?: boolean | ((term: string, index: number, terms: string[]) => boolean),\n\n  /**\n   * Controls whether to perform fuzzy search. It can be a simple boolean, or a\n   * number, or a function.\n   *\n   * If a boolean is given, fuzzy search with a default fuzziness parameter is\n   * performed if true.\n   *\n   * If a number higher or equal to 1 is given, fuzzy search is performed, with\n   * a maximum edit distance (Levenshtein) equal to the number.\n   *\n   * If a number between 0 and 1 is given, fuzzy search is performed within a\n   * maximum edit distance corresponding to that fraction of the term length,\n   * approximated to the nearest integer. For example, 0.2 would mean an edit\n   * distance of 20% of the term length, so 1 character in a 5-characters term.\n   * The calculated fuzziness value is limited by the `maxFuzzy` option, to\n   * prevent slowdown for very long queries.\n   *\n   * If a function is passed, the function is called upon search with a search\n   * term, a positional index of that term in the tokenized search query, and\n   * the tokenized search query. It should return a boolean or a number, with\n   * the meaning documented above.\n   */\n  fuzzy?: boolean | number | ((term: string, index: number, terms: string[]) => boolean | number),\n\n  /**\n   * Controls the maximum fuzziness when using a fractional fuzzy value. This is\n   * set to 6 by default. Very high edit distances usually don't produce\n   * meaningful results, but can excessively impact search performance.\n   */\n  maxFuzzy?: number,\n\n  /**\n   * The operand to combine partial results for each term. By default it is\n   * \"OR\", so results matching _any_ of the search terms are returned by a\n   * search. If \"AND\" is given, only results matching _all_ the search terms are\n   * returned by a search.\n   */\n  combineWith?: string,\n\n  /**\n   * Function to tokenize the search query. By default, the same tokenizer used\n   * for indexing is used also for search.\n   */\n  tokenize?: (text: string) => string[],\n\n  /**\n   * Function to process or normalize terms in the search query. By default, the\n   * same term processor used for indexing is used also for search.\n   */\n  processTerm?: (term: string) => string | string[] | null | undefined | false\n\n  /**\n   * BM25+ algorithm parameters. Customizing these is almost never necessary,\n   * and finetuning them requires an understanding of the BM25 scoring model. In\n   * most cases, it is best to omit this option to use defaults, and instead use\n   * boosting to tweak scoring for specific use cases.\n   */\n  bm25?: BM25Params\n}\n\ntype SearchOptionsWithDefaults = SearchOptions & {\n  boost: { [fieldName: string]: number },\n\n  weights: { fuzzy: number, prefix: number },\n\n  prefix: boolean | ((term: string, index: number, terms: string[]) => boolean),\n\n  fuzzy: boolean | number | ((term: string, index: number, terms: string[]) => boolean | number),\n\n  maxFuzzy: number,\n\n  combineWith: string\n\n  bm25: BM25Params\n}\n\n/**\n * Configuration options passed to the [[MiniSearch]] constructor\n *\n * @typeParam T  The type of documents being indexed.\n */\nexport type Options<T = any> = {\n   /**\n    * Names of the document fields to be indexed.\n    */\n  fields: string[],\n\n   /**\n    * Name of the ID field, uniquely identifying a document.\n    */\n  idField?: string,\n\n   /**\n    * Names of fields to store, so that search results would include them. By\n    * default none, so results would only contain the id field.\n    */\n  storeFields?: string[],\n\n   /**\n    * Function used to extract the value of each field in documents. By default,\n    * the documents are assumed to be plain objects with field names as keys,\n    * but by specifying a custom `extractField` function one can completely\n    * customize how the fields are extracted.\n    *\n    * The function takes as arguments the document, and the name of the field to\n    * extract from it. It should return the field value as a string.\n    */\n  extractField?: (document: T, fieldName: string) => string,\n\n   /*\n    * Function used to split a field value into individual terms to be indexed.\n    * The default tokenizer separates terms by space or punctuation, but a\n    * custom tokenizer can be provided for custom logic.\n    *\n    * The function takes as arguments string to tokenize, and the name of the\n    * field it comes from. It should return the terms as an array of strings.\n    * When used for tokenizing a search query instead of a document field, the\n    * `fieldName` is undefined.\n    */\n  tokenize?: (text: string, fieldName?: string) => string[],\n\n   /**\n    * Function used to process a term before indexing or search. This can be\n    * used for normalization (such as stemming). By default, terms are\n    * downcased, and otherwise no other normalization is performed.\n    *\n    * The function takes as arguments a term to process, and the name of the\n    * field it comes from. It should return the processed term as a string, or a\n    * falsy value to reject the term entirely.\n    *\n    * It can also return an array of strings, in which case each string in the\n    * returned array is indexed as a separate term.\n    */\n  processTerm?: (term: string, fieldName?: string) => string | string[] | null | undefined | false,\n\n  /**\n   * Function called to log messages. Arguments are a log level ('debug',\n   * 'info', 'warn', or 'error'), a log message, and an optional string code\n   * that identifies the reason for the log.\n   *\n   * The default implementation uses `console`, if defined.\n   */\n  logger?: (level: LogLevel, message: string, code?: string) => void\n\n  /**\n   * If `true` (the default), vacuuming is performed automatically as soon as\n   * [[MiniSearch.discard]] is called a certain number of times, cleaning up\n   * obsolete references from the index. If `false`, no automatic vacuuming is\n   * performed. Custom settings controlling auto vacuuming thresholds, as well\n   * as batching behavior, can be passed as an object (see the\n   * [[AutoVacuumOptions]] type).\n   */\n  autoVacuum?: boolean | AutoVacuumOptions\n\n   /**\n    * Default search options (see the [[SearchOptions]] type and the\n    * [[MiniSearch.search]] method for details)\n    */\n  searchOptions?: SearchOptions,\n\n   /**\n    * Default auto suggest options (see the [[SearchOptions]] type and the\n    * [[MiniSearch.autoSuggest]] method for details)\n    */\n  autoSuggestOptions?: SearchOptions\n}\n\ntype OptionsWithDefaults<T = any> = Options<T> & {\n  storeFields: string[]\n\n  idField: string\n\n  extractField: (document: T, fieldName: string) => string\n\n  tokenize: (text: string, fieldName: string) => string[]\n\n  processTerm: (term: string, fieldName: string) => string | string[] | null | undefined | false\n\n  logger: (level: LogLevel, message: string, code?: string) => void\n\n  autoVacuum: false | AutoVacuumOptions\n\n  searchOptions: SearchOptionsWithDefaults\n\n  autoSuggestOptions: SearchOptions\n}\n\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error'\n\n/**\n * The type of auto-suggestions\n */\nexport type Suggestion = {\n  /**\n   * The suggestion\n   */\n  suggestion: string,\n\n  /**\n   * Suggestion as an array of terms\n   */\n  terms: string[],\n\n  /**\n   * Score for the suggestion\n   */\n  score: number\n}\n\n/**\n * Match information for a search result. It is a key-value object where keys\n * are terms that matched, and values are the list of fields that the term was\n * found in.\n */\nexport type MatchInfo = {\n  [term: string]: string[]\n}\n\n/**\n * Type of the search results. Each search result indicates the document ID, the\n * terms that matched, the match information, the score, and all the stored\n * fields.\n */\nexport type SearchResult = {\n  /**\n   * The document ID\n   */\n  id: any,\n\n  /**\n   * List of terms that matched\n   */\n  terms: string[],\n\n  /**\n   * Score of the search results\n   */\n  score: number,\n\n  /**\n   * Match information, see [[MatchInfo]]\n   */\n  match: MatchInfo,\n\n  /**\n   * Stored fields\n   */\n  [key: string]: any\n}\n\n/**\n * @ignore\n */\nexport type AsPlainObject = {\n  documentCount: number,\n  nextId: number,\n  documentIds: { [shortId: string]: any }\n  fieldIds: { [fieldName: string]: number }\n  fieldLength: { [shortId: string]: number[] }\n  averageFieldLength: number[],\n  storedFields: { [shortId: string]: any }\n  dirtCount?: number,\n  index: [string, { [fieldId: string]: SerializedIndexEntry }][]\n  serializationVersion: number\n}\n\nexport type QueryCombination = SearchOptions & { queries: Query[] }\n\n/**\n * Wildcard query, used to match all terms\n */\nexport type Wildcard = typeof MiniSearch.wildcard\n\n/**\n * Search query expression, either a query string or an expression tree\n * combining several queries with a combination of AND or OR.\n */\nexport type Query = QueryCombination | string | Wildcard\n\n/**\n * Options to control vacuuming behavior.\n *\n * Vacuuming cleans up document references made obsolete by\n * [[MiniSearch.discard]] from the index. On large indexes, vacuuming is\n * potentially costly, because it has to traverse the whole inverted index.\n * Therefore, in order to dilute this cost so it does not negatively affects the\n * application, vacuuming is performed in batches, with a delay between each\n * batch. These options are used to configure the batch size and the delay\n * between batches.\n */\nexport type VacuumOptions = {\n  /**\n   * Size of each vacuuming batch (the number of terms in the index that will be\n   * traversed in each batch). Defaults to 1000.\n   */\n  batchSize?: number,\n\n  /**\n   * Wait time between each vacuuming batch in milliseconds. Defaults to 10.\n   */\n  batchWait?: number\n}\n\n/**\n * Sets minimum thresholds for `dirtCount` and `dirtFactor` that trigger an\n * automatic vacuuming.\n */\nexport type VacuumConditions = {\n  /**\n   * Minimum `dirtCount` (number of discarded documents since the last vacuuming)\n   * under which auto vacuum is not triggered. It defaults to 20.\n   */\n  minDirtCount?: number\n\n  /**\n   * Minimum `dirtFactor` (proportion of discarded documents over the total)\n   * under which auto vacuum is not triggered. It defaults to 0.1.\n   */\n  minDirtFactor?: number,\n}\n\n/**\n * Options to control auto vacuum behavior. When discarding a document with\n * [[MiniSearch.discard]], a vacuuming operation is automatically started if the\n * `dirtCount` and `dirtFactor` are above the `minDirtCount` and `minDirtFactor`\n * thresholds defined by this configuration. See [[VacuumConditions]] for\n * details on these.\n *\n * Also, `batchSize` and `batchWait` can be specified, controlling batching\n * behavior (see [[VacuumOptions]]).\n */\nexport type AutoVacuumOptions = VacuumOptions & VacuumConditions\n\ntype QuerySpec = {\n  prefix: boolean,\n  fuzzy: number | boolean,\n  term: string\n}\n\ntype DocumentTermFreqs = Map<number, number>\ntype FieldTermData = Map<number, DocumentTermFreqs>\n\ninterface RawResultValue {\n  // Intermediate score, before applying the final score based on number of\n  // matched terms.\n  score: number,\n\n  // Set of all query terms that were matched. They may not be present in the\n  // text exactly in the case of prefix/fuzzy matches. We must check for\n  // uniqueness before adding a new term. This is much faster than using a set,\n  // because the number of elements is relatively small.\n  terms: string[],\n\n  // All terms that were found in the content, including the fields in which\n  // they were present. This object will be provided as part of the final search\n  // results.\n  match: MatchInfo,\n}\n\ntype RawResult = Map<number, RawResultValue>\n\n/**\n * [[MiniSearch]] is the main entrypoint class, implementing a full-text search\n * engine in memory.\n *\n * @typeParam T  The type of the documents being indexed.\n *\n * ### Basic example:\n *\n * ```javascript\n * const documents = [\n *   {\n *     id: 1,\n *     title: 'Moby Dick',\n *     text: 'Call me Ishmael. Some years ago...',\n *     category: 'fiction'\n *   },\n *   {\n *     id: 2,\n *     title: 'Zen and the Art of Motorcycle Maintenance',\n *     text: 'I can see by my watch...',\n *     category: 'fiction'\n *   },\n *   {\n *     id: 3,\n *     title: 'Neuromancer',\n *     text: 'The sky above the port was...',\n *     category: 'fiction'\n *   },\n *   {\n *     id: 4,\n *     title: 'Zen and the Art of Archery',\n *     text: 'At first sight it must seem...',\n *     category: 'non-fiction'\n *   },\n *   // ...and more\n * ]\n *\n * // Create a search engine that indexes the 'title' and 'text' fields for\n * // full-text search. Search results will include 'title' and 'category' (plus the\n * // id field, that is always stored and returned)\n * const miniSearch = new MiniSearch({\n *   fields: ['title', 'text'],\n *   storeFields: ['title', 'category']\n * })\n *\n * // Add documents to the index\n * miniSearch.addAll(documents)\n *\n * // Search for documents:\n * let results = miniSearch.search('zen art motorcycle')\n * // => [\n * //   { id: 2, title: 'Zen and the Art of Motorcycle Maintenance', category: 'fiction', score: 2.77258 },\n * //   { id: 4, title: 'Zen and the Art of Archery', category: 'non-fiction', score: 1.38629 }\n * // ]\n * ```\n */\nexport default class MiniSearch<T = any> {\n  protected _options: OptionsWithDefaults<T>\n  protected _index: SearchableMap<FieldTermData>\n  protected _documentCount: number\n  protected _documentIds: Map<number, any>\n  protected _idToShortId: Map<any, number>\n  protected _fieldIds: { [key: string]: number }\n  protected _fieldLength: Map<number, number[]>\n  protected _avgFieldLength: number[]\n  protected _nextId: number\n  protected _storedFields: Map<number, Record<string, unknown>>\n  protected _dirtCount: number\n  private _currentVacuum: Promise<void> | null\n  private _enqueuedVacuum: Promise<void> | null\n  private _enqueuedVacuumConditions: VacuumConditions | undefined\n\n  static readonly wildcard: unique symbol = Symbol('*')\n\n  /**\n   * @param options  Configuration options\n   *\n   * ### Examples:\n   *\n   * ```javascript\n   * // Create a search engine that indexes the 'title' and 'text' fields of your\n   * // documents:\n   * const miniSearch = new MiniSearch({ fields: ['title', 'text'] })\n   * ```\n   *\n   * ### ID Field:\n   *\n   * ```javascript\n   * // Your documents are assumed to include a unique 'id' field, but if you want\n   * // to use a different field for document identification, you can set the\n   * // 'idField' option:\n   * const miniSearch = new MiniSearch({ idField: 'key', fields: ['title', 'text'] })\n   * ```\n   *\n   * ### Options and defaults:\n   *\n   * ```javascript\n   * // The full set of options (here with their default value) is:\n   * const miniSearch = new MiniSearch({\n   *   // idField: field that uniquely identifies a document\n   *   idField: 'id',\n   *\n   *   // extractField: function used to get the value of a field in a document.\n   *   // By default, it assumes the document is a flat object with field names as\n   *   // property keys and field values as string property values, but custom logic\n   *   // can be implemented by setting this option to a custom extractor function.\n   *   extractField: (document, fieldName) => document[fieldName],\n   *\n   *   // tokenize: function used to split fields into individual terms. By\n   *   // default, it is also used to tokenize search queries, unless a specific\n   *   // `tokenize` search option is supplied. When tokenizing an indexed field,\n   *   // the field name is passed as the second argument.\n   *   tokenize: (string, _fieldName) => string.split(SPACE_OR_PUNCTUATION),\n   *\n   *   // processTerm: function used to process each tokenized term before\n   *   // indexing. It can be used for stemming and normalization. Return a falsy\n   *   // value in order to discard a term. By default, it is also used to process\n   *   // search queries, unless a specific `processTerm` option is supplied as a\n   *   // search option. When processing a term from a indexed field, the field\n   *   // name is passed as the second argument.\n   *   processTerm: (term, _fieldName) => term.toLowerCase(),\n   *\n   *   // searchOptions: default search options, see the `search` method for\n   *   // details\n   *   searchOptions: undefined,\n   *\n   *   // fields: document fields to be indexed. Mandatory, but not set by default\n   *   fields: undefined\n   *\n   *   // storeFields: document fields to be stored and returned as part of the\n   *   // search results.\n   *   storeFields: []\n   * })\n   * ```\n   */\n  constructor (options: Options<T>) {\n    if (options?.fields == null) {\n      throw new Error('MiniSearch: option \"fields\" must be provided')\n    }\n\n    const autoVacuum = (options.autoVacuum == null || options.autoVacuum === true) ? defaultAutoVacuumOptions : options.autoVacuum\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n      autoVacuum,\n      searchOptions: { ...defaultSearchOptions, ...(options.searchOptions || {}) },\n      autoSuggestOptions: { ...defaultAutoSuggestOptions, ...(options.autoSuggestOptions || {}) }\n    }\n\n    this._index = new SearchableMap()\n\n    this._documentCount = 0\n\n    this._documentIds = new Map()\n\n    this._idToShortId = new Map()\n\n    // Fields are defined during initialization, don't change, are few in\n    // number, rarely need iterating over, and have string keys. Therefore in\n    // this case an object is a better candidate than a Map to store the mapping\n    // from field key to ID.\n    this._fieldIds = {}\n\n    this._fieldLength = new Map()\n\n    this._avgFieldLength = []\n\n    this._nextId = 0\n\n    this._storedFields = new Map()\n\n    this._dirtCount = 0\n\n    this._currentVacuum = null\n\n    this._enqueuedVacuum = null\n    this._enqueuedVacuumConditions = defaultVacuumConditions\n\n    this.addFields(this._options.fields)\n  }\n\n  /**\n   * Adds a document to the index\n   *\n   * @param document  The document to be indexed\n   */\n  add (document: T): void {\n    const { extractField, tokenize, processTerm, fields, idField } = this._options\n    const id = extractField(document, idField)\n    if (id == null) {\n      throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`)\n    }\n\n    if (this._idToShortId.has(id)) {\n      throw new Error(`MiniSearch: duplicate ID ${id}`)\n    }\n\n    const shortDocumentId = this.addDocumentId(id)\n    this.saveStoredFields(shortDocumentId, document)\n\n    for (const field of fields) {\n      const fieldValue = extractField(document, field)\n      if (fieldValue == null) continue\n\n      const tokens = tokenize(fieldValue.toString(), field)\n      const fieldId = this._fieldIds[field]\n\n      const uniqueTerms = new Set(tokens).size\n      this.addFieldLength(shortDocumentId, fieldId, this._documentCount - 1, uniqueTerms)\n\n      for (const term of tokens) {\n        const processedTerm = processTerm(term, field)\n        if (Array.isArray(processedTerm)) {\n          for (const t of processedTerm) {\n            this.addTerm(fieldId, shortDocumentId, t)\n          }\n        } else if (processedTerm) {\n          this.addTerm(fieldId, shortDocumentId, processedTerm)\n        }\n      }\n    }\n  }\n\n  /**\n   * Adds all the given documents to the index\n   *\n   * @param documents  An array of documents to be indexed\n   */\n  addAll (documents: readonly T[]): void {\n    for (const document of documents) this.add(document)\n  }\n\n  /**\n   * Adds all the given documents to the index asynchronously.\n   *\n   * Returns a promise that resolves (to `undefined`) when the indexing is done.\n   * This method is useful when index many documents, to avoid blocking the main\n   * thread. The indexing is performed asynchronously and in chunks.\n   *\n   * @param documents  An array of documents to be indexed\n   * @param options  Configuration options\n   * @return A promise resolving to `undefined` when the indexing is done\n   */\n  addAllAsync (documents: readonly T[], options: { chunkSize?: number } = {}): Promise<void> {\n    const { chunkSize = 10 } = options\n    const acc: { chunk: T[], promise: Promise<void> } = { chunk: [], promise: Promise.resolve() }\n\n    const { chunk, promise } = documents.reduce(({ chunk, promise }, document: T, i: number) => {\n      chunk.push(document)\n      if ((i + 1) % chunkSize === 0) {\n        return {\n          chunk: [],\n          promise: promise\n            .then(() => new Promise(resolve => setTimeout(resolve, 0)))\n            .then(() => this.addAll(chunk))\n        }\n      } else {\n        return { chunk, promise }\n      }\n    }, acc)\n\n    return promise.then(() => this.addAll(chunk))\n  }\n\n  /**\n   * Removes the given document from the index.\n   *\n   * The document to remove must NOT have changed between indexing and removal,\n   * otherwise the index will be corrupted.\n   *\n   * This method requires passing the full document to be removed (not just the\n   * ID), and immediately removes the document from the inverted index, allowing\n   * memory to be released. A convenient alternative is [[MiniSearch.discard]],\n   * which needs only the document ID, and has the same visible effect, but\n   * delays cleaning up the index until the next vacuuming.\n   *\n   * @param document  The document to be removed\n   */\n  remove (document: T): void {\n    const { tokenize, processTerm, extractField, fields, idField } = this._options\n    const id = extractField(document, idField)\n\n    if (id == null) {\n      throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`)\n    }\n\n    const shortId = this._idToShortId.get(id)\n\n    if (shortId == null) {\n      throw new Error(`MiniSearch: cannot remove document with ID ${id}: it is not in the index`)\n    }\n\n    for (const field of fields) {\n      const fieldValue = extractField(document, field)\n      if (fieldValue == null) continue\n\n      const tokens = tokenize(fieldValue.toString(), field)\n      const fieldId = this._fieldIds[field]\n\n      const uniqueTerms = new Set(tokens).size\n      this.removeFieldLength(shortId, fieldId, this._documentCount, uniqueTerms)\n\n      for (const term of tokens) {\n        const processedTerm = processTerm(term, field)\n        if (Array.isArray(processedTerm)) {\n          for (const t of processedTerm) {\n            this.removeTerm(fieldId, shortId, t)\n          }\n        } else if (processedTerm) {\n          this.removeTerm(fieldId, shortId, processedTerm)\n        }\n      }\n    }\n\n    this._storedFields.delete(shortId)\n    this._documentIds.delete(shortId)\n    this._idToShortId.delete(id)\n    this._fieldLength.delete(shortId)\n    this._documentCount -= 1\n  }\n\n  /**\n   * Removes all the given documents from the index. If called with no arguments,\n   * it removes _all_ documents from the index.\n   *\n   * @param documents  The documents to be removed. If this argument is omitted,\n   * all documents are removed. Note that, for removing all documents, it is\n   * more efficient to call this method with no arguments than to pass all\n   * documents.\n   */\n  removeAll (documents?: readonly T[]): void {\n    if (documents) {\n      for (const document of documents) this.remove(document)\n    } else if (arguments.length > 0) {\n      throw new Error('Expected documents to be present. Omit the argument to remove all documents.')\n    } else {\n      this._index = new SearchableMap()\n      this._documentCount = 0\n      this._documentIds = new Map()\n      this._idToShortId = new Map()\n      this._fieldLength = new Map()\n      this._avgFieldLength = []\n      this._storedFields = new Map()\n      this._nextId = 0\n    }\n  }\n\n  /**\n   * Discards the document with the given ID, so it won't appear in search results\n   *\n   * It has the same visible effect of [[MiniSearch.remove]] (both cause the\n   * document to stop appearing in searches), but a different effect on the\n   * internal data structures:\n   *\n   *   - [[MiniSearch.remove]] requires passing the full document to be removed\n   *   as argument, and removes it from the inverted index immediately.\n   *\n   *   - [[MiniSearch.discard]] instead only needs the document ID, and works by\n   *   marking the current version of the document as discarded, so it is\n   *   immediately ignored by searches. This is faster and more convenient than\n   *   `remove`, but the index is not immediately modified. To take care of\n   *   that, vacuuming is performed after a certain number of documents are\n   *   discarded, cleaning up the index and allowing memory to be released.\n   *\n   * After discarding a document, it is possible to re-add a new version, and\n   * only the new version will appear in searches. In other words, discarding\n   * and re-adding a document works exactly like removing and re-adding it. The\n   * [[MiniSearch.replace]] method can also be used to replace a document with a\n   * new version.\n   *\n   * #### Details about vacuuming\n   *\n   * Repetite calls to this method would leave obsolete document references in\n   * the index, invisible to searches. Two mechanisms take care of cleaning up:\n   * clean up during search, and vacuuming.\n   *\n   *   - Upon search, whenever a discarded ID is found (and ignored for the\n   *   results), references to the discarded document are removed from the\n   *   inverted index entries for the search terms. This ensures that subsequent\n   *   searches for the same terms do not need to skip these obsolete references\n   *   again.\n   *\n   *   - In addition, vacuuming is performed automatically by default (see the\n   *   `autoVacuum` field in [[Options]]) after a certain number of documents\n   *   are discarded. Vacuuming traverses all terms in the index, cleaning up\n   *   all references to discarded documents. Vacuuming can also be triggered\n   *   manually by calling [[MiniSearch.vacuum]].\n   *\n   * @param id  The ID of the document to be discarded\n   */\n  discard (id: any): void {\n    const shortId = this._idToShortId.get(id)\n\n    if (shortId == null) {\n      throw new Error(`MiniSearch: cannot discard document with ID ${id}: it is not in the index`)\n    }\n\n    this._idToShortId.delete(id)\n    this._documentIds.delete(shortId)\n    this._storedFields.delete(shortId)\n\n    ;(this._fieldLength.get(shortId) || []).forEach((fieldLength, fieldId) => {\n      this.removeFieldLength(shortId, fieldId, this._documentCount, fieldLength)\n    })\n\n    this._fieldLength.delete(shortId)\n\n    this._documentCount -= 1\n    this._dirtCount += 1\n\n    this.maybeAutoVacuum()\n  }\n\n  private maybeAutoVacuum (): void {\n    if (this._options.autoVacuum === false) { return }\n\n    const { minDirtFactor, minDirtCount, batchSize, batchWait } = this._options.autoVacuum\n    this.conditionalVacuum({ batchSize, batchWait }, { minDirtCount, minDirtFactor })\n  }\n\n  /**\n   * Discards the documents with the given IDs, so they won't appear in search\n   * results\n   *\n   * It is equivalent to calling [[MiniSearch.discard]] for all the given IDs,\n   * but with the optimization of triggering at most one automatic vacuuming at\n   * the end.\n   *\n   * Note: to remove all documents from the index, it is faster and more\n   * convenient to call [[MiniSearch.removeAll]] with no argument, instead of\n   * passing all IDs to this method.\n   */\n  discardAll (ids: readonly any[]): void {\n    const autoVacuum = this._options.autoVacuum\n\n    try {\n      this._options.autoVacuum = false\n\n      for (const id of ids) {\n        this.discard(id)\n      }\n    } finally {\n      this._options.autoVacuum = autoVacuum\n    }\n\n    this.maybeAutoVacuum()\n  }\n\n  /**\n   * It replaces an existing document with the given updated version\n   *\n   * It works by discarding the current version and adding the updated one, so\n   * it is functionally equivalent to calling [[MiniSearch.discard]] followed by\n   * [[MiniSearch.add]]. The ID of the updated document should be the same as\n   * the original one.\n   *\n   * Since it uses [[MiniSearch.discard]] internally, this method relies on\n   * vacuuming to clean up obsolete document references from the index, allowing\n   * memory to be released (see [[MiniSearch.discard]]).\n   *\n   * @param updatedDocument  The updated document to replace the old version\n   * with\n   */\n  replace (updatedDocument: T): void {\n    const { idField, extractField } = this._options\n    const id = extractField(updatedDocument, idField)\n\n    this.discard(id)\n    this.add(updatedDocument)\n  }\n\n  /**\n   * Triggers a manual vacuuming, cleaning up references to discarded documents\n   * from the inverted index\n   *\n   * Vacuuming is only useful for applications that use the\n   * [[MiniSearch.discard]] or [[MiniSearch.replace]] methods.\n   *\n   * By default, vacuuming is performed automatically when needed (controlled by\n   * the `autoVacuum` field in [[Options]]), so there is usually no need to call\n   * this method, unless one wants to make sure to perform vacuuming at a\n   * specific moment.\n   *\n   * Vacuuming traverses all terms in the inverted index in batches, and cleans\n   * up references to discarded documents from the posting list, allowing memory\n   * to be released.\n   *\n   * The method takes an optional object as argument with the following keys:\n   *\n   *   - `batchSize`: the size of each batch (1000 by default)\n   *\n   *   - `batchWait`: the number of milliseconds to wait between batches (10 by\n   *   default)\n   *\n   * On large indexes, vacuuming could have a non-negligible cost: batching\n   * avoids blocking the thread for long, diluting this cost so that it is not\n   * negatively affecting the application. Nonetheless, this method should only\n   * be called when necessary, and relying on automatic vacuuming is usually\n   * better.\n   *\n   * It returns a promise that resolves (to undefined) when the clean up is\n   * completed. If vacuuming is already ongoing at the time this method is\n   * called, a new one is enqueued immediately after the ongoing one, and a\n   * corresponding promise is returned. However, no more than one vacuuming is\n   * enqueued on top of the ongoing one, even if this method is called more\n   * times (enqueuing multiple ones would be useless).\n   *\n   * @param options  Configuration options for the batch size and delay. See\n   * [[VacuumOptions]].\n   */\n  vacuum (options: VacuumOptions = {}): Promise<void> {\n    return this.conditionalVacuum(options)\n  }\n\n  private conditionalVacuum (options: VacuumOptions, conditions?: VacuumConditions): Promise<void> {\n    // If a vacuum is already ongoing, schedule another as soon as it finishes,\n    // unless there's already one enqueued. If one was already enqueued, do not\n    // enqueue another on top, but make sure that the conditions are the\n    // broadest.\n    if (this._currentVacuum) {\n      this._enqueuedVacuumConditions = this._enqueuedVacuumConditions && conditions\n      if (this._enqueuedVacuum != null) { return this._enqueuedVacuum }\n\n      this._enqueuedVacuum = this._currentVacuum.then(() => {\n        const conditions = this._enqueuedVacuumConditions\n        this._enqueuedVacuumConditions = defaultVacuumConditions\n        return this.performVacuuming(options, conditions)\n      })\n      return this._enqueuedVacuum\n    }\n\n    if (this.vacuumConditionsMet(conditions) === false) { return Promise.resolve() }\n\n    this._currentVacuum = this.performVacuuming(options)\n    return this._currentVacuum\n  }\n\n  private async performVacuuming (options: VacuumOptions, conditions?: VacuumConditions): Promise<void> {\n    const initialDirtCount = this._dirtCount\n\n    if (this.vacuumConditionsMet(conditions)) {\n      const batchSize = options.batchSize || defaultVacuumOptions.batchSize\n      const batchWait = options.batchWait || defaultVacuumOptions.batchWait\n      let i = 1\n\n      for (const [term, fieldsData] of this._index) {\n        for (const [fieldId, fieldIndex] of fieldsData) {\n          for (const [shortId] of fieldIndex) {\n            if (this._documentIds.has(shortId)) { continue }\n\n            if (fieldIndex.size <= 1) {\n              fieldsData.delete(fieldId)\n            } else {\n              fieldIndex.delete(shortId)\n            }\n          }\n        }\n\n        if (this._index.get(term)!.size === 0) {\n          this._index.delete(term)\n        }\n\n        if (i % batchSize === 0) {\n          await new Promise((resolve) => setTimeout(resolve, batchWait))\n        }\n\n        i += 1\n      }\n\n      this._dirtCount -= initialDirtCount\n    }\n\n    // Make the next lines always async, so they execute after this function returns\n    await null\n\n    this._currentVacuum = this._enqueuedVacuum\n    this._enqueuedVacuum = null\n  }\n\n  private vacuumConditionsMet (conditions?: VacuumConditions) {\n    if (conditions == null) { return true }\n\n    let { minDirtCount, minDirtFactor } = conditions\n    minDirtCount = minDirtCount || defaultAutoVacuumOptions.minDirtCount\n    minDirtFactor = minDirtFactor || defaultAutoVacuumOptions.minDirtFactor\n\n    return this.dirtCount >= minDirtCount && this.dirtFactor >= minDirtFactor\n  }\n\n  /**\n   * Is `true` if a vacuuming operation is ongoing, `false` otherwise\n   */\n  get isVacuuming (): boolean {\n    return this._currentVacuum != null\n  }\n\n  /**\n   * The number of documents discarded since the most recent vacuuming\n   */\n  get dirtCount (): number {\n    return this._dirtCount\n  }\n\n  /**\n   * A number between 0 and 1 giving an indication about the proportion of\n   * documents that are discarded, and can therefore be cleaned up by vacuuming.\n   * A value close to 0 means that the index is relatively clean, while a higher\n   * value means that the index is relatively dirty, and vacuuming could release\n   * memory.\n   */\n  get dirtFactor (): number {\n    return this._dirtCount / (1 + this._documentCount + this._dirtCount)\n  }\n\n  /**\n   * Returns `true` if a document with the given ID is present in the index and\n   * available for search, `false` otherwise\n   *\n   * @param id  The document ID\n   */\n  has (id: any): boolean {\n    return this._idToShortId.has(id)\n  }\n\n  /**\n   * Returns the stored fields (as configured in the `storeFields` constructor\n   * option) for the given document ID. Returns `undefined` if the document is\n   * not present in the index.\n   *\n   * @param id  The document ID\n   */\n  getStoredFields (id: any): Record<string, unknown> | undefined {\n    const shortId = this._idToShortId.get(id)\n\n    if (shortId == null) { return undefined }\n\n    return this._storedFields.get(shortId)\n  }\n\n  /**\n   * Search for documents matching the given search query.\n   *\n   * The result is a list of scored document IDs matching the query, sorted by\n   * descending score, and each including data about which terms were matched and\n   * in which fields.\n   *\n   * ### Basic usage:\n   *\n   * ```javascript\n   * // Search for \"zen art motorcycle\" with default options: terms have to match\n   * // exactly, and individual terms are joined with OR\n   * miniSearch.search('zen art motorcycle')\n   * // => [ { id: 2, score: 2.77258, match: { ... } }, { id: 4, score: 1.38629, match: { ... } } ]\n   * ```\n   *\n   * ### Restrict search to specific fields:\n   *\n   * ```javascript\n   * // Search only in the 'title' field\n   * miniSearch.search('zen', { fields: ['title'] })\n   * ```\n   *\n   * ### Field boosting:\n   *\n   * ```javascript\n   * // Boost a field\n   * miniSearch.search('zen', { boost: { title: 2 } })\n   * ```\n   *\n   * ### Prefix search:\n   *\n   * ```javascript\n   * // Search for \"moto\" with prefix search (it will match documents\n   * // containing terms that start with \"moto\" or \"neuro\")\n   * miniSearch.search('moto neuro', { prefix: true })\n   * ```\n   *\n   * ### Fuzzy search:\n   *\n   * ```javascript\n   * // Search for \"ismael\" with fuzzy search (it will match documents containing\n   * // terms similar to \"ismael\", with a maximum edit distance of 0.2 term.length\n   * // (rounded to nearest integer)\n   * miniSearch.search('ismael', { fuzzy: 0.2 })\n   * ```\n   *\n   * ### Combining strategies:\n   *\n   * ```javascript\n   * // Mix of exact match, prefix search, and fuzzy search\n   * miniSearch.search('ismael mob', {\n   *  prefix: true,\n   *  fuzzy: 0.2\n   * })\n   * ```\n   *\n   * ### Advanced prefix and fuzzy search:\n   *\n   * ```javascript\n   * // Perform fuzzy and prefix search depending on the search term. Here\n   * // performing prefix and fuzzy search only on terms longer than 3 characters\n   * miniSearch.search('ismael mob', {\n   *  prefix: term => term.length > 3\n   *  fuzzy: term => term.length > 3 ? 0.2 : null\n   * })\n   * ```\n   *\n   * ### Combine with AND:\n   *\n   * ```javascript\n   * // Combine search terms with AND (to match only documents that contain both\n   * // \"motorcycle\" and \"art\")\n   * miniSearch.search('motorcycle art', { combineWith: 'AND' })\n   * ```\n   *\n   * ### Combine with AND_NOT:\n   *\n   * There is also an AND_NOT combinator, that finds documents that match the\n   * first term, but do not match any of the other terms. This combinator is\n   * rarely useful with simple queries, and is meant to be used with advanced\n   * query combinations (see later for more details).\n   *\n   * ### Filtering results:\n   *\n   * ```javascript\n   * // Filter only results in the 'fiction' category (assuming that 'category'\n   * // is a stored field)\n   * miniSearch.search('motorcycle art', {\n   *   filter: (result) => result.category === 'fiction'\n   * })\n   * ```\n   *\n   * ### Wildcard query\n   *\n   * Searching for an empty string (assuming the default tokenizer) returns no\n   * results. Sometimes though, one needs to match all documents, like in a\n   * \"wildcard\" search. This is possible by passing the special value\n   * `MiniSearch.wildcard` as the query:\n   *\n   * ```javascript\n   * // Return search results for all documents\n   * minisearch.search(MiniSearch.wildcard)\n   * ```\n   *\n   * Note that search options such as `filter` and `boostDocument` are still\n   * applied, influencing which results are returned, and their order:\n   *\n   * ```javascript\n   * // Return search results for all documents in the 'fiction' category\n   * minisearch.search(MiniSearch.wildcard, {\n   *   filter: (result) => result.category === 'fiction'\n   * })\n   * ```\n   *\n   * ### Advanced combination of queries:\n   *\n   * It is possible to combine different subqueries with OR, AND, and AND_NOT,\n   * and even with different search options, by passing a query expression\n   * tree object as the first argument, instead of a string.\n   *\n   * ```javascript\n   * // Search for documents that contain \"zen\" and (\"motorcycle\" or \"archery\")\n   * miniSearch.search({\n   *   combineWith: 'AND',\n   *   queries: [\n   *     'zen',\n   *     {\n   *       combineWith: 'OR',\n   *       queries: ['motorcycle', 'archery']\n   *     }\n   *   ]\n   * })\n   *\n   * // Search for documents that contain (\"apple\" or \"pear\") but not \"juice\" and\n   * // not \"tree\"\n   * miniSearch.search({\n   *   combineWith: 'AND_NOT',\n   *   queries: [\n   *     {\n   *       combineWith: 'OR',\n   *       queries: ['apple', 'pear']\n   *     },\n   *     'juice',\n   *     'tree'\n   *   ]\n   * })\n   * ```\n   *\n   * Each node in the expression tree can be either a string, or an object that\n   * supports all `SearchOptions` fields, plus a `queries` array field for\n   * subqueries.\n   *\n   * Note that, while this can become complicated to do by hand for complex or\n   * deeply nested queries, it provides a formalized expression tree API for\n   * external libraries that implement a parser for custom query languages.\n   *\n   * @param query  Search query\n   * @param options  Search options. Each option, if not given, defaults to the corresponding value of `searchOptions` given to the constructor, or to the library default.\n   */\n  search (query: Query, searchOptions: SearchOptions = {}): SearchResult[] {\n    const rawResults = this.executeQuery(query, searchOptions)\n    const results = []\n\n    for (const [docId, { score, terms, match }] of rawResults) {\n      // Final score takes into account the number of matching QUERY terms.\n      // The end user will only receive the MATCHED terms.\n      const quality = terms.length || 1\n\n      const result = {\n        id: this._documentIds.get(docId),\n        score: score * quality,\n        terms: Object.keys(match),\n        match\n      }\n\n      Object.assign(result, this._storedFields.get(docId))\n      if (searchOptions.filter == null || searchOptions.filter(result)) {\n        results.push(result)\n      }\n    }\n\n    // If it's a wildcard query, and no document boost is applied, skip sorting\n    // the results, as all results have the same score of 1\n    if (query === MiniSearch.wildcard &&\n      searchOptions.boostDocument == null &&\n      this._options.searchOptions.boostDocument == null) {\n      return results\n    }\n\n    results.sort(byScore)\n    return results\n  }\n\n  /**\n   * Provide suggestions for the given search query\n   *\n   * The result is a list of suggested modified search queries, derived from the\n   * given search query, each with a relevance score, sorted by descending score.\n   *\n   * By default, it uses the same options used for search, except that by\n   * default it performs prefix search on the last term of the query, and\n   * combine terms with `'AND'` (requiring all query terms to match). Custom\n   * options can be passed as a second argument. Defaults can be changed upon\n   * calling the `MiniSearch` constructor, by passing a `autoSuggestOptions`\n   * option.\n   *\n   * ### Basic usage:\n   *\n   * ```javascript\n   * // Get suggestions for 'neuro':\n   * miniSearch.autoSuggest('neuro')\n   * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 0.46240 } ]\n   * ```\n   *\n   * ### Multiple words:\n   *\n   * ```javascript\n   * // Get suggestions for 'zen ar':\n   * miniSearch.autoSuggest('zen ar')\n   * // => [\n   * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\n   * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\n   * // ]\n   * ```\n   *\n   * ### Fuzzy suggestions:\n   *\n   * ```javascript\n   * // Correct spelling mistakes using fuzzy search:\n   * miniSearch.autoSuggest('neromancer', { fuzzy: 0.2 })\n   * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 1.03998 } ]\n   * ```\n   *\n   * ### Filtering:\n   *\n   * ```javascript\n   * // Get suggestions for 'zen ar', but only within the 'fiction' category\n   * // (assuming that 'category' is a stored field):\n   * miniSearch.autoSuggest('zen ar', {\n   *   filter: (result) => result.category === 'fiction'\n   * })\n   * // => [\n   * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\n   * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\n   * // ]\n   * ```\n   *\n   * @param queryString  Query string to be expanded into suggestions\n   * @param options  Search options. The supported options and default values\n   * are the same as for the `search` method, except that by default prefix\n   * search is performed on the last term in the query, and terms are combined\n   * with `'AND'`.\n   * @return  A sorted array of suggestions sorted by relevance score.\n   */\n  autoSuggest (queryString: string, options: SearchOptions = {}): Suggestion[] {\n    options = { ...this._options.autoSuggestOptions, ...options }\n\n    const suggestions: Map<string, Omit<Suggestion, 'suggestion'> & { count: number }> = new Map()\n\n    for (const { score, terms } of this.search(queryString, options)) {\n      const phrase = terms.join(' ')\n      const suggestion = suggestions.get(phrase)\n      if (suggestion != null) {\n        suggestion.score += score\n        suggestion.count += 1\n      } else {\n        suggestions.set(phrase, { score, terms, count: 1 })\n      }\n    }\n\n    const results = []\n    for (const [suggestion, { score, terms, count }] of suggestions) {\n      results.push({ suggestion, terms, score: score / count })\n    }\n\n    results.sort(byScore)\n    return results\n  }\n\n  /**\n   * Total number of documents available to search\n   */\n  get documentCount (): number {\n    return this._documentCount\n  }\n\n  /**\n   * Number of terms in the index\n   */\n  get termCount (): number {\n    return this._index.size\n  }\n\n  /**\n   * Deserializes a JSON index (serialized with `JSON.stringify(miniSearch)`)\n   * and instantiates a MiniSearch instance. It should be given the same options\n   * originally used when serializing the index.\n   *\n   * ### Usage:\n   *\n   * ```javascript\n   * // If the index was serialized with:\n   * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })\n   * miniSearch.addAll(documents)\n   *\n   * const json = JSON.stringify(miniSearch)\n   * // It can later be deserialized like this:\n   * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })\n   * ```\n   *\n   * @param json  JSON-serialized index\n   * @param options  configuration options, same as the constructor\n   * @return An instance of MiniSearch deserialized from the given JSON.\n   */\n  static loadJSON<T = any> (json: string, options: Options<T>): MiniSearch<T> {\n    if (options == null) {\n      throw new Error('MiniSearch: loadJSON should be given the same options used when serializing the index')\n    }\n    return this.loadJS(JSON.parse(json), options)\n  }\n\n  /**\n   * Returns the default value of an option. It will throw an error if no option\n   * with the given name exists.\n   *\n   * @param optionName  Name of the option\n   * @return The default value of the given option\n   *\n   * ### Usage:\n   *\n   * ```javascript\n   * // Get default tokenizer\n   * MiniSearch.getDefault('tokenize')\n   *\n   * // Get default term processor\n   * MiniSearch.getDefault('processTerm')\n   *\n   * // Unknown options will throw an error\n   * MiniSearch.getDefault('notExisting')\n   * // => throws 'MiniSearch: unknown option \"notExisting\"'\n   * ```\n   */\n  static getDefault (optionName: string): any {\n    if (defaultOptions.hasOwnProperty(optionName)) {\n      return getOwnProperty(defaultOptions, optionName)\n    } else {\n      throw new Error(`MiniSearch: unknown option \"${optionName}\"`)\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  static loadJS<T = any> (js: AsPlainObject, options: Options<T>): MiniSearch<T> {\n    const {\n      index,\n      documentCount,\n      nextId,\n      documentIds,\n      fieldIds,\n      fieldLength,\n      averageFieldLength,\n      storedFields,\n      dirtCount,\n      serializationVersion\n    } = js\n    if (serializationVersion !== 1 && serializationVersion !== 2) {\n      throw new Error('MiniSearch: cannot deserialize an index created with an incompatible version')\n    }\n\n    const miniSearch = new MiniSearch(options)\n\n    miniSearch._documentCount = documentCount\n    miniSearch._nextId = nextId\n    miniSearch._documentIds = objectToNumericMap(documentIds)\n    miniSearch._idToShortId = new Map<any, number>()\n    miniSearch._fieldIds = fieldIds\n    miniSearch._fieldLength = objectToNumericMap(fieldLength)\n    miniSearch._avgFieldLength = averageFieldLength\n    miniSearch._storedFields = objectToNumericMap(storedFields)\n    miniSearch._dirtCount = dirtCount || 0\n    miniSearch._index = new SearchableMap()\n\n    for (const [shortId, id] of miniSearch._documentIds) {\n      miniSearch._idToShortId.set(id, shortId)\n    }\n\n    for (const [term, data] of index) {\n      const dataMap = new Map() as FieldTermData\n\n      for (const fieldId of Object.keys(data)) {\n        let indexEntry = data[fieldId]\n\n        // Version 1 used to nest the index entry inside a field called ds\n        if (serializationVersion === 1) {\n          indexEntry = indexEntry.ds as unknown as SerializedIndexEntry\n        }\n\n        dataMap.set(parseInt(fieldId, 10), objectToNumericMap(indexEntry) as DocumentTermFreqs)\n      }\n\n      miniSearch._index.set(term, dataMap)\n    }\n\n    return miniSearch\n  }\n\n  /**\n   * @ignore\n   */\n  private executeQuery (query: Query, searchOptions: SearchOptions = {}): RawResult {\n    if (query === MiniSearch.wildcard) {\n      return this.executeWildcardQuery(searchOptions)\n    }\n\n    if (typeof query !== 'string') {\n      const options = { ...searchOptions, ...query, queries: undefined }\n      const results = query.queries.map((subquery) => this.executeQuery(subquery, options))\n      return this.combineResults(results, options.combineWith)\n    }\n\n    const { tokenize, processTerm, searchOptions: globalSearchOptions } = this._options\n    const options = { tokenize, processTerm, ...globalSearchOptions, ...searchOptions }\n    const { tokenize: searchTokenize, processTerm: searchProcessTerm } = options\n    const terms = searchTokenize(query)\n      .flatMap((term: string) => searchProcessTerm(term))\n      .filter((term) => !!term) as string[]\n    const queries: QuerySpec[] = terms.map(termToQuerySpec(options))\n    const results = queries.map(query => this.executeQuerySpec(query, options))\n\n    return this.combineResults(results, options.combineWith)\n  }\n\n  /**\n   * @ignore\n   */\n  private executeQuerySpec (query: QuerySpec, searchOptions: SearchOptions): RawResult {\n    const options: SearchOptionsWithDefaults = { ...this._options.searchOptions, ...searchOptions }\n\n    const boosts = (options.fields || this._options.fields).reduce((boosts, field) =>\n      ({ ...boosts, [field]: getOwnProperty(options.boost, field) || 1 }), {})\n\n    const {\n      boostDocument,\n      weights,\n      maxFuzzy,\n      bm25: bm25params\n    } = options\n\n    const { fuzzy: fuzzyWeight, prefix: prefixWeight } = { ...defaultSearchOptions.weights, ...weights }\n\n    const data = this._index.get(query.term)\n    const results = this.termResults(query.term, query.term, 1, data, boosts, boostDocument, bm25params)\n\n    let prefixMatches\n    let fuzzyMatches\n\n    if (query.prefix) {\n      prefixMatches = this._index.atPrefix(query.term)\n    }\n\n    if (query.fuzzy) {\n      const fuzzy = (query.fuzzy === true) ? 0.2 : query.fuzzy\n      const maxDistance = fuzzy < 1 ? Math.min(maxFuzzy, Math.round(query.term.length * fuzzy)) : fuzzy\n      if (maxDistance) fuzzyMatches = this._index.fuzzyGet(query.term, maxDistance)\n    }\n\n    if (prefixMatches) {\n      for (const [term, data] of prefixMatches) {\n        const distance = term.length - query.term.length\n        if (!distance) { continue } // Skip exact match.\n\n        // Delete the term from fuzzy results (if present) if it is also a\n        // prefix result. This entry will always be scored as a prefix result.\n        fuzzyMatches?.delete(term)\n\n        // Weight gradually approaches 0 as distance goes to infinity, with the\n        // weight for the hypothetical distance 0 being equal to prefixWeight.\n        // The rate of change is much lower than that of fuzzy matches to\n        // account for the fact that prefix matches stay more relevant than\n        // fuzzy matches for longer distances.\n        const weight = prefixWeight * term.length / (term.length + 0.3 * distance)\n        this.termResults(query.term, term, weight, data, boosts, boostDocument, bm25params, results)\n      }\n    }\n\n    if (fuzzyMatches) {\n      for (const term of fuzzyMatches.keys()) {\n        const [data, distance] = fuzzyMatches.get(term)!\n        if (!distance) { continue } // Skip exact match.\n\n        // Weight gradually approaches 0 as distance goes to infinity, with the\n        // weight for the hypothetical distance 0 being equal to fuzzyWeight.\n        const weight = fuzzyWeight * term.length / (term.length + distance)\n        this.termResults(query.term, term, weight, data, boosts, boostDocument, bm25params, results)\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * @ignore\n   */\n  private executeWildcardQuery (searchOptions: SearchOptions): RawResult {\n    const results = new Map() as RawResult\n    const options: SearchOptionsWithDefaults = { ...this._options.searchOptions, ...searchOptions }\n\n    for (const [shortId, id] of this._documentIds) {\n      const score = options.boostDocument ? options.boostDocument(id, '', this._storedFields.get(shortId)) : 1\n      results.set(shortId, {\n        score,\n        terms: [],\n        match: {}\n      })\n    }\n\n    return results\n  }\n\n  /**\n   * @ignore\n   */\n  private combineResults (results: RawResult[], combineWith = OR): RawResult {\n    if (results.length === 0) { return new Map() }\n    const operator = combineWith.toLowerCase()\n    return results.reduce(combinators[operator]) || new Map()\n  }\n\n  /**\n   * Allows serialization of the index to JSON, to possibly store it and later\n   * deserialize it with `MiniSearch.loadJSON`.\n   *\n   * Normally one does not directly call this method, but rather call the\n   * standard JavaScript `JSON.stringify()` passing the `MiniSearch` instance,\n   * and JavaScript will internally call this method. Upon deserialization, one\n   * must pass to `loadJSON` the same options used to create the original\n   * instance that was serialized.\n   *\n   * ### Usage:\n   *\n   * ```javascript\n   * // Serialize the index:\n   * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })\n   * miniSearch.addAll(documents)\n   * const json = JSON.stringify(miniSearch)\n   *\n   * // Later, to deserialize it:\n   * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })\n   * ```\n   *\n   * @return A plain-object serializable representation of the search index.\n   */\n  toJSON (): AsPlainObject {\n    const index: [string, { [key: string]: SerializedIndexEntry }][] = []\n\n    for (const [term, fieldIndex] of this._index) {\n      const data: { [key: string]: SerializedIndexEntry } = {}\n\n      for (const [fieldId, freqs] of fieldIndex) {\n        data[fieldId] = Object.fromEntries(freqs)\n      }\n\n      index.push([term, data])\n    }\n\n    return {\n      documentCount: this._documentCount,\n      nextId: this._nextId,\n      documentIds: Object.fromEntries(this._documentIds),\n      fieldIds: this._fieldIds,\n      fieldLength: Object.fromEntries(this._fieldLength),\n      averageFieldLength: this._avgFieldLength,\n      storedFields: Object.fromEntries(this._storedFields),\n      dirtCount: this._dirtCount,\n      index,\n      serializationVersion: 2\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private termResults (\n    sourceTerm: string,\n    derivedTerm: string,\n    termWeight: number,\n    fieldTermData: FieldTermData | undefined,\n    fieldBoosts: { [field: string]: number },\n    boostDocumentFn: ((id: any, term: string, storedFields?: Record<string, unknown>) => number) | undefined,\n    bm25params: BM25Params,\n    results: RawResult = new Map()\n  ): RawResult {\n    if (fieldTermData == null) return results\n\n    for (const field of Object.keys(fieldBoosts)) {\n      const fieldBoost = fieldBoosts[field]\n      const fieldId = this._fieldIds[field]\n\n      const fieldTermFreqs = fieldTermData.get(fieldId)\n      if (fieldTermFreqs == null) continue\n\n      let matchingFields = fieldTermFreqs.size\n      const avgFieldLength = this._avgFieldLength[fieldId]\n\n      for (const docId of fieldTermFreqs.keys()) {\n        if (!this._documentIds.has(docId)) {\n          this.removeTerm(fieldId, docId, derivedTerm)\n          matchingFields -= 1\n          continue\n        }\n\n        const docBoost = boostDocumentFn ? boostDocumentFn(this._documentIds.get(docId), derivedTerm, this._storedFields.get(docId)) : 1\n        if (!docBoost) continue\n\n        const termFreq = fieldTermFreqs.get(docId)!\n        const fieldLength = this._fieldLength.get(docId)![fieldId]\n\n        // NOTE: The total number of fields is set to the number of documents\n        // `this._documentCount`. It could also make sense to use the number of\n        // documents where the current field is non-blank as a normalization\n        // factor. This will make a difference in scoring if the field is rarely\n        // present. This is currently not supported, and may require further\n        // analysis to see if it is a valid use case.\n        const rawScore = calcBM25Score(termFreq, matchingFields, this._documentCount, fieldLength, avgFieldLength, bm25params)\n        const weightedScore = termWeight * fieldBoost * docBoost * rawScore\n\n        const result = results.get(docId)\n        if (result) {\n          result.score += weightedScore\n          assignUniqueTerm(result.terms, sourceTerm)\n          const match = getOwnProperty(result.match, derivedTerm)\n          if (match) {\n            match.push(field)\n          } else {\n            result.match[derivedTerm] = [field]\n          }\n        } else {\n          results.set(docId, {\n            score: weightedScore,\n            terms: [sourceTerm],\n            match: { [derivedTerm]: [field] }\n          })\n        }\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * @ignore\n   */\n  private addTerm (fieldId: number, documentId: number, term: string): void {\n    const indexData = this._index.fetch(term, createMap)\n\n    let fieldIndex = indexData.get(fieldId)\n    if (fieldIndex == null) {\n      fieldIndex = new Map()\n      fieldIndex.set(documentId, 1)\n      indexData.set(fieldId, fieldIndex)\n    } else {\n      const docs = fieldIndex.get(documentId)\n      fieldIndex.set(documentId, (docs || 0) + 1)\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private removeTerm (fieldId: number, documentId: number, term: string): void {\n    if (!this._index.has(term)) {\n      this.warnDocumentChanged(documentId, fieldId, term)\n      return\n    }\n\n    const indexData = this._index.fetch(term, createMap)\n\n    const fieldIndex = indexData.get(fieldId)\n    if (fieldIndex == null || fieldIndex.get(documentId) == null) {\n      this.warnDocumentChanged(documentId, fieldId, term)\n    } else if (fieldIndex.get(documentId)! <= 1) {\n      if (fieldIndex.size <= 1) {\n        indexData.delete(fieldId)\n      } else {\n        fieldIndex.delete(documentId)\n      }\n    } else {\n      fieldIndex.set(documentId, fieldIndex.get(documentId)! - 1)\n    }\n\n    if (this._index.get(term)!.size === 0) {\n      this._index.delete(term)\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private warnDocumentChanged (shortDocumentId: number, fieldId: number, term: string): void {\n    for (const fieldName of Object.keys(this._fieldIds)) {\n      if (this._fieldIds[fieldName] === fieldId) {\n        this._options.logger('warn', `MiniSearch: document with ID ${this._documentIds.get(shortDocumentId)} has changed before removal: term \"${term}\" was not present in field \"${fieldName}\". Removing a document after it has changed can corrupt the index!`, 'version_conflict')\n        return\n      }\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private addDocumentId (documentId: any): number {\n    const shortDocumentId = this._nextId\n    this._idToShortId.set(documentId, shortDocumentId)\n    this._documentIds.set(shortDocumentId, documentId)\n    this._documentCount += 1\n    this._nextId += 1\n    return shortDocumentId\n  }\n\n  /**\n   * @ignore\n   */\n  private addFields (fields: string[]): void {\n    for (let i = 0; i < fields.length; i++) {\n      this._fieldIds[fields[i]] = i\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private addFieldLength (documentId: number, fieldId: number, count: number, length: number): void {\n    let fieldLengths = this._fieldLength.get(documentId)\n    if (fieldLengths == null) this._fieldLength.set(documentId, fieldLengths = [])\n    fieldLengths[fieldId] = length\n\n    const averageFieldLength = this._avgFieldLength[fieldId] || 0\n    const totalFieldLength = (averageFieldLength * count) + length\n    this._avgFieldLength[fieldId] = totalFieldLength / (count + 1)\n  }\n\n  /**\n   * @ignore\n   */\n  private removeFieldLength (documentId: number, fieldId: number, count: number, length: number): void {\n    if (count === 1) {\n      this._avgFieldLength[fieldId] = 0\n      return\n    }\n    const totalFieldLength = (this._avgFieldLength[fieldId] * count) - length\n    this._avgFieldLength[fieldId] = totalFieldLength / (count - 1)\n  }\n\n  /**\n   * @ignore\n   */\n  private saveStoredFields (documentId: number, doc: T): void {\n    const { storeFields, extractField } = this._options\n    if (storeFields == null || storeFields.length === 0) { return }\n\n    let documentFields = this._storedFields.get(documentId)\n    if (documentFields == null) this._storedFields.set(documentId, documentFields = {})\n\n    for (const fieldName of storeFields) {\n      const fieldValue = extractField(doc, fieldName)\n      if (fieldValue !== undefined) documentFields[fieldName] = fieldValue\n    }\n  }\n}\n\nconst getOwnProperty = (object: any, property: string) =>\n  Object.prototype.hasOwnProperty.call(object, property) ? object[property] : undefined\n\ntype CombinatorFunction = (a: RawResult, b: RawResult) => RawResult\n\nconst combinators: { [kind: string]: CombinatorFunction } = {\n  [OR]: (a: RawResult, b: RawResult) => {\n    for (const docId of b.keys()) {\n      const existing = a.get(docId)\n      if (existing == null) {\n        a.set(docId, b.get(docId)!)\n      } else {\n        const { score, terms, match } = b.get(docId)!\n        existing.score = existing.score + score\n        existing.match = Object.assign(existing.match, match)\n        assignUniqueTerms(existing.terms, terms)\n      }\n    }\n\n    return a\n  },\n  [AND]: (a: RawResult, b: RawResult) => {\n    const combined = new Map()\n\n    for (const docId of b.keys()) {\n      const existing = a.get(docId)\n      if (existing == null) continue\n\n      const { score, terms, match } = b.get(docId)!\n      assignUniqueTerms(existing.terms, terms)\n      combined.set(docId, {\n        score: existing.score + score,\n        terms: existing.terms,\n        match: Object.assign(existing.match, match)\n      })\n    }\n\n    return combined\n  },\n  [AND_NOT]: (a: RawResult, b: RawResult) => {\n    for (const docId of b.keys()) a.delete(docId)\n    return a\n  }\n}\n\n/**\n * Parameters of the BM25+ scoring algorithm. Customizing these is almost never\n * necessary, and finetuning them requires an understanding of the BM25 scoring\n * model.\n *\n * Some information about BM25 (and BM25+) can be found at these links:\n *\n *   - https://en.wikipedia.org/wiki/Okapi_BM25\n *   - https://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation/\n */\nexport type BM25Params = {\n  /** Term frequency saturation point.\n   *\n   * Recommended values are between `1.2` and `2`. Higher values increase the\n   * difference in score between documents with higher and lower term\n   * frequencies. Setting this to `0` or a negative value is invalid. Defaults\n   * to `1.2`\n   */\n  k: number,\n\n  /**\n   * Length normalization impact.\n   *\n   * Recommended values are around `0.75`. Higher values increase the weight\n   * that field length has on scoring. Setting this to `0` (not recommended)\n   * means that the field length has no effect on scoring. Negative values are\n   * invalid. Defaults to `0.7`.\n   */\n  b: number,\n\n  /**\n   * BM25+ frequency normalization lower bound (usually called \u03B4).\n   *\n   * Recommended values are between `0.5` and `1`. Increasing this parameter\n   * increases the minimum relevance of one occurrence of a search term\n   * regardless of its (possibly very long) field length. Negative values are\n   * invalid. Defaults to `0.5`.\n   */\n  d: number\n}\n\nconst defaultBM25params: BM25Params = { k: 1.2, b: 0.7, d: 0.5 }\n\nconst calcBM25Score = (\n  termFreq: number,\n  matchingCount: number,\n  totalCount: number,\n  fieldLength: number,\n  avgFieldLength: number,\n  bm25params: BM25Params\n): number => {\n  const { k, b, d } = bm25params\n  const invDocFreq = Math.log(1 + (totalCount - matchingCount + 0.5) / (matchingCount + 0.5))\n  return invDocFreq * (d + termFreq * (k + 1) / (termFreq + k * (1 - b + b * fieldLength / avgFieldLength)))\n}\n\nconst termToQuerySpec = (options: SearchOptions) => (term: string, i: number, terms: string[]): QuerySpec => {\n  const fuzzy = (typeof options.fuzzy === 'function')\n    ? options.fuzzy(term, i, terms)\n    : (options.fuzzy || false)\n  const prefix = (typeof options.prefix === 'function')\n    ? options.prefix(term, i, terms)\n    : (options.prefix === true)\n  return { term, fuzzy, prefix }\n}\n\nconst defaultOptions = {\n  idField: 'id',\n  extractField: (document: any, fieldName: string) => document[fieldName],\n  tokenize: (text: string) => text.split(SPACE_OR_PUNCTUATION),\n  processTerm: (term: string) => term.toLowerCase(),\n  fields: undefined,\n  searchOptions: undefined,\n  storeFields: [],\n  logger: (level: LogLevel, message: string): void => {\n    if (typeof console?.[level] === 'function') console[level](message)\n  },\n  autoVacuum: true\n}\n\nconst defaultSearchOptions = {\n  combineWith: OR,\n  prefix: false,\n  fuzzy: false,\n  maxFuzzy: 6,\n  boost: {},\n  weights: { fuzzy: 0.45, prefix: 0.375 },\n  bm25: defaultBM25params\n}\n\nconst defaultAutoSuggestOptions = {\n  combineWith: AND,\n  prefix: (term: string, i: number, terms: string[]): boolean =>\n    i === terms.length - 1\n}\n\nconst defaultVacuumOptions = { batchSize: 1000, batchWait: 10 }\nconst defaultVacuumConditions = { minDirtFactor: 0.1, minDirtCount: 20 }\n\nconst defaultAutoVacuumOptions = { ...defaultVacuumOptions, ...defaultVacuumConditions }\n\nconst assignUniqueTerm = (target: string[], term: string): void => {\n  // Avoid adding duplicate terms.\n  if (!target.includes(term)) target.push(term)\n}\n\nconst assignUniqueTerms = (target: string[], source: readonly string[]): void => {\n  for (const term of source) {\n    // Avoid adding duplicate terms.\n    if (!target.includes(term)) target.push(term)\n  }\n}\n\ntype Scored = { score: number }\nconst byScore = ({ score: a }: Scored, { score: b }: Scored) => b - a\n\nconst createMap = () => new Map()\n\ninterface SerializedIndexEntry {\n  [key: string]: number\n}\n\nconst objectToNumericMap = <T>(object: { [key: string]: T }): Map<number, T> => {\n  const map = new Map()\n\n  for (const key of Object.keys(object)) {\n    map.set(parseInt(key, 10), object[key])\n  }\n\n  return map\n}\n\n// This regular expression matches any Unicode space or punctuation character\n// Adapted from https://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7BZ%7D%5Cp%7BP%7D&abb=on&c=on&esc=on\nconst SPACE_OR_PUNCTUATION = /[\\n\\r -#%-*,-/:;?@[-\\]_{}\\u00A0\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u2043\\u2045-\\u2051\\u2053-\\u205F\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u3000-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]+/u\n", "import type {Provider} from './provider.js'\nimport type {Inlet} from './inlet.js'\nimport type {Config} from './config.js'\nimport * as ptssParser from '../ptss-parser/index.js'\nimport {Stir2String} from './render/stir/stir2string.js'\n\n// todo[arch] note how unlike render, we don't use classes, but a closure.\n//    This functional approach definitely is well suited for transforms, but\n//    perhaps we should do the same for render, either because it is better,\n//    or for consistency (less confusing for users), or both.\n\n/**\n * Interface for a Parse operator used for inputs to a STIR processing pipeline.\n */\nexport type Parse = Inlet<string>\n\nexport type ParseProvider = Provider<Parse>\n\nexport async function configParseProvider (config: Config): Promise<Parse> {\n    const providerName = config.requiredValue('provider')\n    console.group(`configure inlet: ${providerName}`)\n    if (providerName !== 'ptss-parser') {\n        throw new Error(`HACK: hardcoded support for ptss-parser only`)\n    }\n    //! HACK: instead of looking up a registered provider, we are hardcoding\n    //  an instantiation of ptss-parser. When we implement true inlet provider\n    //  lookup, and implement a ptss-parser provider interface, look at\n    //  configOutletSegment for the proper logic; this should look almost\n    //  identical. Some of the lines below would be moved into the ptss-parser\n    //  provider init code.\n    const providerConfig = config.requiredSubConfig('config')\n    const stylesheet = providerConfig.requiredSubConfig('stylesheet')\n    const stylesheetName = stylesheet.requiredValue('name')\n    const stylesheetOptions = stylesheet.subConfig('options')?.data()\n    const parserOptions = config.subConfig('options')?.data()\n    const inlet =\n        new ptssParser.Parser(\n            ptssParser.loadSheet(stylesheetName, stylesheetOptions),\n            parserOptions)\n\n    console.groupEnd()\n    return (input: string) => {\n        console.debug(`\u2652\uFE0F INLET ptss-parser ${stylesheetName}`)\n        console.group()\n        const stir = inlet.parse(input)\n        console.groupEnd()\n\n        console.debug('Stir2String:')\n        console.group()\n        console.debug(new Stir2String().render(stir))\n        console.groupEnd()\n        return stir\n    }\n}\n", "import type {STIR} from '../../stir.js'\nimport type {Assembly, File} from '../../textAssembly/index.js'\nimport type {Config} from '../../config.js'\nimport type {SandboxFS} from '../../../vfs/index.js'\nimport {lookupAssemblyRenderer} from '../../registry.js'\n\nexport type RenderStats = number | { [key: string]: RenderStats }\n\nexport interface AssemblyRenderer {\n    prepare (assembly: Assembly): void\n    render (stir: STIR): void\n    copy (file: File): void\n    finish (): void\n    stats (): { [key: string]: RenderStats }\n}\n\nexport interface AssemblyRendererProvider {\n    configure: (dest: SandboxFS, config?: Config) => Promise<AssemblyRenderer>\n}\n\nexport async function configAssemblyRendererProvider (dest: SandboxFS, config: Config): Promise<AssemblyRenderer> {\n    const providerName = config.requiredValue('provider')\n    console.group(`configure outlet: ${providerName}`)\n    const provider = lookupAssemblyRenderer(providerName)\n    if (provider === undefined || provider.configure === undefined) {\n        throw new Error(`invalid outlet: ${providerName}`)\n    }\n    const providerConfig = config.subConfig('config')\n    const assemblyRenderer = await provider.configure(dest, providerConfig)\n    console.groupEnd()\n    return assemblyRenderer\n}\n", "// we only need to register builtin providers here because\n// it's only pipeline processing that makes use of them.\nimport './registerBuiltinProviders.js'\n\nimport {Config, newConfigForVfsPath} from './config.js'\nimport {Parse, configParseProvider} from './parse.js'\nimport {Pipe, configPipeProvider} from './pipe.js'\nimport {RenderSTIR, configRenderSTIRProvider} from './renderSTIR.js'\nimport {AssemblyRenderer, configAssemblyRendererProvider, RenderStats} from './render/assembly/AssemblyRenderer.js'\nimport type {STIR, TunnelingSTIR} from './stir.js'\nimport type {Assembly, File} from './textAssembly/index.js'\nimport * as ir from '../stir/index.js'\nimport type {VfsPath, SandboxFS} from '../vfs/index.js'\nimport {fileTypeByFilename} from './filetypes.js'\n\n\n// todo![pipeline api] Why do any of the public pipeline factory methods here return\n//  PipelineParts along with the ONLY thing they should return, either a\n//  simple function or an Object with a push method and possibly some other\n//  utility methods (e.g. getStatistics(), or for AssemblyPipeline, reset(),\n//  etc)\n//\n// I mean the complex typing I'm using is fine for internal use, but should\n// not be part of the public API.\n//\n// \uD83C\uDFC8 until after I do the changes necessary to make this all async. Who knows\n// what that will bring.\n//\n// todo[pipeline, api] despite the ostensible switch to the\n//  Inlet-Pipes-Outlet metaphor, we only have support for:\n// - inlet's of type Inlet<Parse>\n// - outlets of type Outlet<RenderSTIR>\n// - `configParseInlet` and `configRenderOutlet` but no generic `configInlet`\n//   and `configOutlet`.\n// - the registry has the same limitation: only `lookupSTIRRenderer` no\n//   `lookupOutlet`. (\u2705 we still want to keep lookupSTIRRenderer as some\n//   compositional outlets want a RenderSTIR specifically for internal use)\n// \u2753\uD83C\uDFC8 Not a priority right now? If so, reduce the priority of the to-do above.\ntype PipelineParts<OUTLET> = {\n    inlet: Parse,\n    pipes: Pipe[],\n    outlet: OUTLET\n}\n\n// todo![pipeline api] the i/o signature needs to sync with update pipeline architecture\ntype Pipeline<IN, OUT, OUTLET> = PipelineParts<OUTLET> & {\n    // the connected pipeline function\n    pump: (input: IN) => OUT\n}\nexport type SimplePipeline = Pipeline<string | STIR, string, RenderSTIR>\nexport type AssemblyPipeline =\n    Pipeline<File, void, AssemblyRenderer> & {\n    prime (): void,\n    flush: () => void,\n    stats: () => { [p: string]: RenderStats }\n}\n\n\nasync function configPipes (configs?: Config[]): Promise<Pipe[]> {\n    if (configs === undefined) {\n        return []\n    }\n    const pipes: ((stir: STIR) => void)[] = []\n    for (const cfg of configs) {\n        const pipe = await configPipeProvider(cfg)\n        if (pipe !== undefined) {\n            pipes.push(pipe)\n        }\n    }\n    return pipes\n}\n\n/**\n * Construct a pipeline programmatically, without a Config object or file.\n */\nexport function simplePipeline (inlet: Parse,\n                                pipes: Pipe[],\n                                outlet: RenderSTIR): SimplePipeline {\n    const pump = (input: string | STIR) => {\n        console.debug(`simple pipeline`)\n        console.group()\n\n        let stir: STIR\n        if (typeof input === 'string') {\n            console.debug(`INPUT: string: '${input.slice(0, 42)}...'`)\n            stir = inlet(input)\n        } else {\n            if (ir.isBlock(input)) {console.debug(`INPUT stir: ${input.type}`)} else {console.debug(`INPUT stir: inline sequence`)}\n            stir = input\n        }\n\n        for (let i = 0; i < pipes.length; i++) {\n            pipes[i](stir)\n        }\n\n        const output = outlet(stir)\n        console.groupEnd()\n        return output\n    }\n    return {pump, inlet, pipes, outlet}\n}\n\n/**\n * For clients who already have a Config, or need to instantiate one themselves for whatever reason.\n */\nexport async function simplePipelineFromConfig (config: Config): Promise<SimplePipeline> {\n    try {\n        console.group(`configure simple pipeline segments per ${config.name()}`)\n        const inlet = await configParseProvider(config.requiredSubConfig('inlet'))\n        const pipes = await configPipes(config.subConfigs('pipes'))\n        const outlet = await configRenderSTIRProvider(config.requiredSubConfig('outlet'))\n        console.groupEnd()\n        return simplePipeline(inlet, pipes, outlet)\n    } catch (e) {\n        console.error('--------------------- PIPELINE CONFIGURATION ERROR ---------------------')\n        console.error(e)\n        console.error()\n        // will only print config for debug log level\n        console.dir(config, {depth: null})\n        console.error('-------------------------------------------------------------------------')\n        throw Error('Textplain pipeline configuration error', {cause: e})\n    }\n}\n\nexport async function simplePipelineFromConfigFile (configPath: VfsPath): Promise<SimplePipeline> {\n    const config = newConfigForVfsPath(configPath)\n    return await simplePipelineFromConfig(config)\n}\n\n\nfunction assemblyPipeline (assembly: Assembly,\n                           inlet: Parse,\n                           pipes: Pipe[],\n                           outlet: AssemblyRenderer): AssemblyPipeline {\n    const pipeAndRenderSTIR = (stir: STIR, file: File) => {\n        const tStir = stir as TunnelingSTIR\n        tStir._tunnel = {\n            srcFile: file,\n            srcAssembly: assembly\n        }\n        for (let i = 0; i < pipes.length; i++) {\n            pipes[i](stir)\n        }\n        outlet.render(stir)\n    }\n\n\n    const pump = (file: File) => {\n        console.debug('assembly pipeline')\n        console.group()\n\n        //todo![renderAssembly, api] user control over which files are handled in which way?\n        // Via pipeline config\n        // Specifically:\n        //   - how are files routed to parsers and particular stylesheets?\n        //   - of the remaining files, which are resources to be copied?\n        //     > SEE DOC NOTES under \"resource copying\", or search for \"whitelist\"\n        //     > to find the notes.\n\n        //todo[renderAssembly] TEMP HACK routing logic. TEMP location.\n        // - we should have a registry that maps filetypes to actions?\n        const type = fileTypeByFilename(file.name)\n        if (type.name === 'MARKDOWN') {\n            const input = file.readFileSync() //todo![renderAssembly] this should be async\n            console.debug(`INPUT: structured text: '${input.slice(0, 42)}...'`)\n            const stir = inlet(input)\n            pipeAndRenderSTIR(stir, file)\n        } else if (file.isGenerated()) {\n            const stir = file.stir as STIR\n            if (ir.isBlock(stir)) {console.debug(`INPUT: generated stir: ${stir.type}`)} else {console.debug(`INPUT stir: inline sequence`)}\n            pipeAndRenderSTIR(stir, file)\n        } else if (type.name === 'STIR (JSON)') {\n            const stir = JSON.parse(file.readFileSync())\n            if (ir.isBlock(stir)) {console.debug(`INPUT: stir: ${stir.type}`)} else {console.debug(`INPUT stir: inline sequence`)}\n            pipeAndRenderSTIR(stir, file)\n        } else if (type.name === 'TEXT' && file.parent.name === 'spec/') {\n            //todo[hack] hack for commonmark case files having txt extension\n            const input = file.readFileSync() //todo![renderAssembly] this should be async\n            console.debug(`INPUT: commonmark spec: '${input.slice(0, 42)}...'`)\n            const stir = inlet(input)\n            pipeAndRenderSTIR(stir, file)\n        } else if (type.name === 'HTML') {\n            console.debug(`INPUT: html: ${file.extension()}`)\n            // todo[renderAssembly] need to treat HTML as content to render, since we need\n            //  to at least resolve cross references in links. It will of course\n            //  render to the same type for Assembly2Website, but to some\n            //  other form in other renderers, e.g. LaTeX or PDF.\n            //  so need to \"render\" the src HTML to the dest HTML.\n            // todo[hack] for now, treat it as a resource\n            file.status = 'resource: in pipeline'\n            outlet.copy(file)\n        } else {\n            if (type.type === 'media') {\n                console.debug(`INPUT: resource: ${file.extension()}`)\n                outlet.copy(file)\n            } else {\n                console.debug(`SKIPPING`)\n            }\n        }\n\n        console.groupEnd()\n    }\n\n    // todo[pipeline api] \uD83C\uDFC8 Question: should all pipeline components get a\n    //  prepare step? Thoughts:\n    //  - The distinction between component initialization (when they are\n    //    instantiated and configured per the config) and this prime/prepare\n    //    step is that the latter has access to the assembly data.\n    //  - I don't think inlets and pipes need or should need any preparation\n    //    that is dependent on the entire assembly, but maybe I haven't thought\n    //    of something for which it makes sense.\n    const prime = () => {\n        outlet.prepare(assembly)\n    }\n\n    const flush = () => {\n        outlet.finish()\n    }\n\n    const stats = () => {\n        return outlet.stats()\n    }\n\n    return {prime, pump, flush, stats, inlet, pipes, outlet}\n}\n\n\n/**\n * Creates a pipeline to process the given TextAssembly.\n *\n * All items fed into it are assumed to belong to the same assembly,\n * and the backend of the pipeline will receive all of the individually\n * processed items and re-assemble them into an output, typically a\n * rendering of the text assembly into another form, e.g. a website.\n *\n * @param {Assembly} assembly\n * @param {SandboxFS} dest\n * @param {Config} config\n * @param {PipelineParts<AssemblyRenderer>} parentPipeline?\n * @return {Promise<AssemblyPipeline>}\n */\nexport async function assemblyPipelineFromConfig (assembly: Assembly,\n                                                  dest: SandboxFS,\n                                                  config: Config,\n                                                  parentPipeline?: PipelineParts<AssemblyRenderer>)\n    : Promise<AssemblyPipeline> {\n    try {\n        console.info(`configure assembly pipeline segments per ${config.name()}`)\n        console.group()\n\n        //todo![renderAssembly, test] pipeline inheritance from parent pipeline\n\n        // downtree inlet overrides uptree\n        let inlet\n        if (!config.hasValue('inlet') && parentPipeline?.inlet !== undefined) {\n            inlet = parentPipeline.inlet\n        } else {\n            inlet = await configParseProvider(config.requiredSubConfig('inlet'))\n        }\n\n        // downtree `pipes` overrides uptree `pipes` but if downtree\n        // does not have `pipes`:\n        //  = downtree `prepend_pipes` are prepended to uptree `pipes`\n        //  - downtree `append_pipes` are appended to uptree `pipes`\n        const pipes: ((stir: STIR) => void)[] = []\n        if (config.hasValue('pipes')) {\n            pipes.push(...await configPipes(config.requiredSubConfigs('pipes')))\n        } else {\n            if (config.hasValue('prepend_pipes')) {\n                pipes.push(...await configPipes(config.requiredSubConfigs('prepend_pipes')))\n            }\n            if (parentPipeline?.pipes !== undefined) {\n                pipes.push(...parentPipeline.pipes)\n            }\n            if (config.hasValue('append_pipes')) {\n                pipes.push(...await configPipes(config.requiredSubConfigs('append_pipes')))\n            }\n        }\n\n        // only one AssemblyRenderer, the one defined at the root, is allowed.\n        // all downtree AssemblyRenderers are ignored.\n        let outlet\n        if (parentPipeline !== undefined) {\n            outlet = parentPipeline.outlet\n        } else { // this is the root pipeline\n            const outletConfig = config.requiredSubConfig('outlet')\n            outlet = await configAssemblyRendererProvider(dest, outletConfig)\n        }\n\n        console.groupEnd()\n        return assemblyPipeline(assembly, inlet, pipes, outlet)\n    } catch (e) {\n        console.error('--------------------- PIPELINE CONFIGURATION ERROR ---------------------')\n        console.error(e)\n        console.error()\n        // will only print config for debug log level\n        console.dir(config, {depth: null})\n        console.error('-------------------------------------------------------------------------')\n        throw Error('Textplain pipeline configuration error', {cause: e})\n    }\n}\n", "import * as ta from '../../textAssembly/index.js'\nimport * as ir from '../../../stir/index.js'\nimport {AssemblyPipeline, assemblyPipelineFromConfig} from '../../pipeline.js'\nimport {SandboxFS, VfsPath} from '../../../vfs/index.js'\nimport {newConfigForVfsPath} from '../../config.js'\nimport {fileTypeByFilename} from '../../filetypes.js'\nimport type {RenderStats} from './AssemblyRenderer.js'\n\n// todo![renderAssembly, arch] strange place to define this. Maybe will go away as I evolve this\n// code so \uD83C\uDFC8\nexport type PipelineForFileMapper = (f: ta.File) => AssemblyPipeline\n\n/**\n * call this to initiate an assembly rendering, the details of which are\n * governed by the passed config.\n *\n * Path Arguments\n * --------------\n * We create the SandboxFS instances internally rather than ask\n * the caller for these reasons:\n * - We must have access to the source FS to resolve subassembly references\n *   at graft point\n * - To be sure we are using a Sandbox whose root path is the source path.\n * - To be sure it is set to readonly.\n *\n * todo[perf] \uD83C\uDFC8 We can make it clear in the documentation that this is what\n * we'll do, but they may redundantly create and pass SandboxFS anyway. We can\n * check that the Vfs is readonly and that VfsPath.path === '/' (i.e. bounded\n * as we need it to be) and if so, just use it as-is.\n *\n * @param {VfsPath} src\n * @param {VfsPath} dest output will be written at the root of this FS. As\n *                         a SandboxFS nothing can be written outside of it.\n * @param {VfsPath} configPath to pipeline config. If none given, it will be\n *                         expected that the root of the assembly src has one.\n * @return {Promise<void>}\n */\nexport async function renderAssembly (src: VfsPath,\n                                      dest: VfsPath,\n                                      configPath?: VfsPath) {\n    //todo![RepoDoc] RepoDoc should support code comment to doc links as\n    //  below. When todos are rendered to a todo webpage, the links should work.\n    //  When TSDoc is rendered, the links should also work.\n    //todo![site scheme] this info message should summarize all the param\n    //  options whether explicit, implied or default as described in\n    //  [Zero-Config vs CLI vs Config file vs Project folder].\n    console.info(`TextAssembly rendering parameters:\n    source:  ${src.path} (${src.vfs})\n    output:  ${dest.path} (${dest.vfs})\n    config:  ${configPath?.path} (${configPath?.vfs})`)\n\n    const destFS = new SandboxFS(dest, 'empty')\n\n    console.log()\n    console.debug('\\n\\n==================================== \uD83D\uDCDA READ \uD83D\uDCDA ====================================')\n    console.info('reading text assembly...')\n    console.group()\n    // read assembly tree structure\n    // - this will include any textplain configurations\n    const assembly = ta.readAssembly(src)\n    if (configPath === undefined && assembly.textplainConfig === undefined) {\n        const msg = 'missing pipeline config -- zero config not yet implemented'\n        process.stderr.write(msg)\n        throw new Error(msg)\n    }\n    console.groupEnd()\n\n\n    // todo![arch] should prepare be moved to the textassembly module, alongside\n    //   read.ts, or even incorporated into readAssembly? Is there any case where\n    //   we'd read an assembly but not prepare it?\n    //   - IN FACT, i could easily integrate this into the read logic, thereby\n    //      eliminating an extra tree traversal.\n    console.log()\n    console.debug('\\n\\n==================================== \uD83D\uDCDA PREPARE  \uD83D\uDCDA ====================================')\n    console.info('preparing text assembly...')\n    console.group()\n    prepareFolder(assembly)\n    console.groupEnd()\n\n    console.log()\n    console.debug('\\n\\n=============================== \u2699\uFE0F  CONFIGURE PIPELINES \u2699\uFE0F  ===============================')\n\n    //! even when a config is given, it's inlet and pipes can be overridden by\n    //  branch-specific pipelines (including one defined at the assembly root!).\n    //  BUT the given config DOES determine the outlet (there can only be one\n    //  assembly output).\n    if (configPath !== undefined) {\n        const config = newConfigForVfsPath(configPath, assembly)\n        assembly.pipeline = await assemblyPipelineFromConfig(assembly, destFS, config)\n    }\n\n    await configureBranchSpecificPipelines(assembly, destFS)\n\n    const pipelineMapper: PipelineForFileMapper = (f: ta.File) => {\n        const r = f.searchUpForProperty('pipeline', true)\n        if (r === undefined) {\n            throw new Error(`no pipeline config found for ${f.crossAssemblyPath()}.`)\n        }\n        const pipeline = r.value as AssemblyPipeline\n        console.debug(`using pipeline configured at ${r.node.crossAssemblyPath()}`)\n        return pipeline\n    }\n\n    if (assembly.pipeline === undefined) {\n        throw Error('internal error: at this point we should have a root pipeline, falling back on a zero-config default')\n    }\n\n    console.log()\n    console.debug('\\n\\n==================================== \uD83D\uDEA7 PRIME \uD83D\uDEA7 ====================================')\n    console.info('priming pipeline...')\n    console.group()\n    assembly.pipeline.prime()\n    console.groupEnd()\n\n    console.debug('\\n\\n=============================== \uD83D\uDCD5 PRE-RENDER STATE \uD83D\uDCD5 ===============================')\n    console.debug(buildStateAsString(assembly))\n\n    console.log()\n    console.debug('\\n\\n==================================== \uD83D\uDCD5 RENDER \uD83D\uDCD5 ====================================')\n    console.info('rendering...')\n    console.group()\n    pumpFolder(assembly, pipelineMapper)\n    console.groupEnd()\n\n    console.log()\n    console.debug('\\n\\n==================================== \uD83C\uDFC1 FINISH \uD83C\uDFC1 ====================================')\n    console.info('flushing pipeline...')\n    console.group()\n    assembly.pipeline.flush()\n    console.groupEnd()\n\n    console.debug('\\n\\n======================================================================================')\n    printSummary(assembly.pipeline.stats())\n    console.info('\\n\\n')\n}\n\nfunction pumpFolder (folder: ta.Folder, pipelineMapper: PipelineForFileMapper): void {\n    for (const n of folder.content) {\n        if (n.isFolder()) {\n            if (n.hasIncludedContent) {\n                //todo[vfs, api] TEMP HACK: until we implement Vpath.relative(...)\n                console.log(n.outerAssemblyPath().slice(folder.outerAssemblyPath().length))\n                console.group()\n                pumpFolder(n, pipelineMapper)\n                console.groupEnd()\n            }\n        } else {\n            if (n.status === 'sText: waiting' || n.status === 'resource: waiting') {\n                console.log(n.outerAssemblyPath().slice(folder.outerAssemblyPath().length))\n                pumpFile(n, pipelineMapper)\n            }\n        }\n    }\n\n    pumpFile(folder.openingContent as ta.File, pipelineMapper)\n}\n\nfunction pumpFile (file: ta.File, pipelineMapper: PipelineForFileMapper) {\n    //todo[arch] ditch this assertion later? else ditch from the caller and let this handle it?\n    if (file.status !== 'sText: waiting' && file.status !== 'resource: waiting') {\n        throw new Error(`unexpected status for ${file.outerAssemblyPath()}: ${file.status}`)\n    }\n\n    console.debug(`\u2652\uFE0F\u2652\uFE0F\u2652\uFE0F PIPELINE PUSH \u2652\uFE0F\u2652\uFE0F\u2652\uFE0F ${file.name}`)\n    console.group()\n    console.debug(`srcFS:    ${file.parent.assemblyRoot().srcFS()}`)\n    console.debug(`inner:    ${file.innerAssemblyPath()}`)\n    console.debug(`cross:    ${file.crossAssemblyPath()}`)\n    if (file.status === 'sText: waiting') {\n        file.status = 'sText: in pipeline'\n    } else if (file.status === 'resource: waiting') {\n        file.status = 'resource: in pipeline'\n    }\n    pipelineMapper(file).pump(file)\n    console.debug(`\u2705 ${file.name}`)\n    console.groupEnd()\n}\n\nfunction prepareFolder (folder: ta.Folder): boolean {\n    let hasContent = false\n\n    for (const n of folder.content) {\n        if (n.isFolder()) {\n            hasContent = prepareFolder(n) || hasContent\n        } else {\n            const type = fileTypeByFilename(n.name)\n            if (type.name === 'MARKDOWN' ||\n                type.name === 'HTML' ||\n                (type.name === 'TEXT' && folder.name === 'spec/')) {\n                n.status = 'sText: waiting'\n                n.isIndexable = true\n                n.title = ta.defaultFileTitle(n)\n                hasContent = true\n            } else if (type.type === 'media') {\n                n.status = 'resource: waiting'\n                n.title = ta.defaultFileTitle(n)\n                hasContent = true\n            } else {\n                n.status = 'excluded'\n            }\n        }\n    }\n\n    if (folder.openingContent !== undefined) {\n        hasContent = true\n        folder.openingContent.title = ta.defaultFileTitle(folder.openingContent)\n        folder.openingContent.status = 'sText: waiting'\n    } else if (hasContent) {\n        console.log(`generating opening content for ${folder.outerAssemblyPath()}`)\n        //todo![assembly2website, sitescheme] TEMP HACK: the generate page\n        // should be determined by the AssemblyRenderer implementation, e.g for\n        //  assembly2website it should be provided by the Site Scheme, and\n        //  might include things like boiler plate content.\n        //  ---\n        //  Below is a hardcoded hack that assumes sections rather than\n        //  flat headings:\n        const generated = new ta.File(undefined, folder)\n        folder.openingContent = generated\n        generated.title = ta.defaultFileTitle(generated)\n        // generate content\n        const content = new ir.Block('structured_text_intermediate_representation')\n        const section = new ir.Block('section')\n        section.level = 1\n        section.title = generated.title\n        content.appendToBody(section)\n        generated.stir = content\n        // end generate content\n        generated.status = 'sText: waiting'\n        generated.isIndexable = true\n    }\n\n    folder.hasIncludedContent = hasContent\n\n    if (!hasContent) console.log(`skipping ${folder.outerAssemblyPath()}`)\n    return hasContent\n}\n\n/**\n * todo[api]: is the placement of a config file at a node\n * how we support \"the content at this node and below will\n * be output to a single PDF, or a single Book\"?\n * That seems like a nice idea, but what if I want to process\n * the assembly this way:\n *  - nodes at level two down have a custom HTML pipeline,\n *    overriding the HTML pipeline defined at the root.\n *  - each node at level three down are configured to be rendered\n *    as a single aggregate PDF, but this does not affect that these\n *    nodes and their children continue to be rendered as separate\n *    HTML pages. IN OTHER WORDS, the level three configs for PDF\n *    output DOES NOT OVERRIDE the level two configs, but augments them.\n *  - the index nodes at level two point to the child level three\n *    nodes. *In addition*, they also link to the single PDF produced\n *    for each.\n * In addition:\n *  - If i want all level three branches to aggregate into one output\n *    node, i don't want to have to place a custom config at each of\n *    those branch roots.\n *  - should be able to use glob patterns or something to declare such\n *    an outcome at some common parent node, to be applied to branches\n *    at some level below that node, or matching some glob pattern, or\n *    something.\n *\n * Pipeline Config Inheritance\n * ---------------------------\n * - each tree node where a config is defined results in a new\n *   pipeline being configured\n * - parts of the config that aren't specified will be inherited\n *   from the ancestor pipeline(s).\n * - the pipe parts can be keyed as 'additive_pipes', in which case\n *   the pipes for this node are the pipes from the ancestor\n *   pipeline + the additive pipes defined on this node.\n *\n * THIS GIVES US (in order of importance)\n * - we can define the template mappings at the root just once,\n *   with still the option to override at lower levels if needed.\n *   (though is that mute since our plan is to use GLOB matching to\n *   assign mappings?)\n * - we can eliminate all the redundancy in the doc_gen case\n *   (this isn't a priority, but a nice-to-have)\n * - we'd only have to add a RenderCaseActuals pipe for the stylesheet\n *   directory rather than redeclare the entire config redundantly and\n *   unDRYly.\n * - if we added support for a new path prefix (e.g. $/caseblock-pipeline.json5'),\n *   we could even eliminate the latter, having only a root config,\n *   but since the semantics of `$/...` means \"if said path exists,\n *   construct a new pipeline with the resource at this path but\n *   everything else inherited. \uD83C\uDFC8\n */\nasync function configureBranchSpecificPipelines (assembly: ta.Assembly,\n                                                 dest: SandboxFS): Promise<void> {\n    console.info('mapping branch-specific pipelines...')\n    console.group()\n\n    async function configurationVisitor (n: ta.Node): Promise<ta.PreorderVisitReturn> {\n        if (n.isFolder()) {\n            if (n.textplainConfig !== undefined) {\n                console.info(`${n.crossAssemblyPath()}`)\n                console.group()\n\n                let heritablePipeline\n                const r = n.searchUpForProperty('pipeline', true)\n                if (r !== undefined) {\n                    console.info(`overriding/inheriting pipeline defined for ${r.node.crossAssemblyPath()}`)\n                    heritablePipeline = r.value as AssemblyPipeline\n                }\n\n                n.pipeline = await assemblyPipelineFromConfig(\n                    assembly, dest, n.textplainConfig, heritablePipeline)\n                console.groupEnd()\n            }\n        }\n        return 'continue'\n    }\n\n    await ta.traverseAsync(assembly, configurationVisitor, undefined)\n    console.groupEnd()\n}\n\nfunction buildStateAsString (fromNode: ta.Folder): string {\n    let s = ''\n    let level = 0\n    ta.traverse(fromNode,\n        (n: ta.Node) => {\n            if (n.isFolder() && !n.hasIncludedContent) {\n                return 'abort branch'\n            }\n            s += '    '.repeat(level)\n            s += n.name\n            s += ' --> '\n            s += n.outNode\n            if (n.isFolder()) {\n                if (n.openingContent) {\n                    s += ` (${n.openingContent.outNode})`\n                } else {\n                    s += ' \u274C missing opening page'\n                }\n                level++\n            } else {\n                s += ` (${n.status})`\n            }\n            s += '\\n'\n            return 'continue'\n        },\n        (n: ta.Node) => {\n            if (n.isFolder()) {\n                level--\n            }\n            return 'continue'\n        })\n    return s\n}\n\nfunction printSummary (stats: { [key: string]: RenderStats }) {\n    for (const [key, val] of Object.entries(stats)) {\n        if (typeof val === 'number') {\n            console.info(`${key}: ${val}`)\n        } else {\n            console.info(key + ':')\n            console.group()\n            printSummary(val)\n            console.groupEnd()\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["module", "key", "c", "source", "exports", "pos", "codePointAt", "fromCodePoint", "parse", "token", "buffer", "stringify", "stack", "value", "i", "list", "JSON5", "require_entities", "encode", "Url", "require_regex", "require_regex", "require_regex", "require_regex", "assign", "isValidEntityCode", "fromCodePoint", "DIGITAL_ENTITY_TEST_RE", "entities", "replaceEntityPattern", "isSpace", "assign", "self", "APOSTROPHE", "last", "isSpace", "last", "isSpace", "isSpace", "isSpace", "isSpace", "isSpace", "isSpace", "last", "require_linkify", "isSpace", "isSpace", "postProcess", "postProcess", "isSpace", "isSpace", "EMAIL_RE", "AUTOLINK_RE", "entities", "isValidEntityCode", "fromCodePoint", "last", "assign", "defaultOptions", "self", "tlds", "MarkdownIt", "self", "subscript", "superscript", "tokenize", "postProcess", "posix", "ext", "isFunction", "last", "options", "ret", "wrapper", "lookup", "ret", "context", "noop", "options", "Handlebars", "self", "lexer", "Parser", "compile", "isBlock", "sourceFile", "needle", "section", "merge", "resolvePath", "lookup", "isInline", "decodeMap", "fromCodePoint", "decodeCodePoint", "_a", "require_decode", "BinTrieFlags", "getDecoder", "determineBranch", "htmlDecoder", "xmlDecoder", "decodeHTML", "isWhitespace", "isNumber", "Tokenizer", "_a", "Parser", "_a", "ASTERISK", "whitespace", "Inline", "Inline", "json5", "Inline", "Inline", "_a", "CharCodes", "BinTrieFlags", "EntityDecoderState", "DecodingMode", "_a", "Block", "Block", "i", "Block", "value", "Block", "Block", "Block", "Block", "style", "nextState", "scheme", "tokenize", "markdownItUtils", "import_utils", "tokenize", "markdownItUtils", "createRule", "tokenize", "tokenize", "import_utils", "entities", "import_utils", "markdownItUtils", "createRule", "import_utils", "isSpace", "markdownItUtils", "createRule", "tokenize", "createRule", "MarkdownIt", "tokenize", "createRule", "subscript", "superscript", "highlight", "Inline", "posix", "import_path_browserify", "posix", "import_path_browserify", "posix", "import_json5", "resolvePath", "JSON5", "provider", "encode", "attrs", "i", "reTextSpecial", "s", "import_handlebars", "Handlebars", "Handlebars", "provider", "provider", "provider", "configure", "transform", "provider", "last", "import_json5", "JSON5", "import_path_browserify", "posix", "reTextSpecial", "escapeTextChar", "styleToObject", "_a", "a", "name", "import_json5", "provider", "JSON5", "transform", "newTOCHeading", "provider", "configure", "provider", "provider", "import_handlebars", "Handlebars", "install", "provider", "import_handlebars", "Handlebars", "provider", "provider", "ext", "import_handlebars", "import_path_browserify", "import_encode", "__assign", "TreeIterator", "_a", "last", "SearchableMap", "MiniSearch", "tokenize", "chunk", "promise", "conditions", "query", "boosts", "Handlebars", "posix", "encode", "provider", "provider", "assemblyRenderer"]
}
